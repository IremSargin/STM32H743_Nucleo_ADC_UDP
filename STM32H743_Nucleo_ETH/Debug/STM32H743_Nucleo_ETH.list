
STM32H743_Nucleo_ETH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011c4c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c8c  08011eec  08011eec  00012eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014b78  08014b78  00015b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08014b80  08014b80  00015b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08014b84  08014b84  00015b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000008c  24000000  08014b88  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000ba20  24000090  08014c14  00016090  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  2400bab0  08014c14  00016ab0  2**0
                  ALLOC
  9 .lwip_sec     00024b83  30020000  30020000  00017000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0001608c  2**0
                  CONTENTS, READONLY
 11 .debug_info   000525b0  00000000  00000000  000160ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000abef  00000000  00000000  0006866a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 0001fd92  00000000  00000000  00073259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002400  00000000  00000000  00092ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00003bf7  00000000  00000000  000953f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000135fd  00000000  00000000  00098fe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00052527  00000000  00000000  000ac5e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001971e3  00000000  00000000  000feb0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00295cee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a60  00000000  00000000  00295d34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  0029d794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000090 	.word	0x24000090
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011ed4 	.word	0x08011ed4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000094 	.word	0x24000094
 80002dc:	08011ed4 	.word	0x08011ed4

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <lwiperf_tcp_close>:
static void
lwiperf_list_remove(lwiperf_state_base_t *item)
{
  lwiperf_state_base_t *prev = NULL;
  lwiperf_state_base_t *iter;
  for (iter = lwiperf_all_connections; iter != NULL; prev = iter, iter = iter->next) {
 8000390:	4a3d      	ldr	r2, [pc, #244]	@ (8000488 <lwiperf_tcp_close+0xf8>)
 8000392:	6813      	ldr	r3, [r2, #0]
}

/** Close an iperf tcp session */
static void
lwiperf_tcp_close(lwiperf_state_tcp_t *conn, enum lwiperf_report_type report_type)
{
 8000394:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000398:	4604      	mov	r4, r0
 800039a:	b087      	sub	sp, #28
 800039c:	460e      	mov	r6, r1
  for (iter = lwiperf_all_connections; iter != NULL; prev = iter, iter = iter->next) {
 800039e:	b14b      	cbz	r3, 80003b4 <lwiperf_tcp_close+0x24>
    if (iter == item) {
 80003a0:	4298      	cmp	r0, r3
        lwiperf_all_connections = iter->next;
 80003a2:	681d      	ldr	r5, [r3, #0]
    if (iter == item) {
 80003a4:	d102      	bne.n	80003ac <lwiperf_tcp_close+0x1c>
 80003a6:	e04b      	b.n	8000440 <lwiperf_tcp_close+0xb0>
 80003a8:	429c      	cmp	r4, r3
 80003aa:	d048      	beq.n	800043e <lwiperf_tcp_close+0xae>
  for (iter = lwiperf_all_connections; iter != NULL; prev = iter, iter = iter->next) {
 80003ac:	461a      	mov	r2, r3
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d1f9      	bne.n	80003a8 <lwiperf_tcp_close+0x18>
  if ((conn != NULL) && (conn->report_fn != NULL)) {
 80003b4:	b1cc      	cbz	r4, 80003ea <lwiperf_tcp_close+0x5a>
 80003b6:	69a3      	ldr	r3, [r4, #24]
 80003b8:	b1bb      	cbz	r3, 80003ea <lwiperf_tcp_close+0x5a>
    now = sys_now();
 80003ba:	f006 f939 	bl	8006630 <sys_now>
    duration_ms = now - conn->time_started;
 80003be:	6963      	ldr	r3, [r4, #20]
    if (duration_ms == 0) {
 80003c0:	1ac5      	subs	r5, r0, r3
      bandwidth_kbitpsec = (conn->bytes_transferred / duration_ms) * 8U;
 80003c2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    if (duration_ms == 0) {
 80003c4:	d05e      	beq.n	8000484 <lwiperf_tcp_close+0xf4>
      bandwidth_kbitpsec = (conn->bytes_transferred / duration_ms) * 8U;
 80003c6:	fbb3 f7f5 	udiv	r7, r3, r5
 80003ca:	00ff      	lsls	r7, r7, #3
                    &conn->conn_pcb->local_ip, conn->conn_pcb->local_port,
 80003cc:	6922      	ldr	r2, [r4, #16]
    conn->report_fn(conn->report_arg, report_type,
 80003ce:	4631      	mov	r1, r6
 80003d0:	f8b2 c016 	ldrh.w	ip, [r2, #22]
 80003d4:	e9d4 6006 	ldrd	r6, r0, [r4, #24]
 80003d8:	9302      	str	r3, [sp, #8]
 80003da:	4663      	mov	r3, ip
 80003dc:	e9cd 5703 	strd	r5, r7, [sp, #12]
 80003e0:	8b15      	ldrh	r5, [r2, #24]
 80003e2:	9501      	str	r5, [sp, #4]
                    &conn->conn_pcb->remote_ip, conn->conn_pcb->remote_port,
 80003e4:	1d15      	adds	r5, r2, #4
    conn->report_fn(conn->report_arg, report_type,
 80003e6:	9500      	str	r5, [sp, #0]
 80003e8:	47b0      	blx	r6
  err_t err;

  lwiperf_list_remove(&conn->base);
  lwip_tcp_conn_report(conn, report_type);
  if (conn->conn_pcb != NULL) {
 80003ea:	6920      	ldr	r0, [r4, #16]
 80003ec:	2800      	cmp	r0, #0
 80003ee:	d03c      	beq.n	800046a <lwiperf_tcp_close+0xda>
    tcp_arg(conn->conn_pcb, NULL);
 80003f0:	2100      	movs	r1, #0
 80003f2:	f00a fc91 	bl	800ad18 <tcp_arg>
    tcp_poll(conn->conn_pcb, NULL, 0);
 80003f6:	2200      	movs	r2, #0
 80003f8:	6920      	ldr	r0, [r4, #16]
 80003fa:	4611      	mov	r1, r2
 80003fc:	f00a fcee 	bl	800addc <tcp_poll>
    tcp_sent(conn->conn_pcb, NULL);
 8000400:	2100      	movs	r1, #0
 8000402:	6920      	ldr	r0, [r4, #16]
 8000404:	f00a fcaa 	bl	800ad5c <tcp_sent>
    tcp_recv(conn->conn_pcb, NULL);
 8000408:	2100      	movs	r1, #0
 800040a:	6920      	ldr	r0, [r4, #16]
 800040c:	f00a fc8c 	bl	800ad28 <tcp_recv>
    tcp_err(conn->conn_pcb, NULL);
 8000410:	6920      	ldr	r0, [r4, #16]
 8000412:	2100      	movs	r1, #0
 8000414:	f00a fcbc 	bl	800ad90 <tcp_err>
    err = tcp_close(conn->conn_pcb);
 8000418:	6920      	ldr	r0, [r4, #16]
 800041a:	f00b fb21 	bl	800ba60 <tcp_close>
    if (err != ERR_OK) {
 800041e:	b928      	cbnz	r0, 800042c <lwiperf_tcp_close+0x9c>
  } else {
    /* no conn pcb, this is the listener pcb */
    err = tcp_close(conn->server_pcb);
    LWIP_ASSERT("error", err == ERR_OK);
  }
  LWIPERF_FREE(lwiperf_state_tcp_t, conn);
 8000420:	4620      	mov	r0, r4
}
 8000422:	b007      	add	sp, #28
 8000424:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIPERF_FREE(lwiperf_state_tcp_t, conn);
 8000428:	f009 b812 	b.w	8009450 <mem_free>
      tcp_abort(conn->conn_pcb);
 800042c:	6920      	ldr	r0, [r4, #16]
 800042e:	f00b f937 	bl	800b6a0 <tcp_abort>
  LWIPERF_FREE(lwiperf_state_tcp_t, conn);
 8000432:	4620      	mov	r0, r4
}
 8000434:	b007      	add	sp, #28
 8000436:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIPERF_FREE(lwiperf_state_tcp_t, conn);
 800043a:	f009 b809 	b.w	8009450 <mem_free>
        prev->next = iter->next;
 800043e:	6825      	ldr	r5, [r4, #0]
 8000440:	6015      	str	r5, [r2, #0]
      for (iter = iter->next; iter != NULL; iter = iter->next) {
 8000442:	2d00      	cmp	r5, #0
 8000444:	d0b7      	beq.n	80003b6 <lwiperf_tcp_close+0x26>
        LWIP_ASSERT("duplicate entry", iter != item);
 8000446:	f8df 9048 	ldr.w	r9, [pc, #72]	@ 8000490 <lwiperf_tcp_close+0x100>
 800044a:	f8df 804c 	ldr.w	r8, [pc, #76]	@ 8000498 <lwiperf_tcp_close+0x108>
 800044e:	4f0f      	ldr	r7, [pc, #60]	@ (800048c <lwiperf_tcp_close+0xfc>)
 8000450:	e002      	b.n	8000458 <lwiperf_tcp_close+0xc8>
      for (iter = iter->next; iter != NULL; iter = iter->next) {
 8000452:	682d      	ldr	r5, [r5, #0]
 8000454:	2d00      	cmp	r5, #0
 8000456:	d0ad      	beq.n	80003b4 <lwiperf_tcp_close+0x24>
        LWIP_ASSERT("duplicate entry", iter != item);
 8000458:	42ac      	cmp	r4, r5
 800045a:	d1fa      	bne.n	8000452 <lwiperf_tcp_close+0xc2>
 800045c:	464b      	mov	r3, r9
 800045e:	22d0      	movs	r2, #208	@ 0xd0
 8000460:	4641      	mov	r1, r8
 8000462:	4638      	mov	r0, r7
 8000464:	f010 fbfa 	bl	8010c5c <iprintf>
 8000468:	e7f3      	b.n	8000452 <lwiperf_tcp_close+0xc2>
    err = tcp_close(conn->server_pcb);
 800046a:	68e0      	ldr	r0, [r4, #12]
 800046c:	f00b faf8 	bl	800ba60 <tcp_close>
    LWIP_ASSERT("error", err == ERR_OK);
 8000470:	2800      	cmp	r0, #0
 8000472:	d0d5      	beq.n	8000420 <lwiperf_tcp_close+0x90>
 8000474:	4b06      	ldr	r3, [pc, #24]	@ (8000490 <lwiperf_tcp_close+0x100>)
 8000476:	f240 120d 	movw	r2, #269	@ 0x10d
 800047a:	4906      	ldr	r1, [pc, #24]	@ (8000494 <lwiperf_tcp_close+0x104>)
 800047c:	4803      	ldr	r0, [pc, #12]	@ (800048c <lwiperf_tcp_close+0xfc>)
 800047e:	f010 fbed 	bl	8010c5c <iprintf>
 8000482:	e7cd      	b.n	8000420 <lwiperf_tcp_close+0x90>
      bandwidth_kbitpsec = 0;
 8000484:	462f      	mov	r7, r5
 8000486:	e7a1      	b.n	80003cc <lwiperf_tcp_close+0x3c>
 8000488:	240000ac 	.word	0x240000ac
 800048c:	08011f14 	.word	0x08011f14
 8000490:	08011eec 	.word	0x08011eec
 8000494:	08011f3c 	.word	0x08011f3c
 8000498:	08011f04 	.word	0x08011f04

0800049c <lwiperf_tcp_accept>:
/** This is called when a new client connects for an iperf tcp session */
static err_t
lwiperf_tcp_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
  lwiperf_state_tcp_t *s, *conn;
  if ((err != ERR_OK) || (newpcb == NULL) || (arg == NULL)) {
 800049c:	2800      	cmp	r0, #0
 800049e:	bf18      	it	ne
 80004a0:	2900      	cmpne	r1, #0
 80004a2:	f000 8091 	beq.w	80005c8 <lwiperf_tcp_accept+0x12c>
 80004a6:	2a00      	cmp	r2, #0
 80004a8:	f040 808e 	bne.w	80005c8 <lwiperf_tcp_accept+0x12c>
{
 80004ac:	b570      	push	{r4, r5, r6, lr}
    return ERR_VAL;
  }

  s = (lwiperf_state_tcp_t *)arg;
  LWIP_ASSERT("invalid session", s->base.server);
 80004ae:	7943      	ldrb	r3, [r0, #5]
 80004b0:	460e      	mov	r6, r1
 80004b2:	4604      	mov	r4, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d06a      	beq.n	800058e <lwiperf_tcp_accept+0xf2>
  LWIP_ASSERT("invalid listen pcb", s->server_pcb != NULL);
 80004b8:	68e3      	ldr	r3, [r4, #12]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d071      	beq.n	80005a2 <lwiperf_tcp_accept+0x106>
  LWIP_ASSERT("invalid conn pcb", s->conn_pcb == NULL);
 80004be:	6923      	ldr	r3, [r4, #16]
 80004c0:	b133      	cbz	r3, 80004d0 <lwiperf_tcp_accept+0x34>
 80004c2:	4b43      	ldr	r3, [pc, #268]	@ (80005d0 <lwiperf_tcp_accept+0x134>)
 80004c4:	f240 225a 	movw	r2, #602	@ 0x25a
 80004c8:	4942      	ldr	r1, [pc, #264]	@ (80005d4 <lwiperf_tcp_accept+0x138>)
 80004ca:	4843      	ldr	r0, [pc, #268]	@ (80005d8 <lwiperf_tcp_accept+0x13c>)
 80004cc:	f010 fbc6 	bl	8010c5c <iprintf>
  if (s->specific_remote) {
 80004d0:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
    LWIP_ASSERT("s->base.related_master_state != NULL", s->base.related_master_state != NULL);
 80004d4:	68a2      	ldr	r2, [r4, #8]
  if (s->specific_remote) {
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d137      	bne.n	800054a <lwiperf_tcp_accept+0xae>
    if (!ip_addr_cmp(&newpcb->remote_ip, &s->remote_addr)) {
      /* this listener belongs to a client session, and this is not the correct remote */
      return ERR_VAL;
    }
  } else {
    LWIP_ASSERT("s->base.related_master_state == NULL", s->base.related_master_state == NULL);
 80004da:	b132      	cbz	r2, 80004ea <lwiperf_tcp_accept+0x4e>
 80004dc:	4b3c      	ldr	r3, [pc, #240]	@ (80005d0 <lwiperf_tcp_accept+0x134>)
 80004de:	f240 2262 	movw	r2, #610	@ 0x262
 80004e2:	493e      	ldr	r1, [pc, #248]	@ (80005dc <lwiperf_tcp_accept+0x140>)
 80004e4:	483c      	ldr	r0, [pc, #240]	@ (80005d8 <lwiperf_tcp_accept+0x13c>)
 80004e6:	f010 fbb9 	bl	8010c5c <iprintf>
  }

  conn = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 80004ea:	2048      	movs	r0, #72	@ 0x48
 80004ec:	f009 f948 	bl	8009780 <mem_malloc>
  if (conn == NULL) {
 80004f0:	4605      	mov	r5, r0
 80004f2:	2800      	cmp	r0, #0
 80004f4:	d065      	beq.n	80005c2 <lwiperf_tcp_accept+0x126>
    return ERR_MEM;
  }
  memset(conn, 0, sizeof(lwiperf_state_tcp_t));
 80004f6:	2248      	movs	r2, #72	@ 0x48
 80004f8:	2100      	movs	r1, #0
 80004fa:	f010 fc62 	bl	8010dc2 <memset>
  conn->base.tcp = 1;
 80004fe:	f240 1301 	movw	r3, #257	@ 0x101
  conn->base.server = 1;
  conn->base.related_master_state = &s->base;
 8000502:	60ac      	str	r4, [r5, #8]
  conn->base.tcp = 1;
 8000504:	80ab      	strh	r3, [r5, #4]
  conn->conn_pcb = newpcb;
 8000506:	612e      	str	r6, [r5, #16]
  conn->time_started = sys_now();
 8000508:	f006 f892 	bl	8006630 <sys_now>
  conn->report_fn = s->report_fn;
 800050c:	69a3      	ldr	r3, [r4, #24]
  conn->report_arg = s->report_arg;

  /* setup the tcp rx connection */
  tcp_arg(newpcb, conn);
 800050e:	4629      	mov	r1, r5
  conn->report_fn = s->report_fn;
 8000510:	e9c5 0305 	strd	r0, r3, [r5, #20]
  conn->report_arg = s->report_arg;
 8000514:	69e3      	ldr	r3, [r4, #28]
  tcp_arg(newpcb, conn);
 8000516:	4630      	mov	r0, r6
  conn->report_arg = s->report_arg;
 8000518:	61eb      	str	r3, [r5, #28]
  tcp_arg(newpcb, conn);
 800051a:	f00a fbfd 	bl	800ad18 <tcp_arg>
  tcp_recv(newpcb, lwiperf_tcp_recv);
 800051e:	4930      	ldr	r1, [pc, #192]	@ (80005e0 <lwiperf_tcp_accept+0x144>)
 8000520:	4630      	mov	r0, r6
 8000522:	f00a fc01 	bl	800ad28 <tcp_recv>
  tcp_poll(newpcb, lwiperf_tcp_poll, 2U);
 8000526:	2202      	movs	r2, #2
 8000528:	492e      	ldr	r1, [pc, #184]	@ (80005e4 <lwiperf_tcp_accept+0x148>)
 800052a:	4630      	mov	r0, r6
 800052c:	f00a fc56 	bl	800addc <tcp_poll>
  tcp_err(conn->conn_pcb, lwiperf_tcp_err);
 8000530:	492d      	ldr	r1, [pc, #180]	@ (80005e8 <lwiperf_tcp_accept+0x14c>)
 8000532:	6928      	ldr	r0, [r5, #16]
 8000534:	f00a fc2c 	bl	800ad90 <tcp_err>

  if (s->specific_remote) {
 8000538:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800053c:	b973      	cbnz	r3, 800055c <lwiperf_tcp_accept+0xc0>
  item->next = lwiperf_all_connections;
 800053e:	4e2b      	ldr	r6, [pc, #172]	@ (80005ec <lwiperf_tcp_accept+0x150>)
 8000540:	6831      	ldr	r1, [r6, #0]
      s->report_fn = NULL;
      lwiperf_tcp_close(s, LWIPERF_TCP_ABORTED_LOCAL);
    }
  }
  lwiperf_list_add(&conn->base);
  return ERR_OK;
 8000542:	2000      	movs	r0, #0
  item->next = lwiperf_all_connections;
 8000544:	6029      	str	r1, [r5, #0]
  lwiperf_all_connections = item;
 8000546:	6035      	str	r5, [r6, #0]
}
 8000548:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("s->base.related_master_state != NULL", s->base.related_master_state != NULL);
 800054a:	2a00      	cmp	r2, #0
 800054c:	d031      	beq.n	80005b2 <lwiperf_tcp_accept+0x116>
    if (!ip_addr_cmp(&newpcb->remote_ip, &s->remote_addr)) {
 800054e:	6872      	ldr	r2, [r6, #4]
 8000550:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8000552:	429a      	cmp	r2, r3
 8000554:	d0c9      	beq.n	80004ea <lwiperf_tcp_accept+0x4e>
    return ERR_VAL;
 8000556:	f06f 0005 	mvn.w	r0, #5
}
 800055a:	bd70      	pop	{r4, r5, r6, pc}
    conn->base.related_master_state = s->base.related_master_state;
 800055c:	68a2      	ldr	r2, [r4, #8]
 800055e:	4e23      	ldr	r6, [pc, #140]	@ (80005ec <lwiperf_tcp_accept+0x150>)
 8000560:	60aa      	str	r2, [r5, #8]
    if (!s->client_tradeoff_mode || !lwiperf_list_find(s->base.related_master_state)) {
 8000562:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
 8000566:	b153      	cbz	r3, 800057e <lwiperf_tcp_accept+0xe2>
  for (iter = lwiperf_all_connections; iter != NULL; iter = iter->next) {
 8000568:	6831      	ldr	r1, [r6, #0]
 800056a:	b141      	cbz	r1, 800057e <lwiperf_tcp_accept+0xe2>
    if (iter == item) {
 800056c:	428a      	cmp	r2, r1
 800056e:	d0e8      	beq.n	8000542 <lwiperf_tcp_accept+0xa6>
  for (iter = lwiperf_all_connections; iter != NULL; iter = iter->next) {
 8000570:	460b      	mov	r3, r1
 8000572:	e001      	b.n	8000578 <lwiperf_tcp_accept+0xdc>
    if (iter == item) {
 8000574:	429a      	cmp	r2, r3
 8000576:	d0e4      	beq.n	8000542 <lwiperf_tcp_accept+0xa6>
  for (iter = lwiperf_all_connections; iter != NULL; iter = iter->next) {
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d1fa      	bne.n	8000574 <lwiperf_tcp_accept+0xd8>
      s->report_fn = NULL;
 800057e:	2300      	movs	r3, #0
      lwiperf_tcp_close(s, LWIPERF_TCP_ABORTED_LOCAL);
 8000580:	2102      	movs	r1, #2
 8000582:	4620      	mov	r0, r4
      s->report_fn = NULL;
 8000584:	61a3      	str	r3, [r4, #24]
      lwiperf_tcp_close(s, LWIPERF_TCP_ABORTED_LOCAL);
 8000586:	f7ff ff03 	bl	8000390 <lwiperf_tcp_close>
  item->next = lwiperf_all_connections;
 800058a:	6831      	ldr	r1, [r6, #0]
 800058c:	e7d9      	b.n	8000542 <lwiperf_tcp_accept+0xa6>
  LWIP_ASSERT("invalid session", s->base.server);
 800058e:	4b10      	ldr	r3, [pc, #64]	@ (80005d0 <lwiperf_tcp_accept+0x134>)
 8000590:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8000594:	4916      	ldr	r1, [pc, #88]	@ (80005f0 <lwiperf_tcp_accept+0x154>)
 8000596:	4810      	ldr	r0, [pc, #64]	@ (80005d8 <lwiperf_tcp_accept+0x13c>)
 8000598:	f010 fb60 	bl	8010c5c <iprintf>
  LWIP_ASSERT("invalid listen pcb", s->server_pcb != NULL);
 800059c:	68e3      	ldr	r3, [r4, #12]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d18d      	bne.n	80004be <lwiperf_tcp_accept+0x22>
 80005a2:	4b0b      	ldr	r3, [pc, #44]	@ (80005d0 <lwiperf_tcp_accept+0x134>)
 80005a4:	f240 2259 	movw	r2, #601	@ 0x259
 80005a8:	4912      	ldr	r1, [pc, #72]	@ (80005f4 <lwiperf_tcp_accept+0x158>)
 80005aa:	480b      	ldr	r0, [pc, #44]	@ (80005d8 <lwiperf_tcp_accept+0x13c>)
 80005ac:	f010 fb56 	bl	8010c5c <iprintf>
 80005b0:	e785      	b.n	80004be <lwiperf_tcp_accept+0x22>
    LWIP_ASSERT("s->base.related_master_state != NULL", s->base.related_master_state != NULL);
 80005b2:	4b07      	ldr	r3, [pc, #28]	@ (80005d0 <lwiperf_tcp_accept+0x134>)
 80005b4:	f44f 7217 	mov.w	r2, #604	@ 0x25c
 80005b8:	490f      	ldr	r1, [pc, #60]	@ (80005f8 <lwiperf_tcp_accept+0x15c>)
 80005ba:	4807      	ldr	r0, [pc, #28]	@ (80005d8 <lwiperf_tcp_accept+0x13c>)
 80005bc:	f010 fb4e 	bl	8010c5c <iprintf>
 80005c0:	e7c5      	b.n	800054e <lwiperf_tcp_accept+0xb2>
    return ERR_MEM;
 80005c2:	f04f 30ff 	mov.w	r0, #4294967295
}
 80005c6:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 80005c8:	f06f 0005 	mvn.w	r0, #5
}
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	08011eec 	.word	0x08011eec
 80005d4:	08011f68 	.word	0x08011f68
 80005d8:	08011f14 	.word	0x08011f14
 80005dc:	08011fa4 	.word	0x08011fa4
 80005e0:	080009f5 	.word	0x080009f5
 80005e4:	08000741 	.word	0x08000741
 80005e8:	080005fd 	.word	0x080005fd
 80005ec:	240000ac 	.word	0x240000ac
 80005f0:	08011f44 	.word	0x08011f44
 80005f4:	08011f54 	.word	0x08011f54
 80005f8:	08011f7c 	.word	0x08011f7c

080005fc <lwiperf_tcp_err>:
  lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 80005fc:	2105      	movs	r1, #5
 80005fe:	f7ff bec7 	b.w	8000390 <lwiperf_tcp_close>
 8000602:	bf00      	nop

08000604 <lwiperf_tcp_client_send_more>:
{
 8000604:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("conn invalid", (conn != NULL) && conn->base.tcp && (conn->base.server == 0));
 8000608:	4604      	mov	r4, r0
 800060a:	b110      	cbz	r0, 8000612 <lwiperf_tcp_client_send_more+0xe>
 800060c:	7903      	ldrb	r3, [r0, #4]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d16e      	bne.n	80006f0 <lwiperf_tcp_client_send_more+0xec>
 8000612:	4b39      	ldr	r3, [pc, #228]	@ (80006f8 <lwiperf_tcp_client_send_more+0xf4>)
 8000614:	f240 121d 	movw	r2, #285	@ 0x11d
 8000618:	4938      	ldr	r1, [pc, #224]	@ (80006fc <lwiperf_tcp_client_send_more+0xf8>)
 800061a:	4839      	ldr	r0, [pc, #228]	@ (8000700 <lwiperf_tcp_client_send_more+0xfc>)
 800061c:	f010 fb1e 	bl	8010c5c <iprintf>
      u32_t time_ms = time * 10;
 8000620:	f06f 0909 	mvn.w	r9, #9
      txptr = LWIP_CONST_CAST(void *, &lwiperf_txbuf_const[conn->bytes_transferred % 10]);
 8000624:	f8df b0e0 	ldr.w	fp, [pc, #224]	@ 8000708 <lwiperf_tcp_client_send_more+0x104>
    if (conn->settings.amount & PP_HTONL(0x80000000)) {
 8000628:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800062a:	0602      	lsls	r2, r0, #24
 800062c:	d534      	bpl.n	8000698 <lwiperf_tcp_client_send_more+0x94>
      u32_t now = sys_now();
 800062e:	f005 ffff 	bl	8006630 <sys_now>
      u32_t diff_ms = now - conn->time_started;
 8000632:	6963      	ldr	r3, [r4, #20]
      u32_t now = sys_now();
 8000634:	4605      	mov	r5, r0
      u32_t time = (u32_t) - (s32_t)lwip_htonl(conn->settings.amount);
 8000636:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
      u32_t diff_ms = now - conn->time_started;
 8000638:	1aed      	subs	r5, r5, r3
      u32_t time = (u32_t) - (s32_t)lwip_htonl(conn->settings.amount);
 800063a:	f008 fe4f 	bl	80092dc <lwip_htonl>
      u32_t time_ms = time * 10;
 800063e:	fb09 f000 	mul.w	r0, r9, r0
      if (diff_ms >= time_ms) {
 8000642:	4285      	cmp	r5, r0
 8000644:	d22d      	bcs.n	80006a2 <lwiperf_tcp_client_send_more+0x9e>
    if (conn->bytes_transferred < 24) {
 8000646:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8000648:	2b17      	cmp	r3, #23
 800064a:	d831      	bhi.n	80006b0 <lwiperf_tcp_client_send_more+0xac>
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred];
 800064c:	f104 0528 	add.w	r5, r4, #40	@ 0x28
      txlen_max = (u16_t)(24 - conn->bytes_transferred);
 8000650:	f1c3 0a18 	rsb	sl, r3, #24
      apiflags = TCP_WRITE_FLAG_COPY;
 8000654:	2601      	movs	r6, #1
    send_more = 0;
 8000656:	f04f 0800 	mov.w	r8, #0
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred];
 800065a:	441d      	add	r5, r3
      txlen_max = (u16_t)(24 - conn->bytes_transferred);
 800065c:	fa1f fa8a 	uxth.w	sl, sl
    } while ((err == ERR_MEM) && (txlen >= (TCP_MSS / 2)));
 8000660:	f240 27da 	movw	r7, #730	@ 0x2da
      err = tcp_write(conn->conn_pcb, txptr, txlen, apiflags);
 8000664:	4633      	mov	r3, r6
 8000666:	4652      	mov	r2, sl
 8000668:	4629      	mov	r1, r5
 800066a:	6920      	ldr	r0, [r4, #16]
 800066c:	f00d f8c6 	bl	800d7fc <tcp_write>
      if (err ==  ERR_MEM) {
 8000670:	1c43      	adds	r3, r0, #1
 8000672:	d00c      	beq.n	800068e <lwiperf_tcp_client_send_more+0x8a>
    if (err == ERR_OK) {
 8000674:	b928      	cbnz	r0, 8000682 <lwiperf_tcp_client_send_more+0x7e>
      conn->bytes_transferred += txlen;
 8000676:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8000678:	4453      	add	r3, sl
 800067a:	6263      	str	r3, [r4, #36]	@ 0x24
  } while (send_more);
 800067c:	f1b8 0f00 	cmp.w	r8, #0
 8000680:	d1d2      	bne.n	8000628 <lwiperf_tcp_client_send_more+0x24>
  tcp_output(conn->conn_pcb);
 8000682:	6920      	ldr	r0, [r4, #16]
 8000684:	f00d feb2 	bl	800e3ec <tcp_output>
}
 8000688:	2000      	movs	r0, #0
 800068a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        txlen /= 2;
 800068e:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
    } while ((err == ERR_MEM) && (txlen >= (TCP_MSS / 2)));
 8000692:	45ba      	cmp	sl, r7
 8000694:	d0e6      	beq.n	8000664 <lwiperf_tcp_client_send_more+0x60>
 8000696:	e7f4      	b.n	8000682 <lwiperf_tcp_client_send_more+0x7e>
      u32_t amount_bytes = lwip_htonl(conn->settings.amount);
 8000698:	f008 fe20 	bl	80092dc <lwip_htonl>
      if (amount_bytes >= conn->bytes_transferred) {
 800069c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800069e:	4283      	cmp	r3, r0
 80006a0:	d8d2      	bhi.n	8000648 <lwiperf_tcp_client_send_more+0x44>
        lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_CLIENT);
 80006a2:	4620      	mov	r0, r4
 80006a4:	2101      	movs	r1, #1
 80006a6:	f7ff fe73 	bl	8000390 <lwiperf_tcp_close>
}
 80006aa:	2000      	movs	r0, #0
 80006ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (conn->bytes_transferred < 48) {
 80006b0:	2b2f      	cmp	r3, #47	@ 0x2f
 80006b2:	d809      	bhi.n	80006c8 <lwiperf_tcp_client_send_more+0xc4>
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred - 24];
 80006b4:	18e5      	adds	r5, r4, r3
      txlen_max = (u16_t)(48 - conn->bytes_transferred);
 80006b6:	f1c3 0330 	rsb	r3, r3, #48	@ 0x30
      apiflags = TCP_WRITE_FLAG_COPY | TCP_WRITE_FLAG_MORE;
 80006ba:	2603      	movs	r6, #3
      send_more = 1;
 80006bc:	f04f 0801 	mov.w	r8, #1
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred - 24];
 80006c0:	3510      	adds	r5, #16
      txlen_max = (u16_t)(48 - conn->bytes_transferred);
 80006c2:	fa1f fa83 	uxth.w	sl, r3
      send_more = 1;
 80006c6:	e7cb      	b.n	8000660 <lwiperf_tcp_client_send_more+0x5c>
      txptr = LWIP_CONST_CAST(void *, &lwiperf_txbuf_const[conn->bytes_transferred % 10]);
 80006c8:	fbab 1203 	umull	r1, r2, fp, r3
      apiflags = 0; /* no copying needed */
 80006cc:	f240 5a9c 	movw	sl, #1436	@ 0x59c
 80006d0:	f240 51b4 	movw	r1, #1460	@ 0x5b4
 80006d4:	2600      	movs	r6, #0
      txptr = LWIP_CONST_CAST(void *, &lwiperf_txbuf_const[conn->bytes_transferred % 10]);
 80006d6:	08d2      	lsrs	r2, r2, #3
      apiflags = 0; /* no copying needed */
 80006d8:	f04f 0801 	mov.w	r8, #1
 80006dc:	2b30      	cmp	r3, #48	@ 0x30
 80006de:	bf18      	it	ne
 80006e0:	468a      	movne	sl, r1
      txptr = LWIP_CONST_CAST(void *, &lwiperf_txbuf_const[conn->bytes_transferred % 10]);
 80006e2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80006e6:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80006ea:	4a06      	ldr	r2, [pc, #24]	@ (8000704 <lwiperf_tcp_client_send_more+0x100>)
 80006ec:	189d      	adds	r5, r3, r2
      if (conn->bytes_transferred == 48) { /* @todo: fix this for intermediate settings, too */
 80006ee:	e7b7      	b.n	8000660 <lwiperf_tcp_client_send_more+0x5c>
  LWIP_ASSERT("conn invalid", (conn != NULL) && conn->base.tcp && (conn->base.server == 0));
 80006f0:	7943      	ldrb	r3, [r0, #5]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d094      	beq.n	8000620 <lwiperf_tcp_client_send_more+0x1c>
 80006f6:	e78c      	b.n	8000612 <lwiperf_tcp_client_send_more+0xe>
 80006f8:	08011eec 	.word	0x08011eec
 80006fc:	08011fcc 	.word	0x08011fcc
 8000700:	08011f14 	.word	0x08011f14
 8000704:	08012060 	.word	0x08012060
 8000708:	cccccccd 	.word	0xcccccccd

0800070c <lwiperf_tcp_client_sent>:
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 800070c:	6903      	ldr	r3, [r0, #16]
 800070e:	428b      	cmp	r3, r1
{
 8000710:	b510      	push	{r4, lr}
 8000712:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 8000714:	d006      	beq.n	8000724 <lwiperf_tcp_client_sent+0x18>
 8000716:	4b07      	ldr	r3, [pc, #28]	@ (8000734 <lwiperf_tcp_client_sent+0x28>)
 8000718:	f44f 72b3 	mov.w	r2, #358	@ 0x166
 800071c:	4906      	ldr	r1, [pc, #24]	@ (8000738 <lwiperf_tcp_client_sent+0x2c>)
 800071e:	4807      	ldr	r0, [pc, #28]	@ (800073c <lwiperf_tcp_client_sent+0x30>)
 8000720:	f010 fa9c 	bl	8010c5c <iprintf>
  conn->poll_count = 0;
 8000724:	2300      	movs	r3, #0
  return lwiperf_tcp_client_send_more(conn);
 8000726:	4620      	mov	r0, r4
  conn->poll_count = 0;
 8000728:	f884 3020 	strb.w	r3, [r4, #32]
}
 800072c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return lwiperf_tcp_client_send_more(conn);
 8000730:	f7ff bf68 	b.w	8000604 <lwiperf_tcp_client_send_more>
 8000734:	08011eec 	.word	0x08011eec
 8000738:	08011fdc 	.word	0x08011fdc
 800073c:	08011f14 	.word	0x08011f14

08000740 <lwiperf_tcp_poll>:
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 8000740:	6903      	ldr	r3, [r0, #16]
 8000742:	428b      	cmp	r3, r1
{
 8000744:	b510      	push	{r4, lr}
 8000746:	4604      	mov	r4, r0
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 8000748:	d006      	beq.n	8000758 <lwiperf_tcp_poll+0x18>
 800074a:	4b0f      	ldr	r3, [pc, #60]	@ (8000788 <lwiperf_tcp_poll+0x48>)
 800074c:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8000750:	490e      	ldr	r1, [pc, #56]	@ (800078c <lwiperf_tcp_poll+0x4c>)
 8000752:	480f      	ldr	r0, [pc, #60]	@ (8000790 <lwiperf_tcp_poll+0x50>)
 8000754:	f010 fa82 	bl	8010c5c <iprintf>
  if (++conn->poll_count >= LWIPERF_TCP_MAX_IDLE_SEC) {
 8000758:	f894 3020 	ldrb.w	r3, [r4, #32]
 800075c:	3301      	adds	r3, #1
 800075e:	b2db      	uxtb	r3, r3
 8000760:	2b09      	cmp	r3, #9
 8000762:	f884 3020 	strb.w	r3, [r4, #32]
 8000766:	d808      	bhi.n	800077a <lwiperf_tcp_poll+0x3a>
  if (!conn->base.server) {
 8000768:	7963      	ldrb	r3, [r4, #5]
 800076a:	b10b      	cbz	r3, 8000770 <lwiperf_tcp_poll+0x30>
}
 800076c:	2000      	movs	r0, #0
 800076e:	bd10      	pop	{r4, pc}
    lwiperf_tcp_client_send_more(conn);
 8000770:	4620      	mov	r0, r4
 8000772:	f7ff ff47 	bl	8000604 <lwiperf_tcp_client_send_more>
}
 8000776:	2000      	movs	r0, #0
 8000778:	bd10      	pop	{r4, pc}
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL);
 800077a:	4620      	mov	r0, r4
 800077c:	2102      	movs	r1, #2
 800077e:	f7ff fe07 	bl	8000390 <lwiperf_tcp_close>
}
 8000782:	2000      	movs	r0, #0
 8000784:	bd10      	pop	{r4, pc}
 8000786:	bf00      	nop
 8000788:	08011eec 	.word	0x08011eec
 800078c:	08011fec 	.word	0x08011fec
 8000790:	08011f14 	.word	0x08011f14

08000794 <lwiperf_tcp_client_connected>:
{
 8000794:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 8000796:	6903      	ldr	r3, [r0, #16]
{
 8000798:	4604      	mov	r4, r0
 800079a:	4615      	mov	r5, r2
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 800079c:	428b      	cmp	r3, r1
 800079e:	d006      	beq.n	80007ae <lwiperf_tcp_client_connected+0x1a>
 80007a0:	4b0c      	ldr	r3, [pc, #48]	@ (80007d4 <lwiperf_tcp_client_connected+0x40>)
 80007a2:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 80007a6:	490c      	ldr	r1, [pc, #48]	@ (80007d8 <lwiperf_tcp_client_connected+0x44>)
 80007a8:	480c      	ldr	r0, [pc, #48]	@ (80007dc <lwiperf_tcp_client_connected+0x48>)
 80007aa:	f010 fa57 	bl	8010c5c <iprintf>
  if (err != ERR_OK) {
 80007ae:	b955      	cbnz	r5, 80007c6 <lwiperf_tcp_client_connected+0x32>
  conn->poll_count = 0;
 80007b0:	f884 5020 	strb.w	r5, [r4, #32]
  conn->time_started = sys_now();
 80007b4:	f005 ff3c 	bl	8006630 <sys_now>
 80007b8:	4603      	mov	r3, r0
  return lwiperf_tcp_client_send_more(conn);
 80007ba:	4620      	mov	r0, r4
  conn->time_started = sys_now();
 80007bc:	6163      	str	r3, [r4, #20]
}
 80007be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return lwiperf_tcp_client_send_more(conn);
 80007c2:	f7ff bf1f 	b.w	8000604 <lwiperf_tcp_client_send_more>
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 80007c6:	4620      	mov	r0, r4
 80007c8:	2105      	movs	r1, #5
 80007ca:	f7ff fde1 	bl	8000390 <lwiperf_tcp_close>
}
 80007ce:	2000      	movs	r0, #0
 80007d0:	bd38      	pop	{r3, r4, r5, pc}
 80007d2:	bf00      	nop
 80007d4:	08011eec 	.word	0x08011eec
 80007d8:	08011fdc 	.word	0x08011fdc
 80007dc:	08011f14 	.word	0x08011f14

080007e0 <lwiperf_start_tcp_server_impl.constprop.0>:
    return state;
  }
  return NULL;
}

static err_t lwiperf_start_tcp_server_impl(const ip_addr_t *local_addr, u16_t local_port,
 80007e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80007e4:	4605      	mov	r5, r0
 80007e6:	460f      	mov	r7, r1
 80007e8:	4690      	mov	r8, r2
 80007ea:	461e      	mov	r6, r3
{
  err_t err;
  struct tcp_pcb *pcb;
  lwiperf_state_tcp_t *s;

  LWIP_ASSERT_CORE_LOCKED();
 80007ec:	f006 f8a8 	bl	8006940 <sys_check_core_locking>

  LWIP_ASSERT("state != NULL", state != NULL);

  if (local_addr == NULL) {
 80007f0:	2d00      	cmp	r5, #0
 80007f2:	d035      	beq.n	8000860 <lwiperf_start_tcp_server_impl.constprop.0+0x80>
    return ERR_ARG;
  }

  s = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 80007f4:	2048      	movs	r0, #72	@ 0x48
 80007f6:	f008 ffc3 	bl	8009780 <mem_malloc>
  if (s == NULL) {
 80007fa:	4604      	mov	r4, r0
 80007fc:	2800      	cmp	r0, #0
 80007fe:	d038      	beq.n	8000872 <lwiperf_start_tcp_server_impl.constprop.0+0x92>
    return ERR_MEM;
  }
  memset(s, 0, sizeof(lwiperf_state_tcp_t));
 8000800:	2248      	movs	r2, #72	@ 0x48
 8000802:	2100      	movs	r1, #0
 8000804:	f010 fadd 	bl	8010dc2 <memset>
  s->base.tcp = 1;
  s->base.server = 1;
  s->base.related_master_state = related_master_state;
 8000808:	9b06      	ldr	r3, [sp, #24]
  s->report_fn = report_fn;
  s->report_arg = report_arg;
 800080a:	61e6      	str	r6, [r4, #28]

  pcb = tcp_new_ip_type(LWIPERF_SERVER_IP_TYPE);
 800080c:	202e      	movs	r0, #46	@ 0x2e
  s->base.related_master_state = related_master_state;
 800080e:	60a3      	str	r3, [r4, #8]
  s->base.tcp = 1;
 8000810:	f240 1301 	movw	r3, #257	@ 0x101
  s->report_fn = report_fn;
 8000814:	f8c4 8018 	str.w	r8, [r4, #24]
  s->base.tcp = 1;
 8000818:	80a3      	strh	r3, [r4, #4]
  pcb = tcp_new_ip_type(LWIPERF_SERVER_IP_TYPE);
 800081a:	f00b f84f 	bl	800b8bc <tcp_new_ip_type>
  if (pcb == NULL) {
 800081e:	4606      	mov	r6, r0
 8000820:	b338      	cbz	r0, 8000872 <lwiperf_start_tcp_server_impl.constprop.0+0x92>
    return ERR_MEM;
  }
  err = tcp_bind(pcb, local_addr, local_port);
 8000822:	4629      	mov	r1, r5
 8000824:	463a      	mov	r2, r7
 8000826:	f00a f80f 	bl	800a848 <tcp_bind>
  if (err != ERR_OK) {
 800082a:	4605      	mov	r5, r0
 800082c:	b110      	cbz	r0, 8000834 <lwiperf_start_tcp_server_impl.constprop.0+0x54>
  tcp_accept(s->server_pcb, lwiperf_tcp_accept);

  lwiperf_list_add(&s->base);
  *state = s;
  return ERR_OK;
}
 800082e:	4628      	mov	r0, r5
 8000830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  s->server_pcb = tcp_listen_with_backlog(pcb, 1);
 8000834:	2101      	movs	r1, #1
 8000836:	4630      	mov	r0, r6
 8000838:	f00a f8ee 	bl	800aa18 <tcp_listen_with_backlog>
 800083c:	60e0      	str	r0, [r4, #12]
  if (s->server_pcb == NULL) {
 800083e:	b190      	cbz	r0, 8000866 <lwiperf_start_tcp_server_impl.constprop.0+0x86>
  tcp_arg(s->server_pcb, s);
 8000840:	4621      	mov	r1, r4
 8000842:	f00a fa69 	bl	800ad18 <tcp_arg>
  tcp_accept(s->server_pcb, lwiperf_tcp_accept);
 8000846:	68e0      	ldr	r0, [r4, #12]
 8000848:	490b      	ldr	r1, [pc, #44]	@ (8000878 <lwiperf_start_tcp_server_impl.constprop.0+0x98>)
 800084a:	f00a fabb 	bl	800adc4 <tcp_accept>
  item->next = lwiperf_all_connections;
 800084e:	4b0b      	ldr	r3, [pc, #44]	@ (800087c <lwiperf_start_tcp_server_impl.constprop.0+0x9c>)
}
 8000850:	4628      	mov	r0, r5
  item->next = lwiperf_all_connections;
 8000852:	681a      	ldr	r2, [r3, #0]
  lwiperf_all_connections = item;
 8000854:	601c      	str	r4, [r3, #0]
  *state = s;
 8000856:	9b07      	ldr	r3, [sp, #28]
  item->next = lwiperf_all_connections;
 8000858:	6022      	str	r2, [r4, #0]
  *state = s;
 800085a:	601c      	str	r4, [r3, #0]
}
 800085c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_ARG;
 8000860:	f06f 050f 	mvn.w	r5, #15
 8000864:	e7e3      	b.n	800082e <lwiperf_start_tcp_server_impl.constprop.0+0x4e>
      tcp_close(pcb);
 8000866:	4630      	mov	r0, r6
 8000868:	f00b f8fa 	bl	800ba60 <tcp_close>
    LWIPERF_FREE(lwiperf_state_tcp_t, s);
 800086c:	4620      	mov	r0, r4
 800086e:	f008 fdef 	bl	8009450 <mem_free>
    return ERR_MEM;
 8000872:	f04f 35ff 	mov.w	r5, #4294967295
 8000876:	e7da      	b.n	800082e <lwiperf_start_tcp_server_impl.constprop.0+0x4e>
 8000878:	0800049d 	.word	0x0800049d
 800087c:	240000ac 	.word	0x240000ac

08000880 <lwiperf_tx_start_impl.constprop.0>:
lwiperf_tx_start_impl(const ip_addr_t *remote_ip, u16_t remote_port, lwiperf_settings_t *settings, lwiperf_report_fn report_fn,
 8000880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000884:	4689      	mov	r9, r1
 8000886:	b083      	sub	sp, #12
 8000888:	4616      	mov	r6, r2
 800088a:	469a      	mov	sl, r3
  LWIP_ASSERT("remote_ip != NULL", remote_ip != NULL);
 800088c:	4607      	mov	r7, r0
 800088e:	2800      	cmp	r0, #0
 8000890:	d063      	beq.n	800095a <lwiperf_tx_start_impl.constprop.0+0xda>
  *new_conn = NULL;
 8000892:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8000894:	f04f 0800 	mov.w	r8, #0
  client_conn = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 8000898:	2048      	movs	r0, #72	@ 0x48
  *new_conn = NULL;
 800089a:	f8c3 8000 	str.w	r8, [r3]
  client_conn = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 800089e:	f008 ff6f 	bl	8009780 <mem_malloc>
  if (client_conn == NULL) {
 80008a2:	4604      	mov	r4, r0
 80008a4:	2800      	cmp	r0, #0
 80008a6:	d063      	beq.n	8000970 <lwiperf_tx_start_impl.constprop.0+0xf0>
  newpcb = tcp_new_ip_type(IP_GET_TYPE(remote_ip));
 80008a8:	4640      	mov	r0, r8
 80008aa:	f00b f807 	bl	800b8bc <tcp_new_ip_type>
  if (newpcb == NULL) {
 80008ae:	4605      	mov	r5, r0
 80008b0:	2800      	cmp	r0, #0
 80008b2:	d05a      	beq.n	800096a <lwiperf_tx_start_impl.constprop.0+0xea>
  memset(client_conn, 0, sizeof(lwiperf_state_tcp_t));
 80008b4:	2248      	movs	r2, #72	@ 0x48
 80008b6:	4641      	mov	r1, r8
 80008b8:	4620      	mov	r0, r4
  client_conn->base.tcp = 1;
 80008ba:	f04f 0b01 	mov.w	fp, #1
  memset(client_conn, 0, sizeof(lwiperf_state_tcp_t));
 80008be:	f010 fa80 	bl	8010dc2 <memset>
  client_conn->base.related_master_state = related_master_state;
 80008c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  client_conn->conn_pcb = newpcb;
 80008c4:	6125      	str	r5, [r4, #16]
  client_conn->base.related_master_state = related_master_state;
 80008c6:	60a3      	str	r3, [r4, #8]
  client_conn->base.tcp = 1;
 80008c8:	f884 b004 	strb.w	fp, [r4, #4]
  client_conn->time_started = sys_now(); /* @todo: set this again on 'connected' */
 80008cc:	f005 feb0 	bl	8006630 <sys_now>
  client_conn->report_arg = report_arg;
 80008d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  client_conn->report_fn = report_fn;
 80008d2:	f8c4 a018 	str.w	sl, [r4, #24]
  client_conn->report_arg = report_arg;
 80008d6:	61e3      	str	r3, [r4, #28]
  client_conn->next_num = 4; /* initial nr is '4' since the header has 24 byte */
 80008d8:	2304      	movs	r3, #4
  client_conn->bytes_transferred = 0;
 80008da:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
  client_conn->time_started = sys_now(); /* @todo: set this again on 'connected' */
 80008de:	6160      	str	r0, [r4, #20]
  client_conn->next_num = 4; /* initial nr is '4' since the header has 24 byte */
 80008e0:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
  memcpy(&client_conn->settings, settings, sizeof(*settings));
 80008e4:	6832      	ldr	r2, [r6, #0]
 80008e6:	6873      	ldr	r3, [r6, #4]
 80008e8:	68b0      	ldr	r0, [r6, #8]
 80008ea:	68f1      	ldr	r1, [r6, #12]
 80008ec:	6320      	str	r0, [r4, #48]	@ 0x30
  tcp_arg(newpcb, client_conn);
 80008ee:	4628      	mov	r0, r5
  memcpy(&client_conn->settings, settings, sizeof(*settings));
 80008f0:	6361      	str	r1, [r4, #52]	@ 0x34
  tcp_arg(newpcb, client_conn);
 80008f2:	4621      	mov	r1, r4
  memcpy(&client_conn->settings, settings, sizeof(*settings));
 80008f4:	62a2      	str	r2, [r4, #40]	@ 0x28
 80008f6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80008f8:	6973      	ldr	r3, [r6, #20]
 80008fa:	6932      	ldr	r2, [r6, #16]
 80008fc:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80008fe:	63a2      	str	r2, [r4, #56]	@ 0x38
  client_conn->have_settings_buf = 1;
 8000900:	f884 b040 	strb.w	fp, [r4, #64]	@ 0x40
  tcp_arg(newpcb, client_conn);
 8000904:	f00a fa08 	bl	800ad18 <tcp_arg>
  tcp_sent(newpcb, lwiperf_tcp_client_sent);
 8000908:	4628      	mov	r0, r5
 800090a:	491b      	ldr	r1, [pc, #108]	@ (8000978 <lwiperf_tx_start_impl.constprop.0+0xf8>)
 800090c:	f00a fa26 	bl	800ad5c <tcp_sent>
  tcp_poll(newpcb, lwiperf_tcp_poll, 2U);
 8000910:	2202      	movs	r2, #2
 8000912:	4628      	mov	r0, r5
 8000914:	4919      	ldr	r1, [pc, #100]	@ (800097c <lwiperf_tx_start_impl.constprop.0+0xfc>)
 8000916:	f00a fa61 	bl	800addc <tcp_poll>
  tcp_err(newpcb, lwiperf_tcp_err);
 800091a:	4628      	mov	r0, r5
 800091c:	4918      	ldr	r1, [pc, #96]	@ (8000980 <lwiperf_tx_start_impl.constprop.0+0x100>)
 800091e:	f00a fa37 	bl	800ad90 <tcp_err>
  ip_addr_copy(remote_addr, *remote_ip);
 8000922:	683b      	ldr	r3, [r7, #0]
  err = tcp_connect(newpcb, &remote_addr, remote_port, lwiperf_tcp_client_connected);
 8000924:	4628      	mov	r0, r5
 8000926:	464a      	mov	r2, r9
  ip_addr_copy(remote_addr, *remote_ip);
 8000928:	9301      	str	r3, [sp, #4]
  err = tcp_connect(newpcb, &remote_addr, remote_port, lwiperf_tcp_client_connected);
 800092a:	a901      	add	r1, sp, #4
 800092c:	4b15      	ldr	r3, [pc, #84]	@ (8000984 <lwiperf_tx_start_impl.constprop.0+0x104>)
 800092e:	f00a f8fd 	bl	800ab2c <tcp_connect>
  if (err != ERR_OK) {
 8000932:	4605      	mov	r5, r0
 8000934:	b948      	cbnz	r0, 800094a <lwiperf_tx_start_impl.constprop.0+0xca>
  item->next = lwiperf_all_connections;
 8000936:	4b14      	ldr	r3, [pc, #80]	@ (8000988 <lwiperf_tx_start_impl.constprop.0+0x108>)
 8000938:	681a      	ldr	r2, [r3, #0]
  lwiperf_all_connections = item;
 800093a:	601c      	str	r4, [r3, #0]
  *new_conn = client_conn;
 800093c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
  item->next = lwiperf_all_connections;
 800093e:	6022      	str	r2, [r4, #0]
  *new_conn = client_conn;
 8000940:	601c      	str	r4, [r3, #0]
}
 8000942:	4628      	mov	r0, r5
 8000944:	b003      	add	sp, #12
 8000946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lwiperf_tcp_close(client_conn, LWIPERF_TCP_ABORTED_LOCAL);
 800094a:	4620      	mov	r0, r4
 800094c:	2102      	movs	r1, #2
 800094e:	f7ff fd1f 	bl	8000390 <lwiperf_tcp_close>
}
 8000952:	4628      	mov	r0, r5
 8000954:	b003      	add	sp, #12
 8000956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("remote_ip != NULL", remote_ip != NULL);
 800095a:	4b0c      	ldr	r3, [pc, #48]	@ (800098c <lwiperf_tx_start_impl.constprop.0+0x10c>)
 800095c:	f240 128b 	movw	r2, #395	@ 0x18b
 8000960:	490b      	ldr	r1, [pc, #44]	@ (8000990 <lwiperf_tx_start_impl.constprop.0+0x110>)
 8000962:	480c      	ldr	r0, [pc, #48]	@ (8000994 <lwiperf_tx_start_impl.constprop.0+0x114>)
 8000964:	f010 f97a 	bl	8010c5c <iprintf>
  LWIP_ASSERT("new_conn != NULL", new_conn != NULL);
 8000968:	e793      	b.n	8000892 <lwiperf_tx_start_impl.constprop.0+0x12>
    LWIPERF_FREE(lwiperf_state_tcp_t, client_conn);
 800096a:	4620      	mov	r0, r4
 800096c:	f008 fd70 	bl	8009450 <mem_free>
    return ERR_MEM;
 8000970:	f04f 35ff 	mov.w	r5, #4294967295
 8000974:	e7e5      	b.n	8000942 <lwiperf_tx_start_impl.constprop.0+0xc2>
 8000976:	bf00      	nop
 8000978:	0800070d 	.word	0x0800070d
 800097c:	08000741 	.word	0x08000741
 8000980:	080005fd 	.word	0x080005fd
 8000984:	08000795 	.word	0x08000795
 8000988:	240000ac 	.word	0x240000ac
 800098c:	08011eec 	.word	0x08011eec
 8000990:	08011ffc 	.word	0x08011ffc
 8000994:	08011f14 	.word	0x08011f14

08000998 <lwiperf_tx_start_passive>:
{
 8000998:	b530      	push	{r4, r5, lr}
  lwiperf_state_tcp_t *new_conn = NULL;
 800099a:	2300      	movs	r3, #0
{
 800099c:	4604      	mov	r4, r0
 800099e:	b087      	sub	sp, #28
  u16_t remote_port = (u16_t)lwip_htonl(conn->settings.remote_port);
 80009a0:	6b00      	ldr	r0, [r0, #48]	@ 0x30
  lwiperf_state_tcp_t *new_conn = NULL;
 80009a2:	9305      	str	r3, [sp, #20]
  u16_t remote_port = (u16_t)lwip_htonl(conn->settings.remote_port);
 80009a4:	f008 fc9a 	bl	80092dc <lwip_htonl>
  ret = lwiperf_tx_start_impl(&conn->conn_pcb->remote_ip, remote_port, &conn->settings, conn->report_fn, conn->report_arg,
 80009a8:	6922      	ldr	r2, [r4, #16]
 80009aa:	a905      	add	r1, sp, #20
 80009ac:	69e3      	ldr	r3, [r4, #28]
 80009ae:	68a5      	ldr	r5, [r4, #8]
 80009b0:	9300      	str	r3, [sp, #0]
 80009b2:	e9cd 5101 	strd	r5, r1, [sp, #4]
 80009b6:	b281      	uxth	r1, r0
 80009b8:	69a3      	ldr	r3, [r4, #24]
 80009ba:	1d10      	adds	r0, r2, #4
 80009bc:	f104 0228 	add.w	r2, r4, #40	@ 0x28
 80009c0:	f7ff ff5e 	bl	8000880 <lwiperf_tx_start_impl.constprop.0>
  if (ret == ERR_OK) {
 80009c4:	4604      	mov	r4, r0
 80009c6:	b918      	cbnz	r0, 80009d0 <lwiperf_tx_start_passive+0x38>
    LWIP_ASSERT("new_conn != NULL", new_conn != NULL);
 80009c8:	9d05      	ldr	r5, [sp, #20]
 80009ca:	b125      	cbz	r5, 80009d6 <lwiperf_tx_start_passive+0x3e>
    new_conn->settings.flags = 0; /* prevent the remote side starting back as client again */
 80009cc:	2300      	movs	r3, #0
 80009ce:	62ab      	str	r3, [r5, #40]	@ 0x28
}
 80009d0:	4620      	mov	r0, r4
 80009d2:	b007      	add	sp, #28
 80009d4:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("new_conn != NULL", new_conn != NULL);
 80009d6:	4b04      	ldr	r3, [pc, #16]	@ (80009e8 <lwiperf_tx_start_passive+0x50>)
 80009d8:	f44f 72e0 	mov.w	r2, #448	@ 0x1c0
 80009dc:	4903      	ldr	r1, [pc, #12]	@ (80009ec <lwiperf_tx_start_passive+0x54>)
 80009de:	4804      	ldr	r0, [pc, #16]	@ (80009f0 <lwiperf_tx_start_passive+0x58>)
 80009e0:	f010 f93c 	bl	8010c5c <iprintf>
 80009e4:	e7f2      	b.n	80009cc <lwiperf_tx_start_passive+0x34>
 80009e6:	bf00      	nop
 80009e8:	08011eec 	.word	0x08011eec
 80009ec:	08012010 	.word	0x08012010
 80009f0:	08011f14 	.word	0x08011f14

080009f4 <lwiperf_tcp_recv>:
{
 80009f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80009f8:	4698      	mov	r8, r3
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 80009fa:	6903      	ldr	r3, [r0, #16]
{
 80009fc:	4604      	mov	r4, r0
 80009fe:	460e      	mov	r6, r1
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 8000a00:	428b      	cmp	r3, r1
{
 8000a02:	4615      	mov	r5, r2
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 8000a04:	d006      	beq.n	8000a14 <lwiperf_tcp_recv+0x20>
 8000a06:	4b6a      	ldr	r3, [pc, #424]	@ (8000bb0 <lwiperf_tcp_recv+0x1bc>)
 8000a08:	f44f 72e8 	mov.w	r2, #464	@ 0x1d0
 8000a0c:	4969      	ldr	r1, [pc, #420]	@ (8000bb4 <lwiperf_tcp_recv+0x1c0>)
 8000a0e:	486a      	ldr	r0, [pc, #424]	@ (8000bb8 <lwiperf_tcp_recv+0x1c4>)
 8000a10:	f010 f924 	bl	8010c5c <iprintf>
  if (err != ERR_OK) {
 8000a14:	f1b8 0f00 	cmp.w	r8, #0
 8000a18:	f040 8092 	bne.w	8000b40 <lwiperf_tcp_recv+0x14c>
  if (p == NULL) {
 8000a1c:	2d00      	cmp	r5, #0
 8000a1e:	f000 8096 	beq.w	8000b4e <lwiperf_tcp_recv+0x15a>
  if ((!conn->have_settings_buf) || ((conn->bytes_transferred - 24) % (1024 * 128) == 0)) {
 8000a22:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  tot_len = p->tot_len;
 8000a26:	892f      	ldrh	r7, [r5, #8]
  conn->poll_count = 0;
 8000a28:	f884 8020 	strb.w	r8, [r4, #32]
  if ((!conn->have_settings_buf) || ((conn->bytes_transferred - 24) % (1024 * 128) == 0)) {
 8000a2c:	bb33      	cbnz	r3, 8000a7c <lwiperf_tcp_recv+0x88>
    if (p->tot_len < sizeof(lwiperf_settings_t)) {
 8000a2e:	2f17      	cmp	r7, #23
 8000a30:	d961      	bls.n	8000af6 <lwiperf_tcp_recv+0x102>
      if (pbuf_copy_partial(p, &conn->settings, sizeof(lwiperf_settings_t), 0) != sizeof(lwiperf_settings_t)) {
 8000a32:	4643      	mov	r3, r8
 8000a34:	2218      	movs	r2, #24
 8000a36:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8000a3a:	4628      	mov	r0, r5
 8000a3c:	f009 fdde 	bl	800a5fc <pbuf_copy_partial>
 8000a40:	2818      	cmp	r0, #24
 8000a42:	f040 809b 	bne.w	8000b7c <lwiperf_tcp_recv+0x188>
      conn->have_settings_buf = 1;
 8000a46:	2301      	movs	r3, #1
        if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_NOW)) {
 8000a48:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
      conn->have_settings_buf = 1;
 8000a4a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_NOW)) {
 8000a4e:	4b5b      	ldr	r3, [pc, #364]	@ (8000bbc <lwiperf_tcp_recv+0x1c8>)
 8000a50:	4393      	bics	r3, r2
 8000a52:	f000 809f 	beq.w	8000b94 <lwiperf_tcp_recv+0x1a0>
    conn->bytes_transferred += sizeof(lwiperf_settings_t);
 8000a56:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8000a58:	3318      	adds	r3, #24
    if (conn->bytes_transferred <= 24) {
 8000a5a:	2b18      	cmp	r3, #24
    conn->bytes_transferred += sizeof(lwiperf_settings_t);
 8000a5c:	6263      	str	r3, [r4, #36]	@ 0x24
    if (conn->bytes_transferred <= 24) {
 8000a5e:	d819      	bhi.n	8000a94 <lwiperf_tcp_recv+0xa0>
      conn->time_started = sys_now();
 8000a60:	f005 fde6 	bl	8006630 <sys_now>
 8000a64:	4603      	mov	r3, r0
      tcp_recved(tpcb, p->tot_len);
 8000a66:	8929      	ldrh	r1, [r5, #8]
 8000a68:	4630      	mov	r0, r6
      conn->time_started = sys_now();
 8000a6a:	6163      	str	r3, [r4, #20]
      tcp_recved(tpcb, p->tot_len);
 8000a6c:	f00a f81e 	bl	800aaac <tcp_recved>
      pbuf_free(p);
 8000a70:	4628      	mov	r0, r5
 8000a72:	f009 fb03 	bl	800a07c <pbuf_free>
}
 8000a76:	2000      	movs	r0, #0
 8000a78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((!conn->have_settings_buf) || ((conn->bytes_transferred - 24) % (1024 * 128) == 0)) {
 8000a7c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8000a7e:	03da      	lsls	r2, r3, #15
 8000a80:	f5b2 2f40 	cmp.w	r2, #786432	@ 0xc0000
 8000a84:	d115      	bne.n	8000ab2 <lwiperf_tcp_recv+0xbe>
    if (p->tot_len < sizeof(lwiperf_settings_t)) {
 8000a86:	2f17      	cmp	r7, #23
 8000a88:	d935      	bls.n	8000af6 <lwiperf_tcp_recv+0x102>
      if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_TEST)) {
 8000a8a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8000a8c:	0612      	lsls	r2, r2, #24
 8000a8e:	d46a      	bmi.n	8000b66 <lwiperf_tcp_recv+0x172>
    conn->bytes_transferred += sizeof(lwiperf_settings_t);
 8000a90:	3318      	adds	r3, #24
 8000a92:	6263      	str	r3, [r4, #36]	@ 0x24
    conn->next_num = 4; /* 24 bytes received... */
 8000a94:	2304      	movs	r3, #4
    tmp = pbuf_remove_header(p, 24);
 8000a96:	2118      	movs	r1, #24
 8000a98:	4628      	mov	r0, r5
    conn->next_num = 4; /* 24 bytes received... */
 8000a9a:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
    tmp = pbuf_remove_header(p, 24);
 8000a9e:	f009 fa8b 	bl	8009fb8 <pbuf_remove_header>
    LWIP_ASSERT("pbuf_remove_header failed", tmp == 0);
 8000aa2:	b130      	cbz	r0, 8000ab2 <lwiperf_tcp_recv+0xbe>
 8000aa4:	4b42      	ldr	r3, [pc, #264]	@ (8000bb0 <lwiperf_tcp_recv+0x1bc>)
 8000aa6:	f240 2211 	movw	r2, #529	@ 0x211
 8000aaa:	4945      	ldr	r1, [pc, #276]	@ (8000bc0 <lwiperf_tcp_recv+0x1cc>)
 8000aac:	4842      	ldr	r0, [pc, #264]	@ (8000bb8 <lwiperf_tcp_recv+0x1c4>)
 8000aae:	f010 f8d5 	bl	8010c5c <iprintf>
{
 8000ab2:	46ae      	mov	lr, r5
 8000ab4:	f04f 0800 	mov.w	r8, #0
    for (i = 0; i < q->len; i++) {
 8000ab8:	f8be 300a 	ldrh.w	r3, [lr, #10]
    const u8_t *payload = (const u8_t *)q->payload;
 8000abc:	f8de 9004 	ldr.w	r9, [lr, #4]
    for (i = 0; i < q->len; i++) {
 8000ac0:	b323      	cbz	r3, 8000b0c <lwiperf_tcp_recv+0x118>
      if (num == conn->next_num) {
 8000ac2:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	e008      	b.n	8000adc <lwiperf_tcp_recv+0xe8>
          conn->next_num = 0;
 8000aca:	2b0a      	cmp	r3, #10
 8000acc:	bf08      	it	eq
 8000ace:	2300      	moveq	r3, #0
 8000ad0:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
    for (i = 0; i < q->len; i++) {
 8000ad4:	f8be 100a 	ldrh.w	r1, [lr, #10]
 8000ad8:	4281      	cmp	r1, r0
 8000ada:	d916      	bls.n	8000b0a <lwiperf_tcp_recv+0x116>
      u8_t val = payload[i];
 8000adc:	b290      	uxth	r0, r2
        conn->next_num++;
 8000ade:	1c59      	adds	r1, r3, #1
    for (i = 0; i < q->len; i++) {
 8000ae0:	3201      	adds	r2, #1
      u8_t num = val - '0';
 8000ae2:	f819 c000 	ldrb.w	ip, [r9, r0]
    for (i = 0; i < q->len; i++) {
 8000ae6:	b290      	uxth	r0, r2
      u8_t num = val - '0';
 8000ae8:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
      if (num == conn->next_num) {
 8000aec:	fa5f fc8c 	uxtb.w	ip, ip
 8000af0:	459c      	cmp	ip, r3
        conn->next_num++;
 8000af2:	b2cb      	uxtb	r3, r1
      if (num == conn->next_num) {
 8000af4:	d0e9      	beq.n	8000aca <lwiperf_tcp_recv+0xd6>
      lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_DATAERROR);
 8000af6:	4620      	mov	r0, r4
 8000af8:	2103      	movs	r1, #3
 8000afa:	f7ff fc49 	bl	8000390 <lwiperf_tcp_close>
      pbuf_free(p);
 8000afe:	4628      	mov	r0, r5
 8000b00:	f009 fabc 	bl	800a07c <pbuf_free>
}
 8000b04:	2000      	movs	r0, #0
 8000b06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    packet_idx += q->len;
 8000b0a:	4488      	add	r8, r1
  for (q = p; q != NULL; q = q->next) {
 8000b0c:	f8de e000 	ldr.w	lr, [lr]
 8000b10:	f1be 0f00 	cmp.w	lr, #0
 8000b14:	d1d0      	bne.n	8000ab8 <lwiperf_tcp_recv+0xc4>
  LWIP_ASSERT("count mismatch", packet_idx == p->tot_len);
 8000b16:	892b      	ldrh	r3, [r5, #8]
 8000b18:	4543      	cmp	r3, r8
 8000b1a:	d006      	beq.n	8000b2a <lwiperf_tcp_recv+0x136>
 8000b1c:	4b24      	ldr	r3, [pc, #144]	@ (8000bb0 <lwiperf_tcp_recv+0x1bc>)
 8000b1e:	f240 222b 	movw	r2, #555	@ 0x22b
 8000b22:	4928      	ldr	r1, [pc, #160]	@ (8000bc4 <lwiperf_tcp_recv+0x1d0>)
 8000b24:	4824      	ldr	r0, [pc, #144]	@ (8000bb8 <lwiperf_tcp_recv+0x1c4>)
 8000b26:	f010 f899 	bl	8010c5c <iprintf>
  conn->bytes_transferred += packet_idx;
 8000b2a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  tcp_recved(tpcb, tot_len);
 8000b2c:	4630      	mov	r0, r6
 8000b2e:	4639      	mov	r1, r7
  conn->bytes_transferred += packet_idx;
 8000b30:	4443      	add	r3, r8
 8000b32:	6263      	str	r3, [r4, #36]	@ 0x24
  tcp_recved(tpcb, tot_len);
 8000b34:	f009 ffba 	bl	800aaac <tcp_recved>
  pbuf_free(p);
 8000b38:	4628      	mov	r0, r5
 8000b3a:	f009 fa9f 	bl	800a07c <pbuf_free>
  return ERR_OK;
 8000b3e:	e7e1      	b.n	8000b04 <lwiperf_tcp_recv+0x110>
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 8000b40:	4620      	mov	r0, r4
 8000b42:	2105      	movs	r1, #5
 8000b44:	f7ff fc24 	bl	8000390 <lwiperf_tcp_close>
}
 8000b48:	2000      	movs	r0, #0
 8000b4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_TEST)) {
 8000b4e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8000b50:	0618      	lsls	r0, r3, #24
 8000b52:	d501      	bpl.n	8000b58 <lwiperf_tcp_recv+0x164>
      if ((conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_NOW)) == 0) {
 8000b54:	01d9      	lsls	r1, r3, #7
 8000b56:	d519      	bpl.n	8000b8c <lwiperf_tcp_recv+0x198>
    lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_SERVER);
 8000b58:	4620      	mov	r0, r4
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	f7ff fc18 	bl	8000390 <lwiperf_tcp_close>
}
 8000b60:	2000      	movs	r0, #0
 8000b62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (pbuf_memcmp(p, 0, &conn->settings, sizeof(lwiperf_settings_t)) != 0) {
 8000b66:	4641      	mov	r1, r8
 8000b68:	2318      	movs	r3, #24
 8000b6a:	f104 0228 	add.w	r2, r4, #40	@ 0x28
 8000b6e:	4628      	mov	r0, r5
 8000b70:	f009 fdae 	bl	800a6d0 <pbuf_memcmp>
 8000b74:	2800      	cmp	r0, #0
 8000b76:	f43f af6e 	beq.w	8000a56 <lwiperf_tcp_recv+0x62>
 8000b7a:	e7bc      	b.n	8000af6 <lwiperf_tcp_recv+0x102>
        lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL);
 8000b7c:	4620      	mov	r0, r4
 8000b7e:	2102      	movs	r1, #2
 8000b80:	f7ff fc06 	bl	8000390 <lwiperf_tcp_close>
        pbuf_free(p);
 8000b84:	4628      	mov	r0, r5
 8000b86:	f009 fa79 	bl	800a07c <pbuf_free>
        return ERR_OK;
 8000b8a:	e7bb      	b.n	8000b04 <lwiperf_tcp_recv+0x110>
        lwiperf_tx_start_passive(conn);
 8000b8c:	4620      	mov	r0, r4
 8000b8e:	f7ff ff03 	bl	8000998 <lwiperf_tx_start_passive>
 8000b92:	e7e1      	b.n	8000b58 <lwiperf_tcp_recv+0x164>
          err_t err2 = lwiperf_tx_start_passive(conn);
 8000b94:	4620      	mov	r0, r4
 8000b96:	f7ff feff 	bl	8000998 <lwiperf_tx_start_passive>
          if (err2 != ERR_OK) {
 8000b9a:	2800      	cmp	r0, #0
 8000b9c:	f43f af5b 	beq.w	8000a56 <lwiperf_tcp_recv+0x62>
            lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_TXERROR);
 8000ba0:	4620      	mov	r0, r4
 8000ba2:	2104      	movs	r1, #4
 8000ba4:	f7ff fbf4 	bl	8000390 <lwiperf_tcp_close>
            pbuf_free(p);
 8000ba8:	4628      	mov	r0, r5
 8000baa:	f009 fa67 	bl	800a07c <pbuf_free>
            return ERR_OK;
 8000bae:	e7a9      	b.n	8000b04 <lwiperf_tcp_recv+0x110>
 8000bb0:	08011eec 	.word	0x08011eec
 8000bb4:	08011fec 	.word	0x08011fec
 8000bb8:	08011f14 	.word	0x08011f14
 8000bbc:	01000080 	.word	0x01000080
 8000bc0:	08012024 	.word	0x08012024
 8000bc4:	08012040 	.word	0x08012040

08000bc8 <lwiperf_start_tcp_server_default>:
{
 8000bc8:	b530      	push	{r4, r5, lr}
 8000bca:	b085      	sub	sp, #20
  lwiperf_state_tcp_t *state = NULL;
 8000bcc:	2400      	movs	r4, #0
{
 8000bce:	4602      	mov	r2, r0
 8000bd0:	460b      	mov	r3, r1
  err = lwiperf_start_tcp_server_impl(local_addr, local_port, report_fn, report_arg,
 8000bd2:	ad03      	add	r5, sp, #12
 8000bd4:	f241 3189 	movw	r1, #5001	@ 0x1389
 8000bd8:	4806      	ldr	r0, [pc, #24]	@ (8000bf4 <lwiperf_start_tcp_server_default+0x2c>)
  lwiperf_state_tcp_t *state = NULL;
 8000bda:	9403      	str	r4, [sp, #12]
  err = lwiperf_start_tcp_server_impl(local_addr, local_port, report_fn, report_arg,
 8000bdc:	e9cd 4500 	strd	r4, r5, [sp]
 8000be0:	f7ff fdfe 	bl	80007e0 <lwiperf_start_tcp_server_impl.constprop.0>
  if (err == ERR_OK) {
 8000be4:	b910      	cbnz	r0, 8000bec <lwiperf_start_tcp_server_default+0x24>
    return state;
 8000be6:	9803      	ldr	r0, [sp, #12]
}
 8000be8:	b005      	add	sp, #20
 8000bea:	bd30      	pop	{r4, r5, pc}
  return NULL;
 8000bec:	4620      	mov	r0, r4
}
 8000bee:	b005      	add	sp, #20
 8000bf0:	bd30      	pop	{r4, r5, pc}
 8000bf2:	bf00      	nop
 8000bf4:	08014898 	.word	0x08014898

08000bf8 <lwiperf_start_tcp_client>:
 * @returns a connection handle that can be used to abort the client
 *          by calling @ref lwiperf_abort()
 */
void* lwiperf_start_tcp_client(const ip_addr_t* remote_addr, u16_t remote_port,
  enum lwiperf_client_type type, lwiperf_report_fn report_fn, void* report_arg)
{
 8000bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
  err_t ret;
  lwiperf_settings_t settings;
  lwiperf_state_tcp_t *state = NULL;

  memset(&settings, 0, sizeof(settings));
  switch (type) {
 8000bfa:	2a01      	cmp	r2, #1
  lwiperf_state_tcp_t *state = NULL;
 8000bfc:	f04f 0400 	mov.w	r4, #0
{
 8000c00:	b08d      	sub	sp, #52	@ 0x34
 8000c02:	4615      	mov	r5, r2
 8000c04:	4607      	mov	r7, r0
 8000c06:	460e      	mov	r6, r1
  lwiperf_state_tcp_t *state = NULL;
 8000c08:	9404      	str	r4, [sp, #16]
  memset(&settings, 0, sizeof(settings));
 8000c0a:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8000c0e:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8000c12:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
{
 8000c16:	461c      	mov	r4, r3
  switch (type) {
 8000c18:	d045      	beq.n	8000ca6 <lwiperf_start_tcp_client+0xae>
 8000c1a:	2a02      	cmp	r2, #2
 8000c1c:	d004      	beq.n	8000c28 <lwiperf_start_tcp_client+0x30>
 8000c1e:	b142      	cbz	r2, 8000c32 <lwiperf_start_tcp_client+0x3a>
    /* Do a bidirectional test individually */
    settings.flags = htonl(LWIPERF_FLAGS_ANSWER_TEST);
    break;
  default:
    /* invalid argument */
    return NULL;
 8000c20:	2600      	movs	r6, #0
      }
    }
    return state;
  }
  return NULL;
}
 8000c22:	4630      	mov	r0, r6
 8000c24:	b00d      	add	sp, #52	@ 0x34
 8000c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    settings.flags = htonl(LWIPERF_FLAGS_ANSWER_TEST);
 8000c28:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8000c2c:	f008 fb56 	bl	80092dc <lwip_htonl>
 8000c30:	9006      	str	r0, [sp, #24]
  settings.num_threads = htonl(1);
 8000c32:	2001      	movs	r0, #1
 8000c34:	f008 fb52 	bl	80092dc <lwip_htonl>
 8000c38:	9007      	str	r0, [sp, #28]
  settings.remote_port = htonl(LWIPERF_TCP_PORT_DEFAULT);
 8000c3a:	f241 3089 	movw	r0, #5001	@ 0x1389
 8000c3e:	f008 fb4d 	bl	80092dc <lwip_htonl>
 8000c42:	9008      	str	r0, [sp, #32]
  settings.amount = htonl((u32_t)-1000);
 8000c44:	4832      	ldr	r0, [pc, #200]	@ (8000d10 <lwiperf_start_tcp_client+0x118>)
 8000c46:	f008 fb49 	bl	80092dc <lwip_htonl>
  ret = lwiperf_tx_start_impl(remote_addr, remote_port, &settings, report_fn, report_arg, NULL, &state);
 8000c4a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
  settings.amount = htonl((u32_t)-1000);
 8000c4c:	900b      	str	r0, [sp, #44]	@ 0x2c
  ret = lwiperf_tx_start_impl(remote_addr, remote_port, &settings, report_fn, report_arg, NULL, &state);
 8000c4e:	aa06      	add	r2, sp, #24
 8000c50:	9300      	str	r3, [sp, #0]
 8000c52:	ab04      	add	r3, sp, #16
 8000c54:	4631      	mov	r1, r6
 8000c56:	4638      	mov	r0, r7
 8000c58:	9302      	str	r3, [sp, #8]
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	9301      	str	r3, [sp, #4]
 8000c5e:	4623      	mov	r3, r4
 8000c60:	f7ff fe0e 	bl	8000880 <lwiperf_tx_start_impl.constprop.0>
  if (ret == ERR_OK) {
 8000c64:	2800      	cmp	r0, #0
 8000c66:	d1db      	bne.n	8000c20 <lwiperf_start_tcp_client+0x28>
    LWIP_ASSERT("state != NULL", state != NULL);
 8000c68:	9e04      	ldr	r6, [sp, #16]
 8000c6a:	b30e      	cbz	r6, 8000cb0 <lwiperf_start_tcp_client+0xb8>
    if (type != LWIPERF_CLIENT) {
 8000c6c:	2d00      	cmp	r5, #0
 8000c6e:	d0d8      	beq.n	8000c22 <lwiperf_start_tcp_client+0x2a>
      ret = lwiperf_start_tcp_server_impl(&state->conn_pcb->local_ip, LWIPERF_TCP_PORT_DEFAULT,
 8000c70:	ab05      	add	r3, sp, #20
      lwiperf_state_tcp_t *server = NULL;
 8000c72:	2700      	movs	r7, #0
      ret = lwiperf_start_tcp_server_impl(&state->conn_pcb->local_ip, LWIPERF_TCP_PORT_DEFAULT,
 8000c74:	6930      	ldr	r0, [r6, #16]
 8000c76:	4622      	mov	r2, r4
 8000c78:	9301      	str	r3, [sp, #4]
 8000c7a:	f241 3189 	movw	r1, #5001	@ 0x1389
 8000c7e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8000c80:	9600      	str	r6, [sp, #0]
      lwiperf_state_tcp_t *server = NULL;
 8000c82:	9705      	str	r7, [sp, #20]
      ret = lwiperf_start_tcp_server_impl(&state->conn_pcb->local_ip, LWIPERF_TCP_PORT_DEFAULT,
 8000c84:	f7ff fdac 	bl	80007e0 <lwiperf_start_tcp_server_impl.constprop.0>
      if (ret != ERR_OK) {
 8000c88:	b9e0      	cbnz	r0, 8000cc4 <lwiperf_start_tcp_client+0xcc>
      server->specific_remote = 1;
 8000c8a:	9b05      	ldr	r3, [sp, #20]
 8000c8c:	2201      	movs	r2, #1
      if (type == LWIPERF_TRADEOFF) {
 8000c8e:	2d02      	cmp	r5, #2
}
 8000c90:	4630      	mov	r0, r6
      server->specific_remote = 1;
 8000c92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      server->remote_addr = state->conn_pcb->remote_ip;
 8000c96:	6931      	ldr	r1, [r6, #16]
 8000c98:	6849      	ldr	r1, [r1, #4]
        server->client_tradeoff_mode = 1;
 8000c9a:	bf08      	it	eq
 8000c9c:	f883 2022 	strbeq.w	r2, [r3, #34]	@ 0x22
      server->remote_addr = state->conn_pcb->remote_ip;
 8000ca0:	6459      	str	r1, [r3, #68]	@ 0x44
}
 8000ca2:	b00d      	add	sp, #52	@ 0x34
 8000ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    settings.flags = htonl(LWIPERF_FLAGS_ANSWER_TEST | LWIPERF_FLAGS_ANSWER_NOW);
 8000ca6:	481b      	ldr	r0, [pc, #108]	@ (8000d14 <lwiperf_start_tcp_client+0x11c>)
 8000ca8:	f008 fb18 	bl	80092dc <lwip_htonl>
 8000cac:	9006      	str	r0, [sp, #24]
    break;
 8000cae:	e7c0      	b.n	8000c32 <lwiperf_start_tcp_client+0x3a>
    LWIP_ASSERT("state != NULL", state != NULL);
 8000cb0:	4b19      	ldr	r3, [pc, #100]	@ (8000d18 <lwiperf_start_tcp_client+0x120>)
 8000cb2:	f240 3216 	movw	r2, #790	@ 0x316
 8000cb6:	4919      	ldr	r1, [pc, #100]	@ (8000d1c <lwiperf_start_tcp_client+0x124>)
 8000cb8:	4819      	ldr	r0, [pc, #100]	@ (8000d20 <lwiperf_start_tcp_client+0x128>)
 8000cba:	f00f ffcf 	bl	8010c5c <iprintf>
    if (type != LWIPERF_CLIENT) {
 8000cbe:	2d00      	cmp	r5, #0
 8000cc0:	d0af      	beq.n	8000c22 <lwiperf_start_tcp_client+0x2a>
 8000cc2:	e7d5      	b.n	8000c70 <lwiperf_start_tcp_client+0x78>
void
lwiperf_abort(void *lwiperf_session)
{
  lwiperf_state_base_t *i, *dealloc, *last = NULL;

  LWIP_ASSERT_CORE_LOCKED();
 8000cc4:	f005 fe3c 	bl	8006940 <sys_check_core_locking>

  for (i = lwiperf_all_connections; i != NULL; ) {
 8000cc8:	4b16      	ldr	r3, [pc, #88]	@ (8000d24 <lwiperf_start_tcp_client+0x12c>)
 8000cca:	681d      	ldr	r5, [r3, #0]
 8000ccc:	2d00      	cmp	r5, #0
 8000cce:	d0a7      	beq.n	8000c20 <lwiperf_start_tcp_client+0x28>
    if ((i == lwiperf_session) || (i->related_master_state == lwiperf_session)) {
 8000cd0:	42ae      	cmp	r6, r5
        last->next = i;
      }
      LWIPERF_FREE(lwiperf_state_tcp_t, dealloc); /* @todo: type? */
    } else {
      last = i;
      i = i->next;
 8000cd2:	682c      	ldr	r4, [r5, #0]
    if ((i == lwiperf_session) || (i->related_master_state == lwiperf_session)) {
 8000cd4:	d00d      	beq.n	8000cf2 <lwiperf_start_tcp_client+0xfa>
 8000cd6:	68ab      	ldr	r3, [r5, #8]
 8000cd8:	429e      	cmp	r6, r3
 8000cda:	d00a      	beq.n	8000cf2 <lwiperf_start_tcp_client+0xfa>
 8000cdc:	462f      	mov	r7, r5
  for (i = lwiperf_all_connections; i != NULL; ) {
 8000cde:	2c00      	cmp	r4, #0
 8000ce0:	d09e      	beq.n	8000c20 <lwiperf_start_tcp_client+0x28>
    if ((i == lwiperf_session) || (i->related_master_state == lwiperf_session)) {
 8000ce2:	42a6      	cmp	r6, r4
      i = i->next;
 8000ce4:	6823      	ldr	r3, [r4, #0]
    if ((i == lwiperf_session) || (i->related_master_state == lwiperf_session)) {
 8000ce6:	4625      	mov	r5, r4
 8000ce8:	d00f      	beq.n	8000d0a <lwiperf_start_tcp_client+0x112>
      i = i->next;
 8000cea:	461c      	mov	r4, r3
    if ((i == lwiperf_session) || (i->related_master_state == lwiperf_session)) {
 8000cec:	68ab      	ldr	r3, [r5, #8]
 8000cee:	429e      	cmp	r6, r3
 8000cf0:	d1f4      	bne.n	8000cdc <lwiperf_start_tcp_client+0xe4>
      if (last != NULL) {
 8000cf2:	b13f      	cbz	r7, 8000d04 <lwiperf_start_tcp_client+0x10c>
        last->next = i;
 8000cf4:	4628      	mov	r0, r5
 8000cf6:	4625      	mov	r5, r4
 8000cf8:	603c      	str	r4, [r7, #0]
      LWIPERF_FREE(lwiperf_state_tcp_t, dealloc); /* @todo: type? */
 8000cfa:	f008 fba9 	bl	8009450 <mem_free>
  for (i = lwiperf_all_connections; i != NULL; ) {
 8000cfe:	2c00      	cmp	r4, #0
 8000d00:	d1e6      	bne.n	8000cd0 <lwiperf_start_tcp_client+0xd8>
 8000d02:	e78d      	b.n	8000c20 <lwiperf_start_tcp_client+0x28>
 8000d04:	4628      	mov	r0, r5
 8000d06:	4625      	mov	r5, r4
 8000d08:	e7f7      	b.n	8000cfa <lwiperf_start_tcp_client+0x102>
    if ((i == lwiperf_session) || (i->related_master_state == lwiperf_session)) {
 8000d0a:	4635      	mov	r5, r6
      i = i->next;
 8000d0c:	461c      	mov	r4, r3
 8000d0e:	e7f1      	b.n	8000cf4 <lwiperf_start_tcp_client+0xfc>
 8000d10:	fffffc18 	.word	0xfffffc18
 8000d14:	80000001 	.word	0x80000001
 8000d18:	08011eec 	.word	0x08011eec
 8000d1c:	08012050 	.word	0x08012050
 8000d20:	08011f14 	.word	0x08011f14
 8000d24:	240000ac 	.word	0x240000ac

08000d28 <lwiperf_start_tcp_client_default>:
{
 8000d28:	b510      	push	{r4, lr}
 8000d2a:	4614      	mov	r4, r2
 8000d2c:	b082      	sub	sp, #8
 8000d2e:	460b      	mov	r3, r1
  return lwiperf_start_tcp_client(remote_addr, LWIPERF_TCP_PORT_DEFAULT, LWIPERF_CLIENT,
 8000d30:	2200      	movs	r2, #0
 8000d32:	f241 3189 	movw	r1, #5001	@ 0x1389
 8000d36:	9400      	str	r4, [sp, #0]
 8000d38:	f7ff ff5e 	bl	8000bf8 <lwiperf_start_tcp_client>
}
 8000d3c:	b002      	add	sp, #8
 8000d3e:	bd10      	pop	{r4, pc}

08000d40 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d40:	b500      	push	{lr}
 8000d42:	b083      	sub	sp, #12
    /* Infinite loop */
    for(;;)
    {


      osDelay(100000);
 8000d44:	4c0b      	ldr	r4, [pc, #44]	@ (8000d74 <StartDefaultTask+0x34>)
  MX_LWIP_Init();
 8000d46:	f005 fa3b 	bl	80061c0 <MX_LWIP_Init>
    udp_echoserver_init();
 8000d4a:	f000 fc7b 	bl	8001644 <udp_echoserver_init>
    LOCK_TCPIP_CORE();
 8000d4e:	f005 fd6f 	bl	8006830 <sys_lock_tcpip_core>
    lwiperf_start_tcp_server_default(NULL, NULL);
 8000d52:	2100      	movs	r1, #0
 8000d54:	4608      	mov	r0, r1
 8000d56:	f7ff ff37 	bl	8000bc8 <lwiperf_start_tcp_server_default>
    lwiperf_start_tcp_client_default(&remote_addr, NULL, NULL);
 8000d5a:	2200      	movs	r2, #0
    IP4_ADDR(&remote_addr, 192, 168, 1, 10);
 8000d5c:	4b06      	ldr	r3, [pc, #24]	@ (8000d78 <StartDefaultTask+0x38>)
    lwiperf_start_tcp_client_default(&remote_addr, NULL, NULL);
 8000d5e:	a801      	add	r0, sp, #4
 8000d60:	4611      	mov	r1, r2
    IP4_ADDR(&remote_addr, 192, 168, 1, 10);
 8000d62:	9301      	str	r3, [sp, #4]
    lwiperf_start_tcp_client_default(&remote_addr, NULL, NULL);
 8000d64:	f7ff ffe0 	bl	8000d28 <lwiperf_start_tcp_client_default>
    UNLOCK_TCPIP_CORE();
 8000d68:	f005 fde0 	bl	800692c <sys_unlock_tcpip_core>
      osDelay(100000);
 8000d6c:	4620      	mov	r0, r4
 8000d6e:	f005 fea5 	bl	8006abc <osDelay>
    for(;;)
 8000d72:	e7fb      	b.n	8000d6c <StartDefaultTask+0x2c>
 8000d74:	000186a0 	.word	0x000186a0
 8000d78:	0a01a8c0 	.word	0x0a01a8c0

08000d7c <SystemClock_Config>:
{
 8000d7c:	b530      	push	{r4, r5, lr}
 8000d7e:	b0a1      	sub	sp, #132	@ 0x84
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d80:	224c      	movs	r2, #76	@ 0x4c
 8000d82:	2100      	movs	r1, #0
 8000d84:	a80c      	add	r0, sp, #48	@ 0x30
 8000d86:	f010 f81c 	bl	8010dc2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d8a:	2220      	movs	r2, #32
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	a804      	add	r0, sp, #16
 8000d90:	f010 f817 	bl	8010dc2 <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d94:	2002      	movs	r0, #2
 8000d96:	f002 fdff 	bl	8003998 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d9a:	4b37      	ldr	r3, [pc, #220]	@ (8000e78 <SystemClock_Config+0xfc>)
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4a37      	ldr	r2, [pc, #220]	@ (8000e7c <SystemClock_Config+0x100>)
 8000da0:	9101      	str	r1, [sp, #4]
 8000da2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000da4:	f021 0101 	bic.w	r1, r1, #1
 8000da8:	62d9      	str	r1, [r3, #44]	@ 0x2c
 8000daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dac:	f003 0301 	and.w	r3, r3, #1
 8000db0:	9301      	str	r3, [sp, #4]
 8000db2:	6993      	ldr	r3, [r2, #24]
 8000db4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000db8:	6193      	str	r3, [r2, #24]
 8000dba:	6993      	ldr	r3, [r2, #24]
 8000dbc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000dc0:	9301      	str	r3, [sp, #4]
 8000dc2:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000dc4:	6993      	ldr	r3, [r2, #24]
 8000dc6:	0499      	lsls	r1, r3, #18
 8000dc8:	d5fc      	bpl.n	8000dc4 <SystemClock_Config+0x48>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dca:	4b2d      	ldr	r3, [pc, #180]	@ (8000e80 <SystemClock_Config+0x104>)
 8000dcc:	f8d3 10f4 	ldr.w	r1, [r3, #244]	@ 0xf4
 8000dd0:	f041 0102 	orr.w	r1, r1, #2
 8000dd4:	f8c3 10f4 	str.w	r1, [r3, #244]	@ 0xf4
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000dd8:	2100      	movs	r1, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000dde:	f003 0302 	and.w	r3, r3, #2
 8000de2:	9302      	str	r3, [sp, #8]
 8000de4:	9b02      	ldr	r3, [sp, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000de6:	9103      	str	r1, [sp, #12]
 8000de8:	6991      	ldr	r1, [r2, #24]
 8000dea:	4b23      	ldr	r3, [pc, #140]	@ (8000e78 <SystemClock_Config+0xfc>)
 8000dec:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8000df0:	6191      	str	r1, [r2, #24]
 8000df2:	6992      	ldr	r2, [r2, #24]
 8000df4:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8000df8:	9203      	str	r2, [sp, #12]
 8000dfa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000dfc:	4a1f      	ldr	r2, [pc, #124]	@ (8000e7c <SystemClock_Config+0x100>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000dfe:	f041 0101 	orr.w	r1, r1, #1
 8000e02:	62d9      	str	r1, [r3, #44]	@ 0x2c
 8000e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	9303      	str	r3, [sp, #12]
 8000e0c:	9b03      	ldr	r3, [sp, #12]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e0e:	6993      	ldr	r3, [r2, #24]
 8000e10:	049b      	lsls	r3, r3, #18
 8000e12:	d5fc      	bpl.n	8000e0e <SystemClock_Config+0x92>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e14:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e16:	2200      	movs	r2, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000e18:	2101      	movs	r1, #1
 8000e1a:	2440      	movs	r4, #64	@ 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e1c:	930c      	str	r3, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000e1e:	2504      	movs	r5, #4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e20:	9315      	str	r3, [sp, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e22:	a80c      	add	r0, sp, #48	@ 0x30
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e24:	9319      	str	r3, [sp, #100]	@ 0x64
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000e26:	910f      	str	r1, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e28:	9216      	str	r2, [sp, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000e2a:	9410      	str	r4, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e2c:	e9cd 331a 	strd	r3, r3, [sp, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000e30:	230c      	movs	r3, #12
 8000e32:	931c      	str	r3, [sp, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000e34:	233c      	movs	r3, #60	@ 0x3c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e36:	e9cd 221d 	strd	r2, r2, [sp, #116]	@ 0x74
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000e3a:	e9cd 5317 	strd	r5, r3, [sp, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e3e:	f002 fe41 	bl	8003ac4 <HAL_RCC_OscConfig>
 8000e42:	4603      	mov	r3, r0
 8000e44:	b108      	cbz	r0, 8000e4a <SystemClock_Config+0xce>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e46:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <SystemClock_Config+0xcc>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e4a:	223f      	movs	r2, #63	@ 0x3f
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e4c:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000e4e:	2308      	movs	r3, #8
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e50:	4629      	mov	r1, r5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e52:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e54:	2203      	movs	r2, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e56:	a804      	add	r0, sp, #16
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e58:	940b      	str	r4, [sp, #44]	@ 0x2c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e5a:	9205      	str	r2, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000e5c:	e9cd 3407 	strd	r3, r4, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e64:	e9cd 4309 	strd	r4, r3, [sp, #36]	@ 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e68:	f003 f940 	bl	80040ec <HAL_RCC_ClockConfig>
 8000e6c:	b108      	cbz	r0, 8000e72 <SystemClock_Config+0xf6>
 8000e6e:	b672      	cpsid	i
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <SystemClock_Config+0xf4>
}
 8000e72:	b021      	add	sp, #132	@ 0x84
 8000e74:	bd30      	pop	{r4, r5, pc}
 8000e76:	bf00      	nop
 8000e78:	58000400 	.word	0x58000400
 8000e7c:	58024800 	.word	0x58024800
 8000e80:	58024400 	.word	0x58024400

08000e84 <main>:
{
 8000e84:	b580      	push	{r7, lr}
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000e86:	2400      	movs	r4, #0
{
 8000e88:	b092      	sub	sp, #72	@ 0x48
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000e8a:	2501      	movs	r5, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000e8c:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8000e90:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
  HAL_MPU_Disable();
 8000e94:	f001 fc2e 	bl	80026f4 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000e98:	f248 721f 	movw	r2, #34591	@ 0x871f
 8000e9c:	f240 1301 	movw	r3, #257	@ 0x101
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ea0:	a80b      	add	r0, sp, #44	@ 0x2c
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ea2:	f8ad 502c 	strh.w	r5, [sp, #44]	@ 0x2c
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000ea6:	930e      	str	r3, [sp, #56]	@ 0x38
 8000ea8:	e9cd 420c 	strd	r4, r2, [sp, #48]	@ 0x30
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000eac:	f001 fc40 	bl	8002730 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x30020000;
 8000eb0:	4ab6      	ldr	r2, [pc, #728]	@ (800118c <main+0x308>)
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8000eb2:	4bb7      	ldr	r3, [pc, #732]	@ (8001190 <main+0x30c>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000eb4:	a80b      	add	r0, sp, #44	@ 0x2c
  MPU_InitStruct.BaseAddress = 0x30020000;
 8000eb6:	920c      	str	r2, [sp, #48]	@ 0x30
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8000eb8:	930d      	str	r3, [sp, #52]	@ 0x34
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000eba:	f88d 502d 	strb.w	r5, [sp, #45]	@ 0x2d
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000ebe:	f88d 4039 	strb.w	r4, [sp, #57]	@ 0x39
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ec2:	f001 fc35 	bl	8002730 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000ec6:	4bb3      	ldr	r3, [pc, #716]	@ (8001194 <main+0x310>)
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000ec8:	2202      	movs	r2, #2
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000eca:	a80b      	add	r0, sp, #44	@ 0x2c
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000ecc:	f88d 4036 	strb.w	r4, [sp, #54]	@ 0x36
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000ed0:	930c      	str	r3, [sp, #48]	@ 0x30
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 8000ed2:	2308      	movs	r3, #8
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000ed4:	f88d 202d 	strb.w	r2, [sp, #45]	@ 0x2d
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 8000ed8:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000edc:	f88d 5039 	strb.w	r5, [sp, #57]	@ 0x39
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000ee0:	f88d 503b 	strb.w	r5, [sp, #59]	@ 0x3b
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ee4:	f001 fc24 	bl	8002730 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ee8:	2004      	movs	r0, #4
 8000eea:	f001 fc11 	bl	8002710 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000eee:	4aaa      	ldr	r2, [pc, #680]	@ (8001198 <main+0x314>)
 8000ef0:	6953      	ldr	r3, [r2, #20]
 8000ef2:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 8000ef6:	d111      	bne.n	8000f1c <main+0x98>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ef8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000efc:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f00:	f8c2 3250 	str.w	r3, [r2, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f04:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f08:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000f0c:	6953      	ldr	r3, [r2, #20]
 8000f0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f12:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f18:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000f1c:	489e      	ldr	r0, [pc, #632]	@ (8001198 <main+0x314>)
 8000f1e:	6943      	ldr	r3, [r0, #20]
 8000f20:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 8000f24:	d124      	bne.n	8000f70 <main+0xec>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000f26:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000f2a:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000f2e:	f8d0 5080 	ldr.w	r5, [r0, #128]	@ 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f32:	f643 76e0 	movw	r6, #16352	@ 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000f36:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000f3a:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 8000f3e:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f40:	ea04 0106 	and.w	r1, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000f44:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f46:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000f4a:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f4c:	f8c0 2260 	str.w	r2, [r0, #608]	@ 0x260
      } while (ways-- != 0U);
 8000f50:	1c5a      	adds	r2, r3, #1
 8000f52:	d1f8      	bne.n	8000f46 <main+0xc2>
    } while(sets-- != 0U);
 8000f54:	3c20      	subs	r4, #32
 8000f56:	f114 0f20 	cmn.w	r4, #32
 8000f5a:	d1f1      	bne.n	8000f40 <main+0xbc>
 8000f5c:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000f60:	6943      	ldr	r3, [r0, #20]
 8000f62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f66:	6143      	str	r3, [r0, #20]
 8000f68:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f6c:	f3bf 8f6f 	isb	sy
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f70:	2400      	movs	r4, #0
  HAL_Init();
 8000f72:	f000 fd11 	bl	8001998 <HAL_Init>
  SystemClock_Config();
 8000f76:	f7ff ff01 	bl	8000d7c <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f7a:	4b88      	ldr	r3, [pc, #544]	@ (800119c <main+0x318>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7c:	940f      	str	r4, [sp, #60]	@ 0x3c
  HAL_GPIO_WritePin(GPIOC, led1_Pin|led2_Pin, GPIO_PIN_RESET);
 8000f7e:	4622      	mov	r2, r4
 8000f80:	2109      	movs	r1, #9
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f82:	2601      	movs	r6, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f84:	2502      	movs	r5, #2
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000f86:	2780      	movs	r7, #128	@ 0x80
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f88:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8000f8c:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f90:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 8000f94:	f040 0004 	orr.w	r0, r0, #4
 8000f98:	f8c3 00e0 	str.w	r0, [r3, #224]	@ 0xe0
 8000f9c:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 8000fa0:	f000 0004 	and.w	r0, r0, #4
 8000fa4:	9001      	str	r0, [sp, #4]
 8000fa6:	9801      	ldr	r0, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fa8:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 8000fac:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 8000fb0:	f8c3 00e0 	str.w	r0, [r3, #224]	@ 0xe0
 8000fb4:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 8000fb8:	f000 0080 	and.w	r0, r0, #128	@ 0x80
 8000fbc:	9002      	str	r0, [sp, #8]
 8000fbe:	9802      	ldr	r0, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc0:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 8000fc4:	f040 0001 	orr.w	r0, r0, #1
 8000fc8:	f8c3 00e0 	str.w	r0, [r3, #224]	@ 0xe0
 8000fcc:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 8000fd0:	f000 0001 	and.w	r0, r0, #1
 8000fd4:	9003      	str	r0, [sp, #12]
 8000fd6:	9803      	ldr	r0, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd8:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 8000fdc:	f040 0002 	orr.w	r0, r0, #2
 8000fe0:	f8c3 00e0 	str.w	r0, [r3, #224]	@ 0xe0
 8000fe4:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 8000fe8:	f000 0002 	and.w	r0, r0, #2
 8000fec:	9004      	str	r0, [sp, #16]
 8000fee:	9804      	ldr	r0, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ff0:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 8000ff4:	f040 0008 	orr.w	r0, r0, #8
 8000ff8:	f8c3 00e0 	str.w	r0, [r3, #224]	@ 0xe0
 8000ffc:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 8001000:	f000 0008 	and.w	r0, r0, #8
 8001004:	9005      	str	r0, [sp, #20]
 8001006:	9805      	ldr	r0, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001008:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 800100c:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 8001010:	f8c3 00e0 	str.w	r0, [r3, #224]	@ 0xe0
 8001014:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 8001018:	f000 0040 	and.w	r0, r0, #64	@ 0x40
 800101c:	9006      	str	r0, [sp, #24]
 800101e:	9806      	ldr	r0, [sp, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001020:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 8001024:	f040 0010 	orr.w	r0, r0, #16
 8001028:	f8c3 00e0 	str.w	r0, [r3, #224]	@ 0xe0
 800102c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
  HAL_GPIO_WritePin(GPIOC, led1_Pin|led2_Pin, GPIO_PIN_RESET);
 8001030:	485b      	ldr	r0, [pc, #364]	@ (80011a0 <main+0x31c>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001032:	f003 0310 	and.w	r3, r3, #16
 8001036:	9307      	str	r3, [sp, #28]
 8001038:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOC, led1_Pin|led2_Pin, GPIO_PIN_RESET);
 800103a:	f002 fc9f 	bl	800397c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|led3_Pin|LD3_Pin, GPIO_PIN_RESET);
 800103e:	4622      	mov	r2, r4
 8001040:	f244 0103 	movw	r1, #16387	@ 0x4003
 8001044:	4857      	ldr	r0, [pc, #348]	@ (80011a4 <main+0x320>)
 8001046:	f002 fc99 	bl	800397c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800104a:	4622      	mov	r2, r4
 800104c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001050:	4855      	ldr	r0, [pc, #340]	@ (80011a8 <main+0x324>)
 8001052:	f002 fc93 	bl	800397c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001056:	4622      	mov	r2, r4
 8001058:	2102      	movs	r1, #2
 800105a:	4854      	ldr	r0, [pc, #336]	@ (80011ac <main+0x328>)
 800105c:	f002 fc8e 	bl	800397c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8001060:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001064:	a90b      	add	r1, sp, #44	@ 0x2c
 8001066:	484e      	ldr	r0, [pc, #312]	@ (80011a0 <main+0x31c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	940d      	str	r4, [sp, #52]	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800106a:	e9cd 340b 	strd	r3, r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800106e:	f002 fb43 	bl	80036f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = led1_Pin|led2_Pin;
 8001072:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001074:	a90b      	add	r1, sp, #44	@ 0x2c
 8001076:	484a      	ldr	r0, [pc, #296]	@ (80011a0 <main+0x31c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	940d      	str	r4, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107a:	940e      	str	r4, [sp, #56]	@ 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107c:	e9cd 360b 	strd	r3, r6, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001080:	f002 fb3a 	bl	80036f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|led3_Pin|LD3_Pin;
 8001084:	f244 0303 	movw	r3, #16387	@ 0x4003
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001088:	a90b      	add	r1, sp, #44	@ 0x2c
 800108a:	4846      	ldr	r0, [pc, #280]	@ (80011a4 <main+0x320>)
  GPIO_InitStruct.Pin = LD1_Pin|led3_Pin|LD3_Pin;
 800108c:	e9cd 360b 	strd	r3, r6, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001090:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001094:	f002 fb30 	bl	80036f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001098:	f44f 7340 	mov.w	r3, #768	@ 0x300
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800109c:	a90b      	add	r1, sp, #44	@ 0x2c
 800109e:	4842      	ldr	r0, [pc, #264]	@ (80011a8 <main+0x324>)
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80010a0:	930b      	str	r3, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010a2:	2307      	movs	r3, #7
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a4:	940e      	str	r4, [sp, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010a6:	930f      	str	r3, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a8:	e9cd 540c 	strd	r5, r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ac:	f002 fb24 	bl	80036f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80010b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80010b4:	a90b      	add	r1, sp, #44	@ 0x2c
 80010b6:	483c      	ldr	r0, [pc, #240]	@ (80011a8 <main+0x324>)
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80010b8:	930b      	str	r3, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ba:	940e      	str	r4, [sp, #56]	@ 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	e9cd 640c 	strd	r6, r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80010c0:	f002 fb1a 	bl	80036f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010c4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80010c8:	a90b      	add	r1, sp, #44	@ 0x2c
 80010ca:	4839      	ldr	r0, [pc, #228]	@ (80011b0 <main+0x32c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	940d      	str	r4, [sp, #52]	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010ce:	930c      	str	r3, [sp, #48]	@ 0x30
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 80010d0:	970b      	str	r7, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80010d2:	f002 fb11 	bl	80036f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80010d6:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010da:	a90b      	add	r1, sp, #44	@ 0x2c
 80010dc:	4835      	ldr	r0, [pc, #212]	@ (80011b4 <main+0x330>)
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80010de:	930b      	str	r3, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80010e0:	230a      	movs	r3, #10
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e2:	940e      	str	r4, [sp, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80010e4:	930f      	str	r3, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	e9cd 540c 	strd	r5, r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ea:	f002 fb05 	bl	80036f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 80010ee:	950b      	str	r5, [sp, #44]	@ 0x2c
  hadc1.Instance = ADC1;
 80010f0:	4d31      	ldr	r5, [pc, #196]	@ (80011b8 <main+0x334>)
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010f2:	a90b      	add	r1, sp, #44	@ 0x2c
 80010f4:	482d      	ldr	r0, [pc, #180]	@ (80011ac <main+0x328>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f6:	940e      	str	r4, [sp, #56]	@ 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	e9cd 640c 	strd	r6, r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010fc:	f002 fafc 	bl	80036f8 <HAL_GPIO_Init>
  hadc1.Instance = ADC1;
 8001100:	4b2e      	ldr	r3, [pc, #184]	@ (80011bc <main+0x338>)
  ADC_MultiModeTypeDef multimode = {0};
 8001102:	9408      	str	r4, [sp, #32]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001104:	4628      	mov	r0, r5
  ADC_ChannelConfTypeDef sConfig = {0};
 8001106:	9411      	str	r4, [sp, #68]	@ 0x44
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001108:	60ec      	str	r4, [r5, #12]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800110a:	82ac      	strh	r4, [r5, #20]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800110c:	772c      	strb	r4, [r5, #28]
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800110e:	636c      	str	r4, [r5, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001110:	f885 4038 	strb.w	r4, [r5, #56]	@ 0x38
  hadc1.Init.NbrOfConversion = 1;
 8001114:	61ae      	str	r6, [r5, #24]
  hadc1.Init.Oversampling.Ratio = 1;
 8001116:	63ee      	str	r6, [r5, #60]	@ 0x3c
  hadc1.Instance = ADC1;
 8001118:	602b      	str	r3, [r5, #0]
  ADC_ChannelConfTypeDef sConfig = {0};
 800111a:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 800111e:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
 8001122:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001126:	e9c5 4409 	strd	r4, r4, [r5, #36]	@ 0x24
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800112a:	e9c5 440b 	strd	r4, r4, [r5, #44]	@ 0x2c
  ADC_MultiModeTypeDef multimode = {0};
 800112e:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001132:	2404      	movs	r4, #4
 8001134:	612c      	str	r4, [r5, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001136:	f001 f913 	bl	8002360 <HAL_ADC_Init>
 800113a:	b108      	cbz	r0, 8001140 <main+0x2bc>
  __ASM volatile ("cpsid i" : : : "memory");
 800113c:	b672      	cpsid	i
  while (1)
 800113e:	e7fe      	b.n	800113e <main+0x2ba>
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001140:	e9c5 0001 	strd	r0, r0, [r5, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001144:	4628      	mov	r0, r5
 8001146:	f001 f90b 	bl	8002360 <HAL_ADC_Init>
 800114a:	b108      	cbz	r0, 8001150 <main+0x2cc>
 800114c:	b672      	cpsid	i
  while (1)
 800114e:	e7fe      	b.n	800114e <main+0x2ca>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001150:	9008      	str	r0, [sp, #32]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001152:	a908      	add	r1, sp, #32
 8001154:	4628      	mov	r0, r5
 8001156:	f001 fa0f 	bl	8002578 <HAL_ADCEx_MultiModeConfigChannel>
 800115a:	4603      	mov	r3, r0
 800115c:	b108      	cbz	r0, 8001162 <main+0x2de>
 800115e:	b672      	cpsid	i
  while (1)
 8001160:	e7fe      	b.n	8001160 <main+0x2dc>
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001162:	940f      	str	r4, [sp, #60]	@ 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001164:	4628      	mov	r0, r5
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001166:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001168:	a90b      	add	r1, sp, #44	@ 0x2c
  sConfig.Offset = 0;
 800116a:	9310      	str	r3, [sp, #64]	@ 0x40
  sConfig.OffsetSignedSaturation = DISABLE;
 800116c:	f88d 3045 	strb.w	r3, [sp, #69]	@ 0x45
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001170:	2306      	movs	r3, #6
 8001172:	4c13      	ldr	r4, [pc, #76]	@ (80011c0 <main+0x33c>)
 8001174:	e9cd 430b 	strd	r4, r3, [sp, #44]	@ 0x2c
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001178:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800117c:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800117e:	f000 fc73 	bl	8001a68 <HAL_ADC_ConfigChannel>
 8001182:	4603      	mov	r3, r0
 8001184:	b1f0      	cbz	r0, 80011c4 <main+0x340>
 8001186:	b672      	cpsid	i
  while (1)
 8001188:	e7fe      	b.n	8001188 <main+0x304>
 800118a:	bf00      	nop
 800118c:	30020000 	.word	0x30020000
 8001190:	03010010 	.word	0x03010010
 8001194:	30040000 	.word	0x30040000
 8001198:	e000ed00 	.word	0xe000ed00
 800119c:	58024400 	.word	0x58024400
 80011a0:	58020800 	.word	0x58020800
 80011a4:	58020400 	.word	0x58020400
 80011a8:	58020c00 	.word	0x58020c00
 80011ac:	58021000 	.word	0x58021000
 80011b0:	58021800 	.word	0x58021800
 80011b4:	58020000 	.word	0x58020000
 80011b8:	24000100 	.word	0x24000100
 80011bc:	40022000 	.word	0x40022000
 80011c0:	3ef08000 	.word	0x3ef08000
  htim3.Instance = TIM3;
 80011c4:	4c1c      	ldr	r4, [pc, #112]	@ (8001238 <main+0x3b4>)
  htim3.Init.Prescaler = 24000;
 80011c6:	4a1d      	ldr	r2, [pc, #116]	@ (800123c <main+0x3b8>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c8:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011ca:	4620      	mov	r0, r4
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011cc:	60a3      	str	r3, [r4, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ce:	6123      	str	r3, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011d0:	61a7      	str	r7, [r4, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011d2:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
 80011d6:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011da:	e9cd 3308 	strd	r3, r3, [sp, #32]
  htim3.Init.Prescaler = 24000;
 80011de:	f645 53c0 	movw	r3, #24000	@ 0x5dc0
 80011e2:	e9c4 2300 	strd	r2, r3, [r4]
  htim3.Init.Period = 1000;
 80011e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ea:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011ec:	f004 ff54 	bl	8006098 <HAL_TIM_Base_Init>
 80011f0:	b108      	cbz	r0, 80011f6 <main+0x372>
 80011f2:	b672      	cpsid	i
  while (1)
 80011f4:	e7fe      	b.n	80011f4 <main+0x370>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011fa:	a90b      	add	r1, sp, #44	@ 0x2c
 80011fc:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011fe:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001200:	f004 fd5c 	bl	8005cbc <HAL_TIM_ConfigClockSource>
 8001204:	4603      	mov	r3, r0
 8001206:	b108      	cbz	r0, 800120c <main+0x388>
 8001208:	b672      	cpsid	i
  while (1)
 800120a:	e7fe      	b.n	800120a <main+0x386>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800120c:	4620      	mov	r0, r4
 800120e:	a908      	add	r1, sp, #32
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001210:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001212:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001214:	f004 ff72 	bl	80060fc <HAL_TIMEx_MasterConfigSynchronization>
 8001218:	4604      	mov	r4, r0
 800121a:	b108      	cbz	r0, 8001220 <main+0x39c>
 800121c:	b672      	cpsid	i
  while (1)
 800121e:	e7fe      	b.n	800121e <main+0x39a>
  osKernelInitialize();
 8001220:	f005 fbd4 	bl	80069cc <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001224:	4a06      	ldr	r2, [pc, #24]	@ (8001240 <main+0x3bc>)
 8001226:	4621      	mov	r1, r4
 8001228:	4806      	ldr	r0, [pc, #24]	@ (8001244 <main+0x3c0>)
 800122a:	f005 fc03 	bl	8006a34 <osThreadNew>
 800122e:	4b06      	ldr	r3, [pc, #24]	@ (8001248 <main+0x3c4>)
 8001230:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8001232:	f005 fbdd 	bl	80069f0 <osKernelStart>
  while (1)
 8001236:	e7fe      	b.n	8001236 <main+0x3b2>
 8001238:	240000b4 	.word	0x240000b4
 800123c:	40000400 	.word	0x40000400
 8001240:	080126ac 	.word	0x080126ac
 8001244:	08000d41 	.word	0x08000d41
 8001248:	240000b0 	.word	0x240000b0

0800124c <Error_Handler>:
 800124c:	b672      	cpsid	i
  while (1)
 800124e:	e7fe      	b.n	800124e <Error_Handler+0x2>

08001250 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001250:	4b0f      	ldr	r3, [pc, #60]	@ (8001290 <HAL_MspInit+0x40>)

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	210f      	movs	r1, #15
 8001256:	f06f 0001 	mvn.w	r0, #1
{
 800125a:	b510      	push	{r4, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125c:	f8d3 40f4 	ldr.w	r4, [r3, #244]	@ 0xf4
{
 8001260:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001262:	f044 0402 	orr.w	r4, r4, #2
 8001266:	f8c3 40f4 	str.w	r4, [r3, #244]	@ 0xf4
 800126a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	9301      	str	r3, [sp, #4]
 8001274:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001276:	f001 f9f3 	bl	8002660 <HAL_NVIC_SetPriority>
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800127a:	4906      	ldr	r1, [pc, #24]	@ (8001294 <HAL_MspInit+0x44>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800127c:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
  reg_value  =  (reg_value                                   |
 8001280:	4b05      	ldr	r3, [pc, #20]	@ (8001298 <HAL_MspInit+0x48>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001282:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001284:	4002      	ands	r2, r0
  reg_value  =  (reg_value                                   |
 8001286:	4313      	orrs	r3, r2
  SCB->AIRCR =  reg_value;
 8001288:	60cb      	str	r3, [r1, #12]

  /* USER CODE BEGIN MspInit 1 */
  NVIC_SetPriorityGrouping(0);
  /* USER CODE END MspInit 1 */
}
 800128a:	b002      	add	sp, #8
 800128c:	bd10      	pop	{r4, pc}
 800128e:	bf00      	nop
 8001290:	58024400 	.word	0x58024400
 8001294:	e000ed00 	.word	0xe000ed00
 8001298:	05fa0000 	.word	0x05fa0000
 800129c:	00000000 	.word	0x00000000

080012a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012a0:	b510      	push	{r4, lr}
 80012a2:	b0b8      	sub	sp, #224	@ 0xe0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	2100      	movs	r1, #0
{
 80012a6:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012a8:	22c0      	movs	r2, #192	@ 0xc0
 80012aa:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ac:	9106      	str	r1, [sp, #24]
 80012ae:	e9cd 1102 	strd	r1, r1, [sp, #8]
 80012b2:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012b6:	f00f fd84 	bl	8010dc2 <memset>
  if(hadc->Instance==ADC1)
 80012ba:	4b25      	ldr	r3, [pc, #148]	@ (8001350 <HAL_ADC_MspInit+0xb0>)
 80012bc:	6822      	ldr	r2, [r4, #0]
 80012be:	429a      	cmp	r2, r3
 80012c0:	d001      	beq.n	80012c6 <HAL_ADC_MspInit+0x26>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80012c2:	b038      	add	sp, #224	@ 0xe0
 80012c4:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80012c6:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 80012c8:	2204      	movs	r2, #4
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 80012ca:	210a      	movs	r1, #10
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012cc:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80012ce:	930c      	str	r3, [sp, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 80012d0:	920a      	str	r2, [sp, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80012d2:	2202      	movs	r2, #2
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80012d4:	930d      	str	r3, [sp, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80012d6:	23c0      	movs	r3, #192	@ 0xc0
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 80012d8:	910b      	str	r1, [sp, #44]	@ 0x2c
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80012da:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8001340 <HAL_ADC_MspInit+0xa0>
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80012de:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80012e2:	2320      	movs	r3, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80012e4:	ed8d 7b08 	vstr	d7, [sp, #32]
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80012e8:	9310      	str	r3, [sp, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ea:	f003 f98b 	bl	8004604 <HAL_RCCEx_PeriphCLKConfig>
 80012ee:	bb20      	cbnz	r0, 800133a <HAL_ADC_MspInit+0x9a>
    __HAL_RCC_ADC12_CLK_ENABLE();
 80012f0:	4b18      	ldr	r3, [pc, #96]	@ (8001354 <HAL_ADC_MspInit+0xb4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f4:	a902      	add	r1, sp, #8
 80012f6:	4818      	ldr	r0, [pc, #96]	@ (8001358 <HAL_ADC_MspInit+0xb8>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 80012f8:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 80012fc:	f042 0220 	orr.w	r2, r2, #32
 8001300:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 8001304:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8001308:	f002 0220 	and.w	r2, r2, #32
 800130c:	9200      	str	r2, [sp, #0]
 800130e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001310:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001314:	f042 0201 	orr.w	r2, r2, #1
 8001318:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800131c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001322:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001326:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8001348 <HAL_ADC_MspInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132a:	9301      	str	r3, [sp, #4]
 800132c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800132e:	ed8d 7b02 	vstr	d7, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001332:	f002 f9e1 	bl	80036f8 <HAL_GPIO_Init>
}
 8001336:	b038      	add	sp, #224	@ 0xe0
 8001338:	bd10      	pop	{r4, pc}
      Error_Handler();
 800133a:	f7ff ff87 	bl	800124c <Error_Handler>
 800133e:	e7d7      	b.n	80012f0 <HAL_ADC_MspInit+0x50>
 8001340:	00080000 	.word	0x00080000
 8001344:	00000000 	.word	0x00000000
 8001348:	00000008 	.word	0x00000008
 800134c:	00000003 	.word	0x00000003
 8001350:	40022000 	.word	0x40022000
 8001354:	58024400 	.word	0x58024400
 8001358:	58020000 	.word	0x58020000

0800135c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM3)
 800135c:	4b0a      	ldr	r3, [pc, #40]	@ (8001388 <HAL_TIM_Base_MspInit+0x2c>)
 800135e:	6802      	ldr	r2, [r0, #0]
 8001360:	429a      	cmp	r2, r3
 8001362:	d000      	beq.n	8001366 <HAL_TIM_Base_MspInit+0xa>
 8001364:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001366:	4b09      	ldr	r3, [pc, #36]	@ (800138c <HAL_TIM_Base_MspInit+0x30>)
{
 8001368:	b082      	sub	sp, #8
    __HAL_RCC_TIM3_CLK_ENABLE();
 800136a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800136e:	f042 0202 	orr.w	r2, r2, #2
 8001372:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8001376:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	9301      	str	r3, [sp, #4]
 8001380:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001382:	b002      	add	sp, #8
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	40000400 	.word	0x40000400
 800138c:	58024400 	.word	0x58024400

08001390 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001390:	280f      	cmp	r0, #15
 8001392:	d901      	bls.n	8001398 <HAL_InitTick+0x8>
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
     uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 8001394:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 8001396:	4770      	bx	lr
{
 8001398:	b530      	push	{r4, r5, lr}
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800139a:	4601      	mov	r1, r0
{
 800139c:	b08b      	sub	sp, #44	@ 0x2c
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800139e:	2200      	movs	r2, #0
 80013a0:	4604      	mov	r4, r0
 80013a2:	2036      	movs	r0, #54	@ 0x36
 80013a4:	f001 f95c 	bl	8002660 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80013a8:	2036      	movs	r0, #54	@ 0x36
 80013aa:	f001 f995 	bl	80026d8 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_TIM6_CLK_ENABLE();
 80013ae:	4b1b      	ldr	r3, [pc, #108]	@ (800141c <HAL_InitTick+0x8c>)
     uwTickPrio = TickPriority;
 80013b0:	4a1b      	ldr	r2, [pc, #108]	@ (8001420 <HAL_InitTick+0x90>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013b2:	4669      	mov	r1, sp
 80013b4:	a802      	add	r0, sp, #8
     uwTickPrio = TickPriority;
 80013b6:	6014      	str	r4, [r2, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 80013b8:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80013bc:	f042 0210 	orr.w	r2, r2, #16
 80013c0:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 80013c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013c8:	f003 0310 	and.w	r3, r3, #16
 80013cc:	9301      	str	r3, [sp, #4]
 80013ce:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013d0:	f003 f808 	bl	80043e4 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80013d4:	9b07      	ldr	r3, [sp, #28]
 80013d6:	b9c3      	cbnz	r3, 800140a <HAL_InitTick+0x7a>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013d8:	f002 fff2 	bl	80043c0 <HAL_RCC_GetPCLK1Freq>
 80013dc:	4603      	mov	r3, r0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013de:	4911      	ldr	r1, [pc, #68]	@ (8001424 <HAL_InitTick+0x94>)
  htim6.Init.ClockDivision = 0;
 80013e0:	2200      	movs	r2, #0
  htim6.Instance = TIM6;
 80013e2:	4c11      	ldr	r4, [pc, #68]	@ (8001428 <HAL_InitTick+0x98>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013e4:	fba1 1303 	umull	r1, r3, r1, r3
  htim6.Instance = TIM6;
 80013e8:	4d10      	ldr	r5, [pc, #64]	@ (800142c <HAL_InitTick+0x9c>)
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80013ea:	f240 31e7 	movw	r1, #999	@ 0x3e7
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80013ee:	4620      	mov	r0, r4
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013f0:	0c9b      	lsrs	r3, r3, #18
  htim6.Instance = TIM6;
 80013f2:	6025      	str	r5, [r4, #0]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f4:	60a2      	str	r2, [r4, #8]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013f6:	3b01      	subs	r3, #1
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80013f8:	e9c4 1203 	strd	r1, r2, [r4, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80013fc:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80013fe:	f004 fe4b 	bl	8006098 <HAL_TIM_Base_Init>
 8001402:	b130      	cbz	r0, 8001412 <HAL_InitTick+0x82>
    return HAL_ERROR;
 8001404:	2001      	movs	r0, #1
}
 8001406:	b00b      	add	sp, #44	@ 0x2c
 8001408:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800140a:	f002 ffd9 	bl	80043c0 <HAL_RCC_GetPCLK1Freq>
 800140e:	0043      	lsls	r3, r0, #1
 8001410:	e7e5      	b.n	80013de <HAL_InitTick+0x4e>
    return HAL_TIM_Base_Start_IT(&htim6);
 8001412:	4620      	mov	r0, r4
 8001414:	f004 fbe6 	bl	8005be4 <HAL_TIM_Base_Start_IT>
 8001418:	e7f5      	b.n	8001406 <HAL_InitTick+0x76>
 800141a:	bf00      	nop
 800141c:	58024400 	.word	0x58024400
 8001420:	2400000c 	.word	0x2400000c
 8001424:	431bde83 	.word	0x431bde83
 8001428:	24000164 	.word	0x24000164
 800142c:	40001000 	.word	0x40001000

08001430 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001430:	e7fe      	b.n	8001430 <NMI_Handler>
 8001432:	bf00      	nop

08001434 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001434:	e7fe      	b.n	8001434 <HardFault_Handler>
 8001436:	bf00      	nop

08001438 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001438:	e7fe      	b.n	8001438 <MemManage_Handler>
 800143a:	bf00      	nop

0800143c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800143c:	e7fe      	b.n	800143c <BusFault_Handler>
 800143e:	bf00      	nop

08001440 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001440:	e7fe      	b.n	8001440 <UsageFault_Handler>
 8001442:	bf00      	nop

08001444 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop

08001448 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001448:	4801      	ldr	r0, [pc, #4]	@ (8001450 <TIM6_DAC_IRQHandler+0x8>)
 800144a:	f004 bd05 	b.w	8005e58 <HAL_TIM_IRQHandler>
 800144e:	bf00      	nop
 8001450:	24000164 	.word	0x24000164

08001454 <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001454:	4801      	ldr	r0, [pc, #4]	@ (800145c <ETH_IRQHandler+0x8>)
 8001456:	f001 be0b 	b.w	8003070 <HAL_ETH_IRQHandler>
 800145a:	bf00      	nop
 800145c:	24000294 	.word	0x24000294

08001460 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001460:	2001      	movs	r0, #1
 8001462:	4770      	bx	lr

08001464 <_kill>:

int _kill(int pid, int sig)
{
	errno = EINVAL;
 8001464:	4b02      	ldr	r3, [pc, #8]	@ (8001470 <_kill+0xc>)
 8001466:	2216      	movs	r2, #22
	return -1;
}
 8001468:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 800146c:	601a      	str	r2, [r3, #0]
}
 800146e:	4770      	bx	lr
 8001470:	2400baa0 	.word	0x2400baa0

08001474 <_exit>:
	errno = EINVAL;
 8001474:	4b01      	ldr	r3, [pc, #4]	@ (800147c <_exit+0x8>)
 8001476:	2216      	movs	r2, #22
 8001478:	601a      	str	r2, [r3, #0]

void _exit (int status)
{
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800147a:	e7fe      	b.n	800147a <_exit+0x6>
 800147c:	2400baa0 	.word	0x2400baa0

08001480 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001480:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001482:	1e16      	subs	r6, r2, #0
 8001484:	dd07      	ble.n	8001496 <_read+0x16>
 8001486:	460c      	mov	r4, r1
 8001488:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 800148a:	f3af 8000 	nop.w
 800148e:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001492:	42a5      	cmp	r5, r4
 8001494:	d1f9      	bne.n	800148a <_read+0xa>
	}

return len;
}
 8001496:	4630      	mov	r0, r6
 8001498:	bd70      	pop	{r4, r5, r6, pc}
 800149a:	bf00      	nop

0800149c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800149c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800149e:	1e16      	subs	r6, r2, #0
 80014a0:	dd07      	ble.n	80014b2 <_write+0x16>
 80014a2:	460c      	mov	r4, r1
 80014a4:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 80014a6:	f814 0b01 	ldrb.w	r0, [r4], #1
 80014aa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ae:	42a5      	cmp	r5, r4
 80014b0:	d1f9      	bne.n	80014a6 <_write+0xa>
	}
	return len;
}
 80014b2:	4630      	mov	r0, r6
 80014b4:	bd70      	pop	{r4, r5, r6, pc}
 80014b6:	bf00      	nop

080014b8 <_close>:

int _close(int file)
{
	return -1;
}
 80014b8:	f04f 30ff 	mov.w	r0, #4294967295
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop

080014c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80014c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
	return 0;
}
 80014c4:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80014c6:	604b      	str	r3, [r1, #4]
}
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop

080014cc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80014cc:	2001      	movs	r0, #1
 80014ce:	4770      	bx	lr

080014d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80014d0:	2000      	movs	r0, #0
 80014d2:	4770      	bx	lr

080014d4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014d4:	490d      	ldr	r1, [pc, #52]	@ (800150c <_sbrk+0x38>)
{
 80014d6:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001510 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 80014da:	6808      	ldr	r0, [r1, #0]
{
 80014dc:	b410      	push	{r4}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014de:	4c0d      	ldr	r4, [pc, #52]	@ (8001514 <_sbrk+0x40>)
 80014e0:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80014e2:	b170      	cbz	r0, 8001502 <_sbrk+0x2e>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014e4:	4403      	add	r3, r0
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d803      	bhi.n	80014f2 <_sbrk+0x1e>

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80014ea:	f85d 4b04 	ldr.w	r4, [sp], #4
  __sbrk_heap_end += incr;
 80014ee:	600b      	str	r3, [r1, #0]
}
 80014f0:	4770      	bx	lr
    errno = ENOMEM;
 80014f2:	4b09      	ldr	r3, [pc, #36]	@ (8001518 <_sbrk+0x44>)
 80014f4:	220c      	movs	r2, #12
    return (void *)-1;
 80014f6:	f04f 30ff 	mov.w	r0, #4294967295
}
 80014fa:	f85d 4b04 	ldr.w	r4, [sp], #4
    errno = ENOMEM;
 80014fe:	601a      	str	r2, [r3, #0]
}
 8001500:	4770      	bx	lr
    __sbrk_heap_end = &_end;
 8001502:	4c06      	ldr	r4, [pc, #24]	@ (800151c <_sbrk+0x48>)
 8001504:	4620      	mov	r0, r4
 8001506:	600c      	str	r4, [r1, #0]
 8001508:	e7ec      	b.n	80014e4 <_sbrk+0x10>
 800150a:	bf00      	nop
 800150c:	240001b0 	.word	0x240001b0
 8001510:	24080000 	.word	0x24080000
 8001514:	00000400 	.word	0x00000400
 8001518:	2400baa0 	.word	0x2400baa0
 800151c:	2400bab0 	.word	0x2400bab0

08001520 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001520:	4927      	ldr	r1, [pc, #156]	@ (80015c0 <SystemInit+0xa0>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001522:	4a28      	ldr	r2, [pc, #160]	@ (80015c4 <SystemInit+0xa4>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001524:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8001528:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
{
 800152c:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800152e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001532:	6813      	ldr	r3, [r2, #0]
 8001534:	f003 030f 	and.w	r3, r3, #15
 8001538:	2b06      	cmp	r3, #6
 800153a:	d805      	bhi.n	8001548 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800153c:	6813      	ldr	r3, [r2, #0]
 800153e:	f023 030f 	bic.w	r3, r3, #15
 8001542:	f043 0307 	orr.w	r3, r3, #7
 8001546:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001548:	4b1f      	ldr	r3, [pc, #124]	@ (80015c8 <SystemInit+0xa8>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800154a:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800154c:	4a1f      	ldr	r2, [pc, #124]	@ (80015cc <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 800154e:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001550:	481c      	ldr	r0, [pc, #112]	@ (80015c4 <SystemInit+0xa4>)
  RCC->CR |= RCC_CR_HSION;
 8001552:	f041 0101 	orr.w	r1, r1, #1
 8001556:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001558:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 800155a:	6819      	ldr	r1, [r3, #0]
 800155c:	400a      	ands	r2, r1
 800155e:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001560:	6803      	ldr	r3, [r0, #0]
 8001562:	071b      	lsls	r3, r3, #28
 8001564:	d505      	bpl.n	8001572 <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001566:	6803      	ldr	r3, [r0, #0]
 8001568:	f023 030f 	bic.w	r3, r3, #15
 800156c:	f043 0307 	orr.w	r3, r3, #7
 8001570:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001572:	4b15      	ldr	r3, [pc, #84]	@ (80015c8 <SystemInit+0xa8>)
 8001574:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001576:	4916      	ldr	r1, [pc, #88]	@ (80015d0 <SystemInit+0xb0>)
  RCC->PLLCKSELR = 0x02020200;
 8001578:	4c16      	ldr	r4, [pc, #88]	@ (80015d4 <SystemInit+0xb4>)
  RCC->PLLCFGR = 0x01FF0000;
 800157a:	4817      	ldr	r0, [pc, #92]	@ (80015d8 <SystemInit+0xb8>)
  RCC->D1CFGR = 0x00000000;
 800157c:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 800157e:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8001580:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8001582:	629c      	str	r4, [r3, #40]	@ 0x28
  RCC->PLLCFGR = 0x01FF0000;
 8001584:	62d8      	str	r0, [r3, #44]	@ 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8001586:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001588:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800158a:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800158c:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800158e:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001590:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001592:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001594:	4c11      	ldr	r4, [pc, #68]	@ (80015dc <SystemInit+0xbc>)
  RCC->CR &= 0xFFFBFFFFU;
 8001596:	f420 2080 	bic.w	r0, r0, #262144	@ 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800159a:	4911      	ldr	r1, [pc, #68]	@ (80015e0 <SystemInit+0xc0>)
  RCC->CR &= 0xFFFBFFFFU;
 800159c:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 800159e:	661a      	str	r2, [r3, #96]	@ 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80015a0:	6823      	ldr	r3, [r4, #0]
 80015a2:	4019      	ands	r1, r3
 80015a4:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 80015a8:	d203      	bcs.n	80015b2 <SystemInit+0x92>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80015aa:	4b0e      	ldr	r3, [pc, #56]	@ (80015e4 <SystemInit+0xc4>)
 80015ac:	2201      	movs	r2, #1
 80015ae:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80015b2:	4b0d      	ldr	r3, [pc, #52]	@ (80015e8 <SystemInit+0xc8>)
 80015b4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80015b8:	f85d 4b04 	ldr.w	r4, [sp], #4
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80015bc:	601a      	str	r2, [r3, #0]
}
 80015be:	4770      	bx	lr
 80015c0:	e000ed00 	.word	0xe000ed00
 80015c4:	52002000 	.word	0x52002000
 80015c8:	58024400 	.word	0x58024400
 80015cc:	eaf6ed7f 	.word	0xeaf6ed7f
 80015d0:	01010280 	.word	0x01010280
 80015d4:	02020200 	.word	0x02020200
 80015d8:	01ff0000 	.word	0x01ff0000
 80015dc:	5c001000 	.word	0x5c001000
 80015e0:	ffff0000 	.word	0xffff0000
 80015e4:	51008000 	.word	0x51008000
 80015e8:	52004000 	.word	0x52004000

080015ec <send_adcvalue.part.0>:
        HAL_ADC_Stop(&hadc1);
        send_adcvalue(data);
    }
}

void send_adcvalue(uint32_t adc_value)
 80015ec:	b510      	push	{r4, lr}
 80015ee:	b088      	sub	sp, #32
 80015f0:	4603      	mov	r3, r0
{
    if (upcb == NULL) return;

    char buffer[32];
    snprintf(buffer, sizeof(buffer), "ADC Value: %lu\n", adc_value);
 80015f2:	4a12      	ldr	r2, [pc, #72]	@ (800163c <send_adcvalue.part.0+0x50>)
 80015f4:	2120      	movs	r1, #32
 80015f6:	4668      	mov	r0, sp
 80015f8:	f00f fb42 	bl	8010c80 <sniprintf>

    struct pbuf *p = pbuf_alloc(PBUF_TRANSPORT, strlen(buffer), PBUF_RAM);
 80015fc:	4668      	mov	r0, sp
 80015fe:	f7fe fe6f 	bl	80002e0 <strlen>
 8001602:	4601      	mov	r1, r0
 8001604:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8001608:	2036      	movs	r0, #54	@ 0x36
 800160a:	b289      	uxth	r1, r1
 800160c:	f008 fda6 	bl	800a15c <pbuf_alloc>

    if (p != NULL) {
 8001610:	b190      	cbz	r0, 8001638 <send_adcvalue.part.0+0x4c>
        memcpy(p->payload, buffer, strlen(buffer));
 8001612:	4604      	mov	r4, r0
 8001614:	4668      	mov	r0, sp
 8001616:	f7fe fe63 	bl	80002e0 <strlen>
 800161a:	4669      	mov	r1, sp
 800161c:	4602      	mov	r2, r0
 800161e:	6860      	ldr	r0, [r4, #4]
 8001620:	f00f fc9b 	bl	8010f5a <memcpy>


        udp_sendto(upcb, p, &upcb->remote_ip, upcb->remote_port);
 8001624:	4b06      	ldr	r3, [pc, #24]	@ (8001640 <send_adcvalue.part.0+0x54>)
 8001626:	4621      	mov	r1, r4
 8001628:	6818      	ldr	r0, [r3, #0]
 800162a:	8a83      	ldrh	r3, [r0, #20]
 800162c:	1d02      	adds	r2, r0, #4
 800162e:	f00d fd05 	bl	800f03c <udp_sendto>

        pbuf_free(p);
 8001632:	4620      	mov	r0, r4
 8001634:	f008 fd22 	bl	800a07c <pbuf_free>
    }
}
 8001638:	b008      	add	sp, #32
 800163a:	bd10      	pop	{r4, pc}
 800163c:	080126e0 	.word	0x080126e0
 8001640:	240001b4 	.word	0x240001b4

08001644 <udp_echoserver_init>:
{
 8001644:	b510      	push	{r4, lr}
    upcb = udp_new();
 8001646:	4c0b      	ldr	r4, [pc, #44]	@ (8001674 <udp_echoserver_init+0x30>)
 8001648:	f00d fd88 	bl	800f15c <udp_new>
 800164c:	6020      	str	r0, [r4, #0]
    if (upcb)
 800164e:	b180      	cbz	r0, 8001672 <udp_echoserver_init+0x2e>
        err = udp_bind(upcb, IP_ADDR_ANY, UDP_SERVER_PORT);
 8001650:	2207      	movs	r2, #7
 8001652:	4909      	ldr	r1, [pc, #36]	@ (8001678 <udp_echoserver_init+0x34>)
 8001654:	f00d fb76 	bl	800ed44 <udp_bind>
        if(err == ERR_OK)
 8001658:	4602      	mov	r2, r0
 800165a:	b928      	cbnz	r0, 8001668 <udp_echoserver_init+0x24>
            udp_recv(upcb, udp_echoserver_receive_callback, NULL);
 800165c:	6820      	ldr	r0, [r4, #0]
 800165e:	4907      	ldr	r1, [pc, #28]	@ (800167c <udp_echoserver_init+0x38>)
}
 8001660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            udp_recv(upcb, udp_echoserver_receive_callback, NULL);
 8001664:	f00d bd30 	b.w	800f0c8 <udp_recv>
            udp_remove(upcb);
 8001668:	6820      	ldr	r0, [r4, #0]
 800166a:	f00d fd47 	bl	800f0fc <udp_remove>
            upcb = NULL;
 800166e:	2300      	movs	r3, #0
 8001670:	6023      	str	r3, [r4, #0]
}
 8001672:	bd10      	pop	{r4, pc}
 8001674:	240001b4 	.word	0x240001b4
 8001678:	08014898 	.word	0x08014898
 800167c:	08001741 	.word	0x08001741

08001680 <send_menu>:
{
 8001680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001682:	b0b5      	sub	sp, #212	@ 0xd4
 8001684:	4617      	mov	r7, r2
 8001686:	4605      	mov	r5, r0
    const char menu[] =
 8001688:	22cc      	movs	r2, #204	@ 0xcc
{
 800168a:	460e      	mov	r6, r1
    const char menu[] =
 800168c:	a801      	add	r0, sp, #4
 800168e:	490f      	ldr	r1, [pc, #60]	@ (80016cc <send_menu+0x4c>)
 8001690:	f00f fc63 	bl	8010f5a <memcpy>
    struct pbuf *menu_buf = pbuf_alloc(PBUF_TRANSPORT, strlen(menu), PBUF_RAM);
 8001694:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8001698:	21cb      	movs	r1, #203	@ 0xcb
 800169a:	2036      	movs	r0, #54	@ 0x36
 800169c:	f008 fd5e 	bl	800a15c <pbuf_alloc>
    if (menu_buf != NULL) {
 80016a0:	b188      	cbz	r0, 80016c6 <send_menu+0x46>
        memcpy(menu_buf->payload, menu, strlen(menu));
 80016a2:	4604      	mov	r4, r0
 80016a4:	a901      	add	r1, sp, #4
 80016a6:	22cb      	movs	r2, #203	@ 0xcb
 80016a8:	6840      	ldr	r0, [r0, #4]
 80016aa:	f00f fc56 	bl	8010f5a <memcpy>
        udp_sendto(pcb, menu_buf, addr, port);
 80016ae:	463b      	mov	r3, r7
 80016b0:	4632      	mov	r2, r6
 80016b2:	4621      	mov	r1, r4
 80016b4:	4628      	mov	r0, r5
 80016b6:	f00d fcc1 	bl	800f03c <udp_sendto>
        pbuf_free(menu_buf);
 80016ba:	4620      	mov	r0, r4
}
 80016bc:	b035      	add	sp, #212	@ 0xd4
 80016be:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        pbuf_free(menu_buf);
 80016c2:	f008 bcdb 	b.w	800a07c <pbuf_free>
}
 80016c6:	b035      	add	sp, #212	@ 0xd4
 80016c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016ca:	bf00      	nop
 80016cc:	080126f0 	.word	0x080126f0

080016d0 <controls>:
    switch (selection) {
 80016d0:	3801      	subs	r0, #1
{
 80016d2:	b508      	push	{r3, lr}
    switch (selection) {
 80016d4:	2805      	cmp	r0, #5
 80016d6:	d82e      	bhi.n	8001736 <controls+0x66>
 80016d8:	e8df f000 	tbb	[pc, r0]
 80016dc:	231f130f 	.word	0x231f130f
 80016e0:	0328      	.short	0x0328
        	 HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 80016e2:	2200      	movs	r2, #0
 80016e4:	2101      	movs	r1, #1
 80016e6:	4814      	ldr	r0, [pc, #80]	@ (8001738 <controls+0x68>)
 80016e8:	f002 f948 	bl	800397c <HAL_GPIO_WritePin>
        	 HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET);
 80016ec:	2200      	movs	r2, #0
 80016ee:	2108      	movs	r1, #8
 80016f0:	4811      	ldr	r0, [pc, #68]	@ (8001738 <controls+0x68>)
}
 80016f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        	 HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET);
 80016f6:	f002 b941 	b.w	800397c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_SET);
 80016fa:	2201      	movs	r2, #1
 80016fc:	480e      	ldr	r0, [pc, #56]	@ (8001738 <controls+0x68>)
 80016fe:	4611      	mov	r1, r2
 8001700:	e7f2      	b.n	80016e8 <controls+0x18>
            HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 8001702:	2200      	movs	r2, #0
 8001704:	2101      	movs	r1, #1
 8001706:	480c      	ldr	r0, [pc, #48]	@ (8001738 <controls+0x68>)
            HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_SET);
 8001708:	f002 f938 	bl	800397c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_SET);
 800170c:	2201      	movs	r2, #1
 800170e:	2108      	movs	r1, #8
 8001710:	4809      	ldr	r0, [pc, #36]	@ (8001738 <controls+0x68>)
}
 8001712:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_SET);
 8001716:	f002 b931 	b.w	800397c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_SET);
 800171a:	2201      	movs	r2, #1
 800171c:	4806      	ldr	r0, [pc, #24]	@ (8001738 <controls+0x68>)
 800171e:	4611      	mov	r1, r2
 8001720:	e7f2      	b.n	8001708 <controls+0x38>
           HAL_TIM_Base_Start_IT(&htim3);
 8001722:	4806      	ldr	r0, [pc, #24]	@ (800173c <controls+0x6c>)
}
 8001724:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
           HAL_TIM_Base_Start_IT(&htim3);
 8001728:	f004 ba5c 	b.w	8005be4 <HAL_TIM_Base_Start_IT>
           HAL_TIM_Base_Stop_IT(&htim3);
 800172c:	4803      	ldr	r0, [pc, #12]	@ (800173c <controls+0x6c>)
}
 800172e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
           HAL_TIM_Base_Stop_IT(&htim3);
 8001732:	f004 baa9 	b.w	8005c88 <HAL_TIM_Base_Stop_IT>
}
 8001736:	bd08      	pop	{r3, pc}
 8001738:	58020800 	.word	0x58020800
 800173c:	240000b4 	.word	0x240000b4

08001740 <udp_echoserver_receive_callback>:

void udp_echoserver_receive_callback(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{

    ip_addr_copy(upcb->remote_ip, *addr);
 8001740:	4815      	ldr	r0, [pc, #84]	@ (8001798 <udp_echoserver_receive_callback+0x58>)
{
 8001742:	b570      	push	{r4, r5, r6, lr}
    ip_addr_copy(upcb->remote_ip, *addr);
 8001744:	6805      	ldr	r5, [r0, #0]
{
 8001746:	4614      	mov	r4, r2
    upcb->remote_port = port;

    if (!menu_sent) {
 8001748:	4e14      	ldr	r6, [pc, #80]	@ (800179c <udp_echoserver_receive_callback+0x5c>)
    ip_addr_copy(upcb->remote_ip, *addr);
 800174a:	681a      	ldr	r2, [r3, #0]
{
 800174c:	f8bd c010 	ldrh.w	ip, [sp, #16]
    ip_addr_copy(upcb->remote_ip, *addr);
 8001750:	606a      	str	r2, [r5, #4]
    if (!menu_sent) {
 8001752:	6832      	ldr	r2, [r6, #0]
    upcb->remote_port = port;
 8001754:	f8a5 c014 	strh.w	ip, [r5, #20]
    if (!menu_sent) {
 8001758:	b13a      	cbz	r2, 800176a <udp_echoserver_receive_callback+0x2a>
        send_menu(pcb, addr, port);
        menu_sent = 1;
    }
    else if (p != NULL && p->len > 0) {
 800175a:	b10c      	cbz	r4, 8001760 <udp_echoserver_receive_callback+0x20>
 800175c:	8963      	ldrh	r3, [r4, #10]
 800175e:	b983      	cbnz	r3, 8001782 <udp_echoserver_receive_callback+0x42>
        char response = ((char*)p->payload)[0];
        int selection = response - '0';
        controls(selection);
    }

    pbuf_free(p);
 8001760:	4620      	mov	r0, r4
}
 8001762:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pbuf_free(p);
 8001766:	f008 bc89 	b.w	800a07c <pbuf_free>
 800176a:	4608      	mov	r0, r1
        send_menu(pcb, addr, port);
 800176c:	4662      	mov	r2, ip
 800176e:	4619      	mov	r1, r3
 8001770:	f7ff ff86 	bl	8001680 <send_menu>
        menu_sent = 1;
 8001774:	2301      	movs	r3, #1
    pbuf_free(p);
 8001776:	4620      	mov	r0, r4
        menu_sent = 1;
 8001778:	6033      	str	r3, [r6, #0]
}
 800177a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pbuf_free(p);
 800177e:	f008 bc7d 	b.w	800a07c <pbuf_free>
        char response = ((char*)p->payload)[0];
 8001782:	6863      	ldr	r3, [r4, #4]
        int selection = response - '0';
 8001784:	7818      	ldrb	r0, [r3, #0]
        controls(selection);
 8001786:	3830      	subs	r0, #48	@ 0x30
 8001788:	f7ff ffa2 	bl	80016d0 <controls>
    pbuf_free(p);
 800178c:	4620      	mov	r0, r4
}
 800178e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pbuf_free(p);
 8001792:	f008 bc73 	b.w	800a07c <pbuf_free>
 8001796:	bf00      	nop
 8001798:	240001b4 	.word	0x240001b4
 800179c:	240001bc 	.word	0x240001bc

080017a0 <HAL_TIM_PeriodElapsedCallback>:
    if (htim->Instance == TIM6) {
 80017a0:	4a14      	ldr	r2, [pc, #80]	@ (80017f4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80017a2:	6803      	ldr	r3, [r0, #0]
 80017a4:	4293      	cmp	r3, r2
{
 80017a6:	b510      	push	{r4, lr}
    if (htim->Instance == TIM6) {
 80017a8:	d01f      	beq.n	80017ea <HAL_TIM_PeriodElapsedCallback+0x4a>
    if (htim->Instance == TIM3) {
 80017aa:	4a13      	ldr	r2, [pc, #76]	@ (80017f8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d000      	beq.n	80017b2 <HAL_TIM_PeriodElapsedCallback+0x12>
}
 80017b0:	bd10      	pop	{r4, pc}
        HAL_GPIO_TogglePin(led3_GPIO_Port, led3_Pin);
 80017b2:	2102      	movs	r1, #2
 80017b4:	4811      	ldr	r0, [pc, #68]	@ (80017fc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80017b6:	f002 f8e5 	bl	8003984 <HAL_GPIO_TogglePin>
        HAL_ADC_Start(&hadc1);
 80017ba:	4811      	ldr	r0, [pc, #68]	@ (8001800 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80017bc:	f000 fc38 	bl	8002030 <HAL_ADC_Start>
        data = HAL_ADC_GetValue(&hadc1);
 80017c0:	480f      	ldr	r0, [pc, #60]	@ (8001800 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80017c2:	f000 f94d 	bl	8001a60 <HAL_ADC_GetValue>
 80017c6:	4c0f      	ldr	r4, [pc, #60]	@ (8001804 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80017c8:	4603      	mov	r3, r0
        HAL_Delay(0.1);
 80017ca:	2000      	movs	r0, #0
        data = HAL_ADC_GetValue(&hadc1);
 80017cc:	6023      	str	r3, [r4, #0]
        HAL_Delay(0.1);
 80017ce:	f000 f925 	bl	8001a1c <HAL_Delay>
        HAL_ADC_Stop(&hadc1);
 80017d2:	480b      	ldr	r0, [pc, #44]	@ (8001800 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80017d4:	f000 fce4 	bl	80021a0 <HAL_ADC_Stop>
    if (upcb == NULL) return;
 80017d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001808 <HAL_TIM_PeriodElapsedCallback+0x68>)
        send_adcvalue(data);
 80017da:	6820      	ldr	r0, [r4, #0]
    if (upcb == NULL) return;
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d0e6      	beq.n	80017b0 <HAL_TIM_PeriodElapsedCallback+0x10>
}
 80017e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80017e6:	f7ff bf01 	b.w	80015ec <send_adcvalue.part.0>
 80017ea:	4604      	mov	r4, r0
        HAL_IncTick();
 80017ec:	f000 f904 	bl	80019f8 <HAL_IncTick>
    if (htim->Instance == TIM3) {
 80017f0:	6823      	ldr	r3, [r4, #0]
 80017f2:	e7da      	b.n	80017aa <HAL_TIM_PeriodElapsedCallback+0xa>
 80017f4:	40001000 	.word	0x40001000
 80017f8:	40000400 	.word	0x40000400
 80017fc:	58020400 	.word	0x58020400
 8001800:	24000100 	.word	0x24000100
 8001804:	240001b8 	.word	0x240001b8
 8001808:	240001b4 	.word	0x240001b4

0800180c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800180c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001844 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001810:	f7ff fe86 	bl	8001520 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001814:	480c      	ldr	r0, [pc, #48]	@ (8001848 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001816:	490d      	ldr	r1, [pc, #52]	@ (800184c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001818:	4a0d      	ldr	r2, [pc, #52]	@ (8001850 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800181a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800181c:	e002      	b.n	8001824 <LoopCopyDataInit>

0800181e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800181e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001820:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001822:	3304      	adds	r3, #4

08001824 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001824:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001826:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001828:	d3f9      	bcc.n	800181e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800182a:	4a0a      	ldr	r2, [pc, #40]	@ (8001854 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800182c:	4c0a      	ldr	r4, [pc, #40]	@ (8001858 <LoopFillZerobss+0x22>)
  movs r3, #0
 800182e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001830:	e001      	b.n	8001836 <LoopFillZerobss>

08001832 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001832:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001834:	3204      	adds	r2, #4

08001836 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001836:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001838:	d3fb      	bcc.n	8001832 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800183a:	f00f fb67 	bl	8010f0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800183e:	f7ff fb21 	bl	8000e84 <main>
  bx  lr
 8001842:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001844:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001848:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800184c:	2400008c 	.word	0x2400008c
  ldr r2, =_sidata
 8001850:	08014b88 	.word	0x08014b88
  ldr r2, =_sbss
 8001854:	24000090 	.word	0x24000090
  ldr r4, =_ebss
 8001858:	2400bab0 	.word	0x2400bab0

0800185c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800185c:	e7fe      	b.n	800185c <ADC3_IRQHandler>
	...

08001860 <LAN8742_RegisterBusIO>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001860:	b188      	cbz	r0, 8001886 <LAN8742_RegisterBusIO+0x26>
 8001862:	68ca      	ldr	r2, [r1, #12]
 8001864:	b17a      	cbz	r2, 8001886 <LAN8742_RegisterBusIO+0x26>
{
 8001866:	b430      	push	{r4, r5}
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001868:	688c      	ldr	r4, [r1, #8]
 800186a:	b17c      	cbz	r4, 800188c <LAN8742_RegisterBusIO+0x2c>
 800186c:	690d      	ldr	r5, [r1, #16]
 800186e:	b16d      	cbz	r5, 800188c <LAN8742_RegisterBusIO+0x2c>
 8001870:	4603      	mov	r3, r0
  {
    return LAN8742_STATUS_ERROR;
  }

  pObj->IO.Init = ioctx->Init;
 8001872:	e9d1 0100 	ldrd	r0, r1, [r1]
  pObj->IO.DeInit = ioctx->DeInit;
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001876:	615a      	str	r2, [r3, #20]
  pObj->IO.Init = ioctx->Init;
 8001878:	6098      	str	r0, [r3, #8]
  pObj->IO.WriteReg = ioctx->WriteReg;
  pObj->IO.GetTick = ioctx->GetTick;

  return LAN8742_STATUS_OK;
 800187a:	2000      	movs	r0, #0
  pObj->IO.GetTick = ioctx->GetTick;
 800187c:	619d      	str	r5, [r3, #24]
  pObj->IO.WriteReg = ioctx->WriteReg;
 800187e:	e9c3 1403 	strd	r1, r4, [r3, #12]
}
 8001882:	bc30      	pop	{r4, r5}
 8001884:	4770      	bx	lr
    return LAN8742_STATUS_ERROR;
 8001886:	f04f 30ff 	mov.w	r0, #4294967295
}
 800188a:	4770      	bx	lr
    return LAN8742_STATUS_ERROR;
 800188c:	f04f 30ff 	mov.w	r0, #4294967295
 8001890:	e7f7      	b.n	8001882 <LAN8742_RegisterBusIO+0x22>
 8001892:	bf00      	nop

08001894 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001894:	b570      	push	{r4, r5, r6, lr}
   uint32_t regvalue = 0, addr = 0;
 8001896:	2300      	movs	r3, #0
 {
 8001898:	b082      	sub	sp, #8
   int32_t status = LAN8742_STATUS_OK;

   if(pObj->Is_Initialized == 0)
 800189a:	6844      	ldr	r4, [r0, #4]
   uint32_t regvalue = 0, addr = 0;
 800189c:	9301      	str	r3, [sp, #4]
   if(pObj->Is_Initialized == 0)
 800189e:	b11c      	cbz	r4, 80018a8 <LAN8742_Init+0x14>
   int32_t status = LAN8742_STATUS_OK;
 80018a0:	2600      	movs	r6, #0
       pObj->Is_Initialized = 1;
     }
   }

   return status;
 }
 80018a2:	4630      	mov	r0, r6
 80018a4:	b002      	add	sp, #8
 80018a6:	bd70      	pop	{r4, r5, r6, pc}
     if(pObj->IO.Init != 0)
 80018a8:	6883      	ldr	r3, [r0, #8]
 80018aa:	4605      	mov	r5, r0
 80018ac:	b103      	cbz	r3, 80018b0 <LAN8742_Init+0x1c>
       pObj->IO.Init();
 80018ae:	4798      	blx	r3
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80018b0:	2320      	movs	r3, #32
   int32_t status = LAN8742_STATUS_OK;
 80018b2:	2600      	movs	r6, #0
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80018b4:	602b      	str	r3, [r5, #0]
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80018b6:	e007      	b.n	80018c8 <LAN8742_Init+0x34>
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80018b8:	9b01      	ldr	r3, [sp, #4]
 80018ba:	f003 031f 	and.w	r3, r3, #31
 80018be:	42a3      	cmp	r3, r4
 80018c0:	d015      	beq.n	80018ee <LAN8742_Init+0x5a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80018c2:	3401      	adds	r4, #1
 80018c4:	2c20      	cmp	r4, #32
 80018c6:	d00b      	beq.n	80018e0 <LAN8742_Init+0x4c>
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80018c8:	4620      	mov	r0, r4
 80018ca:	696b      	ldr	r3, [r5, #20]
 80018cc:	aa01      	add	r2, sp, #4
 80018ce:	2112      	movs	r1, #18
 80018d0:	4798      	blx	r3
 80018d2:	2800      	cmp	r0, #0
 80018d4:	daf0      	bge.n	80018b8 <LAN8742_Init+0x24>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80018d6:	3401      	adds	r4, #1
         status = LAN8742_STATUS_READ_ERROR;
 80018d8:	f06f 0604 	mvn.w	r6, #4
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80018dc:	2c20      	cmp	r4, #32
 80018de:	d1f3      	bne.n	80018c8 <LAN8742_Init+0x34>
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80018e0:	682b      	ldr	r3, [r5, #0]
 80018e2:	2b1f      	cmp	r3, #31
 80018e4:	d807      	bhi.n	80018f6 <LAN8742_Init+0x62>
     if(status == LAN8742_STATUS_OK)
 80018e6:	b11e      	cbz	r6, 80018f0 <LAN8742_Init+0x5c>
 }
 80018e8:	4630      	mov	r0, r6
 80018ea:	b002      	add	sp, #8
 80018ec:	bd70      	pop	{r4, r5, r6, pc}
         pObj->DevAddr = addr;
 80018ee:	602c      	str	r4, [r5, #0]
       pObj->Is_Initialized = 1;
 80018f0:	2301      	movs	r3, #1
 80018f2:	606b      	str	r3, [r5, #4]
 80018f4:	e7d4      	b.n	80018a0 <LAN8742_Init+0xc>
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80018f6:	f06f 0602 	mvn.w	r6, #2
   return status;
 80018fa:	e7d2      	b.n	80018a2 <LAN8742_Init+0xe>

080018fc <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80018fc:	b530      	push	{r4, r5, lr}
  uint32_t readval = 0;
 80018fe:	2500      	movs	r5, #0
{
 8001900:	b083      	sub	sp, #12

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001902:	6943      	ldr	r3, [r0, #20]
{
 8001904:	4604      	mov	r4, r0
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001906:	aa01      	add	r2, sp, #4
 8001908:	2101      	movs	r1, #1
 800190a:	6800      	ldr	r0, [r0, #0]
  uint32_t readval = 0;
 800190c:	9501      	str	r5, [sp, #4]
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800190e:	4798      	blx	r3
 8001910:	42a8      	cmp	r0, r5
 8001912:	db3d      	blt.n	8001990 <LAN8742_GetLinkState+0x94>
  {
    return LAN8742_STATUS_READ_ERROR;
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001914:	6963      	ldr	r3, [r4, #20]
 8001916:	aa01      	add	r2, sp, #4
 8001918:	2101      	movs	r1, #1
 800191a:	6820      	ldr	r0, [r4, #0]
 800191c:	4798      	blx	r3
 800191e:	2800      	cmp	r0, #0
 8001920:	db36      	blt.n	8001990 <LAN8742_GetLinkState+0x94>
  {
    return LAN8742_STATUS_READ_ERROR;
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001922:	9b01      	ldr	r3, [sp, #4]
 8001924:	075b      	lsls	r3, r3, #29
 8001926:	d52a      	bpl.n	800197e <LAN8742_GetLinkState+0x82>
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001928:	6963      	ldr	r3, [r4, #20]
 800192a:	aa01      	add	r2, sp, #4
 800192c:	4629      	mov	r1, r5
 800192e:	6820      	ldr	r0, [r4, #0]
 8001930:	4798      	blx	r3
 8001932:	2800      	cmp	r0, #0
 8001934:	db2c      	blt.n	8001990 <LAN8742_GetLinkState+0x94>
  {
    return LAN8742_STATUS_READ_ERROR;
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001936:	9b01      	ldr	r3, [sp, #4]
 8001938:	04dd      	lsls	r5, r3, #19
 800193a:	d514      	bpl.n	8001966 <LAN8742_GetLinkState+0x6a>
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800193c:	6963      	ldr	r3, [r4, #20]
 800193e:	aa01      	add	r2, sp, #4
 8001940:	211f      	movs	r1, #31
 8001942:	6820      	ldr	r0, [r4, #0]
 8001944:	4798      	blx	r3
 8001946:	2800      	cmp	r0, #0
 8001948:	db22      	blt.n	8001990 <LAN8742_GetLinkState+0x94>
    {
      return LAN8742_STATUS_READ_ERROR;
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800194a:	9b01      	ldr	r3, [sp, #4]
 800194c:	04da      	lsls	r2, r3, #19
 800194e:	d51d      	bpl.n	800198c <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001950:	f003 031c 	and.w	r3, r3, #28
 8001954:	2b18      	cmp	r3, #24
 8001956:	d017      	beq.n	8001988 <LAN8742_GetLinkState+0x8c>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001958:	2b08      	cmp	r3, #8
 800195a:	d013      	beq.n	8001984 <LAN8742_GetLinkState+0x88>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800195c:	2b14      	cmp	r3, #20
 800195e:	d10b      	bne.n	8001978 <LAN8742_GetLinkState+0x7c>
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001960:	2004      	movs	r0, #4
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
    }
  }
}
 8001962:	b003      	add	sp, #12
 8001964:	bd30      	pop	{r4, r5, pc}
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001966:	f403 5204 	and.w	r2, r3, #8448	@ 0x2100
 800196a:	f5b2 5f04 	cmp.w	r2, #8448	@ 0x2100
 800196e:	d00b      	beq.n	8001988 <LAN8742_GetLinkState+0x8c>
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001970:	0498      	lsls	r0, r3, #18
 8001972:	d407      	bmi.n	8001984 <LAN8742_GetLinkState+0x88>
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001974:	05d9      	lsls	r1, r3, #23
 8001976:	d4f3      	bmi.n	8001960 <LAN8742_GetLinkState+0x64>
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001978:	2005      	movs	r0, #5
}
 800197a:	b003      	add	sp, #12
 800197c:	bd30      	pop	{r4, r5, pc}
    return LAN8742_STATUS_LINK_DOWN;
 800197e:	2001      	movs	r0, #1
}
 8001980:	b003      	add	sp, #12
 8001982:	bd30      	pop	{r4, r5, pc}
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001984:	2003      	movs	r0, #3
 8001986:	e7f8      	b.n	800197a <LAN8742_GetLinkState+0x7e>
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001988:	2002      	movs	r0, #2
 800198a:	e7f6      	b.n	800197a <LAN8742_GetLinkState+0x7e>
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800198c:	2006      	movs	r0, #6
 800198e:	e7f4      	b.n	800197a <LAN8742_GetLinkState+0x7e>
    return LAN8742_STATUS_READ_ERROR;
 8001990:	f06f 0004 	mvn.w	r0, #4
 8001994:	e7f1      	b.n	800197a <LAN8742_GetLinkState+0x7e>
 8001996:	bf00      	nop

08001998 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001998:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800199a:	2003      	movs	r0, #3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800199c:	4c12      	ldr	r4, [pc, #72]	@ (80019e8 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800199e:	f000 fe4d 	bl	800263c <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80019a2:	f002 fb81 	bl	80040a8 <HAL_RCC_GetSysClockFreq>
 80019a6:	4b11      	ldr	r3, [pc, #68]	@ (80019ec <HAL_Init+0x54>)
 80019a8:	4911      	ldr	r1, [pc, #68]	@ (80019f0 <HAL_Init+0x58>)
 80019aa:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80019ac:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80019ae:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80019b2:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80019b6:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80019b8:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80019ba:	f002 021f 	and.w	r2, r2, #31
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80019be:	490d      	ldr	r1, [pc, #52]	@ (80019f4 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80019c0:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80019c4:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80019c6:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 80019ca:	6008      	str	r0, [r1, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019cc:	2001      	movs	r0, #1
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80019ce:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019d0:	f7ff fcde 	bl	8001390 <HAL_InitTick>
 80019d4:	b110      	cbz	r0, 80019dc <HAL_Init+0x44>
  {
    return HAL_ERROR;
 80019d6:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
 80019d8:	4620      	mov	r0, r4
 80019da:	bd10      	pop	{r4, pc}
 80019dc:	4604      	mov	r4, r0
  HAL_MspInit();
 80019de:	f7ff fc37 	bl	8001250 <HAL_MspInit>
}
 80019e2:	4620      	mov	r0, r4
 80019e4:	bd10      	pop	{r4, pc}
 80019e6:	bf00      	nop
 80019e8:	24000000 	.word	0x24000000
 80019ec:	58024400 	.word	0x58024400
 80019f0:	080126d0 	.word	0x080126d0
 80019f4:	24000004 	.word	0x24000004

080019f8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80019f8:	4a03      	ldr	r2, [pc, #12]	@ (8001a08 <HAL_IncTick+0x10>)
 80019fa:	4b04      	ldr	r3, [pc, #16]	@ (8001a0c <HAL_IncTick+0x14>)
 80019fc:	6811      	ldr	r1, [r2, #0]
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	440b      	add	r3, r1
 8001a02:	6013      	str	r3, [r2, #0]
}
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	240001c0 	.word	0x240001c0
 8001a0c:	24000008 	.word	0x24000008

08001a10 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001a10:	4b01      	ldr	r3, [pc, #4]	@ (8001a18 <HAL_GetTick+0x8>)
 8001a12:	6818      	ldr	r0, [r3, #0]
}
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	240001c0 	.word	0x240001c0

08001a1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a1c:	b538      	push	{r3, r4, r5, lr}
 8001a1e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001a20:	f7ff fff6 	bl	8001a10 <HAL_GetTick>
 8001a24:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a26:	1c63      	adds	r3, r4, #1
 8001a28:	d002      	beq.n	8001a30 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a2a:	4b04      	ldr	r3, [pc, #16]	@ (8001a3c <HAL_Delay+0x20>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a30:	f7ff ffee 	bl	8001a10 <HAL_GetTick>
 8001a34:	1b40      	subs	r0, r0, r5
 8001a36:	42a0      	cmp	r0, r4
 8001a38:	d3fa      	bcc.n	8001a30 <HAL_Delay+0x14>
  {
  }
}
 8001a3a:	bd38      	pop	{r3, r4, r5, pc}
 8001a3c:	24000008 	.word	0x24000008

08001a40 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8001a40:	4b01      	ldr	r3, [pc, #4]	@ (8001a48 <HAL_GetREVID+0x8>)
 8001a42:	6818      	ldr	r0, [r3, #0]
}
 8001a44:	0c00      	lsrs	r0, r0, #16
 8001a46:	4770      	bx	lr
 8001a48:	5c001000 	.word	0x5c001000

08001a4c <HAL_SYSCFG_ETHInterfaceSelect>:
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001a4c:	4a03      	ldr	r2, [pc, #12]	@ (8001a5c <HAL_SYSCFG_ETHInterfaceSelect+0x10>)
 8001a4e:	6853      	ldr	r3, [r2, #4]
 8001a50:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 8001a54:	4303      	orrs	r3, r0
 8001a56:	6053      	str	r3, [r2, #4]
}
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	58000400 	.word	0x58000400

08001a60 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001a60:	6803      	ldr	r3, [r0, #0]
 8001a62:	6c18      	ldr	r0, [r3, #64]	@ 0x40
}
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop

08001a68 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001a68:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001a6a:	2200      	movs	r2, #0
{
 8001a6c:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 8001a6e:	9201      	str	r2, [sp, #4]
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a70:	f890 2050 	ldrb.w	r2, [r0, #80]	@ 0x50
 8001a74:	2a01      	cmp	r2, #1
 8001a76:	f000 812f 	beq.w	8001cd8 <HAL_ADC_ConfigChannel+0x270>
 8001a7a:	2401      	movs	r4, #1
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a7c:	6802      	ldr	r2, [r0, #0]
 8001a7e:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8001a80:	f880 4050 	strb.w	r4, [r0, #80]	@ 0x50
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a84:	6890      	ldr	r0, [r2, #8]
 8001a86:	0745      	lsls	r5, r0, #29
 8001a88:	d509      	bpl.n	8001a9e <HAL_ADC_ConfigChannel+0x36>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a8a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);

    tmp_hal_status = HAL_ERROR;
 8001a8c:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a8e:	f042 0220 	orr.w	r2, r2, #32
 8001a92:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8001a9a:	b003      	add	sp, #12
 8001a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001a9e:	680d      	ldr	r5, [r1, #0]
 8001aa0:	2d00      	cmp	r5, #0
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001aa2:	ea4f 6095 	mov.w	r0, r5, lsr #26
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001aa6:	db0c      	blt.n	8001ac2 <HAL_ADC_ConfigChannel+0x5a>
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001aa8:	f3c5 0613 	ubfx	r6, r5, #0, #20
 8001aac:	2e00      	cmp	r6, #0
 8001aae:	d041      	beq.n	8001b34 <HAL_ADC_ConfigChannel+0xcc>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab0:	fa95 f5a5 	rbit	r5, r5
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001ab4:	b115      	cbz	r5, 8001abc <HAL_ADC_ConfigChannel+0x54>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001ab6:	fab5 f585 	clz	r5, r5
 8001aba:	40ac      	lsls	r4, r5
 8001abc:	69d5      	ldr	r5, [r2, #28]
 8001abe:	432c      	orrs	r4, r5
 8001ac0:	61d4      	str	r4, [r2, #28]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001ac2:	684c      	ldr	r4, [r1, #4]
  MODIFY_REG(*preg,
 8001ac4:	f04f 0c1f 	mov.w	ip, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001ac8:	f102 0e30 	add.w	lr, r2, #48	@ 0x30
  MODIFY_REG(*preg,
 8001acc:	f000 001f 	and.w	r0, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001ad0:	09a5      	lsrs	r5, r4, #6
  MODIFY_REG(*preg,
 8001ad2:	ea04 040c 	and.w	r4, r4, ip
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001ad6:	f005 050c 	and.w	r5, r5, #12
  MODIFY_REG(*preg,
 8001ada:	fa0c fc04 	lsl.w	ip, ip, r4
 8001ade:	40a0      	lsls	r0, r4
 8001ae0:	f85e 4005 	ldr.w	r4, [lr, r5]
 8001ae4:	ea24 0c0c 	bic.w	ip, r4, ip
 8001ae8:	ea4c 0000 	orr.w	r0, ip, r0
 8001aec:	f84e 0005 	str.w	r0, [lr, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001af0:	6890      	ldr	r0, [r2, #8]
 8001af2:	f010 0f04 	tst.w	r0, #4
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001af6:	6890      	ldr	r0, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001af8:	d101      	bne.n	8001afe <HAL_ADC_ConfigChannel+0x96>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001afa:	0700      	lsls	r0, r0, #28
 8001afc:	d51c      	bpl.n	8001b38 <HAL_ADC_ConfigChannel+0xd0>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001afe:	6890      	ldr	r0, [r2, #8]
 8001b00:	07c7      	lsls	r7, r0, #31
 8001b02:	d415      	bmi.n	8001b30 <HAL_ADC_ConfigChannel+0xc8>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001b04:	68ce      	ldr	r6, [r1, #12]
 8001b06:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8001b08:	f006 0718 	and.w	r7, r6, #24
 8001b0c:	48ba      	ldr	r0, [pc, #744]	@ (8001df8 <HAL_ADC_ConfigChannel+0x390>)
 8001b0e:	f8d2 50c0 	ldr.w	r5, [r2, #192]	@ 0xc0
 8001b12:	40f8      	lsrs	r0, r7
 8001b14:	f3c4 0713 	ubfx	r7, r4, #0, #20
 8001b18:	4020      	ands	r0, r4
 8001b1a:	ea25 0507 	bic.w	r5, r5, r7
 8001b1e:	4328      	orrs	r0, r5
 8001b20:	f8c2 00c0 	str.w	r0, [r2, #192]	@ 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001b24:	48b5      	ldr	r0, [pc, #724]	@ (8001dfc <HAL_ADC_ConfigChannel+0x394>)
 8001b26:	4286      	cmp	r6, r0
 8001b28:	f000 8089 	beq.w	8001c3e <HAL_ADC_ConfigChannel+0x1d6>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001b2c:	2c00      	cmp	r4, #0
 8001b2e:	db59      	blt.n	8001be4 <HAL_ADC_ConfigChannel+0x17c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b30:	2000      	movs	r0, #0
 8001b32:	e7af      	b.n	8001a94 <HAL_ADC_ConfigChannel+0x2c>
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001b34:	4084      	lsls	r4, r0
 8001b36:	e7c1      	b.n	8001abc <HAL_ADC_ConfigChannel+0x54>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001b38:	680c      	ldr	r4, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001b3a:	f102 0c14 	add.w	ip, r2, #20
  MODIFY_REG(*preg,
 8001b3e:	2607      	movs	r6, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001b40:	0de5      	lsrs	r5, r4, #23
  MODIFY_REG(*preg,
 8001b42:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001b46:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 8001b4a:	40a6      	lsls	r6, r4
 8001b4c:	f85c 0005 	ldr.w	r0, [ip, r5]
 8001b50:	ea20 0006 	bic.w	r0, r0, r6
 8001b54:	688e      	ldr	r6, [r1, #8]
 8001b56:	40a6      	lsls	r6, r4
 8001b58:	4330      	orrs	r0, r6
 8001b5a:	f84c 0005 	str.w	r0, [ip, r5]
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001b5e:	48a8      	ldr	r0, [pc, #672]	@ (8001e00 <HAL_ADC_ConfigChannel+0x398>)
 8001b60:	694d      	ldr	r5, [r1, #20]
 8001b62:	6800      	ldr	r0, [r0, #0]
 8001b64:	f000 4070 	and.w	r0, r0, #4026531840	@ 0xf0000000
 8001b68:	f1b0 5f80 	cmp.w	r0, #268435456	@ 0x10000000
 8001b6c:	68d0      	ldr	r0, [r2, #12]
 8001b6e:	d004      	beq.n	8001b7a <HAL_ADC_ConfigChannel+0x112>
 8001b70:	f010 0f10 	tst.w	r0, #16
 8001b74:	68d0      	ldr	r0, [r2, #12]
 8001b76:	f040 80b2 	bne.w	8001cde <HAL_ADC_ConfigChannel+0x276>
 8001b7a:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8001b7e:	0040      	lsls	r0, r0, #1
 8001b80:	4085      	lsls	r5, r0
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001b82:	690e      	ldr	r6, [r1, #16]
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001b84:	6808      	ldr	r0, [r1, #0]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001b86:	2e04      	cmp	r6, #4
 8001b88:	f000 80db 	beq.w	8001d42 <HAL_ADC_ConfigChannel+0x2da>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b8c:	f102 0760 	add.w	r7, r2, #96	@ 0x60
    MODIFY_REG(*preg,
 8001b90:	f000 44f8 	and.w	r4, r0, #2080374784	@ 0x7c000000
 8001b94:	f857 0026 	ldr.w	r0, [r7, r6, lsl #2]
 8001b98:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8001b9c:	4320      	orrs	r0, r4
 8001b9e:	4328      	orrs	r0, r5
 8001ba0:	f847 0026 	str.w	r0, [r7, r6, lsl #2]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001ba4:	7e4c      	ldrb	r4, [r1, #25]
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ba6:	690d      	ldr	r5, [r1, #16]
 8001ba8:	f1a4 0401 	sub.w	r4, r4, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001bac:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
 8001bb0:	fab4 f484 	clz	r4, r4
 8001bb4:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8001bb8:	0964      	lsrs	r4, r4, #5
 8001bba:	ea40 70c4 	orr.w	r0, r0, r4, lsl #31
 8001bbe:	f847 0025 	str.w	r0, [r7, r5, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001bc2:	7e08      	ldrb	r0, [r1, #24]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001bc4:	690d      	ldr	r5, [r1, #16]
 8001bc6:	f1a0 0001 	sub.w	r0, r0, #1
 8001bca:	6914      	ldr	r4, [r2, #16]
 8001bcc:	f005 051f 	and.w	r5, r5, #31
 8001bd0:	fab0 f080 	clz	r0, r0
 8001bd4:	f424 44f0 	bic.w	r4, r4, #30720	@ 0x7800
 8001bd8:	0940      	lsrs	r0, r0, #5
 8001bda:	02c0      	lsls	r0, r0, #11
 8001bdc:	40a8      	lsls	r0, r5
 8001bde:	4320      	orrs	r0, r4
 8001be0:	6110      	str	r0, [r2, #16]
}
 8001be2:	e78c      	b.n	8001afe <HAL_ADC_ConfigChannel+0x96>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001be4:	4987      	ldr	r1, [pc, #540]	@ (8001e04 <HAL_ADC_ConfigChannel+0x39c>)
 8001be6:	428a      	cmp	r2, r1
 8001be8:	f000 8092 	beq.w	8001d10 <HAL_ADC_ConfigChannel+0x2a8>
 8001bec:	f501 7180 	add.w	r1, r1, #256	@ 0x100
 8001bf0:	428a      	cmp	r2, r1
 8001bf2:	f000 808d 	beq.w	8001d10 <HAL_ADC_ConfigChannel+0x2a8>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001bf6:	f101 51c0 	add.w	r1, r1, #402653184	@ 0x18000000
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001bfa:	4d83      	ldr	r5, [pc, #524]	@ (8001e08 <HAL_ADC_ConfigChannel+0x3a0>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001bfc:	f501 4184 	add.w	r1, r1, #16896	@ 0x4200
 8001c00:	6888      	ldr	r0, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c02:	68ae      	ldr	r6, [r5, #8]
 8001c04:	07f6      	lsls	r6, r6, #31
 8001c06:	f53f af40 	bmi.w	8001a8a <HAL_ADC_ConfigChannel+0x22>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001c0a:	4e80      	ldr	r6, [pc, #512]	@ (8001e0c <HAL_ADC_ConfigChannel+0x3a4>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c0c:	f000 77e0 	and.w	r7, r0, #29360128	@ 0x1c00000
 8001c10:	42b4      	cmp	r4, r6
 8001c12:	f000 8103 	beq.w	8001e1c <HAL_ADC_ConfigChannel+0x3b4>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001c16:	4e7e      	ldr	r6, [pc, #504]	@ (8001e10 <HAL_ADC_ConfigChannel+0x3a8>)
 8001c18:	42b4      	cmp	r4, r6
 8001c1a:	f000 80de 	beq.w	8001dda <HAL_ADC_ConfigChannel+0x372>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001c1e:	4d7d      	ldr	r5, [pc, #500]	@ (8001e14 <HAL_ADC_ConfigChannel+0x3ac>)
 8001c20:	42ac      	cmp	r4, r5
 8001c22:	d185      	bne.n	8001b30 <HAL_ADC_ConfigChannel+0xc8>
            if (ADC_VREFINT_INSTANCE(hadc))
 8001c24:	0240      	lsls	r0, r0, #9
 8001c26:	d483      	bmi.n	8001b30 <HAL_ADC_ConfigChannel+0xc8>
 8001c28:	4877      	ldr	r0, [pc, #476]	@ (8001e08 <HAL_ADC_ConfigChannel+0x3a0>)
 8001c2a:	4282      	cmp	r2, r0
 8001c2c:	d180      	bne.n	8001b30 <HAL_ADC_ConfigChannel+0xc8>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c2e:	688a      	ldr	r2, [r1, #8]
 8001c30:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8001c34:	433a      	orrs	r2, r7
 8001c36:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8001c3a:	608a      	str	r2, [r1, #8]
}
 8001c3c:	e778      	b.n	8001b30 <HAL_ADC_ConfigChannel+0xc8>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c3e:	2f00      	cmp	r7, #0
 8001c40:	d052      	beq.n	8001ce8 <HAL_ADC_ConfigChannel+0x280>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c42:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 8001c46:	2800      	cmp	r0, #0
 8001c48:	f000 80a3 	beq.w	8001d92 <HAL_ADC_ConfigChannel+0x32a>
  return __builtin_clz(value);
 8001c4c:	fab0 f080 	clz	r0, r0
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c50:	3001      	adds	r0, #1
 8001c52:	f000 001f 	and.w	r0, r0, #31
 8001c56:	2809      	cmp	r0, #9
 8001c58:	f240 809b 	bls.w	8001d92 <HAL_ADC_ConfigChannel+0x32a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5c:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 8001c60:	2800      	cmp	r0, #0
 8001c62:	f000 8101 	beq.w	8001e68 <HAL_ADC_ConfigChannel+0x400>
  return __builtin_clz(value);
 8001c66:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c6a:	3001      	adds	r0, #1
 8001c6c:	0680      	lsls	r0, r0, #26
 8001c6e:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c72:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8001c76:	2d00      	cmp	r5, #0
 8001c78:	f000 80f4 	beq.w	8001e64 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8001c7c:	fab5 f585 	clz	r5, r5
 8001c80:	2601      	movs	r6, #1
 8001c82:	3501      	adds	r5, #1
 8001c84:	f005 051f 	and.w	r5, r5, #31
 8001c88:	fa06 f505 	lsl.w	r5, r6, r5
 8001c8c:	4328      	orrs	r0, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8e:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8001c92:	2c00      	cmp	r4, #0
 8001c94:	f000 80e4 	beq.w	8001e60 <HAL_ADC_ConfigChannel+0x3f8>
  return __builtin_clz(value);
 8001c98:	fab4 f484 	clz	r4, r4
 8001c9c:	f06f 061d 	mvn.w	r6, #29
 8001ca0:	1c65      	adds	r5, r4, #1
 8001ca2:	2403      	movs	r4, #3
 8001ca4:	f005 051f 	and.w	r5, r5, #31
 8001ca8:	fb14 6405 	smlabb	r4, r4, r5, r6
 8001cac:	0524      	lsls	r4, r4, #20
 8001cae:	f044 7400 	orr.w	r4, r4, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cb2:	4320      	orrs	r0, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001cb4:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 8001cb8:	2707      	movs	r7, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001cba:	0dc5      	lsrs	r5, r0, #23
  MODIFY_REG(*preg,
 8001cbc:	f3c0 5004 	ubfx	r0, r0, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001cc0:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 8001cc4:	4087      	lsls	r7, r0
 8001cc6:	5974      	ldr	r4, [r6, r5]
 8001cc8:	ea24 0407 	bic.w	r4, r4, r7
 8001ccc:	688f      	ldr	r7, [r1, #8]
 8001cce:	4087      	lsls	r7, r0
 8001cd0:	433c      	orrs	r4, r7
 8001cd2:	5174      	str	r4, [r6, r5]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001cd4:	680c      	ldr	r4, [r1, #0]
}
 8001cd6:	e729      	b.n	8001b2c <HAL_ADC_ConfigChannel+0xc4>
  __HAL_LOCK(hadc);
 8001cd8:	2002      	movs	r0, #2
}
 8001cda:	b003      	add	sp, #12
 8001cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001cde:	0840      	lsrs	r0, r0, #1
 8001ce0:	f000 0008 	and.w	r0, r0, #8
 8001ce4:	4085      	lsls	r5, r0
 8001ce6:	e74c      	b.n	8001b82 <HAL_ADC_ConfigChannel+0x11a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ce8:	0ea4      	lsrs	r4, r4, #26
 8001cea:	2001      	movs	r0, #1
 8001cec:	3401      	adds	r4, #1
 8001cee:	f004 051f 	and.w	r5, r4, #31
 8001cf2:	06a4      	lsls	r4, r4, #26
 8001cf4:	40a8      	lsls	r0, r5
 8001cf6:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cfa:	2d09      	cmp	r5, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001cfc:	ea40 0004 	orr.w	r0, r0, r4
 8001d00:	eb05 0445 	add.w	r4, r5, r5, lsl #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d04:	d967      	bls.n	8001dd6 <HAL_ADC_ConfigChannel+0x36e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d06:	3c1e      	subs	r4, #30
 8001d08:	0524      	lsls	r4, r4, #20
 8001d0a:	f044 7400 	orr.w	r4, r4, #33554432	@ 0x2000000
 8001d0e:	e7d0      	b.n	8001cb2 <HAL_ADC_ConfigChannel+0x24a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d10:	4d3c      	ldr	r5, [pc, #240]	@ (8001e04 <HAL_ADC_ConfigChannel+0x39c>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001d12:	4941      	ldr	r1, [pc, #260]	@ (8001e18 <HAL_ADC_ConfigChannel+0x3b0>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d14:	f505 7580 	add.w	r5, r5, #256	@ 0x100
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001d18:	6888      	ldr	r0, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d1a:	f855 6cf8 	ldr.w	r6, [r5, #-248]
 8001d1e:	68ad      	ldr	r5, [r5, #8]
 8001d20:	07ed      	lsls	r5, r5, #31
 8001d22:	f53f aeb2 	bmi.w	8001a8a <HAL_ADC_ConfigChannel+0x22>
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d26:	07f7      	lsls	r7, r6, #31
 8001d28:	f53f aeaf 	bmi.w	8001a8a <HAL_ADC_ConfigChannel+0x22>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001d2c:	4d37      	ldr	r5, [pc, #220]	@ (8001e0c <HAL_ADC_ConfigChannel+0x3a4>)
 8001d2e:	42ac      	cmp	r4, r5
 8001d30:	f43f aefe 	beq.w	8001b30 <HAL_ADC_ConfigChannel+0xc8>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001d34:	4d36      	ldr	r5, [pc, #216]	@ (8001e10 <HAL_ADC_ConfigChannel+0x3a8>)
 8001d36:	42ac      	cmp	r4, r5
 8001d38:	f43f aefa 	beq.w	8001b30 <HAL_ADC_ConfigChannel+0xc8>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001d3c:	f000 77e0 	and.w	r7, r0, #29360128	@ 0x1c00000
 8001d40:	e76d      	b.n	8001c1e <HAL_ADC_ConfigChannel+0x1b6>
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d42:	6e15      	ldr	r5, [r2, #96]	@ 0x60
 8001d44:	0684      	lsls	r4, r0, #26
 8001d46:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
 8001d4a:	ebb5 6f80 	cmp.w	r5, r0, lsl #26
 8001d4e:	d103      	bne.n	8001d58 <HAL_ADC_ConfigChannel+0x2f0>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001d50:	6e10      	ldr	r0, [r2, #96]	@ 0x60
 8001d52:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8001d56:	6610      	str	r0, [r2, #96]	@ 0x60
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d58:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 8001d5a:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8001d5e:	4284      	cmp	r4, r0
 8001d60:	d103      	bne.n	8001d6a <HAL_ADC_ConfigChannel+0x302>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001d62:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 8001d64:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8001d68:	6650      	str	r0, [r2, #100]	@ 0x64
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d6a:	6e90      	ldr	r0, [r2, #104]	@ 0x68
 8001d6c:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8001d70:	4284      	cmp	r4, r0
 8001d72:	d103      	bne.n	8001d7c <HAL_ADC_ConfigChannel+0x314>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001d74:	6e90      	ldr	r0, [r2, #104]	@ 0x68
 8001d76:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8001d7a:	6690      	str	r0, [r2, #104]	@ 0x68
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d7c:	6ed0      	ldr	r0, [r2, #108]	@ 0x6c
 8001d7e:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8001d82:	4284      	cmp	r4, r0
 8001d84:	f47f aebb 	bne.w	8001afe <HAL_ADC_ConfigChannel+0x96>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001d88:	6ed0      	ldr	r0, [r2, #108]	@ 0x6c
 8001d8a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8001d8e:	66d0      	str	r0, [r2, #108]	@ 0x6c
 8001d90:	e6b5      	b.n	8001afe <HAL_ADC_ConfigChannel+0x96>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d92:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 8001d96:	2800      	cmp	r0, #0
 8001d98:	d06e      	beq.n	8001e78 <HAL_ADC_ConfigChannel+0x410>
  return __builtin_clz(value);
 8001d9a:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d9e:	3001      	adds	r0, #1
 8001da0:	0680      	lsls	r0, r0, #26
 8001da2:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da6:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8001daa:	2d00      	cmp	r5, #0
 8001dac:	d062      	beq.n	8001e74 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8001dae:	fab5 f585 	clz	r5, r5
 8001db2:	2601      	movs	r6, #1
 8001db4:	3501      	adds	r5, #1
 8001db6:	f005 051f 	and.w	r5, r5, #31
 8001dba:	fa06 f505 	lsl.w	r5, r6, r5
 8001dbe:	4328      	orrs	r0, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc0:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8001dc4:	2c00      	cmp	r4, #0
 8001dc6:	d052      	beq.n	8001e6e <HAL_ADC_ConfigChannel+0x406>
  return __builtin_clz(value);
 8001dc8:	fab4 f484 	clz	r4, r4
 8001dcc:	3401      	adds	r4, #1
 8001dce:	f004 041f 	and.w	r4, r4, #31
 8001dd2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8001dd6:	0524      	lsls	r4, r4, #20
 8001dd8:	e76b      	b.n	8001cb2 <HAL_ADC_ConfigChannel+0x24a>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001dda:	01c4      	lsls	r4, r0, #7
 8001ddc:	f53f aea8 	bmi.w	8001b30 <HAL_ADC_ConfigChannel+0xc8>
 8001de0:	42aa      	cmp	r2, r5
 8001de2:	f47f aea5 	bne.w	8001b30 <HAL_ADC_ConfigChannel+0xc8>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001de6:	688a      	ldr	r2, [r1, #8]
 8001de8:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8001dec:	433a      	orrs	r2, r7
 8001dee:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8001df2:	608a      	str	r2, [r1, #8]
}
 8001df4:	e69c      	b.n	8001b30 <HAL_ADC_ConfigChannel+0xc8>
 8001df6:	bf00      	nop
 8001df8:	000fffff 	.word	0x000fffff
 8001dfc:	47ff0000 	.word	0x47ff0000
 8001e00:	5c001000 	.word	0x5c001000
 8001e04:	40022000 	.word	0x40022000
 8001e08:	58026000 	.word	0x58026000
 8001e0c:	cb840000 	.word	0xcb840000
 8001e10:	c7520000 	.word	0xc7520000
 8001e14:	cfb80000 	.word	0xcfb80000
 8001e18:	40022300 	.word	0x40022300
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001e1c:	0206      	lsls	r6, r0, #8
 8001e1e:	f53f ae87 	bmi.w	8001b30 <HAL_ADC_ConfigChannel+0xc8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e22:	42aa      	cmp	r2, r5
 8001e24:	f47f ae84 	bne.w	8001b30 <HAL_ADC_ConfigChannel+0xc8>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001e28:	688a      	ldr	r2, [r1, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e2a:	4815      	ldr	r0, [pc, #84]	@ (8001e80 <HAL_ADC_ConfigChannel+0x418>)
 8001e2c:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8001e30:	433a      	orrs	r2, r7
 8001e32:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001e36:	608a      	str	r2, [r1, #8]
 8001e38:	6802      	ldr	r2, [r0, #0]
 8001e3a:	4912      	ldr	r1, [pc, #72]	@ (8001e84 <HAL_ADC_ConfigChannel+0x41c>)
 8001e3c:	0992      	lsrs	r2, r2, #6
 8001e3e:	fba1 1202 	umull	r1, r2, r1, r2
 8001e42:	0992      	lsrs	r2, r2, #6
 8001e44:	3201      	adds	r2, #1
 8001e46:	0052      	lsls	r2, r2, #1
 8001e48:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8001e4a:	9a01      	ldr	r2, [sp, #4]
 8001e4c:	2a00      	cmp	r2, #0
 8001e4e:	f43f ae6f 	beq.w	8001b30 <HAL_ADC_ConfigChannel+0xc8>
                wait_loop_index--;
 8001e52:	9a01      	ldr	r2, [sp, #4]
 8001e54:	3a01      	subs	r2, #1
 8001e56:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8001e58:	9a01      	ldr	r2, [sp, #4]
 8001e5a:	2a00      	cmp	r2, #0
 8001e5c:	d1f9      	bne.n	8001e52 <HAL_ADC_ConfigChannel+0x3ea>
 8001e5e:	e667      	b.n	8001b30 <HAL_ADC_ConfigChannel+0xc8>
 8001e60:	4c09      	ldr	r4, [pc, #36]	@ (8001e88 <HAL_ADC_ConfigChannel+0x420>)
 8001e62:	e726      	b.n	8001cb2 <HAL_ADC_ConfigChannel+0x24a>
 8001e64:	2502      	movs	r5, #2
 8001e66:	e711      	b.n	8001c8c <HAL_ADC_ConfigChannel+0x224>
 8001e68:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8001e6c:	e701      	b.n	8001c72 <HAL_ADC_ConfigChannel+0x20a>
 8001e6e:	f44f 1440 	mov.w	r4, #3145728	@ 0x300000
 8001e72:	e71e      	b.n	8001cb2 <HAL_ADC_ConfigChannel+0x24a>
 8001e74:	2502      	movs	r5, #2
 8001e76:	e7a2      	b.n	8001dbe <HAL_ADC_ConfigChannel+0x356>
 8001e78:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8001e7c:	e793      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x33e>
 8001e7e:	bf00      	nop
 8001e80:	24000004 	.word	0x24000004
 8001e84:	053e2d63 	.word	0x053e2d63
 8001e88:	fe500000 	.word	0xfe500000

08001e8c <ADC_ConversionStop>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e8c:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e94:	689a      	ldr	r2, [r3, #8]
{
 8001e96:	b570      	push	{r4, r5, r6, lr}
 8001e98:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e9a:	d101      	bne.n	8001ea0 <ADC_ConversionStop+0x14>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e9c:	0716      	lsls	r6, r2, #28
 8001e9e:	d540      	bpl.n	8001f22 <ADC_ConversionStop+0x96>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8001ea0:	68da      	ldr	r2, [r3, #12]
 8001ea2:	0195      	lsls	r5, r2, #6
 8001ea4:	d504      	bpl.n	8001eb0 <ADC_ConversionStop+0x24>
        && (hadc->Init.ContinuousConvMode == ENABLE)
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8001ea6:	8aa0      	ldrh	r0, [r4, #20]
 8001ea8:	f240 1201 	movw	r2, #257	@ 0x101
 8001eac:	4290      	cmp	r0, r2
 8001eae:	d03a      	beq.n	8001f26 <ADC_ConversionStop+0x9a>
      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8001eb0:	2902      	cmp	r1, #2
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001eb2:	689a      	ldr	r2, [r3, #8]
 8001eb4:	d048      	beq.n	8001f48 <ADC_ConversionStop+0xbc>
 8001eb6:	0750      	lsls	r0, r2, #29
 8001eb8:	d508      	bpl.n	8001ecc <ADC_ConversionStop+0x40>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	0792      	lsls	r2, r2, #30
 8001ebe:	d405      	bmi.n	8001ecc <ADC_ConversionStop+0x40>
  MODIFY_REG(ADCx->CR,
 8001ec0:	6898      	ldr	r0, [r3, #8]
 8001ec2:	4a2d      	ldr	r2, [pc, #180]	@ (8001f78 <ADC_ConversionStop+0xec>)
 8001ec4:	4002      	ands	r2, r0
 8001ec6:	f042 0210 	orr.w	r2, r2, #16
 8001eca:	609a      	str	r2, [r3, #8]
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8001ecc:	2901      	cmp	r1, #1
 8001ece:	d039      	beq.n	8001f44 <ADC_ConversionStop+0xb8>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ed0:	689a      	ldr	r2, [r3, #8]
 8001ed2:	0710      	lsls	r0, r2, #28
 8001ed4:	d508      	bpl.n	8001ee8 <ADC_ConversionStop+0x5c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	0792      	lsls	r2, r2, #30
 8001eda:	d405      	bmi.n	8001ee8 <ADC_ConversionStop+0x5c>
  MODIFY_REG(ADCx->CR,
 8001edc:	6898      	ldr	r0, [r3, #8]
 8001ede:	4a26      	ldr	r2, [pc, #152]	@ (8001f78 <ADC_ConversionStop+0xec>)
 8001ee0:	4002      	ands	r2, r0
 8001ee2:	f042 0220 	orr.w	r2, r2, #32
 8001ee6:	609a      	str	r2, [r3, #8]
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8001ee8:	2903      	cmp	r1, #3
 8001eea:	d12b      	bne.n	8001f44 <ADC_ConversionStop+0xb8>
 8001eec:	250c      	movs	r5, #12
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
        break;
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8001eee:	f7ff fd8f 	bl	8001a10 <HAL_GetTick>

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001ef2:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001ef4:	4606      	mov	r6, r0
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	421d      	tst	r5, r3
 8001efa:	d012      	beq.n	8001f22 <ADC_ConversionStop+0x96>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001efc:	f7ff fd88 	bl	8001a10 <HAL_GetTick>
 8001f00:	1b83      	subs	r3, r0, r6
 8001f02:	2b05      	cmp	r3, #5
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001f04:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001f06:	d9f6      	bls.n	8001ef6 <ADC_ConversionStop+0x6a>
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001f08:	689a      	ldr	r2, [r3, #8]
 8001f0a:	422a      	tst	r2, r5
 8001f0c:	d0f3      	beq.n	8001ef6 <ADC_ConversionStop+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f0e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
          return HAL_ERROR;
 8001f10:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f12:	f043 0310 	orr.w	r3, r3, #16
 8001f16:	6563      	str	r3, [r4, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f18:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001f1a:	f043 0301 	orr.w	r3, r3, #1
 8001f1e:	65a3      	str	r3, [r4, #88]	@ 0x58

  }

  /* Return HAL status */
  return HAL_OK;
}
 8001f20:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8001f22:	2000      	movs	r0, #0
}
 8001f24:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	0650      	lsls	r0, r2, #25
 8001f2a:	d406      	bmi.n	8001f3a <ADC_ConversionStop+0xae>
 8001f2c:	4a13      	ldr	r2, [pc, #76]	@ (8001f7c <ADC_ConversionStop+0xf0>)
 8001f2e:	e001      	b.n	8001f34 <ADC_ConversionStop+0xa8>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8001f30:	3a01      	subs	r2, #1
 8001f32:	d0ec      	beq.n	8001f0e <ADC_ConversionStop+0x82>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001f34:	6819      	ldr	r1, [r3, #0]
 8001f36:	0649      	lsls	r1, r1, #25
 8001f38:	d5fa      	bpl.n	8001f30 <ADC_ConversionStop+0xa4>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001f3a:	2240      	movs	r2, #64	@ 0x40
 8001f3c:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	0756      	lsls	r6, r2, #29
 8001f42:	d40f      	bmi.n	8001f64 <ADC_ConversionStop+0xd8>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8001f44:	2504      	movs	r5, #4
 8001f46:	e7d2      	b.n	8001eee <ADC_ConversionStop+0x62>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f48:	0716      	lsls	r6, r2, #28
 8001f4a:	d401      	bmi.n	8001f50 <ADC_ConversionStop+0xc4>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001f4c:	2508      	movs	r5, #8
 8001f4e:	e7ce      	b.n	8001eee <ADC_ConversionStop+0x62>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001f50:	689a      	ldr	r2, [r3, #8]
 8001f52:	0795      	lsls	r5, r2, #30
 8001f54:	d4fa      	bmi.n	8001f4c <ADC_ConversionStop+0xc0>
  MODIFY_REG(ADCx->CR,
 8001f56:	6899      	ldr	r1, [r3, #8]
 8001f58:	4a07      	ldr	r2, [pc, #28]	@ (8001f78 <ADC_ConversionStop+0xec>)
 8001f5a:	400a      	ands	r2, r1
 8001f5c:	f042 0220 	orr.w	r2, r2, #32
 8001f60:	609a      	str	r2, [r3, #8]
    switch (conversion_group_reassigned)
 8001f62:	e7f3      	b.n	8001f4c <ADC_ConversionStop+0xc0>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001f64:	689a      	ldr	r2, [r3, #8]
 8001f66:	0795      	lsls	r5, r2, #30
 8001f68:	d4ec      	bmi.n	8001f44 <ADC_ConversionStop+0xb8>
  MODIFY_REG(ADCx->CR,
 8001f6a:	6899      	ldr	r1, [r3, #8]
 8001f6c:	4a02      	ldr	r2, [pc, #8]	@ (8001f78 <ADC_ConversionStop+0xec>)
 8001f6e:	400a      	ands	r2, r1
 8001f70:	f042 0210 	orr.w	r2, r2, #16
 8001f74:	609a      	str	r2, [r3, #8]
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8001f76:	e7e5      	b.n	8001f44 <ADC_ConversionStop+0xb8>
 8001f78:	7fffffc0 	.word	0x7fffffc0
 8001f7c:	000cdc00 	.word	0x000cdc00

08001f80 <ADC_Enable>:

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f80:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	07d1      	lsls	r1, r2, #31
 8001f86:	d501      	bpl.n	8001f8c <ADC_Enable+0xc>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001f88:	2000      	movs	r0, #0
}
 8001f8a:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001f8c:	6899      	ldr	r1, [r3, #8]
 8001f8e:	4a23      	ldr	r2, [pc, #140]	@ (800201c <ADC_Enable+0x9c>)
 8001f90:	4211      	tst	r1, r2
{
 8001f92:	b570      	push	{r4, r5, r6, lr}
 8001f94:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001f96:	d12f      	bne.n	8001ff8 <ADC_Enable+0x78>
  MODIFY_REG(ADCx->CR,
 8001f98:	6899      	ldr	r1, [r3, #8]
 8001f9a:	4a21      	ldr	r2, [pc, #132]	@ (8002020 <ADC_Enable+0xa0>)
 8001f9c:	400a      	ands	r2, r1
 8001f9e:	f042 0201 	orr.w	r2, r2, #1
 8001fa2:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001fa4:	f7ff fd34 	bl	8001a10 <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fa8:	6823      	ldr	r3, [r4, #0]
 8001faa:	4a1e      	ldr	r2, [pc, #120]	@ (8002024 <ADC_Enable+0xa4>)
    tickstart = HAL_GetTick();
 8001fac:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d02c      	beq.n	800200c <ADC_Enable+0x8c>
 8001fb2:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d028      	beq.n	800200c <ADC_Enable+0x8c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001fba:	f102 52c0 	add.w	r2, r2, #402653184	@ 0x18000000
 8001fbe:	f502 4284 	add.w	r2, r2, #16896	@ 0x4200
 8001fc2:	6892      	ldr	r2, [r2, #8]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	07d2      	lsls	r2, r2, #31
 8001fc8:	d414      	bmi.n	8001ff4 <ADC_Enable+0x74>
  MODIFY_REG(ADCx->CR,
 8001fca:	4e15      	ldr	r6, [pc, #84]	@ (8002020 <ADC_Enable+0xa0>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001fcc:	689a      	ldr	r2, [r3, #8]
 8001fce:	07d0      	lsls	r0, r2, #31
 8001fd0:	d404      	bmi.n	8001fdc <ADC_Enable+0x5c>
  MODIFY_REG(ADCx->CR,
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	4032      	ands	r2, r6
 8001fd6:	f042 0201 	orr.w	r2, r2, #1
 8001fda:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001fdc:	f7ff fd18 	bl	8001a10 <HAL_GetTick>
 8001fe0:	1b43      	subs	r3, r0, r5
 8001fe2:	2b02      	cmp	r3, #2
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fe4:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001fe6:	d902      	bls.n	8001fee <ADC_Enable+0x6e>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	07d1      	lsls	r1, r2, #31
 8001fec:	d504      	bpl.n	8001ff8 <ADC_Enable+0x78>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	07d2      	lsls	r2, r2, #31
 8001ff2:	d5eb      	bpl.n	8001fcc <ADC_Enable+0x4c>
  return HAL_OK;
 8001ff4:	2000      	movs	r0, #0
}
 8001ff6:	bd70      	pop	{r4, r5, r6, pc}
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ff8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      return HAL_ERROR;
 8001ffa:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ffc:	f043 0310 	orr.w	r3, r3, #16
 8002000:	6563      	str	r3, [r4, #84]	@ 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002002:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002004:	f043 0301 	orr.w	r3, r3, #1
 8002008:	65a3      	str	r3, [r4, #88]	@ 0x58
}
 800200a:	bd70      	pop	{r4, r5, r6, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800200c:	4a06      	ldr	r2, [pc, #24]	@ (8002028 <ADC_Enable+0xa8>)
 800200e:	6892      	ldr	r2, [r2, #8]
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002010:	06d6      	lsls	r6, r2, #27
 8002012:	d0d7      	beq.n	8001fc4 <ADC_Enable+0x44>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002014:	4a05      	ldr	r2, [pc, #20]	@ (800202c <ADC_Enable+0xac>)
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002016:	4293      	cmp	r3, r2
 8002018:	d1d4      	bne.n	8001fc4 <ADC_Enable+0x44>
 800201a:	e7eb      	b.n	8001ff4 <ADC_Enable+0x74>
 800201c:	8000003f 	.word	0x8000003f
 8002020:	7fffffc0 	.word	0x7fffffc0
 8002024:	40022000 	.word	0x40022000
 8002028:	40022300 	.word	0x40022300
 800202c:	40022100 	.word	0x40022100

08002030 <HAL_ADC_Start>:
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002030:	4a38      	ldr	r2, [pc, #224]	@ (8002114 <HAL_ADC_Start+0xe4>)
 8002032:	6803      	ldr	r3, [r0, #0]
 8002034:	4293      	cmp	r3, r2
{
 8002036:	b570      	push	{r4, r5, r6, lr}
 8002038:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800203a:	d049      	beq.n	80020d0 <HAL_ADC_Start+0xa0>
 800203c:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8002040:	4293      	cmp	r3, r2
 8002042:	d045      	beq.n	80020d0 <HAL_ADC_Start+0xa0>
 8002044:	4a34      	ldr	r2, [pc, #208]	@ (8002118 <HAL_ADC_Start+0xe8>)
 8002046:	6896      	ldr	r6, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002048:	689d      	ldr	r5, [r3, #8]
 800204a:	f015 0504 	ands.w	r5, r5, #4
 800204e:	d145      	bne.n	80020dc <HAL_ADC_Start+0xac>
    __HAL_LOCK(hadc);
 8002050:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8002054:	2b01      	cmp	r3, #1
 8002056:	d041      	beq.n	80020dc <HAL_ADC_Start+0xac>
 8002058:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 800205a:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 800205c:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    tmp_hal_status = ADC_Enable(hadc);
 8002060:	f7ff ff8e 	bl	8001f80 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8002064:	2800      	cmp	r0, #0
 8002066:	d13b      	bne.n	80020e0 <HAL_ADC_Start+0xb0>
      ADC_STATE_CLR_SET(hadc->State,
 8002068:	6d63      	ldr	r3, [r4, #84]	@ 0x54
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800206a:	f006 061f 	and.w	r6, r6, #31
 800206e:	4a2b      	ldr	r2, [pc, #172]	@ (800211c <HAL_ADC_Start+0xec>)
 8002070:	401a      	ands	r2, r3
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002072:	6823      	ldr	r3, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 8002074:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002078:	6562      	str	r2, [r4, #84]	@ 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800207a:	4a29      	ldr	r2, [pc, #164]	@ (8002120 <HAL_ADC_Start+0xf0>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d032      	beq.n	80020e6 <HAL_ADC_Start+0xb6>
 8002080:	4619      	mov	r1, r3
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002082:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002084:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8002088:	6562      	str	r2, [r4, #84]	@ 0x54
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800208a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800208c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002090:	d03d      	beq.n	800210e <HAL_ADC_Start+0xde>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002092:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8002094:	f022 0206 	bic.w	r2, r2, #6
 8002098:	65a2      	str	r2, [r4, #88]	@ 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800209a:	221c      	movs	r2, #28
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800209c:	428b      	cmp	r3, r1
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800209e:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hadc);
 80020a0:	f04f 0200 	mov.w	r2, #0
 80020a4:	f884 2050 	strb.w	r2, [r4, #80]	@ 0x50
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020a8:	d021      	beq.n	80020ee <HAL_ADC_Start+0xbe>
 80020aa:	f240 2221 	movw	r2, #545	@ 0x221
 80020ae:	40f2      	lsrs	r2, r6
 80020b0:	07d5      	lsls	r5, r2, #31
 80020b2:	d41c      	bmi.n	80020ee <HAL_ADC_Start+0xbe>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020b4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80020b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020ba:	6563      	str	r3, [r4, #84]	@ 0x54
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80020bc:	68cb      	ldr	r3, [r1, #12]
 80020be:	019b      	lsls	r3, r3, #6
 80020c0:	d505      	bpl.n	80020ce <HAL_ADC_Start+0x9e>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80020c2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80020c4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80020c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80020cc:	6563      	str	r3, [r4, #84]	@ 0x54
}
 80020ce:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020d0:	4a14      	ldr	r2, [pc, #80]	@ (8002124 <HAL_ADC_Start+0xf4>)
 80020d2:	6896      	ldr	r6, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020d4:	689d      	ldr	r5, [r3, #8]
 80020d6:	f015 0504 	ands.w	r5, r5, #4
 80020da:	d0b9      	beq.n	8002050 <HAL_ADC_Start+0x20>
    __HAL_LOCK(hadc);
 80020dc:	2002      	movs	r0, #2
}
 80020de:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_UNLOCK(hadc);
 80020e0:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
}
 80020e4:	bd70      	pop	{r4, r5, r6, pc}
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020e6:	490b      	ldr	r1, [pc, #44]	@ (8002114 <HAL_ADC_Start+0xe4>)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020e8:	2e00      	cmp	r6, #0
 80020ea:	d1ce      	bne.n	800208a <HAL_ADC_Start+0x5a>
 80020ec:	e7c9      	b.n	8002082 <HAL_ADC_Start+0x52>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80020ee:	68da      	ldr	r2, [r3, #12]
 80020f0:	0192      	lsls	r2, r2, #6
 80020f2:	d505      	bpl.n	8002100 <HAL_ADC_Start+0xd0>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80020f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80020f6:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80020fa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80020fe:	6562      	str	r2, [r4, #84]	@ 0x54
  MODIFY_REG(ADCx->CR,
 8002100:	6899      	ldr	r1, [r3, #8]
 8002102:	4a09      	ldr	r2, [pc, #36]	@ (8002128 <HAL_ADC_Start+0xf8>)
 8002104:	400a      	ands	r2, r1
 8002106:	f042 0204 	orr.w	r2, r2, #4
 800210a:	609a      	str	r2, [r3, #8]
}
 800210c:	bd70      	pop	{r4, r5, r6, pc}
        ADC_CLEAR_ERRORCODE(hadc);
 800210e:	65a2      	str	r2, [r4, #88]	@ 0x58
 8002110:	e7c3      	b.n	800209a <HAL_ADC_Start+0x6a>
 8002112:	bf00      	nop
 8002114:	40022000 	.word	0x40022000
 8002118:	58026300 	.word	0x58026300
 800211c:	fffff0fe 	.word	0xfffff0fe
 8002120:	40022100 	.word	0x40022100
 8002124:	40022300 	.word	0x40022300
 8002128:	7fffffc0 	.word	0x7fffffc0

0800212c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800212c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800212e:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002130:	689a      	ldr	r2, [r3, #8]
 8002132:	0795      	lsls	r5, r2, #30
 8002134:	d502      	bpl.n	800213c <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002136:	689b      	ldr	r3, [r3, #8]
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002138:	2000      	movs	r0, #0
}
 800213a:	bd38      	pop	{r3, r4, r5, pc}
 800213c:	689a      	ldr	r2, [r3, #8]
 800213e:	07d4      	lsls	r4, r2, #31
 8002140:	d5fa      	bpl.n	8002138 <ADC_Disable+0xc>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	4604      	mov	r4, r0
 8002146:	f002 020d 	and.w	r2, r2, #13
 800214a:	2a01      	cmp	r2, #1
 800214c:	d009      	beq.n	8002162 <ADC_Disable+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800214e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      return HAL_ERROR;
 8002150:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002152:	f043 0310 	orr.w	r3, r3, #16
 8002156:	6563      	str	r3, [r4, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002158:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800215a:	f043 0301 	orr.w	r3, r3, #1
 800215e:	65a3      	str	r3, [r4, #88]	@ 0x58
}
 8002160:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 8002162:	6898      	ldr	r0, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002164:	2103      	movs	r1, #3
 8002166:	4a0d      	ldr	r2, [pc, #52]	@ (800219c <ADC_Disable+0x70>)
 8002168:	4002      	ands	r2, r0
 800216a:	f042 0202 	orr.w	r2, r2, #2
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8002172:	f7ff fc4d 	bl	8001a10 <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002176:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002178:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	07d9      	lsls	r1, r3, #31
 800217e:	d403      	bmi.n	8002188 <ADC_Disable+0x5c>
 8002180:	e7da      	b.n	8002138 <ADC_Disable+0xc>
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	07db      	lsls	r3, r3, #31
 8002186:	d5d7      	bpl.n	8002138 <ADC_Disable+0xc>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002188:	f7ff fc42 	bl	8001a10 <HAL_GetTick>
 800218c:	1b40      	subs	r0, r0, r5
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800218e:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002190:	2802      	cmp	r0, #2
 8002192:	d9f6      	bls.n	8002182 <ADC_Disable+0x56>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002194:	689a      	ldr	r2, [r3, #8]
 8002196:	07d2      	lsls	r2, r2, #31
 8002198:	d5f3      	bpl.n	8002182 <ADC_Disable+0x56>
 800219a:	e7d8      	b.n	800214e <ADC_Disable+0x22>
 800219c:	7fffffc0 	.word	0x7fffffc0

080021a0 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 80021a0:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d01b      	beq.n	80021e0 <HAL_ADC_Stop+0x40>
 80021a8:	2301      	movs	r3, #1
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80021aa:	2103      	movs	r1, #3
{
 80021ac:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 80021ae:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80021b2:	4604      	mov	r4, r0
 80021b4:	f7ff fe6a 	bl	8001e8c <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80021b8:	b118      	cbz	r0, 80021c2 <HAL_ADC_Stop+0x22>
  __HAL_UNLOCK(hadc);
 80021ba:	2300      	movs	r3, #0
 80021bc:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 80021c0:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 80021c2:	4620      	mov	r0, r4
 80021c4:	f7ff ffb2 	bl	800212c <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80021c8:	2800      	cmp	r0, #0
 80021ca:	d1f6      	bne.n	80021ba <HAL_ADC_Stop+0x1a>
      ADC_STATE_CLR_SET(hadc->State,
 80021cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80021ce:	4b05      	ldr	r3, [pc, #20]	@ (80021e4 <HAL_ADC_Stop+0x44>)
 80021d0:	4013      	ands	r3, r2
 80021d2:	f043 0301 	orr.w	r3, r3, #1
 80021d6:	6563      	str	r3, [r4, #84]	@ 0x54
  __HAL_UNLOCK(hadc);
 80021d8:	2300      	movs	r3, #0
 80021da:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 80021de:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 80021e0:	2002      	movs	r0, #2
}
 80021e2:	4770      	bx	lr
 80021e4:	ffffeefe 	.word	0xffffeefe

080021e8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80021e8:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80021ea:	4a56      	ldr	r2, [pc, #344]	@ (8002344 <ADC_ConfigureBoostMode+0x15c>)
{
 80021ec:	4604      	mov	r4, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80021ee:	6803      	ldr	r3, [r0, #0]
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d025      	beq.n	8002240 <ADC_ConfigureBoostMode+0x58>
 80021f4:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d021      	beq.n	8002240 <ADC_ConfigureBoostMode+0x58>
 80021fc:	4b52      	ldr	r3, [pc, #328]	@ (8002348 <ADC_ConfigureBoostMode+0x160>)
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 8002204:	d021      	beq.n	800224a <ADC_ConfigureBoostMode+0x62>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002206:	f002 f89b 	bl	8004340 <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 800220a:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCC_GetHCLKFreq();
 800220c:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 800220e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002212:	f000 8086 	beq.w	8002322 <ADC_ConfigureBoostMode+0x13a>
 8002216:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800221a:	d06f      	beq.n	80022fc <ADC_ConfigureBoostMode+0x114>
 800221c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002220:	d07f      	beq.n	8002322 <ADC_ConfigureBoostMode+0x13a>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002222:	f7ff fc0d 	bl	8001a40 <HAL_GetREVID>
 8002226:	f241 0303 	movw	r3, #4099	@ 0x1003
 800222a:	4298      	cmp	r0, r3
 800222c:	d84b      	bhi.n	80022c6 <ADC_ConfigureBoostMode+0xde>
  {
    if (freq > 20000000UL)
 800222e:	4a47      	ldr	r2, [pc, #284]	@ (800234c <ADC_ConfigureBoostMode+0x164>)
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002230:	6823      	ldr	r3, [r4, #0]
    if (freq > 20000000UL)
 8002232:	4295      	cmp	r5, r2
 8002234:	d92a      	bls.n	800228c <ADC_ConfigureBoostMode+0xa4>
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800223c:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800223e:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002240:	4b43      	ldr	r3, [pc, #268]	@ (8002350 <ADC_ConfigureBoostMode+0x168>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 8002248:	d1dd      	bne.n	8002206 <ADC_ConfigureBoostMode+0x1e>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800224a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800224e:	2100      	movs	r1, #0
 8002250:	f003 fb00 	bl	8005854 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8002254:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002256:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8002258:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800225c:	d06b      	beq.n	8002336 <ADC_ConfigureBoostMode+0x14e>
 800225e:	d808      	bhi.n	8002272 <ADC_ConfigureBoostMode+0x8a>
 8002260:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002264:	d054      	beq.n	8002310 <ADC_ConfigureBoostMode+0x128>
 8002266:	d916      	bls.n	8002296 <ADC_ConfigureBoostMode+0xae>
 8002268:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800226c:	d1d9      	bne.n	8002222 <ADC_ConfigureBoostMode+0x3a>
        freq /= 32UL;
 800226e:	0945      	lsrs	r5, r0, #5
        break;
 8002270:	e7d7      	b.n	8002222 <ADC_ConfigureBoostMode+0x3a>
    switch (hadc->Init.ClockPrescaler)
 8002272:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002276:	d049      	beq.n	800230c <ADC_ConfigureBoostMode+0x124>
 8002278:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800227c:	d1d1      	bne.n	8002222 <ADC_ConfigureBoostMode+0x3a>
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800227e:	f7ff fbdf 	bl	8001a40 <HAL_GetREVID>
 8002282:	f241 0303 	movw	r3, #4099	@ 0x1003
 8002286:	4298      	cmp	r0, r3
 8002288:	d82e      	bhi.n	80022e8 <ADC_ConfigureBoostMode+0x100>
 800228a:	6823      	ldr	r3, [r4, #0]
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800228c:	689a      	ldr	r2, [r3, #8]
 800228e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002292:	609a      	str	r2, [r3, #8]
}
 8002294:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 8002296:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800229a:	d006      	beq.n	80022aa <ADC_ConfigureBoostMode+0xc2>
 800229c:	d90a      	bls.n	80022b4 <ADC_ConfigureBoostMode+0xcc>
 800229e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80022a2:	d002      	beq.n	80022aa <ADC_ConfigureBoostMode+0xc2>
 80022a4:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80022a8:	d1bb      	bne.n	8002222 <ADC_ConfigureBoostMode+0x3a>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80022aa:	0c9b      	lsrs	r3, r3, #18
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 80022b2:	e7b6      	b.n	8002222 <ADC_ConfigureBoostMode+0x3a>
    switch (hadc->Init.ClockPrescaler)
 80022b4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80022b8:	d0f7      	beq.n	80022aa <ADC_ConfigureBoostMode+0xc2>
 80022ba:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80022be:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 80022c2:	d0f2      	beq.n	80022aa <ADC_ConfigureBoostMode+0xc2>
 80022c4:	e7ad      	b.n	8002222 <ADC_ConfigureBoostMode+0x3a>
    if (freq <= 6250000UL)
 80022c6:	4a23      	ldr	r2, [pc, #140]	@ (8002354 <ADC_ConfigureBoostMode+0x16c>)
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80022c8:	6823      	ldr	r3, [r4, #0]
    if (freq <= 6250000UL)
 80022ca:	4295      	cmp	r5, r2
 80022cc:	d911      	bls.n	80022f2 <ADC_ConfigureBoostMode+0x10a>
    else if (freq <= 12500000UL)
 80022ce:	4a22      	ldr	r2, [pc, #136]	@ (8002358 <ADC_ConfigureBoostMode+0x170>)
 80022d0:	4295      	cmp	r5, r2
 80022d2:	d91f      	bls.n	8002314 <ADC_ConfigureBoostMode+0x12c>
    else if (freq <= 25000000UL)
 80022d4:	4a21      	ldr	r2, [pc, #132]	@ (800235c <ADC_ConfigureBoostMode+0x174>)
 80022d6:	4295      	cmp	r5, r2
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80022d8:	689a      	ldr	r2, [r3, #8]
    else if (freq <= 25000000UL)
 80022da:	d82e      	bhi.n	800233a <ADC_ConfigureBoostMode+0x152>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80022dc:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80022e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022e4:	609a      	str	r2, [r3, #8]
}
 80022e6:	bd38      	pop	{r3, r4, r5, pc}
    if (freq <= 6250000UL)
 80022e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002354 <ADC_ConfigureBoostMode+0x16c>)
 80022ea:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 80022ee:	6823      	ldr	r3, [r4, #0]
 80022f0:	d310      	bcc.n	8002314 <ADC_ConfigureBoostMode+0x12c>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80022f8:	609a      	str	r2, [r3, #8]
}
 80022fa:	bd38      	pop	{r3, r4, r5, pc}
        freq /= 4UL;
 80022fc:	0885      	lsrs	r5, r0, #2
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80022fe:	f7ff fb9f 	bl	8001a40 <HAL_GetREVID>
 8002302:	f241 0303 	movw	r3, #4099	@ 0x1003
 8002306:	4298      	cmp	r0, r3
 8002308:	d8dd      	bhi.n	80022c6 <ADC_ConfigureBoostMode+0xde>
 800230a:	e790      	b.n	800222e <ADC_ConfigureBoostMode+0x46>
        freq /= 128UL;
 800230c:	09c5      	lsrs	r5, r0, #7
        break;
 800230e:	e788      	b.n	8002222 <ADC_ConfigureBoostMode+0x3a>
        freq /= 16UL;
 8002310:	0905      	lsrs	r5, r0, #4
        break;
 8002312:	e786      	b.n	8002222 <ADC_ConfigureBoostMode+0x3a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002314:	689a      	ldr	r2, [r3, #8]
 8002316:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800231a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800231e:	609a      	str	r2, [r3, #8]
}
 8002320:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002322:	0c1b      	lsrs	r3, r3, #16
 8002324:	fbb5 f5f3 	udiv	r5, r5, r3
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002328:	f7ff fb8a 	bl	8001a40 <HAL_GetREVID>
 800232c:	f241 0303 	movw	r3, #4099	@ 0x1003
 8002330:	4298      	cmp	r0, r3
 8002332:	d8c8      	bhi.n	80022c6 <ADC_ConfigureBoostMode+0xde>
 8002334:	e77b      	b.n	800222e <ADC_ConfigureBoostMode+0x46>
        freq /= 64UL;
 8002336:	0985      	lsrs	r5, r0, #6
        break;
 8002338:	e773      	b.n	8002222 <ADC_ConfigureBoostMode+0x3a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800233a:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800233e:	609a      	str	r2, [r3, #8]
}
 8002340:	bd38      	pop	{r3, r4, r5, pc}
 8002342:	bf00      	nop
 8002344:	40022000 	.word	0x40022000
 8002348:	58026300 	.word	0x58026300
 800234c:	01312d00 	.word	0x01312d00
 8002350:	40022300 	.word	0x40022300
 8002354:	00bebc21 	.word	0x00bebc21
 8002358:	017d7841 	.word	0x017d7841
 800235c:	02faf081 	.word	0x02faf081

08002360 <HAL_ADC_Init>:
{
 8002360:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 8002362:	2300      	movs	r3, #0
{
 8002364:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 8002366:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8002368:	2800      	cmp	r0, #0
 800236a:	f000 80a9 	beq.w	80024c0 <HAL_ADC_Init+0x160>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800236e:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 8002370:	4604      	mov	r4, r0
 8002372:	2d00      	cmp	r5, #0
 8002374:	f000 80aa 	beq.w	80024cc <HAL_ADC_Init+0x16c>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002378:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800237a:	6893      	ldr	r3, [r2, #8]
 800237c:	009e      	lsls	r6, r3, #2
 800237e:	d503      	bpl.n	8002388 <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002380:	6891      	ldr	r1, [r2, #8]
 8002382:	4b71      	ldr	r3, [pc, #452]	@ (8002548 <HAL_ADC_Init+0x1e8>)
 8002384:	400b      	ands	r3, r1
 8002386:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002388:	6893      	ldr	r3, [r2, #8]
 800238a:	00dd      	lsls	r5, r3, #3
 800238c:	d416      	bmi.n	80023bc <HAL_ADC_Init+0x5c>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800238e:	4b6f      	ldr	r3, [pc, #444]	@ (800254c <HAL_ADC_Init+0x1ec>)
 8002390:	496f      	ldr	r1, [pc, #444]	@ (8002550 <HAL_ADC_Init+0x1f0>)
 8002392:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8002394:	6890      	ldr	r0, [r2, #8]
 8002396:	099b      	lsrs	r3, r3, #6
 8002398:	fba1 1303 	umull	r1, r3, r1, r3
 800239c:	496d      	ldr	r1, [pc, #436]	@ (8002554 <HAL_ADC_Init+0x1f4>)
 800239e:	099b      	lsrs	r3, r3, #6
 80023a0:	4001      	ands	r1, r0
 80023a2:	3301      	adds	r3, #1
 80023a4:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80023a8:	6091      	str	r1, [r2, #8]
 80023aa:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80023ac:	9b01      	ldr	r3, [sp, #4]
 80023ae:	b12b      	cbz	r3, 80023bc <HAL_ADC_Init+0x5c>
      wait_loop_index--;
 80023b0:	9b01      	ldr	r3, [sp, #4]
 80023b2:	3b01      	subs	r3, #1
 80023b4:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80023b6:	9b01      	ldr	r3, [sp, #4]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d1f9      	bne.n	80023b0 <HAL_ADC_Init+0x50>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80023bc:	6893      	ldr	r3, [r2, #8]
 80023be:	00d8      	lsls	r0, r3, #3
 80023c0:	f100 8082 	bmi.w	80024c8 <HAL_ADC_Init+0x168>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023c4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 80023c6:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023c8:	f043 0310 	orr.w	r3, r3, #16
 80023cc:	6563      	str	r3, [r4, #84]	@ 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023ce:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80023d0:	432b      	orrs	r3, r5
 80023d2:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023d4:	6893      	ldr	r3, [r2, #8]
 80023d6:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023da:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80023dc:	d16c      	bne.n	80024b8 <HAL_ADC_Init+0x158>
 80023de:	06d9      	lsls	r1, r3, #27
 80023e0:	d46a      	bmi.n	80024b8 <HAL_ADC_Init+0x158>
    ADC_STATE_CLR_SET(hadc->State,
 80023e2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80023e4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80023e8:	f043 0302 	orr.w	r3, r3, #2
 80023ec:	6563      	str	r3, [r4, #84]	@ 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023ee:	6893      	ldr	r3, [r2, #8]
 80023f0:	07db      	lsls	r3, r3, #31
 80023f2:	d40c      	bmi.n	800240e <HAL_ADC_Init+0xae>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023f4:	4b58      	ldr	r3, [pc, #352]	@ (8002558 <HAL_ADC_Init+0x1f8>)
 80023f6:	429a      	cmp	r2, r3
 80023f8:	f000 8081 	beq.w	80024fe <HAL_ADC_Init+0x19e>
 80023fc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002400:	429a      	cmp	r2, r3
 8002402:	d07c      	beq.n	80024fe <HAL_ADC_Init+0x19e>
 8002404:	4b55      	ldr	r3, [pc, #340]	@ (800255c <HAL_ADC_Init+0x1fc>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	07d9      	lsls	r1, r3, #31
 800240a:	f140 8089 	bpl.w	8002520 <HAL_ADC_Init+0x1c0>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800240e:	f7ff fb17 	bl	8001a40 <HAL_GetREVID>
 8002412:	f241 0303 	movw	r3, #4099	@ 0x1003
 8002416:	68a1      	ldr	r1, [r4, #8]
 8002418:	4298      	cmp	r0, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800241a:	7f23      	ldrb	r3, [r4, #28]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800241c:	d85c      	bhi.n	80024d8 <HAL_ADC_Init+0x178>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800241e:	f894 c015 	ldrb.w	ip, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002422:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002424:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8002426:	ea42 324c 	orr.w	r2, r2, ip, lsl #13
 800242a:	4302      	orrs	r2, r0
 800242c:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800242e:	2b01      	cmp	r3, #1
 8002430:	d103      	bne.n	800243a <HAL_ADC_Init+0xda>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002432:	6a23      	ldr	r3, [r4, #32]
 8002434:	3b01      	subs	r3, #1
 8002436:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800243a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800243c:	b123      	cbz	r3, 8002448 <HAL_ADC_Init+0xe8>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800243e:	f403 7378 	and.w	r3, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002442:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8002444:	430b      	orrs	r3, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002446:	431a      	orrs	r2, r3
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002448:	6823      	ldr	r3, [r4, #0]
 800244a:	4945      	ldr	r1, [pc, #276]	@ (8002560 <HAL_ADC_Init+0x200>)
 800244c:	68d8      	ldr	r0, [r3, #12]
 800244e:	4001      	ands	r1, r0
 8002450:	4311      	orrs	r1, r2
 8002452:	60d9      	str	r1, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002454:	689a      	ldr	r2, [r3, #8]
 8002456:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800245a:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800245c:	d11c      	bne.n	8002498 <HAL_ADC_Init+0x138>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800245e:	0712      	lsls	r2, r2, #28
 8002460:	d41a      	bmi.n	8002498 <HAL_ADC_Init+0x138>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002462:	68d8      	ldr	r0, [r3, #12]
 8002464:	4a3f      	ldr	r2, [pc, #252]	@ (8002564 <HAL_ADC_Init+0x204>)
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002466:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002468:	4002      	ands	r2, r0
 800246a:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 800246e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8002470:	430a      	orrs	r2, r1
 8002472:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8002474:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 8002478:	2a01      	cmp	r2, #1
 800247a:	d053      	beq.n	8002524 <HAL_ADC_Init+0x1c4>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800247c:	691a      	ldr	r2, [r3, #16]
 800247e:	f022 0201 	bic.w	r2, r2, #1
 8002482:	611a      	str	r2, [r3, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002484:	691a      	ldr	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8002486:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002488:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800248a:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800248e:	430a      	orrs	r2, r1
 8002490:	611a      	str	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8002492:	f7ff fea9 	bl	80021e8 <ADC_ConfigureBoostMode>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002496:	6823      	ldr	r3, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002498:	68e2      	ldr	r2, [r4, #12]
 800249a:	2a01      	cmp	r2, #1
 800249c:	d027      	beq.n	80024ee <HAL_ADC_Init+0x18e>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800249e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024a0:	f022 020f 	bic.w	r2, r2, #15
 80024a4:	631a      	str	r2, [r3, #48]	@ 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80024a6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
}
 80024a8:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80024aa:	f023 0303 	bic.w	r3, r3, #3
 80024ae:	f043 0301 	orr.w	r3, r3, #1
 80024b2:	6563      	str	r3, [r4, #84]	@ 0x54
}
 80024b4:	b002      	add	sp, #8
 80024b6:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024b8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80024ba:	f043 0310 	orr.w	r3, r3, #16
 80024be:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_ERROR;
 80024c0:	2501      	movs	r5, #1
}
 80024c2:	4628      	mov	r0, r5
 80024c4:	b002      	add	sp, #8
 80024c6:	bd70      	pop	{r4, r5, r6, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024c8:	2500      	movs	r5, #0
 80024ca:	e783      	b.n	80023d4 <HAL_ADC_Init+0x74>
    HAL_ADC_MspInit(hadc);
 80024cc:	f7fe fee8 	bl	80012a0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80024d0:	65a5      	str	r5, [r4, #88]	@ 0x58
    hadc->Lock = HAL_UNLOCKED;
 80024d2:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
 80024d6:	e74f      	b.n	8002378 <HAL_ADC_Init+0x18>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80024d8:	2910      	cmp	r1, #16
 80024da:	d1a0      	bne.n	800241e <HAL_ADC_Init+0xbe>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80024dc:	7d61      	ldrb	r1, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80024de:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80024e0:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80024e4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80024e6:	430a      	orrs	r2, r1
 80024e8:	f042 021c 	orr.w	r2, r2, #28
 80024ec:	e79f      	b.n	800242e <HAL_ADC_Init+0xce>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80024ee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80024f0:	69a2      	ldr	r2, [r4, #24]
 80024f2:	f021 010f 	bic.w	r1, r1, #15
 80024f6:	3a01      	subs	r2, #1
 80024f8:	430a      	orrs	r2, r1
 80024fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80024fc:	e7d3      	b.n	80024a6 <HAL_ADC_Init+0x146>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024fe:	4a16      	ldr	r2, [pc, #88]	@ (8002558 <HAL_ADC_Init+0x1f8>)
 8002500:	4b19      	ldr	r3, [pc, #100]	@ (8002568 <HAL_ADC_Init+0x208>)
 8002502:	6892      	ldr	r2, [r2, #8]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	07de      	lsls	r6, r3, #31
 8002508:	d481      	bmi.n	800240e <HAL_ADC_Init+0xae>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800250a:	07d0      	lsls	r0, r2, #31
 800250c:	f53f af7f 	bmi.w	800240e <HAL_ADC_Init+0xae>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002510:	4a16      	ldr	r2, [pc, #88]	@ (800256c <HAL_ADC_Init+0x20c>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002512:	6893      	ldr	r3, [r2, #8]
 8002514:	6861      	ldr	r1, [r4, #4]
 8002516:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 800251a:	430b      	orrs	r3, r1
 800251c:	6093      	str	r3, [r2, #8]
}
 800251e:	e776      	b.n	800240e <HAL_ADC_Init+0xae>
 8002520:	4a13      	ldr	r2, [pc, #76]	@ (8002570 <HAL_ADC_Init+0x210>)
 8002522:	e7f6      	b.n	8002512 <HAL_ADC_Init+0x1b2>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002524:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	@ 0x3c
 8002528:	6c66      	ldr	r6, [r4, #68]	@ 0x44
 800252a:	3901      	subs	r1, #1
 800252c:	6918      	ldr	r0, [r3, #16]
 800252e:	4332      	orrs	r2, r6
 8002530:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002534:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8002536:	430a      	orrs	r2, r1
 8002538:	490e      	ldr	r1, [pc, #56]	@ (8002574 <HAL_ADC_Init+0x214>)
 800253a:	4001      	ands	r1, r0
 800253c:	430a      	orrs	r2, r1
 800253e:	f042 0201 	orr.w	r2, r2, #1
 8002542:	611a      	str	r2, [r3, #16]
 8002544:	e79e      	b.n	8002484 <HAL_ADC_Init+0x124>
 8002546:	bf00      	nop
 8002548:	5fffffc0 	.word	0x5fffffc0
 800254c:	24000004 	.word	0x24000004
 8002550:	053e2d63 	.word	0x053e2d63
 8002554:	6fffffc0 	.word	0x6fffffc0
 8002558:	40022000 	.word	0x40022000
 800255c:	58026000 	.word	0x58026000
 8002560:	fff0c003 	.word	0xfff0c003
 8002564:	ffffbffc 	.word	0xffffbffc
 8002568:	40022100 	.word	0x40022100
 800256c:	40022300 	.word	0x40022300
 8002570:	58026300 	.word	0x58026300
 8002574:	fc00f81e 	.word	0xfc00f81e

08002578 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002578:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800257a:	f890 2050 	ldrb.w	r2, [r0, #80]	@ 0x50
{
 800257e:	b09a      	sub	sp, #104	@ 0x68
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002580:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 8002582:	2a01      	cmp	r2, #1
 8002584:	d038      	beq.n	80025f8 <HAL_ADCEx_MultiModeConfigChannel+0x80>
 8002586:	4603      	mov	r3, r0

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002588:	4d28      	ldr	r5, [pc, #160]	@ (800262c <HAL_ADCEx_MultiModeConfigChannel+0xb4>)
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800258a:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 800258c:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800258e:	681c      	ldr	r4, [r3, #0]
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002590:	9216      	str	r2, [sp, #88]	@ 0x58
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002592:	42ac      	cmp	r4, r5
  __HAL_LOCK(hadc);
 8002594:	f883 0050 	strb.w	r0, [r3, #80]	@ 0x50
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002598:	9217      	str	r2, [sp, #92]	@ 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800259a:	d008      	beq.n	80025ae <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800259c:	6d59      	ldr	r1, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800259e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025a2:	f041 0120 	orr.w	r1, r1, #32
 80025a6:	6559      	str	r1, [r3, #84]	@ 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 80025a8:	b01a      	add	sp, #104	@ 0x68
 80025aa:	bcf0      	pop	{r4, r5, r6, r7}
 80025ac:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025ae:	4a20      	ldr	r2, [pc, #128]	@ (8002630 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 80025b0:	6890      	ldr	r0, [r2, #8]
 80025b2:	0740      	lsls	r0, r0, #29
 80025b4:	d50b      	bpl.n	80025ce <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80025b6:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 80025ba:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025bc:	f042 0220 	orr.w	r2, r2, #32
 80025c0:	655a      	str	r2, [r3, #84]	@ 0x54
  __HAL_UNLOCK(hadc);
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
}
 80025c8:	b01a      	add	sp, #104	@ 0x68
 80025ca:	bcf0      	pop	{r4, r5, r6, r7}
 80025cc:	4770      	bx	lr
 80025ce:	68a0      	ldr	r0, [r4, #8]
 80025d0:	0745      	lsls	r5, r0, #29
 80025d2:	d4f1      	bmi.n	80025b8 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80025d4:	b9a6      	cbnz	r6, 8002600 <HAL_ADCEx_MultiModeConfigChannel+0x88>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80025d6:	4917      	ldr	r1, [pc, #92]	@ (8002634 <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
 80025d8:	6888      	ldr	r0, [r1, #8]
 80025da:	f420 4040 	bic.w	r0, r0, #49152	@ 0xc000
 80025de:	6088      	str	r0, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025e0:	68a0      	ldr	r0, [r4, #8]
 80025e2:	6892      	ldr	r2, [r2, #8]
 80025e4:	07d4      	lsls	r4, r2, #31
 80025e6:	d405      	bmi.n	80025f4 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025e8:	07c5      	lsls	r5, r0, #31
 80025ea:	d403      	bmi.n	80025f4 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80025ec:	6888      	ldr	r0, [r1, #8]
 80025ee:	4a12      	ldr	r2, [pc, #72]	@ (8002638 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 80025f0:	4002      	ands	r2, r0
 80025f2:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025f4:	2000      	movs	r0, #0
 80025f6:	e7e4      	b.n	80025c2 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 80025f8:	2002      	movs	r0, #2
}
 80025fa:	b01a      	add	sp, #104	@ 0x68
 80025fc:	bcf0      	pop	{r4, r5, r6, r7}
 80025fe:	4770      	bx	lr
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002600:	4f0c      	ldr	r7, [pc, #48]	@ (8002634 <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
 8002602:	684d      	ldr	r5, [r1, #4]
 8002604:	68b8      	ldr	r0, [r7, #8]
 8002606:	f420 4040 	bic.w	r0, r0, #49152	@ 0xc000
 800260a:	4328      	orrs	r0, r5
 800260c:	60b8      	str	r0, [r7, #8]
 800260e:	68a0      	ldr	r0, [r4, #8]
 8002610:	6892      	ldr	r2, [r2, #8]
 8002612:	07d4      	lsls	r4, r2, #31
 8002614:	d4ee      	bmi.n	80025f4 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002616:	07c2      	lsls	r2, r0, #31
 8002618:	d4ec      	bmi.n	80025f4 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
        MODIFY_REG(tmpADC_Common->CCR,
 800261a:	688a      	ldr	r2, [r1, #8]
 800261c:	68b8      	ldr	r0, [r7, #8]
 800261e:	4906      	ldr	r1, [pc, #24]	@ (8002638 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 8002620:	4332      	orrs	r2, r6
 8002622:	4001      	ands	r1, r0
 8002624:	430a      	orrs	r2, r1
 8002626:	60ba      	str	r2, [r7, #8]
 8002628:	e7e4      	b.n	80025f4 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 800262a:	bf00      	nop
 800262c:	40022000 	.word	0x40022000
 8002630:	40022100 	.word	0x40022100
 8002634:	40022300 	.word	0x40022300
 8002638:	fffff0e0 	.word	0xfffff0e0

0800263c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800263c:	4906      	ldr	r1, [pc, #24]	@ (8002658 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800263e:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002642:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8002644:	4b05      	ldr	r3, [pc, #20]	@ (800265c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002646:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002648:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800264c:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002650:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8002652:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8002654:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002656:	4770      	bx	lr
 8002658:	e000ed00 	.word	0xe000ed00
 800265c:	05fa0000 	.word	0x05fa0000

08002660 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002660:	4b1a      	ldr	r3, [pc, #104]	@ (80026cc <HAL_NVIC_SetPriority+0x6c>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002668:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800266a:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800266e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002672:	f1be 0f04 	cmp.w	lr, #4
 8002676:	bf28      	it	cs
 8002678:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800267c:	f1bc 0f06 	cmp.w	ip, #6
 8002680:	d91a      	bls.n	80026b8 <HAL_NVIC_SetPriority+0x58>
 8002682:	f1a3 0c03 	sub.w	ip, r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002686:	f04f 33ff 	mov.w	r3, #4294967295
 800268a:	fa03 f30c 	lsl.w	r3, r3, ip
 800268e:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002692:	f04f 33ff 	mov.w	r3, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8002696:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002698:	fa03 f30e 	lsl.w	r3, r3, lr
 800269c:	ea21 0303 	bic.w	r3, r1, r3
 80026a0:	fa03 f30c 	lsl.w	r3, r3, ip
 80026a4:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80026ac:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80026ae:	db06      	blt.n	80026be <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b0:	4a07      	ldr	r2, [pc, #28]	@ (80026d0 <HAL_NVIC_SetPriority+0x70>)
 80026b2:	5413      	strb	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80026b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80026b8:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ba:	4694      	mov	ip, r2
 80026bc:	e7e9      	b.n	8002692 <HAL_NVIC_SetPriority+0x32>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026be:	f000 000f 	and.w	r0, r0, #15
 80026c2:	4a04      	ldr	r2, [pc, #16]	@ (80026d4 <HAL_NVIC_SetPriority+0x74>)
 80026c4:	5413      	strb	r3, [r2, r0]
 80026c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80026ca:	bf00      	nop
 80026cc:	e000ed00 	.word	0xe000ed00
 80026d0:	e000e400 	.word	0xe000e400
 80026d4:	e000ed14 	.word	0xe000ed14

080026d8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80026d8:	2800      	cmp	r0, #0
 80026da:	db07      	blt.n	80026ec <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026dc:	2301      	movs	r3, #1
 80026de:	f000 011f 	and.w	r1, r0, #31
 80026e2:	4a03      	ldr	r2, [pc, #12]	@ (80026f0 <HAL_NVIC_EnableIRQ+0x18>)
 80026e4:	0940      	lsrs	r0, r0, #5
 80026e6:	408b      	lsls	r3, r1
 80026e8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	e000e100 	.word	0xe000e100

080026f4 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 80026f4:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80026f8:	4b04      	ldr	r3, [pc, #16]	@ (800270c <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80026fa:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80026fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026fe:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002702:	625a      	str	r2, [r3, #36]	@ 0x24
  MPU->CTRL = 0;
 8002704:	f8c3 1094 	str.w	r1, [r3, #148]	@ 0x94
}
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	e000ed00 	.word	0xe000ed00

08002710 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002710:	4b06      	ldr	r3, [pc, #24]	@ (800272c <HAL_MPU_Enable+0x1c>)
 8002712:	f040 0001 	orr.w	r0, r0, #1
 8002716:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800271a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800271c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002720:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002722:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002726:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800272a:	4770      	bx	lr
 800272c:	e000ed00 	.word	0xe000ed00

08002730 <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002730:	4a16      	ldr	r2, [pc, #88]	@ (800278c <HAL_MPU_ConfigRegion+0x5c>)
 8002732:	7843      	ldrb	r3, [r0, #1]
 8002734:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002738:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 800273c:	f023 0301 	bic.w	r3, r3, #1
 8002740:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002744:	6843      	ldr	r3, [r0, #4]
 8002746:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800274a:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800274c:	f890 c00c 	ldrb.w	ip, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002750:	061b      	lsls	r3, r3, #24
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002752:	7801      	ldrb	r1, [r0, #0]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002754:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002758:	f890 c00a 	ldrb.w	ip, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800275c:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800275e:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002760:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002764:	f890 c00e 	ldrb.w	ip, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002768:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800276c:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800276e:	ea43 434c 	orr.w	r3, r3, ip, lsl #17
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002772:	f890 c009 	ldrb.w	ip, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002776:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800277a:	7a01      	ldrb	r1, [r0, #8]
 800277c:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8002780:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002784:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	e000ed00 	.word	0xe000ed00

08002790 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002790:	b430      	push	{r4, r5}
               macconf->BackOffLimit |
               ((uint32_t)macconf->DeferralCheck << 4) |
               macconf->PreambleLength);

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002792:	688b      	ldr	r3, [r1, #8]
 8002794:	680d      	ldr	r5, [r1, #0]
 8002796:	694c      	ldr	r4, [r1, #20]
 8002798:	432b      	orrs	r3, r5
 800279a:	6802      	ldr	r2, [r0, #0]
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800279c:	f891 c011 	ldrb.w	ip, [r1, #17]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80027a0:	4323      	orrs	r3, r4
 80027a2:	698c      	ldr	r4, [r1, #24]
 80027a4:	6810      	ldr	r0, [r2, #0]
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80027a6:	fabc fc8c 	clz	ip, ip
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80027aa:	4323      	orrs	r3, r4
 80027ac:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80027ae:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
               macconf->GiantPacketSizeLimit);

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80027b2:	4d52      	ldr	r5, [pc, #328]	@ (80028fc <ETH_SetMACConfig+0x16c>)
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80027b4:	4323      	orrs	r3, r4
 80027b6:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 80027b8:	4323      	orrs	r3, r4
 80027ba:	4c51      	ldr	r4, [pc, #324]	@ (8002900 <ETH_SetMACConfig+0x170>)
 80027bc:	4020      	ands	r0, r4
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80027be:	790c      	ldrb	r4, [r1, #4]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80027c0:	4303      	orrs	r3, r0
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80027c2:	7b48      	ldrb	r0, [r1, #13]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80027c4:	ea43 63c4 	orr.w	r3, r3, r4, lsl #27
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80027c8:	7b0c      	ldrb	r4, [r1, #12]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80027ca:	ea43 53c4 	orr.w	r3, r3, r4, lsl #23
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80027ce:	7b8c      	ldrb	r4, [r1, #14]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80027d0:	ea43 5380 	orr.w	r3, r3, r0, lsl #22
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80027d4:	7bc8      	ldrb	r0, [r1, #15]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80027d6:	ea43 5344 	orr.w	r3, r3, r4, lsl #21
               ((uint32_t)macconf->JumboPacket << 16) |
 80027da:	7c8c      	ldrb	r4, [r1, #18]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80027dc:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
               ((uint32_t)macconf->LoopbackMode << 12) |
 80027e0:	7f08      	ldrb	r0, [r1, #28]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80027e2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80027e6:	7f4c      	ldrb	r4, [r1, #29]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80027e8:	ea43 3300 	orr.w	r3, r3, r0, lsl #12
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80027ec:	7fc8      	ldrb	r0, [r1, #31]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80027ee:	ea43 23c4 	orr.w	r3, r3, r4, lsl #11
               ((uint32_t)macconf->DeferralCheck << 4) |
 80027f2:	f891 4028 	ldrb.w	r4, [r1, #40]	@ 0x28
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80027f6:	ea43 2340 	orr.w	r3, r3, r0, lsl #9
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80027fa:	7c08      	ldrb	r0, [r1, #16]
 80027fc:	fab0 f080 	clz	r0, r0
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002800:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002804:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002806:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002808:	ea43 43c0 	orr.w	r3, r3, r0, lsl #19
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800280c:	7f88      	ldrb	r0, [r1, #30]
 800280e:	fab0 f080 	clz	r0, r0
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002812:	ea43 434c 	orr.w	r3, r3, ip, lsl #17
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002816:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002818:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800281c:	f891 0020 	ldrb.w	r0, [r1, #32]
 8002820:	fab0 f080 	clz	r0, r0
 8002824:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002826:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800282a:	6b48      	ldr	r0, [r1, #52]	@ 0x34
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800282c:	6013      	str	r3, [r2, #0]
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800282e:	6853      	ldr	r3, [r2, #4]
 8002830:	402b      	ands	r3, r5
               macconf->PauseLowThreshold |
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
               (macconf->PauseTime << 16));

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002832:	f64f 750d 	movw	r5, #65293	@ 0xff0d
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002836:	ea43 6344 	orr.w	r3, r3, r4, lsl #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800283a:	f891 4038 	ldrb.w	r4, [r1, #56]	@ 0x38
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800283e:	4303      	orrs	r3, r0
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002840:	f891 0030 	ldrb.w	r0, [r1, #48]	@ 0x30
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002844:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002848:	f891 4031 	ldrb.w	r4, [r1, #49]	@ 0x31
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800284c:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002850:	f891 0032 	ldrb.w	r0, [r1, #50]	@ 0x32
 8002854:	fab0 f080 	clz	r0, r0
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002858:	ea43 4344 	orr.w	r3, r3, r4, lsl #17
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800285c:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800285e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002862:	4828      	ldr	r0, [pc, #160]	@ (8002904 <ETH_SetMACConfig+0x174>)
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002864:	6053      	str	r3, [r2, #4]
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002866:	68d3      	ldr	r3, [r2, #12]
               (macconf->PauseTime << 16));
 8002868:	6c8c      	ldr	r4, [r1, #72]	@ 0x48
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800286a:	4018      	ands	r0, r3
 800286c:	6c4b      	ldr	r3, [r1, #68]	@ 0x44
 800286e:	4318      	orrs	r0, r3
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002870:	f891 3040 	ldrb.w	r3, [r1, #64]	@ 0x40
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002874:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8002878:	60d0      	str	r0, [r2, #12]
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800287a:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800287c:	6d08      	ldr	r0, [r1, #80]	@ 0x50
 800287e:	402b      	ands	r3, r5
 8002880:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002884:	f891 4054 	ldrb.w	r4, [r1, #84]	@ 0x54
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002888:	4303      	orrs	r3, r0
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800288a:	f891 004c 	ldrb.w	r0, [r1, #76]	@ 0x4c
 800288e:	fab0 f080 	clz	r0, r0
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002892:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002896:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002898:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800289c:	e9d1 5416 	ldrd	r5, r4, [r1, #88]	@ 0x58
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80028a0:	6713      	str	r3, [r2, #112]	@ 0x70
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80028a2:	f8d2 0090 	ldr.w	r0, [r2, #144]	@ 0x90
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80028a6:	f891 3056 	ldrb.w	r3, [r1, #86]	@ 0x56
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80028aa:	f020 0003 	bic.w	r0, r0, #3
 80028ae:	4303      	orrs	r3, r0
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80028b0:	f891 0055 	ldrb.w	r0, [r1, #85]	@ 0x55
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80028b4:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 80028b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80028bc:	f8d2 3d00 	ldr.w	r3, [r2, #3328]	@ 0xd00
 80028c0:	f023 0372 	bic.w	r3, r3, #114	@ 0x72
 80028c4:	432b      	orrs	r3, r5
 80028c6:	f8c2 3d00 	str.w	r3, [r2, #3328]	@ 0xd00
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80028ca:	f8d2 3d30 	ldr.w	r3, [r2, #3376]	@ 0xd30
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80028ce:	f891 0061 	ldrb.w	r0, [r1, #97]	@ 0x61
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80028d2:	f023 037b 	bic.w	r3, r3, #123	@ 0x7b
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80028d6:	f891 c062 	ldrb.w	ip, [r1, #98]	@ 0x62
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80028da:	4323      	orrs	r3, r4
 80028dc:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80028e0:	f891 0060 	ldrb.w	r0, [r1, #96]	@ 0x60
 80028e4:	fab0 f180 	clz	r1, r0
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80028e8:	ea43 03cc 	orr.w	r3, r3, ip, lsl #3
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80028ec:	0949      	lsrs	r1, r1, #5
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80028ee:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
}
 80028f2:	bc30      	pop	{r4, r5}
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80028f4:	f8c2 3d30 	str.w	r3, [r2, #3376]	@ 0xd30
}
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	c0f88000 	.word	0xc0f88000
 8002900:	00048083 	.word	0x00048083
 8002904:	fffffef0 	.word	0xfffffef0

08002908 <ETH_SetDMAConfig>:
static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002908:	6803      	ldr	r3, [r0, #0]
 800290a:	4a1e      	ldr	r2, [pc, #120]	@ (8002984 <ETH_SetDMAConfig+0x7c>)
 800290c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002910:	6808      	ldr	r0, [r1, #0]
{
 8002912:	b410      	push	{r4}
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002914:	681c      	ldr	r4, [r3, #0]
 8002916:	4022      	ands	r2, r4
 8002918:	4302      	orrs	r2, r0
 800291a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
               dmaconf->BurstMode |
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800291c:	7b0a      	ldrb	r2, [r1, #12]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800291e:	790c      	ldrb	r4, [r1, #4]
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002920:	03d2      	lsls	r2, r2, #15

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002922:	6858      	ldr	r0, [r3, #4]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002924:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
 8002928:	688c      	ldr	r4, [r1, #8]
 800292a:	4322      	orrs	r2, r4
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800292c:	4c16      	ldr	r4, [pc, #88]	@ (8002988 <ETH_SetDMAConfig+0x80>)
 800292e:	4004      	ands	r4, r0

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002930:	6a08      	ldr	r0, [r1, #32]
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002932:	4322      	orrs	r2, r4
 8002934:	605a      	str	r2, [r3, #4]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002936:	7b4a      	ldrb	r2, [r1, #13]
               dmaconf->MaximumSegmentSize);
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002938:	f8d3 4100 	ldr.w	r4, [r3, #256]	@ 0x100
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800293c:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002940:	4812      	ldr	r0, [pc, #72]	@ (800298c <ETH_SetDMAConfig+0x84>)
 8002942:	4020      	ands	r0, r4
 8002944:	4302      	orrs	r2, r0
 8002946:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800294a:	7f4a      	ldrb	r2, [r1, #29]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800294c:	7d0c      	ldrb	r4, [r1, #20]
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800294e:	0312      	lsls	r2, r2, #12

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002950:	f8d3 0104 	ldr.w	r0, [r3, #260]	@ 0x104
  dmaregval = (dmaconf->TxDMABurstLength |
 8002954:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8002958:	690c      	ldr	r4, [r1, #16]
 800295a:	4322      	orrs	r2, r4
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800295c:	4c0c      	ldr	r4, [pc, #48]	@ (8002990 <ETH_SetDMAConfig+0x88>)
 800295e:	4004      	ands	r4, r0

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002960:	6988      	ldr	r0, [r1, #24]
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002962:	4322      	orrs	r2, r4
 8002964:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
               dmaconf->RxDMABurstLength);

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002968:	f8d3 4108 	ldr.w	r4, [r3, #264]	@ 0x108
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800296c:	7f0a      	ldrb	r2, [r1, #28]
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800296e:	4909      	ldr	r1, [pc, #36]	@ (8002994 <ETH_SetDMAConfig+0x8c>)
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002970:	ea40 72c2 	orr.w	r2, r0, r2, lsl #31
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002974:	4021      	ands	r1, r4
}
 8002976:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800297a:	430a      	orrs	r2, r1
 800297c:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
}
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	ffff87fd 	.word	0xffff87fd
 8002988:	ffff2ffe 	.word	0xffff2ffe
 800298c:	fffec000 	.word	0xfffec000
 8002990:	ffc0efef 	.word	0xffc0efef
 8002994:	7fc0ffff 	.word	0x7fc0ffff

08002998 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8002998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800299c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
{
 800299e:	4692      	mov	sl, r2
 80029a0:	b085      	sub	sp, #20
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
  uint32_t idx;
  uint32_t descnbr = 0;
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80029a2:	688e      	ldr	r6, [r1, #8]
 80029a4:	eb00 0e84 	add.w	lr, r0, r4, lsl #2
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80029a8:	f8de 3018 	ldr.w	r3, [lr, #24]
  uint32_t           bd_count = 0;
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80029ac:	68da      	ldr	r2, [r3, #12]
 80029ae:	2a00      	cmp	r2, #0
 80029b0:	f2c0 8141 	blt.w	8002c36 <ETH_Prepare_Tx_Descriptors+0x29e>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80029b4:	f8de 202c 	ldr.w	r2, [lr, #44]	@ 0x2c
 80029b8:	2a00      	cmp	r2, #0
 80029ba:	f040 813c 	bne.w	8002c36 <ETH_Prepare_Tx_Descriptors+0x29e>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80029be:	680d      	ldr	r5, [r1, #0]
 80029c0:	f015 0c04 	ands.w	ip, r5, #4
 80029c4:	d02a      	beq.n	8002a1c <ETH_Prepare_Tx_Descriptors+0x84>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 80029c6:	68da      	ldr	r2, [r3, #12]
 80029c8:	4fa9      	ldr	r7, [pc, #676]	@ (8002c70 <ETH_Prepare_Tx_Descriptors+0x2d8>)
 80029ca:	4017      	ands	r7, r2
 80029cc:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 80029ce:	4317      	orrs	r7, r2
 80029d0:	60df      	str	r7, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 80029d2:	68da      	ldr	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 80029d4:	6807      	ldr	r7, [r0, #0]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 80029d6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80029da:	60da      	str	r2, [r3, #12]
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 80029dc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80029de:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80029e2:	663a      	str	r2, [r7, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 80029e4:	072a      	lsls	r2, r5, #28
 80029e6:	d519      	bpl.n	8002a1c <ETH_Prepare_Tx_Descriptors+0x84>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 80029e8:	689a      	ldr	r2, [r3, #8]
 80029ea:	fa1f f882 	uxth.w	r8, r2
 80029ee:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80029f0:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
 80029f4:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 80029f6:	68da      	ldr	r2, [r3, #12]
 80029f8:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80029fc:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 80029fe:	68da      	ldr	r2, [r3, #12]
 8002a00:	f422 2840 	bic.w	r8, r2, #786432	@ 0xc0000
 8002a04:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8002a06:	ea48 0202 	orr.w	r2, r8, r2
 8002a0a:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8002a0c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002a0e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002a12:	667a      	str	r2, [r7, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8002a14:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002a16:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002a1a:	653a      	str	r2, [r7, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002a1c:	f015 0810 	ands.w	r8, r5, #16
 8002a20:	d009      	beq.n	8002a36 <ETH_Prepare_Tx_Descriptors+0x9e>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8002a22:	689a      	ldr	r2, [r3, #8]
 8002a24:	4f93      	ldr	r7, [pc, #588]	@ (8002c74 <ETH_Prepare_Tx_Descriptors+0x2dc>)
 8002a26:	4017      	ands	r7, r2
 8002a28:	698a      	ldr	r2, [r1, #24]
 8002a2a:	4317      	orrs	r7, r2
 8002a2c:	609f      	str	r7, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8002a2e:	68da      	ldr	r2, [r3, #12]
 8002a30:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002a34:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002a36:	f015 0f14 	tst.w	r5, #20
 8002a3a:	f040 80c1 	bne.w	8002bc0 <ETH_Prepare_Tx_Descriptors+0x228>
 8002a3e:	2701      	movs	r7, #1
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002a40:	4622      	mov	r2, r4
 8002a42:	9701      	str	r7, [sp, #4]
  /***************************************************************************/

  descnbr += 1U;

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002a44:	6837      	ldr	r7, [r6, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002a46:	f8df 922c 	ldr.w	r9, [pc, #556]	@ 8002c74 <ETH_Prepare_Tx_Descriptors+0x2dc>
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002a4a:	601f      	str	r7, [r3, #0]
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002a4c:	689f      	ldr	r7, [r3, #8]
 8002a4e:	ea07 0909 	and.w	r9, r7, r9
 8002a52:	6877      	ldr	r7, [r6, #4]
 8002a54:	ea49 0707 	orr.w	r7, r9, r7
 8002a58:	609f      	str	r7, [r3, #8]

  if (txbuffer->next != NULL)
 8002a5a:	68b7      	ldr	r7, [r6, #8]
 8002a5c:	2f00      	cmp	r7, #0
 8002a5e:	f000 8132 	beq.w	8002cc6 <ETH_Prepare_Tx_Descriptors+0x32e>
  {
    txbuffer = txbuffer->next;
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002a62:	683e      	ldr	r6, [r7, #0]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002a64:	f8df 9214 	ldr.w	r9, [pc, #532]	@ 8002c7c <ETH_Prepare_Tx_Descriptors+0x2e4>
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002a68:	605e      	str	r6, [r3, #4]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002a6a:	689e      	ldr	r6, [r3, #8]
 8002a6c:	ea06 0909 	and.w	r9, r6, r9
 8002a70:	687e      	ldr	r6, [r7, #4]
 8002a72:	ea49 4606 	orr.w	r6, r9, r6, lsl #16
 8002a76:	609e      	str	r6, [r3, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8002a78:	68de      	ldr	r6, [r3, #12]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002a7a:	f1b8 0f00 	cmp.w	r8, #0
 8002a7e:	f000 80dc 	beq.w	8002c3a <ETH_Prepare_Tx_Descriptors+0x2a2>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8002a82:	6a0d      	ldr	r5, [r1, #32]
 8002a84:	f426 06f0 	bic.w	r6, r6, #7864320	@ 0x780000
 8002a88:	ea46 45c5 	orr.w	r5, r6, r5, lsl #19
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002a8c:	4e7a      	ldr	r6, [pc, #488]	@ (8002c78 <ETH_Prepare_Tx_Descriptors+0x2e0>)
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8002a8e:	60dd      	str	r5, [r3, #12]
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002a90:	68dd      	ldr	r5, [r3, #12]
 8002a92:	402e      	ands	r6, r5
 8002a94:	69cd      	ldr	r5, [r1, #28]
 8002a96:	432e      	orrs	r6, r5
 8002a98:	60de      	str	r6, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002a9a:	68dd      	ldr	r5, [r3, #12]
 8002a9c:	f445 2580 	orr.w	r5, r5, #262144	@ 0x40000
 8002aa0:	60dd      	str	r5, [r3, #12]
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002aa2:	f1bc 0f00 	cmp.w	ip, #0
 8002aa6:	d005      	beq.n	8002ab4 <ETH_Prepare_Tx_Descriptors+0x11c>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8002aa8:	689e      	ldr	r6, [r3, #8]
 8002aaa:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8002aac:	f426 4640 	bic.w	r6, r6, #49152	@ 0xc000
 8002ab0:	4335      	orrs	r5, r6
 8002ab2:	609d      	str	r5, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002ab4:	68dd      	ldr	r5, [r3, #12]
 8002ab6:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8002aba:	60dd      	str	r5, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002abc:	68dd      	ldr	r5, [r3, #12]
 8002abe:	f025 4580 	bic.w	r5, r5, #1073741824	@ 0x40000000
 8002ac2:	60dd      	str	r5, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002ac4:	f3bf 8f5f 	dmb	sy
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002ac8:	68dd      	ldr	r5, [r3, #12]
 8002aca:	f045 4500 	orr.w	r5, r5, #2147483648	@ 0x80000000
 8002ace:	60dd      	str	r5, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8002ad0:	680d      	ldr	r5, [r1, #0]
 8002ad2:	07ad      	lsls	r5, r5, #30
 8002ad4:	d505      	bpl.n	8002ae2 <ETH_Prepare_Tx_Descriptors+0x14a>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8002ad6:	68de      	ldr	r6, [r3, #12]
 8002ad8:	68cd      	ldr	r5, [r1, #12]
 8002ada:	f026 7660 	bic.w	r6, r6, #58720256	@ 0x3800000
 8002ade:	4335      	orrs	r5, r6
 8002ae0:	60dd      	str	r5, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002ae2:	f8d7 9008 	ldr.w	r9, [r7, #8]
 8002ae6:	f1b9 0f00 	cmp.w	r9, #0
 8002aea:	f000 8102 	beq.w	8002cf2 <ETH_Prepare_Tx_Descriptors+0x35a>
 8002aee:	2500      	movs	r5, #0
    txbuffer = txbuffer->next;

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002af0:	4f60      	ldr	r7, [pc, #384]	@ (8002c74 <ETH_Prepare_Tx_Descriptors+0x2dc>)
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002af2:	f8df c188 	ldr.w	ip, [pc, #392]	@ 8002c7c <ETH_Prepare_Tx_Descriptors+0x2e4>
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002af6:	464e      	mov	r6, r9
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002af8:	f8df 8184 	ldr.w	r8, [pc, #388]	@ 8002c80 <ETH_Prepare_Tx_Descriptors+0x2e8>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002afc:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8002c78 <ETH_Prepare_Tx_Descriptors+0x2e0>
 8002b00:	e9cd 4a02 	strd	r4, sl, [sp, #8]
 8002b04:	e018      	b.n	8002b38 <ETH_Prepare_Tx_Descriptors+0x1a0>
 8002b06:	ea06 090b 	and.w	r9, r6, fp
 8002b0a:	69ce      	ldr	r6, [r1, #28]
 8002b0c:	ea49 0606 	orr.w	r6, r9, r6
 8002b10:	60de      	str	r6, [r3, #12]
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002b12:	68de      	ldr	r6, [r3, #12]
 8002b14:	f446 2680 	orr.w	r6, r6, #262144	@ 0x40000
 8002b18:	60de      	str	r6, [r3, #12]
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
      }
    }

    bd_count += 1U;
 8002b1a:	3501      	adds	r5, #1
 8002b1c:	f3bf 8f5f 	dmb	sy
  while (txbuffer->next != NULL)
 8002b20:	68a6      	ldr	r6, [r4, #8]

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002b22:	68dc      	ldr	r4, [r3, #12]
 8002b24:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 8002b28:	60dc      	str	r4, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002b2a:	68dc      	ldr	r4, [r3, #12]
 8002b2c:	f024 4480 	bic.w	r4, r4, #1073741824	@ 0x40000000
 8002b30:	60dc      	str	r4, [r3, #12]
  while (txbuffer->next != NULL)
 8002b32:	2e00      	cmp	r6, #0
 8002b34:	f000 80a6 	beq.w	8002c84 <ETH_Prepare_Tx_Descriptors+0x2ec>
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002b38:	68dc      	ldr	r4, [r3, #12]
 8002b3a:	f024 5480 	bic.w	r4, r4, #268435456	@ 0x10000000
 8002b3e:	60dc      	str	r4, [r3, #12]
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002b40:	1c53      	adds	r3, r2, #1
 8002b42:	2b03      	cmp	r3, #3
 8002b44:	bf94      	ite	ls
 8002b46:	461a      	movls	r2, r3
 8002b48:	3a03      	subhi	r2, #3
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002b4a:	eb00 0982 	add.w	r9, r0, r2, lsl #2
 8002b4e:	f8d9 3018 	ldr.w	r3, [r9, #24]
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002b52:	68dc      	ldr	r4, [r3, #12]
 8002b54:	f024 5400 	bic.w	r4, r4, #536870912	@ 0x20000000
 8002b58:	60dc      	str	r4, [r3, #12]
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8002b5a:	68dc      	ldr	r4, [r3, #12]
 8002b5c:	2c00      	cmp	r4, #0
 8002b5e:	db52      	blt.n	8002c06 <ETH_Prepare_Tx_Descriptors+0x26e>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002b60:	f8d9 402c 	ldr.w	r4, [r9, #44]	@ 0x2c
 8002b64:	2c00      	cmp	r4, #0
 8002b66:	d14e      	bne.n	8002c06 <ETH_Prepare_Tx_Descriptors+0x26e>
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002b68:	6834      	ldr	r4, [r6, #0]
 8002b6a:	601c      	str	r4, [r3, #0]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002b6c:	689c      	ldr	r4, [r3, #8]
 8002b6e:	ea04 0907 	and.w	r9, r4, r7
 8002b72:	6874      	ldr	r4, [r6, #4]
 8002b74:	ea49 0404 	orr.w	r4, r9, r4
 8002b78:	609c      	str	r4, [r3, #8]
    if (txbuffer->next != NULL)
 8002b7a:	68b4      	ldr	r4, [r6, #8]
 8002b7c:	2c00      	cmp	r4, #0
 8002b7e:	d03b      	beq.n	8002bf8 <ETH_Prepare_Tx_Descriptors+0x260>
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002b80:	6826      	ldr	r6, [r4, #0]
 8002b82:	605e      	str	r6, [r3, #4]
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002b84:	689e      	ldr	r6, [r3, #8]
 8002b86:	ea06 090c 	and.w	r9, r6, ip
 8002b8a:	6866      	ldr	r6, [r4, #4]
 8002b8c:	ea49 4606 	orr.w	r6, r9, r6, lsl #16
 8002b90:	609e      	str	r6, [r3, #8]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002b92:	f8d1 a000 	ldr.w	sl, [r1]
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002b96:	68de      	ldr	r6, [r3, #12]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002b98:	f01a 0f10 	tst.w	sl, #16
 8002b9c:	d1b3      	bne.n	8002b06 <ETH_Prepare_Tx_Descriptors+0x16e>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002b9e:	ea06 0908 	and.w	r9, r6, r8
 8002ba2:	684e      	ldr	r6, [r1, #4]
      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002ba4:	f01a 0f01 	tst.w	sl, #1
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002ba8:	ea49 0606 	orr.w	r6, r9, r6
 8002bac:	60de      	str	r6, [r3, #12]
      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002bae:	d0b4      	beq.n	8002b1a <ETH_Prepare_Tx_Descriptors+0x182>
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002bb0:	68de      	ldr	r6, [r3, #12]
 8002bb2:	f426 3940 	bic.w	r9, r6, #196608	@ 0x30000
 8002bb6:	694e      	ldr	r6, [r1, #20]
 8002bb8:	ea49 0606 	orr.w	r6, r9, r6
 8002bbc:	60de      	str	r6, [r3, #12]
 8002bbe:	e7ac      	b.n	8002b1a <ETH_Prepare_Tx_Descriptors+0x182>
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8002bc0:	68da      	ldr	r2, [r3, #12]
 8002bc2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002bc6:	60da      	str	r2, [r3, #12]
 8002bc8:	f3bf 8f5f 	dmb	sy
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002bcc:	68da      	ldr	r2, [r3, #12]
 8002bce:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002bd2:	60da      	str	r2, [r3, #12]
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002bd4:	1c62      	adds	r2, r4, #1
 8002bd6:	2a03      	cmp	r2, #3
 8002bd8:	bf88      	it	hi
 8002bda:	1ee2      	subhi	r2, r4, #3
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002bdc:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8002be0:	699b      	ldr	r3, [r3, #24]
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002be2:	68dd      	ldr	r5, [r3, #12]
 8002be4:	2d00      	cmp	r5, #0
 8002be6:	db7b      	blt.n	8002ce0 <ETH_Prepare_Tx_Descriptors+0x348>
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002be8:	680d      	ldr	r5, [r1, #0]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002bea:	2702      	movs	r7, #2
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002bec:	f005 0810 	and.w	r8, r5, #16
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002bf0:	f005 0c04 	and.w	ip, r5, #4
 8002bf4:	9701      	str	r7, [sp, #4]
 8002bf6:	e725      	b.n	8002a44 <ETH_Prepare_Tx_Descriptors+0xac>
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002bf8:	605c      	str	r4, [r3, #4]
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002bfa:	4634      	mov	r4, r6
 8002bfc:	689e      	ldr	r6, [r3, #8]
 8002bfe:	ea06 060c 	and.w	r6, r6, ip
 8002c02:	609e      	str	r6, [r3, #8]
 8002c04:	e7c5      	b.n	8002b92 <ETH_Prepare_Tx_Descriptors+0x1fa>
      for (idx = 0; idx < descnbr; idx ++)
 8002c06:	9b01      	ldr	r3, [sp, #4]
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002c08:	9c02      	ldr	r4, [sp, #8]
      for (idx = 0; idx < descnbr; idx ++)
 8002c0a:	195e      	adds	r6, r3, r5
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002c0c:	f8de 2018 	ldr.w	r2, [lr, #24]
      for (idx = 0; idx < descnbr; idx ++)
 8002c10:	d011      	beq.n	8002c36 <ETH_Prepare_Tx_Descriptors+0x29e>
 8002c12:	2100      	movs	r1, #0
 8002c14:	f3bf 8f5f 	dmb	sy
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002c18:	1c65      	adds	r5, r4, #1
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002c1a:	68d3      	ldr	r3, [r2, #12]
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002c1c:	3c03      	subs	r4, #3
      for (idx = 0; idx < descnbr; idx ++)
 8002c1e:	3101      	adds	r1, #1
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002c20:	2d03      	cmp	r5, #3
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002c22:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002c26:	bf98      	it	ls
 8002c28:	462c      	movls	r4, r5
 8002c2a:	60d3      	str	r3, [r2, #12]
      for (idx = 0; idx < descnbr; idx ++)
 8002c2c:	42b1      	cmp	r1, r6
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002c2e:	eb00 0384 	add.w	r3, r0, r4, lsl #2
 8002c32:	699a      	ldr	r2, [r3, #24]
      for (idx = 0; idx < descnbr; idx ++)
 8002c34:	d1ee      	bne.n	8002c14 <ETH_Prepare_Tx_Descriptors+0x27c>
    return HAL_ETH_ERROR_BUSY;
 8002c36:	2002      	movs	r0, #2
 8002c38:	e042      	b.n	8002cc0 <ETH_Prepare_Tx_Descriptors+0x328>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002c3a:	f8df 8044 	ldr.w	r8, [pc, #68]	@ 8002c80 <ETH_Prepare_Tx_Descriptors+0x2e8>
 8002c3e:	ea06 0808 	and.w	r8, r6, r8
 8002c42:	684e      	ldr	r6, [r1, #4]
 8002c44:	ea48 0606 	orr.w	r6, r8, r6
 8002c48:	60de      	str	r6, [r3, #12]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002c4a:	07ee      	lsls	r6, r5, #31
 8002c4c:	d506      	bpl.n	8002c5c <ETH_Prepare_Tx_Descriptors+0x2c4>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002c4e:	68de      	ldr	r6, [r3, #12]
 8002c50:	f426 3840 	bic.w	r8, r6, #196608	@ 0x30000
 8002c54:	694e      	ldr	r6, [r1, #20]
 8002c56:	ea48 0606 	orr.w	r6, r8, r6
 8002c5a:	60de      	str	r6, [r3, #12]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8002c5c:	06ae      	lsls	r6, r5, #26
 8002c5e:	f57f af20 	bpl.w	8002aa2 <ETH_Prepare_Tx_Descriptors+0x10a>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8002c62:	68de      	ldr	r6, [r3, #12]
 8002c64:	690d      	ldr	r5, [r1, #16]
 8002c66:	f026 6640 	bic.w	r6, r6, #201326592	@ 0xc000000
 8002c6a:	4335      	orrs	r5, r6
 8002c6c:	60dd      	str	r5, [r3, #12]
 8002c6e:	e718      	b.n	8002aa2 <ETH_Prepare_Tx_Descriptors+0x10a>
 8002c70:	ffff0000 	.word	0xffff0000
 8002c74:	ffffc000 	.word	0xffffc000
 8002c78:	fffc0000 	.word	0xfffc0000
 8002c7c:	c000ffff 	.word	0xc000ffff
 8002c80:	ffff8000 	.word	0xffff8000
 8002c84:	f8dd a00c 	ldr.w	sl, [sp, #12]
  }

  if (ItMode != ((uint32_t)RESET))
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002c88:	6899      	ldr	r1, [r3, #8]
  if (ItMode != ((uint32_t)RESET))
 8002c8a:	f1ba 0f00 	cmp.w	sl, #0
 8002c8e:	d023      	beq.n	8002cd8 <ETH_Prepare_Tx_Descriptors+0x340>
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002c90:	f041 4100 	orr.w	r1, r1, #2147483648	@ 0x80000000
 8002c94:	6099      	str	r1, [r3, #8]
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002c96:	68d9      	ldr	r1, [r3, #12]
 8002c98:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8002c9c:	60d9      	str	r1, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002c9e:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8002ca2:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8002ca4:	62d9      	str	r1, [r3, #44]	@ 0x2c

  dmatxdesclist->CurTxDesc = descidx;
 8002ca6:	6282      	str	r2, [r0, #40]	@ 0x28
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ca8:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cac:	2301      	movs	r3, #1
 8002cae:	f383 8810 	msr	PRIMASK, r3

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002cb2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	442b      	add	r3, r5
 8002cb8:	6403      	str	r3, [r0, #64]	@ 0x40
 8002cba:	f382 8810 	msr	PRIMASK, r2

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002cbe:	2000      	movs	r0, #0
}
 8002cc0:	b005      	add	sp, #20
 8002cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002cc6:	605f      	str	r7, [r3, #4]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002cc8:	4637      	mov	r7, r6
 8002cca:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8002cce:	4e0a      	ldr	r6, [pc, #40]	@ (8002cf8 <ETH_Prepare_Tx_Descriptors+0x360>)
 8002cd0:	ea09 0606 	and.w	r6, r9, r6
 8002cd4:	609e      	str	r6, [r3, #8]
 8002cd6:	e6cf      	b.n	8002a78 <ETH_Prepare_Tx_Descriptors+0xe0>
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002cd8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8002cdc:	6099      	str	r1, [r3, #8]
 8002cde:	e7da      	b.n	8002c96 <ETH_Prepare_Tx_Descriptors+0x2fe>
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002ce0:	f8de 2018 	ldr.w	r2, [lr, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002ce4:	f3bf 8f5f 	dmb	sy
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002ce8:	68d3      	ldr	r3, [r2, #12]
 8002cea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002cee:	60d3      	str	r3, [r2, #12]
      return HAL_ETH_ERROR_BUSY;
 8002cf0:	e7a1      	b.n	8002c36 <ETH_Prepare_Tx_Descriptors+0x29e>
  while (txbuffer->next != NULL)
 8002cf2:	464d      	mov	r5, r9
 8002cf4:	e7c8      	b.n	8002c88 <ETH_Prepare_Tx_Descriptors+0x2f0>
 8002cf6:	bf00      	nop
 8002cf8:	c000ffff 	.word	0xc000ffff

08002cfc <ETH_UpdateDescriptor>:
{
 8002cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t *buff = NULL;
 8002cfe:	2300      	movs	r3, #0
{
 8002d00:	b083      	sub	sp, #12
 8002d02:	4605      	mov	r5, r0
  uint8_t *buff = NULL;
 8002d04:	9301      	str	r3, [sp, #4]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002d06:	e9d0 761a 	ldrd	r7, r6, [r0, #104]	@ 0x68
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002d0a:	f107 0312 	add.w	r3, r7, #18
 8002d0e:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002d12:	b31e      	cbz	r6, 8002d5c <ETH_UpdateDescriptor+0x60>
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002d14:	6923      	ldr	r3, [r4, #16]
 8002d16:	b18b      	cbz	r3, 8002d3c <ETH_UpdateDescriptor+0x40>
      if (heth->RxDescList.ItMode != 0U)
 8002d18:	6dab      	ldr	r3, [r5, #88]	@ 0x58
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8002d1a:	f04f 4141 	mov.w	r1, #3238002688	@ 0xc1000000
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8002d1e:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
      if (heth->RxDescList.ItMode != 0U)
 8002d22:	b9cb      	cbnz	r3, 8002d58 <ETH_UpdateDescriptor+0x5c>
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8002d24:	60e2      	str	r2, [r4, #12]
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002d26:	1c7b      	adds	r3, r7, #1
      desccount--;
 8002d28:	3e01      	subs	r6, #1
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002d2a:	2b03      	cmp	r3, #3
 8002d2c:	bf88      	it	hi
 8002d2e:	1efb      	subhi	r3, r7, #3
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002d30:	f103 0212 	add.w	r2, r3, #18
      desccount--;
 8002d34:	461f      	mov	r7, r3
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002d36:	f855 4022 	ldr.w	r4, [r5, r2, lsl #2]
      desccount--;
 8002d3a:	e7ea      	b.n	8002d12 <ETH_UpdateDescriptor+0x16>
      HAL_ETH_RxAllocateCallback(&buff);
 8002d3c:	a801      	add	r0, sp, #4
 8002d3e:	f003 fd21 	bl	8006784 <HAL_ETH_RxAllocateCallback>
      if (buff == NULL)
 8002d42:	9b01      	ldr	r3, [sp, #4]
 8002d44:	b153      	cbz	r3, 8002d5c <ETH_UpdateDescriptor+0x60>
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8002d46:	6023      	str	r3, [r4, #0]
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8002d48:	f04f 4141 	mov.w	r1, #3238002688	@ 0xc1000000
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002d4c:	6123      	str	r3, [r4, #16]
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8002d4e:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
      if (heth->RxDescList.ItMode != 0U)
 8002d52:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d0e5      	beq.n	8002d24 <ETH_UpdateDescriptor+0x28>
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8002d58:	60e1      	str	r1, [r4, #12]
 8002d5a:	e7e4      	b.n	8002d26 <ETH_UpdateDescriptor+0x2a>
  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002d5c:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 8002d5e:	42b3      	cmp	r3, r6
 8002d60:	d010      	beq.n	8002d84 <ETH_UpdateDescriptor+0x88>
 8002d62:	f3bf 8f5f 	dmb	sy
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8002d66:	1c7b      	adds	r3, r7, #1
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8002d68:	682a      	ldr	r2, [r5, #0]
 8002d6a:	6929      	ldr	r1, [r5, #16]
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8002d6c:	f003 0303 	and.w	r3, r3, #3
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8002d70:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d74:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002d78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8002d7c:	f8c2 1128 	str.w	r1, [r2, #296]	@ 0x128
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002d80:	e9c5 761a 	strd	r7, r6, [r5, #104]	@ 0x68
}
 8002d84:	b003      	add	sp, #12
 8002d86:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d88 <HAL_ETH_Start_IT>:
{
 8002d88:	b538      	push	{r3, r4, r5, lr}
  if (heth->gState == HAL_ETH_STATE_READY)
 8002d8a:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 8002d8e:	2b10      	cmp	r3, #16
 8002d90:	d001      	beq.n	8002d96 <HAL_ETH_Start_IT+0xe>
    return HAL_ERROR;
 8002d92:	2001      	movs	r0, #1
}
 8002d94:	bd38      	pop	{r3, r4, r5, pc}
    heth->gState = HAL_ETH_STATE_BUSY;
 8002d96:	2523      	movs	r5, #35	@ 0x23
    heth->RxDescList.ItMode = 1U;
 8002d98:	2201      	movs	r2, #1
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002d9a:	2304      	movs	r3, #4
 8002d9c:	4604      	mov	r4, r0
    heth->gState = HAL_ETH_STATE_BUSY;
 8002d9e:	f8c0 5084 	str.w	r5, [r0, #132]	@ 0x84
    heth->RxDescList.ItMode = 1U;
 8002da2:	6582      	str	r2, [r0, #88]	@ 0x58
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002da4:	66c3      	str	r3, [r0, #108]	@ 0x6c
    ETH_UpdateDescriptor(heth);
 8002da6:	f7ff ffa9 	bl	8002cfc <ETH_UpdateDescriptor>
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002daa:	6822      	ldr	r2, [r4, #0]
    return HAL_OK;
 8002dac:	2000      	movs	r0, #0
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002dae:	f502 5380 	add.w	r3, r2, #4096	@ 0x1000
 8002db2:	f8d3 1104 	ldr.w	r1, [r3, #260]	@ 0x104
 8002db6:	f041 0101 	orr.w	r1, r1, #1
 8002dba:	f8c3 1104 	str.w	r1, [r3, #260]	@ 0x104
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002dbe:	f8d3 1108 	ldr.w	r1, [r3, #264]	@ 0x108
 8002dc2:	f041 0101 	orr.w	r1, r1, #1
 8002dc6:	f8c3 1108 	str.w	r1, [r3, #264]	@ 0x108
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8002dca:	f8d3 1160 	ldr.w	r1, [r3, #352]	@ 0x160
 8002dce:	f441 7181 	orr.w	r1, r1, #258	@ 0x102
 8002dd2:	f8c3 1160 	str.w	r1, [r3, #352]	@ 0x160
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8002dd6:	f8d2 1d00 	ldr.w	r1, [r2, #3328]	@ 0xd00
 8002dda:	f041 0101 	orr.w	r1, r1, #1
 8002dde:	f8c2 1d00 	str.w	r1, [r2, #3328]	@ 0xd00
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002de2:	6811      	ldr	r1, [r2, #0]
 8002de4:	f041 0102 	orr.w	r1, r1, #2
 8002de8:	6011      	str	r1, [r2, #0]
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002dea:	6811      	ldr	r1, [r2, #0]
 8002dec:	f041 0101 	orr.w	r1, r1, #1
 8002df0:	6011      	str	r1, [r2, #0]
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002df2:	f24d 02c1 	movw	r2, #53441	@ 0xd0c1
 8002df6:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
    heth->gState = HAL_ETH_STATE_STARTED;
 8002e00:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
}
 8002e04:	bd38      	pop	{r3, r4, r5, pc}
 8002e06:	bf00      	nop

08002e08 <HAL_ETH_Stop_IT>:
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002e08:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 8002e0c:	2a23      	cmp	r2, #35	@ 0x23
 8002e0e:	d001      	beq.n	8002e14 <HAL_ETH_Stop_IT+0xc>
    return HAL_ERROR;
 8002e10:	2001      	movs	r0, #1
}
 8002e12:	4770      	bx	lr
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002e14:	4601      	mov	r1, r0
 8002e16:	4603      	mov	r3, r0
{
 8002e18:	b430      	push	{r4, r5}
    heth->gState = HAL_ETH_STATE_BUSY;
 8002e1a:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002e1e:	f103 0c54 	add.w	ip, r3, #84	@ 0x54
 8002e22:	f851 2b44 	ldr.w	r2, [r1], #68
 8002e26:	4c19      	ldr	r4, [pc, #100]	@ (8002e8c <HAL_ETH_Stop_IT+0x84>)
 8002e28:	f502 5080 	add.w	r0, r2, #4096	@ 0x1000
 8002e2c:	f8d0 5134 	ldr.w	r5, [r0, #308]	@ 0x134
 8002e30:	402c      	ands	r4, r5
 8002e32:	f8c0 4134 	str.w	r4, [r0, #308]	@ 0x134
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002e36:	f8d0 4104 	ldr.w	r4, [r0, #260]	@ 0x104
 8002e3a:	f024 0401 	bic.w	r4, r4, #1
 8002e3e:	f8c0 4104 	str.w	r4, [r0, #260]	@ 0x104
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002e42:	f8d0 4108 	ldr.w	r4, [r0, #264]	@ 0x108
 8002e46:	f024 0401 	bic.w	r4, r4, #1
 8002e4a:	f8c0 4108 	str.w	r4, [r0, #264]	@ 0x108
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002e4e:	6810      	ldr	r0, [r2, #0]
 8002e50:	f020 0001 	bic.w	r0, r0, #1
 8002e54:	6010      	str	r0, [r2, #0]
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8002e56:	f8d2 0d00 	ldr.w	r0, [r2, #3328]	@ 0xd00
 8002e5a:	f040 0001 	orr.w	r0, r0, #1
 8002e5e:	f8c2 0d00 	str.w	r0, [r2, #3328]	@ 0xd00
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002e62:	6810      	ldr	r0, [r2, #0]
 8002e64:	f020 0002 	bic.w	r0, r0, #2
 8002e68:	6010      	str	r0, [r2, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8002e6a:	f851 0f04 	ldr.w	r0, [r1, #4]!
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002e6e:	68c2      	ldr	r2, [r0, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002e70:	4561      	cmp	r1, ip
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002e72:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 8002e76:	60c2      	str	r2, [r0, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002e78:	d1f7      	bne.n	8002e6a <HAL_ETH_Stop_IT+0x62>
    heth->RxDescList.ItMode = 0U;
 8002e7a:	2200      	movs	r2, #0
    heth->gState = HAL_ETH_STATE_READY;
 8002e7c:	2110      	movs	r1, #16
    return HAL_OK;
 8002e7e:	4610      	mov	r0, r2
    heth->RxDescList.ItMode = 0U;
 8002e80:	659a      	str	r2, [r3, #88]	@ 0x58
    heth->gState = HAL_ETH_STATE_READY;
 8002e82:	f8c3 1084 	str.w	r1, [r3, #132]	@ 0x84
}
 8002e86:	bc30      	pop	{r4, r5}
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	ffff2f3e 	.word	0xffff2f3e

08002e90 <HAL_ETH_Transmit_IT>:
{
 8002e90:	b510      	push	{r4, lr}
 8002e92:	4604      	mov	r4, r0
  if (pTxConfig == NULL)
 8002e94:	b321      	cbz	r1, 8002ee0 <HAL_ETH_Transmit_IT+0x50>
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002e96:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 8002e9a:	2a23      	cmp	r2, #35	@ 0x23
 8002e9c:	d001      	beq.n	8002ea2 <HAL_ETH_Transmit_IT+0x12>
    return HAL_ERROR;
 8002e9e:	2001      	movs	r0, #1
}
 8002ea0:	bd10      	pop	{r4, pc}
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8002ea2:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8002ea4:	2201      	movs	r2, #1
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8002ea6:	63c3      	str	r3, [r0, #60]	@ 0x3c
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8002ea8:	f7ff fd76 	bl	8002998 <ETH_Prepare_Tx_Descriptors>
 8002eac:	b130      	cbz	r0, 8002ebc <HAL_ETH_Transmit_IT+0x2c>
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002eae:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
 8002eb2:	f043 0302 	orr.w	r3, r3, #2
 8002eb6:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_ERROR;
 8002eba:	e7f0      	b.n	8002e9e <HAL_ETH_Transmit_IT+0xe>
  __ASM volatile ("dsb 0xF":::"memory");
 8002ebc:	f3bf 8f4f 	dsb	sy
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002ec0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    return HAL_OK;
 8002ec2:	2000      	movs	r0, #0
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002ec4:	1c53      	adds	r3, r2, #1
 8002ec6:	2b03      	cmp	r3, #3
 8002ec8:	bf88      	it	hi
 8002eca:	1ed3      	subhi	r3, r2, #3
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002ecc:	6822      	ldr	r2, [r4, #0]
 8002ece:	1d99      	adds	r1, r3, #6
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002ed0:	62a3      	str	r3, [r4, #40]	@ 0x28
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002ed2:	f502 5380 	add.w	r3, r2, #4096	@ 0x1000
 8002ed6:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8002eda:	f8c3 1120 	str.w	r1, [r3, #288]	@ 0x120
}
 8002ede:	bd10      	pop	{r4, pc}
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002ee0:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8002ee4:	f043 0301 	orr.w	r3, r3, #1
 8002ee8:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    return HAL_ERROR;
 8002eec:	e7d7      	b.n	8002e9e <HAL_ETH_Transmit_IT+0xe>
 8002eee:	bf00      	nop

08002ef0 <HAL_ETH_ReadData>:
{
 8002ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ef4:	4604      	mov	r4, r0
 8002ef6:	b083      	sub	sp, #12
  if (pAppBuff == NULL)
 8002ef8:	2900      	cmp	r1, #0
 8002efa:	d070      	beq.n	8002fde <HAL_ETH_ReadData+0xee>
  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002efc:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 8002f00:	2b23      	cmp	r3, #35	@ 0x23
 8002f02:	d162      	bne.n	8002fca <HAL_ETH_ReadData+0xda>
  descidx = heth->RxDescList.RxDescIdx;
 8002f04:	f8d0 805c 	ldr.w	r8, [r0, #92]	@ 0x5c
 8002f08:	460f      	mov	r7, r1
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002f0a:	f108 0312 	add.w	r3, r8, #18
 8002f0e:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002f12:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002f14:	68e9      	ldr	r1, [r5, #12]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002f16:	f1c3 0b04 	rsb	fp, r3, #4
         && (rxdataready == 0U))
 8002f1a:	2900      	cmp	r1, #0
 8002f1c:	db6a      	blt.n	8002ff4 <HAL_ETH_ReadData+0x104>
 8002f1e:	f1bb 0f00 	cmp.w	fp, #0
 8002f22:	d069      	beq.n	8002ff8 <HAL_ETH_ReadData+0x108>
  uint32_t desccnt = 0U;
 8002f24:	f04f 0900 	mov.w	r9, #0
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002f28:	f100 0380 	add.w	r3, r0, #128	@ 0x80
      dmarxdesc->BackupAddr0 = 0;
 8002f2c:	9701      	str	r7, [sp, #4]
 8002f2e:	46ca      	mov	sl, r9
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002f30:	9300      	str	r3, [sp, #0]
 8002f32:	e02e      	b.n	8002f92 <HAL_ETH_ReadData+0xa2>
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8002f34:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002f36:	68ef      	ldr	r7, [r5, #12]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8002f38:	68ee      	ldr	r6, [r5, #12]
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8002f3a:	f3c7 070e 	ubfx	r7, r7, #0, #15
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8002f3e:	f016 5680 	ands.w	r6, r6, #268435456	@ 0x10000000
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8002f42:	eba7 0703 	sub.w	r7, r7, r3
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8002f46:	d002      	beq.n	8002f4e <HAL_ETH_ReadData+0x5e>
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8002f48:	68eb      	ldr	r3, [r5, #12]
        rxdataready = 1;
 8002f4a:	2601      	movs	r6, #1
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8002f4c:	6723      	str	r3, [r4, #112]	@ 0x70
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002f4e:	b2bb      	uxth	r3, r7
 8002f50:	692a      	ldr	r2, [r5, #16]
 8002f52:	9900      	ldr	r1, [sp, #0]
 8002f54:	f104 007c 	add.w	r0, r4, #124	@ 0x7c
 8002f58:	f003 fc38 	bl	80067cc <HAL_ETH_RxLinkCallback>
      heth->RxDescList.RxDescCnt++;
 8002f5c:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8002f5e:	3301      	adds	r3, #1
 8002f60:	6623      	str	r3, [r4, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002f62:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002f64:	443b      	add	r3, r7
 8002f66:	6663      	str	r3, [r4, #100]	@ 0x64
      dmarxdesc->BackupAddr0 = 0;
 8002f68:	f8c5 a010 	str.w	sl, [r5, #16]
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002f6c:	f108 0301 	add.w	r3, r8, #1
    desccnt++;
 8002f70:	f109 0901 	add.w	r9, r9, #1
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002f74:	2b03      	cmp	r3, #3
 8002f76:	bf8c      	ite	hi
 8002f78:	f1a8 0803 	subhi.w	r8, r8, #3
 8002f7c:	4698      	movls	r8, r3
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002f7e:	f108 0312 	add.w	r3, r8, #18
 8002f82:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002f86:	68eb      	ldr	r3, [r5, #12]
         && (rxdataready == 0U))
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	db16      	blt.n	8002fba <HAL_ETH_ReadData+0xca>
 8002f8c:	45cb      	cmp	fp, r9
 8002f8e:	d914      	bls.n	8002fba <HAL_ETH_ReadData+0xca>
 8002f90:	b99e      	cbnz	r6, 8002fba <HAL_ETH_ReadData+0xca>
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8002f92:	68eb      	ldr	r3, [r5, #12]
 8002f94:	0059      	lsls	r1, r3, #1
 8002f96:	d503      	bpl.n	8002fa0 <HAL_ETH_ReadData+0xb0>
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8002f98:	686b      	ldr	r3, [r5, #4]
 8002f9a:	67a3      	str	r3, [r4, #120]	@ 0x78
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8002f9c:	682b      	ldr	r3, [r5, #0]
 8002f9e:	6763      	str	r3, [r4, #116]	@ 0x74
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002fa0:	68eb      	ldr	r3, [r5, #12]
 8002fa2:	009a      	lsls	r2, r3, #2
 8002fa4:	d402      	bmi.n	8002fac <HAL_ETH_ReadData+0xbc>
 8002fa6:	6fe6      	ldr	r6, [r4, #124]	@ 0x7c
 8002fa8:	2e00      	cmp	r6, #0
 8002faa:	d0df      	beq.n	8002f6c <HAL_ETH_ReadData+0x7c>
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8002fac:	68eb      	ldr	r3, [r5, #12]
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	d5c0      	bpl.n	8002f34 <HAL_ETH_ReadData+0x44>
        heth->RxDescList.RxDescCnt = 0;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	e9c4 aa18 	strd	sl, sl, [r4, #96]	@ 0x60
 8002fb8:	e7bd      	b.n	8002f36 <HAL_ETH_ReadData+0x46>
  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002fba:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8002fbc:	9f01      	ldr	r7, [sp, #4]
 8002fbe:	444b      	add	r3, r9
 8002fc0:	66e3      	str	r3, [r4, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002fc2:	b99b      	cbnz	r3, 8002fec <HAL_ETH_ReadData+0xfc>
  heth->RxDescList.RxDescIdx = descidx;
 8002fc4:	f8c4 805c 	str.w	r8, [r4, #92]	@ 0x5c
  if (rxdataready == 1U)
 8002fc8:	b91e      	cbnz	r6, 8002fd2 <HAL_ETH_ReadData+0xe2>
    return HAL_ERROR;
 8002fca:	2001      	movs	r0, #1
}
 8002fcc:	b003      	add	sp, #12
 8002fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    *pAppBuff = heth->RxDescList.pRxStart;
 8002fd2:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
    heth->RxDescList.pRxStart = NULL;
 8002fd4:	2300      	movs	r3, #0
    *pAppBuff = heth->RxDescList.pRxStart;
 8002fd6:	603a      	str	r2, [r7, #0]
    return HAL_OK;
 8002fd8:	4618      	mov	r0, r3
    heth->RxDescList.pRxStart = NULL;
 8002fda:	67e3      	str	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 8002fdc:	e7f6      	b.n	8002fcc <HAL_ETH_ReadData+0xdc>
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002fde:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8002fe2:	f043 0301 	orr.w	r3, r3, #1
 8002fe6:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    return HAL_ERROR;
 8002fea:	e7ee      	b.n	8002fca <HAL_ETH_ReadData+0xda>
    ETH_UpdateDescriptor(heth);
 8002fec:	4620      	mov	r0, r4
 8002fee:	f7ff fe85 	bl	8002cfc <ETH_UpdateDescriptor>
 8002ff2:	e7e7      	b.n	8002fc4 <HAL_ETH_ReadData+0xd4>
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d0e8      	beq.n	8002fca <HAL_ETH_ReadData+0xda>
    ETH_UpdateDescriptor(heth);
 8002ff8:	f7ff fe80 	bl	8002cfc <ETH_UpdateDescriptor>
  heth->RxDescList.RxDescIdx = descidx;
 8002ffc:	f8c4 805c 	str.w	r8, [r4, #92]	@ 0x5c
  if (rxdataready == 1U)
 8003000:	e7e3      	b.n	8002fca <HAL_ETH_ReadData+0xda>
 8003002:	bf00      	nop

08003004 <HAL_ETH_ReleaseTxPacket>:
{
 8003004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8003008:	e9d0 5410 	ldrd	r5, r4, [r0, #64]	@ 0x40
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800300c:	b17d      	cbz	r5, 800302e <HAL_ETH_ReleaseTxPacket+0x2a>
 800300e:	4606      	mov	r6, r0
        dmatxdesclist->PacketAddress[idx] = NULL;
 8003010:	f04f 0800 	mov.w	r8, #0
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8003014:	eb06 0784 	add.w	r7, r6, r4, lsl #2
    numOfBuf--;
 8003018:	3d01      	subs	r5, #1
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 800301a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 800301e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003020:	b140      	cbz	r0, 8003034 <HAL_ETH_ReleaseTxPacket+0x30>
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8003022:	68f3      	ldr	r3, [r6, #12]
 8003024:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	2b00      	cmp	r3, #0
 800302c:	da0c      	bge.n	8003048 <HAL_ETH_ReleaseTxPacket+0x44>
}
 800302e:	2000      	movs	r0, #0
 8003030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      INCR_TX_DESC_INDEX(idx, 1U);
 8003034:	1c63      	adds	r3, r4, #1
 8003036:	3c03      	subs	r4, #3
 8003038:	2b03      	cmp	r3, #3
 800303a:	d800      	bhi.n	800303e <HAL_ETH_ReleaseTxPacket+0x3a>
 800303c:	461c      	mov	r4, r3
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800303e:	2d00      	cmp	r5, #0
 8003040:	d1e8      	bne.n	8003014 <HAL_ETH_ReleaseTxPacket+0x10>
}
 8003042:	2000      	movs	r0, #0
 8003044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8003048:	f003 fbf0 	bl	800682c <HAL_ETH_TxFreeCallback>
        INCR_TX_DESC_INDEX(idx, 1U);
 800304c:	1c63      	adds	r3, r4, #1
 800304e:	3c03      	subs	r4, #3
        dmatxdesclist->PacketAddress[idx] = NULL;
 8003050:	f8c7 802c 	str.w	r8, [r7, #44]	@ 0x2c
        INCR_TX_DESC_INDEX(idx, 1U);
 8003054:	2b03      	cmp	r3, #3
 8003056:	bf98      	it	ls
 8003058:	461c      	movls	r4, r3
        dmatxdesclist->releaseIndex = idx;
 800305a:	e9c6 5410 	strd	r5, r4, [r6, #64]	@ 0x40
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800305e:	2d00      	cmp	r5, #0
 8003060:	d1d8      	bne.n	8003014 <HAL_ETH_ReleaseTxPacket+0x10>
 8003062:	e7ee      	b.n	8003042 <HAL_ETH_ReleaseTxPacket+0x3e>

08003064 <HAL_ETH_PMTCallback>:
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop

08003068 <HAL_ETH_EEECallback>:
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop

0800306c <HAL_ETH_WakeUpCallback>:
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop

08003070 <HAL_ETH_IRQHandler>:
  uint32_t mac_flag = READ_REG(heth->Instance->MACISR);
 8003070:	6802      	ldr	r2, [r0, #0]
  uint32_t dma_flag = READ_REG(heth->Instance->DMACSR);
 8003072:	f502 5380 	add.w	r3, r2, #4096	@ 0x1000
{
 8003076:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t mac_flag = READ_REG(heth->Instance->MACISR);
 800307a:	f8d2 60b0 	ldr.w	r6, [r2, #176]	@ 0xb0
  uint32_t exti_d1_flag = READ_REG(EXTI_D1->PR3);
 800307e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
  uint32_t dma_flag = READ_REG(heth->Instance->DMACSR);
 8003082:	f8d3 5160 	ldr.w	r5, [r3, #352]	@ 0x160
{
 8003086:	4604      	mov	r4, r0
  uint32_t dma_itsource = READ_REG(heth->Instance->DMACIER);
 8003088:	f8d3 7134 	ldr.w	r7, [r3, #308]	@ 0x134
  if (((dma_flag & ETH_DMACSR_RI) != 0U) && ((dma_itsource & ETH_DMACIER_RIE) != 0U))
 800308c:	0669      	lsls	r1, r5, #25
  uint32_t exti_d1_flag = READ_REG(EXTI_D1->PR3);
 800308e:	f8d2 80a8 	ldr.w	r8, [r2, #168]	@ 0xa8
  if (((dma_flag & ETH_DMACSR_RI) != 0U) && ((dma_itsource & ETH_DMACIER_RIE) != 0U))
 8003092:	d501      	bpl.n	8003098 <HAL_ETH_IRQHandler+0x28>
 8003094:	067a      	lsls	r2, r7, #25
 8003096:	d479      	bmi.n	800318c <HAL_ETH_IRQHandler+0x11c>
  if (((dma_flag & ETH_DMACSR_TI) != 0U) && ((dma_itsource & ETH_DMACIER_TIE) != 0U))
 8003098:	07e9      	lsls	r1, r5, #31
 800309a:	d501      	bpl.n	80030a0 <HAL_ETH_IRQHandler+0x30>
 800309c:	07fa      	lsls	r2, r7, #31
 800309e:	d46a      	bmi.n	8003176 <HAL_ETH_IRQHandler+0x106>
  if (((dma_flag & ETH_DMACSR_AIS) != 0U) && ((dma_itsource & ETH_DMACIER_AIE) != 0U))
 80030a0:	046b      	lsls	r3, r5, #17
 80030a2:	d501      	bpl.n	80030a8 <HAL_ETH_IRQHandler+0x38>
 80030a4:	0478      	lsls	r0, r7, #17
 80030a6:	d40b      	bmi.n	80030c0 <HAL_ETH_IRQHandler+0x50>
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 80030a8:	f416 4fc0 	tst.w	r6, #24576	@ 0x6000
 80030ac:	d123      	bne.n	80030f6 <HAL_ETH_IRQHandler+0x86>
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 80030ae:	06f2      	lsls	r2, r6, #27
 80030b0:	d437      	bmi.n	8003122 <HAL_ETH_IRQHandler+0xb2>
  if ((mac_flag & ETH_MAC_LPI_IT) != 0U)
 80030b2:	06b3      	lsls	r3, r6, #26
 80030b4:	d444      	bmi.n	8003140 <HAL_ETH_IRQHandler+0xd0>
  if ((exti_d1_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 80030b6:	f418 0f80 	tst.w	r8, #4194304	@ 0x400000
 80030ba:	d151      	bne.n	8003160 <HAL_ETH_IRQHandler+0xf0>
}
 80030bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80030c0:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
    if ((dma_flag & ETH_DMACSR_FBE) != 0U)
 80030c4:	04e9      	lsls	r1, r5, #19
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80030c6:	f043 0308 	orr.w	r3, r3, #8
 80030ca:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 80030ce:	6823      	ldr	r3, [r4, #0]
 80030d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030d4:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
    if ((dma_flag & ETH_DMACSR_FBE) != 0U)
 80030d8:	d45f      	bmi.n	800319a <HAL_ETH_IRQHandler+0x12a>
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80030da:	f402 42cd 	and.w	r2, r2, #26240	@ 0x6680
 80030de:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80030e2:	f44f 42cd 	mov.w	r2, #26240	@ 0x6680
 80030e6:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
    HAL_ETH_ErrorCallback(heth);
 80030ea:	4620      	mov	r0, r4
 80030ec:	f003 f9a2 	bl	8006434 <HAL_ETH_ErrorCallback>
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 80030f0:	f416 4fc0 	tst.w	r6, #24576	@ 0x6000
 80030f4:	d0db      	beq.n	80030ae <HAL_ETH_IRQHandler+0x3e>
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 80030f6:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
    HAL_ETH_ErrorCallback(heth);
 80030fa:	4620      	mov	r0, r4
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 80030fc:	6822      	ldr	r2, [r4, #0]
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 80030fe:	f043 0310 	orr.w	r3, r3, #16
 8003102:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8003106:	f8d2 30b8 	ldr.w	r3, [r2, #184]	@ 0xb8
 800310a:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
    heth->gState = HAL_ETH_STATE_ERROR;
 800310e:	23e0      	movs	r3, #224	@ 0xe0
 8003110:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
    HAL_ETH_ErrorCallback(heth);
 8003114:	f003 f98e 	bl	8006434 <HAL_ETH_ErrorCallback>
    heth->MACErrorCode = (uint32_t)(0x0U);
 8003118:	2300      	movs	r3, #0
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 800311a:	06f2      	lsls	r2, r6, #27
    heth->MACErrorCode = (uint32_t)(0x0U);
 800311c:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8003120:	d5c7      	bpl.n	80030b2 <HAL_ETH_IRQHandler+0x42>
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8003122:	6823      	ldr	r3, [r4, #0]
    HAL_ETH_PMTCallback(heth);
 8003124:	4620      	mov	r0, r4
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8003126:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800312a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800312e:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
    HAL_ETH_PMTCallback(heth);
 8003132:	f7ff ff97 	bl	8003064 <HAL_ETH_PMTCallback>
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8003136:	2300      	movs	r3, #0
 8003138:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
  if ((mac_flag & ETH_MAC_LPI_IT) != 0U)
 800313c:	06b3      	lsls	r3, r6, #26
 800313e:	d5ba      	bpl.n	80030b6 <HAL_ETH_IRQHandler+0x46>
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACLCSR, 0x0000000FU);
 8003140:	6823      	ldr	r3, [r4, #0]
    HAL_ETH_EEECallback(heth);
 8003142:	4620      	mov	r0, r4
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACLCSR, 0x0000000FU);
 8003144:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8003148:	f003 030f 	and.w	r3, r3, #15
 800314c:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
    HAL_ETH_EEECallback(heth);
 8003150:	f7ff ff8a 	bl	8003068 <HAL_ETH_EEECallback>
    heth->MACLPIEvent = (uint32_t)(0x0U);
 8003154:	2300      	movs	r3, #0
  if ((exti_d1_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8003156:	f418 0f80 	tst.w	r8, #4194304	@ 0x400000
    heth->MACLPIEvent = (uint32_t)(0x0U);
 800315a:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
  if ((exti_d1_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 800315e:	d0ad      	beq.n	80030bc <HAL_ETH_IRQHandler+0x4c>
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8003160:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003164:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
    HAL_ETH_WakeUpCallback(heth);
 8003168:	4620      	mov	r0, r4
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800316a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
    HAL_ETH_WakeUpCallback(heth);
 800316e:	f7ff ff7d 	bl	800306c <HAL_ETH_WakeUpCallback>
}
 8003172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8003176:	6823      	ldr	r3, [r4, #0]
 8003178:	f248 0201 	movw	r2, #32769	@ 0x8001
    HAL_ETH_TxCpltCallback(heth);
 800317c:	4620      	mov	r0, r4
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 800317e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003182:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
    HAL_ETH_TxCpltCallback(heth);
 8003186:	f003 f94f 	bl	8006428 <HAL_ETH_TxCpltCallback>
 800318a:	e789      	b.n	80030a0 <HAL_ETH_IRQHandler+0x30>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 800318c:	f248 0240 	movw	r2, #32832	@ 0x8040
 8003190:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
    HAL_ETH_RxCpltCallback(heth);
 8003194:	f003 f942 	bl	800641c <HAL_ETH_RxCpltCallback>
 8003198:	e77e      	b.n	8003098 <HAL_ETH_IRQHandler+0x28>
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 800319a:	f241 1102 	movw	r1, #4354	@ 0x1102
 800319e:	400a      	ands	r2, r1
 80031a0:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 80031a4:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 80031a8:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80031ac:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
      heth->gState = HAL_ETH_STATE_ERROR;
 80031b0:	23e0      	movs	r3, #224	@ 0xe0
 80031b2:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 80031b6:	e798      	b.n	80030ea <HAL_ETH_IRQHandler+0x7a>

080031b8 <HAL_ETH_ReadPHYRegister>:
{
 80031b8:	b570      	push	{r4, r5, r6, lr}
 80031ba:	4604      	mov	r4, r0
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 80031bc:	6800      	ldr	r0, [r0, #0]
{
 80031be:	461d      	mov	r5, r3
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 80031c0:	f8d0 3200 	ldr.w	r3, [r0, #512]	@ 0x200
 80031c4:	07db      	lsls	r3, r3, #31
 80031c6:	d501      	bpl.n	80031cc <HAL_ETH_ReadPHYRegister+0x14>
    return HAL_ERROR;
 80031c8:	2001      	movs	r0, #1
}
 80031ca:	bd70      	pop	{r4, r5, r6, pc}
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80031cc:	f8d0 3200 	ldr.w	r3, [r0, #512]	@ 0x200
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 80031d0:	f023 7378 	bic.w	r3, r3, #65011712	@ 0x3e00000
 80031d4:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80031d8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80031dc:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80031e0:	f042 020d 	orr.w	r2, r2, #13
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 80031e4:	f8c0 2200 	str.w	r2, [r0, #512]	@ 0x200
  tickstart = HAL_GetTick();
 80031e8:	f7fe fc12 	bl	8001a10 <HAL_GetTick>
 80031ec:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80031ee:	e005      	b.n	80031fc <HAL_ETH_ReadPHYRegister+0x44>
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 80031f0:	f7fe fc0e 	bl	8001a10 <HAL_GetTick>
 80031f4:	1b82      	subs	r2, r0, r6
 80031f6:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 80031fa:	d8e5      	bhi.n	80031c8 <HAL_ETH_ReadPHYRegister+0x10>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80031fc:	6821      	ldr	r1, [r4, #0]
 80031fe:	f8d1 2200 	ldr.w	r2, [r1, #512]	@ 0x200
 8003202:	f012 0201 	ands.w	r2, r2, #1
 8003206:	d1f3      	bne.n	80031f0 <HAL_ETH_ReadPHYRegister+0x38>
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8003208:	f8d1 3204 	ldr.w	r3, [r1, #516]	@ 0x204
  return HAL_OK;
 800320c:	4610      	mov	r0, r2
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 800320e:	b29b      	uxth	r3, r3
 8003210:	602b      	str	r3, [r5, #0]
}
 8003212:	bd70      	pop	{r4, r5, r6, pc}

08003214 <HAL_ETH_WritePHYRegister>:
{
 8003214:	b538      	push	{r3, r4, r5, lr}
 8003216:	4604      	mov	r4, r0
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8003218:	6800      	ldr	r0, [r0, #0]
 800321a:	f8d0 5200 	ldr.w	r5, [r0, #512]	@ 0x200
 800321e:	07ed      	lsls	r5, r5, #31
 8003220:	d501      	bpl.n	8003226 <HAL_ETH_WritePHYRegister+0x12>
    return HAL_ERROR;
 8003222:	2001      	movs	r0, #1
}
 8003224:	bd38      	pop	{r3, r4, r5, pc}
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8003226:	f8d0 0200 	ldr.w	r0, [r0, #512]	@ 0x200
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 800322a:	b29d      	uxth	r5, r3
 800322c:	f020 7378 	bic.w	r3, r0, #65011712	@ 0x3e00000
 8003230:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8003234:	490f      	ldr	r1, [pc, #60]	@ (8003274 <HAL_ETH_WritePHYRegister+0x60>)
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8003236:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 800323a:	f8c1 5204 	str.w	r5, [r1, #516]	@ 0x204
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800323e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8003242:	f023 030c 	bic.w	r3, r3, #12
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8003246:	f043 0305 	orr.w	r3, r3, #5
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 800324a:	f8c1 3200 	str.w	r3, [r1, #512]	@ 0x200
  tickstart = HAL_GetTick();
 800324e:	f7fe fbdf 	bl	8001a10 <HAL_GetTick>
 8003252:	4605      	mov	r5, r0
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8003254:	e005      	b.n	8003262 <HAL_ETH_WritePHYRegister+0x4e>
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8003256:	f7fe fbdb 	bl	8001a10 <HAL_GetTick>
 800325a:	1b43      	subs	r3, r0, r5
 800325c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003260:	d8df      	bhi.n	8003222 <HAL_ETH_WritePHYRegister+0xe>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8003262:	6823      	ldr	r3, [r4, #0]
 8003264:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003268:	f013 0301 	ands.w	r3, r3, #1
 800326c:	d1f3      	bne.n	8003256 <HAL_ETH_WritePHYRegister+0x42>
  return HAL_OK;
 800326e:	4618      	mov	r0, r3
}
 8003270:	bd38      	pop	{r3, r4, r5, pc}
 8003272:	bf00      	nop
 8003274:	40028000 	.word	0x40028000

08003278 <HAL_ETH_GetMACConfig>:
  if (macconf == NULL)
 8003278:	2900      	cmp	r1, #0
 800327a:	f000 80c4 	beq.w	8003406 <HAL_ETH_GetMACConfig+0x18e>
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 800327e:	6803      	ldr	r3, [r0, #0]
  return HAL_OK;
 8003280:	2000      	movs	r0, #0
{
 8003282:	b410      	push	{r4}
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8003284:	681c      	ldr	r4, [r3, #0]
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8003286:	681a      	ldr	r2, [r3, #0]
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8003288:	f004 040c 	and.w	r4, r4, #12
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800328c:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8003290:	f881 2028 	strb.w	r2, [r1, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8003294:	681a      	ldr	r2, [r3, #0]
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8003296:	62cc      	str	r4, [r1, #44]	@ 0x2c
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8003298:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 800329c:	624a      	str	r2, [r1, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	f482 7280 	eor.w	r2, r2, #256	@ 0x100
 80032a4:	f3c2 2200 	ubfx	r2, r2, #8, #1
 80032a8:	f881 2020 	strb.w	r2, [r1, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 80032ac:	681a      	ldr	r2, [r3, #0]
                                        ? ENABLE : DISABLE;
 80032ae:	f3c2 2240 	ubfx	r2, r2, #9, #1
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 80032b2:	77ca      	strb	r2, [r1, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	f482 6280 	eor.w	r2, r2, #1024	@ 0x400
 80032ba:	f3c2 2280 	ubfx	r2, r2, #10, #1
 80032be:	778a      	strb	r2, [r1, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80032c0:	681a      	ldr	r2, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 80032c2:	f3c2 22c0 	ubfx	r2, r2, #11, #1
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80032c6:	774a      	strb	r2, [r1, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	f3c2 3200 	ubfx	r2, r2, #12, #1
 80032ce:	770a      	strb	r2, [r1, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80032d0:	681c      	ldr	r4, [r3, #0]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80032d2:	681a      	ldr	r2, [r3, #0]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80032d4:	f404 5400 	and.w	r4, r4, #8192	@ 0x2000
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80032d8:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80032dc:	e9c1 2405 	strd	r2, r4, [r1, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	f3c2 4200 	ubfx	r2, r2, #16, #1
 80032e6:	748a      	strb	r2, [r1, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	f482 3200 	eor.w	r2, r2, #131072	@ 0x20000
 80032ee:	f3c2 4240 	ubfx	r2, r2, #17, #1
 80032f2:	744a      	strb	r2, [r1, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80032fa:	f3c2 42c0 	ubfx	r2, r2, #19, #1
 80032fe:	740a      	strb	r2, [r1, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	f3c2 5200 	ubfx	r2, r2, #20, #1
 8003306:	73ca      	strb	r2, [r1, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	f3c2 5240 	ubfx	r2, r2, #21, #1
 800330e:	738a      	strb	r2, [r1, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	f3c2 5280 	ubfx	r2, r2, #22, #1
 8003316:	734a      	strb	r2, [r1, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8003318:	681a      	ldr	r2, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 800331a:	f3c2 52c0 	ubfx	r2, r2, #23, #1
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 800331e:	730a      	strb	r2, [r1, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8003320:	681c      	ldr	r4, [r3, #0]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8003322:	681a      	ldr	r2, [r3, #0]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8003324:	f004 64e0 	and.w	r4, r4, #117440512	@ 0x7000000
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8003328:	f3c2 62c0 	ubfx	r2, r2, #27, #1
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 800332c:	608c      	str	r4, [r1, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 800332e:	710a      	strb	r2, [r1, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8003330:	681c      	ldr	r4, [r3, #0]
  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8003332:	685a      	ldr	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8003334:	f004 44e0 	and.w	r4, r4, #1879048192	@ 0x70000000
  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8003338:	f3c2 020d 	ubfx	r2, r2, #0, #14
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 800333c:	600c      	str	r4, [r1, #0]
  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 800333e:	634a      	str	r2, [r1, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8003340:	685a      	ldr	r2, [r3, #4]
 8003342:	f482 3280 	eor.w	r2, r2, #65536	@ 0x10000
 8003346:	f3c2 4200 	ubfx	r2, r2, #16, #1
 800334a:	f881 2032 	strb.w	r2, [r1, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 800334e:	685a      	ldr	r2, [r3, #4]
 8003350:	f3c2 4240 	ubfx	r2, r2, #17, #1
 8003354:	f881 2031 	strb.w	r2, [r1, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8003358:	685a      	ldr	r2, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 800335a:	f3c2 4280 	ubfx	r2, r2, #18, #1
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 800335e:	f881 2030 	strb.w	r2, [r1, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8003362:	685a      	ldr	r2, [r3, #4]
                                    ? ENABLE : DISABLE;
 8003364:	f3c2 6200 	ubfx	r2, r2, #24, #1
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8003368:	f881 2038 	strb.w	r2, [r1, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 800336c:	685c      	ldr	r4, [r3, #4]
  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 800336e:	68da      	ldr	r2, [r3, #12]
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8003370:	f3c4 6444 	ubfx	r4, r4, #25, #5
  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8003374:	f3c2 2200 	ubfx	r2, r2, #8, #1
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8003378:	63cc      	str	r4, [r1, #60]	@ 0x3c
  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 800337a:	f881 2040 	strb.w	r2, [r1, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 800337e:	68dc      	ldr	r4, [r3, #12]
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8003380:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8003382:	f004 040f 	and.w	r4, r4, #15
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8003386:	f3c2 0240 	ubfx	r2, r2, #1, #1
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 800338a:	644c      	str	r4, [r1, #68]	@ 0x44
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 800338c:	f881 2054 	strb.w	r2, [r1, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8003390:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003392:	f082 0280 	eor.w	r2, r2, #128	@ 0x80
 8003396:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 800339a:	f881 204c 	strb.w	r2, [r1, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 800339e:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 80033a0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 80033a2:	f004 0470 	and.w	r4, r4, #112	@ 0x70
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 80033a6:	0c12      	lsrs	r2, r2, #16
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 80033a8:	650c      	str	r4, [r1, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 80033aa:	648a      	str	r2, [r1, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 80033ac:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80033b0:	f002 0201 	and.w	r2, r2, #1
 80033b4:	f881 2056 	strb.w	r2, [r1, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80033b8:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
                                      ? ENABLE : DISABLE;
 80033bc:	f3c2 0240 	ubfx	r2, r2, #1, #1
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80033c0:	f881 2055 	strb.w	r2, [r1, #85]	@ 0x55
  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 80033c4:	f8d3 4d00 	ldr.w	r4, [r3, #3328]	@ 0xd00
  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 80033c8:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	@ 0xd30
  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 80033cc:	f004 0472 	and.w	r4, r4, #114	@ 0x72
  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 80033d0:	f002 0223 	and.w	r2, r2, #35	@ 0x23
 80033d4:	e9c1 4216 	strd	r4, r2, [r1, #88]	@ 0x58
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80033d8:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	@ 0xd30
}
 80033dc:	f85d 4b04 	ldr.w	r4, [sp], #4
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 80033e0:	f3c2 02c0 	ubfx	r2, r2, #3, #1
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80033e4:	f881 2062 	strb.w	r2, [r1, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 80033e8:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	@ 0xd30
 80033ec:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80033f0:	f881 2061 	strb.w	r2, [r1, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80033f4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 80033f8:	f083 0340 	eor.w	r3, r3, #64	@ 0x40
 80033fc:	f3c3 1380 	ubfx	r3, r3, #6, #1
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8003400:	f881 3060 	strb.w	r3, [r1, #96]	@ 0x60
}
 8003404:	4770      	bx	lr
    return HAL_ERROR;
 8003406:	2001      	movs	r0, #1
}
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop

0800340c <HAL_ETH_SetMACConfig>:
  if (macconf == NULL)
 800340c:	b131      	cbz	r1, 800341c <HAL_ETH_SetMACConfig+0x10>
{
 800340e:	b508      	push	{r3, lr}
  if (heth->gState == HAL_ETH_STATE_READY)
 8003410:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 8003414:	2b10      	cmp	r3, #16
 8003416:	d003      	beq.n	8003420 <HAL_ETH_SetMACConfig+0x14>
    return HAL_ERROR;
 8003418:	2001      	movs	r0, #1
}
 800341a:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 800341c:	2001      	movs	r0, #1
}
 800341e:	4770      	bx	lr
    ETH_SetMACConfig(heth, macconf);
 8003420:	f7ff f9b6 	bl	8002790 <ETH_SetMACConfig>
    return HAL_OK;
 8003424:	2000      	movs	r0, #0
}
 8003426:	bd08      	pop	{r3, pc}

08003428 <HAL_ETH_SetMDIOClockRange>:
{
 8003428:	b538      	push	{r3, r4, r5, lr}
  tmpreg = (heth->Instance)->MACMDIOAR;
 800342a:	6803      	ldr	r3, [r0, #0]
{
 800342c:	4605      	mov	r5, r0
  tmpreg = (heth->Instance)->MACMDIOAR;
 800342e:	f8d3 4200 	ldr.w	r4, [r3, #512]	@ 0x200
  hclk = HAL_RCC_GetHCLKFreq();
 8003432:	f000 ff85 	bl	8004340 <HAL_RCC_GetHCLKFreq>
  if (hclk < 35000000U)
 8003436:	4b12      	ldr	r3, [pc, #72]	@ (8003480 <HAL_ETH_SetMDIOClockRange+0x58>)
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003438:	f424 6470 	bic.w	r4, r4, #3840	@ 0xf00
  if (hclk < 35000000U)
 800343c:	4298      	cmp	r0, r3
 800343e:	d805      	bhi.n	800344c <HAL_ETH_SetMDIOClockRange+0x24>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003440:	f444 7400 	orr.w	r4, r4, #512	@ 0x200
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003444:	682b      	ldr	r3, [r5, #0]
 8003446:	f8c3 4200 	str.w	r4, [r3, #512]	@ 0x200
}
 800344a:	bd38      	pop	{r3, r4, r5, pc}
  else if (hclk < 60000000U)
 800344c:	4b0d      	ldr	r3, [pc, #52]	@ (8003484 <HAL_ETH_SetMDIOClockRange+0x5c>)
 800344e:	4298      	cmp	r0, r3
 8003450:	d205      	bcs.n	800345e <HAL_ETH_SetMDIOClockRange+0x36>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003452:	f444 7440 	orr.w	r4, r4, #768	@ 0x300
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003456:	682b      	ldr	r3, [r5, #0]
 8003458:	f8c3 4200 	str.w	r4, [r3, #512]	@ 0x200
}
 800345c:	bd38      	pop	{r3, r4, r5, pc}
  else if (hclk < 100000000U)
 800345e:	4b0a      	ldr	r3, [pc, #40]	@ (8003488 <HAL_ETH_SetMDIOClockRange+0x60>)
 8003460:	4298      	cmp	r0, r3
 8003462:	d9ef      	bls.n	8003444 <HAL_ETH_SetMDIOClockRange+0x1c>
  else if (hclk < 150000000U)
 8003464:	4b09      	ldr	r3, [pc, #36]	@ (800348c <HAL_ETH_SetMDIOClockRange+0x64>)
 8003466:	4298      	cmp	r0, r3
 8003468:	d802      	bhi.n	8003470 <HAL_ETH_SetMDIOClockRange+0x48>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800346a:	f444 7480 	orr.w	r4, r4, #256	@ 0x100
 800346e:	e7e9      	b.n	8003444 <HAL_ETH_SetMDIOClockRange+0x1c>
  else if (hclk < 250000000U)
 8003470:	4b07      	ldr	r3, [pc, #28]	@ (8003490 <HAL_ETH_SetMDIOClockRange+0x68>)
 8003472:	4298      	cmp	r0, r3
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003474:	bf94      	ite	ls
 8003476:	f444 6480 	orrls.w	r4, r4, #1024	@ 0x400
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 800347a:	f444 64a0 	orrhi.w	r4, r4, #1280	@ 0x500
 800347e:	e7e1      	b.n	8003444 <HAL_ETH_SetMDIOClockRange+0x1c>
 8003480:	02160ebf 	.word	0x02160ebf
 8003484:	03938700 	.word	0x03938700
 8003488:	05f5e0ff 	.word	0x05f5e0ff
 800348c:	08f0d17f 	.word	0x08f0d17f
 8003490:	0ee6b27f 	.word	0x0ee6b27f

08003494 <HAL_ETH_Init>:
  if (heth == NULL)
 8003494:	2800      	cmp	r0, #0
 8003496:	f000 8117 	beq.w	80036c8 <HAL_ETH_Init+0x234>
  if (heth->gState == HAL_ETH_STATE_RESET)
 800349a:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
{
 800349e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034a0:	4605      	mov	r5, r0
 80034a2:	b0a5      	sub	sp, #148	@ 0x94
  if (heth->gState == HAL_ETH_STATE_RESET)
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f000 80af 	beq.w	8003608 <HAL_ETH_Init+0x174>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034aa:	4b88      	ldr	r3, [pc, #544]	@ (80036cc <HAL_ETH_Init+0x238>)
 80034ac:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 80034b0:	f042 0202 	orr.w	r2, r2, #2
 80034b4:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 80034b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80034bc:	7a28      	ldrb	r0, [r5, #8]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	9301      	str	r3, [sp, #4]
 80034c4:	9b01      	ldr	r3, [sp, #4]
  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80034c6:	2800      	cmp	r0, #0
 80034c8:	f040 8094 	bne.w	80035f4 <HAL_ETH_Init+0x160>
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80034cc:	f7fe fabe 	bl	8001a4c <HAL_SYSCFG_ETHInterfaceSelect>
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80034d0:	682b      	ldr	r3, [r5, #0]
  (void)SYSCFG->PMCR;
 80034d2:	4a7f      	ldr	r2, [pc, #508]	@ (80036d0 <HAL_ETH_Init+0x23c>)
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80034d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
  (void)SYSCFG->PMCR;
 80034d8:	6852      	ldr	r2, [r2, #4]
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	f042 0201 	orr.w	r2, r2, #1
 80034e0:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80034e2:	f7fe fa95 	bl	8001a10 <HAL_GetTick>
 80034e6:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80034e8:	e006      	b.n	80034f8 <HAL_ETH_Init+0x64>
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80034ea:	f7fe fa91 	bl	8001a10 <HAL_GetTick>
 80034ee:	1b80      	subs	r0, r0, r6
 80034f0:	f5b0 7ffa 	cmp.w	r0, #500	@ 0x1f4
 80034f4:	f200 8081 	bhi.w	80035fa <HAL_ETH_Init+0x166>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80034f8:	682b      	ldr	r3, [r5, #0]
 80034fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034fe:	681c      	ldr	r4, [r3, #0]
 8003500:	f014 0401 	ands.w	r4, r4, #1
 8003504:	d1f1      	bne.n	80034ea <HAL_ETH_Init+0x56>
  HAL_ETH_SetMDIOClockRange(heth);
 8003506:	4628      	mov	r0, r5
  macDefaultConf.ChecksumOffload = ENABLE;
 8003508:	2701      	movs	r7, #1
  HAL_ETH_SetMDIOClockRange(heth);
 800350a:	f7ff ff8d 	bl	8003428 <HAL_ETH_SetMDIOClockRange>
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800350e:	f000 ff17 	bl	8004340 <HAL_RCC_GetHCLKFreq>
 8003512:	4b70      	ldr	r3, [pc, #448]	@ (80036d4 <HAL_ETH_Init+0x240>)
 8003514:	682e      	ldr	r6, [r5, #0]
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003516:	a90b      	add	r1, sp, #44	@ 0x2c
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003518:	fba3 2300 	umull	r2, r3, r3, r0
  ETH_SetMACConfig(heth, &macDefaultConf);
 800351c:	4628      	mov	r0, r5
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800351e:	9414      	str	r4, [sp, #80]	@ 0x50
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003520:	0c9b      	lsrs	r3, r3, #18
  macDefaultConf.DeferralCheck = DISABLE;
 8003522:	f88d 4054 	strb.w	r4, [sp, #84]	@ 0x54
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003526:	f88d 4064 	strb.w	r4, [sp, #100]	@ 0x64
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800352a:	3b01      	subs	r3, #1
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 800352c:	941a      	str	r4, [sp, #104]	@ 0x68
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800352e:	f88d 408e 	strb.w	r4, [sp, #142]	@ 0x8e
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003532:	f8c6 30dc 	str.w	r3, [r6, #220]	@ 0xdc
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003536:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800353a:	940d      	str	r4, [sp, #52]	@ 0x34
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800353c:	9311      	str	r3, [sp, #68]	@ 0x44
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 800353e:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
  macDefaultConf.ChecksumOffload = ENABLE;
 8003542:	f88d 7030 	strb.w	r7, [sp, #48]	@ 0x30
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8003546:	9318      	str	r3, [sp, #96]	@ 0x60
  macDefaultConf.LoopbackMode = DISABLE;
 8003548:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800354c:	f88d 705e 	strb.w	r7, [sp, #94]	@ 0x5e
  macDefaultConf.LoopbackMode = DISABLE;
 8003550:	9312      	str	r3, [sp, #72]	@ 0x48
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003552:	2320      	movs	r3, #32
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003554:	f8ad 708c 	strh.w	r7, [sp, #140]	@ 0x8c
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003558:	9322      	str	r3, [sp, #136]	@ 0x88
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800355a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
  macDefaultConf.JumboPacket = DISABLE;
 800355e:	f88d 403e 	strb.w	r4, [sp, #62]	@ 0x3e
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8003562:	930b      	str	r3, [sp, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003564:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8003568:	941f      	str	r4, [sp, #124]	@ 0x7c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800356a:	9310      	str	r3, [sp, #64]	@ 0x40
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800356c:	4b5a      	ldr	r3, [pc, #360]	@ (80036d8 <HAL_ETH_Init+0x244>)
  macDefaultConf.PauseTime = 0x0U;
 800356e:	941d      	str	r4, [sp, #116]	@ 0x74
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003570:	930e      	str	r3, [sp, #56]	@ 0x38
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003572:	2302      	movs	r3, #2
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8003574:	9416      	str	r4, [sp, #88]	@ 0x58
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003576:	9321      	str	r3, [sp, #132]	@ 0x84
  macDefaultConf.Watchdog = ENABLE;
 8003578:	f240 1301 	movw	r3, #257	@ 0x101
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800357c:	f88d 406c 	strb.w	r4, [sp, #108]	@ 0x6c
  macDefaultConf.Watchdog = ENABLE;
 8003580:	f8ad 303c 	strh.w	r3, [sp, #60]	@ 0x3c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003584:	f88d 4082 	strb.w	r4, [sp, #130]	@ 0x82
  macDefaultConf.RetryTransmission = ENABLE;
 8003588:	f88d 704c 	strb.w	r7, [sp, #76]	@ 0x4c
  macDefaultConf.TransmitFlowControl = DISABLE;
 800358c:	f8ad 4080 	strh.w	r4, [sp, #128]	@ 0x80
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8003590:	f8ad 405c 	strh.w	r4, [sp, #92]	@ 0x5c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8003594:	941c      	str	r4, [sp, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8003596:	f88d 7078 	strb.w	r7, [sp, #120]	@ 0x78
  ETH_SetMACConfig(heth, &macDefaultConf);
 800359a:	f7ff f8f9 	bl	8002790 <ETH_SetMACConfig>
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800359e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80035a2:	a902      	add	r1, sp, #8
 80035a4:	4628      	mov	r0, r5
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80035a6:	f88d 700c 	strb.w	r7, [sp, #12]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80035aa:	9308      	str	r3, [sp, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80035ac:	9306      	str	r3, [sp, #24]
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80035ae:	f44f 7306 	mov.w	r3, #536	@ 0x218
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80035b2:	9704      	str	r7, [sp, #16]
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80035b4:	930a      	str	r3, [sp, #40]	@ 0x28
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80035b6:	9402      	str	r4, [sp, #8]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80035b8:	f8ad 4014 	strh.w	r4, [sp, #20]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80035bc:	f88d 401c 	strb.w	r4, [sp, #28]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80035c0:	f8ad 4024 	strh.w	r4, [sp, #36]	@ 0x24
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80035c4:	f7ff f9a0 	bl	8002908 <ETH_SetDMAConfig>
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80035c8:	f506 5180 	add.w	r1, r6, #4096	@ 0x1000
 80035cc:	f8d1 3100 	ldr.w	r3, [r1, #256]	@ 0x100
 80035d0:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80035d4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80035d8:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80035dc:	696b      	ldr	r3, [r5, #20]
 80035de:	f013 0203 	ands.w	r2, r3, #3
 80035e2:	d017      	beq.n	8003614 <HAL_ETH_Init+0x180>
    heth->gState = HAL_ETH_STATE_ERROR;
 80035e4:	23e0      	movs	r3, #224	@ 0xe0
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80035e6:	f8c5 7088 	str.w	r7, [r5, #136]	@ 0x88
    heth->gState = HAL_ETH_STATE_ERROR;
 80035ea:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
    return HAL_ERROR;
 80035ee:	2001      	movs	r0, #1
}
 80035f0:	b025      	add	sp, #148	@ 0x94
 80035f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80035f4:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80035f8:	e768      	b.n	80034cc <HAL_ETH_Init+0x38>
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80035fa:	2204      	movs	r2, #4
      heth->gState = HAL_ETH_STATE_ERROR;
 80035fc:	23e0      	movs	r3, #224	@ 0xe0
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80035fe:	f8c5 2088 	str.w	r2, [r5, #136]	@ 0x88
      heth->gState = HAL_ETH_STATE_ERROR;
 8003602:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
      return HAL_ERROR;
 8003606:	e7f2      	b.n	80035ee <HAL_ETH_Init+0x15a>
    heth->gState = HAL_ETH_STATE_BUSY;
 8003608:	2323      	movs	r3, #35	@ 0x23
 800360a:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
    HAL_ETH_MspInit(heth);
 800360e:	f003 f811 	bl	8006634 <HAL_ETH_MspInit>
 8003612:	e74a      	b.n	80034aa <HAL_ETH_Init+0x16>
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003614:	f8d1 4108 	ldr.w	r4, [r1, #264]	@ 0x108
 8003618:	4830      	ldr	r0, [pc, #192]	@ (80036dc <HAL_ETH_Init+0x248>)
 800361a:	68ef      	ldr	r7, [r5, #12]
 800361c:	4020      	ands	r0, r4
 800361e:	f107 0460 	add.w	r4, r7, #96	@ 0x60
 8003622:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
    dmatxdesc = heth->Init.TxDesc + i;
 8003626:	463b      	mov	r3, r7
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003628:	f8c1 0108 	str.w	r0, [r1, #264]	@ 0x108
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800362c:	f105 0014 	add.w	r0, r5, #20
    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003630:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003632:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003634:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8003636:	60da      	str	r2, [r3, #12]
    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003638:	f840 3f04 	str.w	r3, [r0, #4]!
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800363c:	3318      	adds	r3, #24
 800363e:	429c      	cmp	r4, r3
 8003640:	d1f6      	bne.n	8003630 <HAL_ETH_Init+0x19c>
    dmarxdesc =  heth->Init.RxDesc + i;
 8003642:	692c      	ldr	r4, [r5, #16]
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8003644:	2303      	movs	r3, #3
  heth->TxDescList.CurTxDesc = 0;
 8003646:	62aa      	str	r2, [r5, #40]	@ 0x28
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8003648:	f105 0044 	add.w	r0, r5, #68	@ 0x44
 800364c:	f8c1 312c 	str.w	r3, [r1, #300]	@ 0x12c
    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8003650:	2200      	movs	r2, #0
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003652:	f8c1 7114 	str.w	r7, [r1, #276]	@ 0x114
    dmarxdesc =  heth->Init.RxDesc + i;
 8003656:	4623      	mov	r3, r4
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003658:	f8c1 7120 	str.w	r7, [r1, #288]	@ 0x120
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800365c:	f105 0754 	add.w	r7, r5, #84	@ 0x54
    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8003660:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003662:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003664:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8003666:	615a      	str	r2, [r3, #20]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003668:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800366a:	60da      	str	r2, [r3, #12]
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800366c:	f840 3f04 	str.w	r3, [r0, #4]!
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003670:	4287      	cmp	r7, r0
 8003672:	f103 0318 	add.w	r3, r3, #24
 8003676:	d1f3      	bne.n	8003660 <HAL_ETH_Init+0x1cc>
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8003678:	2003      	movs	r0, #3
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800367a:	686b      	ldr	r3, [r5, #4]
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800367c:	65aa      	str	r2, [r5, #88]	@ 0x58
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800367e:	e9c5 2217 	strd	r2, r2, [r5, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8003682:	e9c5 221a 	strd	r2, r2, [r5, #104]	@ 0x68
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8003686:	f8c1 0130 	str.w	r0, [r1, #304]	@ 0x130
  return HAL_OK;
 800368a:	2000      	movs	r0, #0
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800368c:	f8c1 411c 	str.w	r4, [r1, #284]	@ 0x11c
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8003690:	3448      	adds	r4, #72	@ 0x48
 8003692:	f8c1 4128 	str.w	r4, [r1, #296]	@ 0x128
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8003696:	8899      	ldrh	r1, [r3, #4]
 8003698:	f8c6 1300 	str.w	r1, [r6, #768]	@ 0x300
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800369c:	681b      	ldr	r3, [r3, #0]
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 800369e:	4910      	ldr	r1, [pc, #64]	@ (80036e0 <HAL_ETH_Init+0x24c>)
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80036a0:	f8c6 3304 	str.w	r3, [r6, #772]	@ 0x304
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80036a4:	f8d6 370c 	ldr.w	r3, [r6, #1804]	@ 0x70c
 80036a8:	4319      	orrs	r1, r3
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80036aa:	4b0e      	ldr	r3, [pc, #56]	@ (80036e4 <HAL_ETH_Init+0x250>)
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80036ac:	f8c6 170c 	str.w	r1, [r6, #1804]	@ 0x70c
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80036b0:	f8d6 1710 	ldr.w	r1, [r6, #1808]	@ 0x710
 80036b4:	430b      	orrs	r3, r1
  heth->gState = HAL_ETH_STATE_READY;
 80036b6:	2110      	movs	r1, #16
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80036b8:	f8c6 3710 	str.w	r3, [r6, #1808]	@ 0x710
  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80036bc:	f8c5 2088 	str.w	r2, [r5, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80036c0:	f8c5 1084 	str.w	r1, [r5, #132]	@ 0x84
}
 80036c4:	b025      	add	sp, #148	@ 0x94
 80036c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80036c8:	2001      	movs	r0, #1
}
 80036ca:	4770      	bx	lr
 80036cc:	58024400 	.word	0x58024400
 80036d0:	58000400 	.word	0x58000400
 80036d4:	431bde83 	.word	0x431bde83
 80036d8:	01010000 	.word	0x01010000
 80036dc:	ffff8001 	.word	0xffff8001
 80036e0:	0c020060 	.word	0x0c020060
 80036e4:	0c20c000 	.word	0x0c20c000

080036e8 <HAL_ETH_GetError>:
  return heth->ErrorCode;
 80036e8:	f8d0 0088 	ldr.w	r0, [r0, #136]	@ 0x88
}
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop

080036f0 <HAL_ETH_GetDMAError>:
  return heth->DMAErrorCode;
 80036f0:	f8d0 008c 	ldr.w	r0, [r0, #140]	@ 0x8c
}
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop

080036f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80036fc:	680c      	ldr	r4, [r1, #0]
{
 80036fe:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003700:	2c00      	cmp	r4, #0
 8003702:	f000 80a5 	beq.w	8003850 <HAL_GPIO_Init+0x158>
  uint32_t position = 0x00U;
 8003706:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003708:	f04f 0b01 	mov.w	fp, #1
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800370c:	f04f 4eb0 	mov.w	lr, #1476395008	@ 0x58000000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003710:	9100      	str	r1, [sp, #0]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003712:	fa0b fc03 	lsl.w	ip, fp, r3
    if (iocurrent != 0x00U)
 8003716:	ea1c 0a04 	ands.w	sl, ip, r4
 800371a:	f000 8094 	beq.w	8003846 <HAL_GPIO_Init+0x14e>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800371e:	9900      	ldr	r1, [sp, #0]
 8003720:	005f      	lsls	r7, r3, #1
 8003722:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003724:	2103      	movs	r1, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003726:	f005 0203 	and.w	r2, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800372a:	fa01 f607 	lsl.w	r6, r1, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800372e:	f102 38ff 	add.w	r8, r2, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003732:	43f6      	mvns	r6, r6
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003734:	f1b8 0f01 	cmp.w	r8, #1
 8003738:	f240 808d 	bls.w	8003856 <HAL_GPIO_Init+0x15e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800373c:	2a03      	cmp	r2, #3
 800373e:	f040 80cb 	bne.w	80038d8 <HAL_GPIO_Init+0x1e0>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003742:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8003744:	6807      	ldr	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003746:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800374a:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800374e:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->MODER = temp;
 8003752:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003754:	d077      	beq.n	8003846 <HAL_GPIO_Init+0x14e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003756:	4e7f      	ldr	r6, [pc, #508]	@ (8003954 <HAL_GPIO_Init+0x25c>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003758:	f003 0703 	and.w	r7, r3, #3
 800375c:	210f      	movs	r1, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800375e:	f8d6 20f4 	ldr.w	r2, [r6, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003762:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003764:	f042 0202 	orr.w	r2, r2, #2
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003768:	fa01 fc07 	lsl.w	ip, r1, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800376c:	497a      	ldr	r1, [pc, #488]	@ (8003958 <HAL_GPIO_Init+0x260>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800376e:	f8c6 20f4 	str.w	r2, [r6, #244]	@ 0xf4
 8003772:	f8d6 20f4 	ldr.w	r2, [r6, #244]	@ 0xf4
 8003776:	f023 0603 	bic.w	r6, r3, #3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800377a:	4288      	cmp	r0, r1
 800377c:	f106 46b0 	add.w	r6, r6, #1476395008	@ 0x58000000
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003780:	f002 0202 	and.w	r2, r2, #2
 8003784:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8003788:	9203      	str	r2, [sp, #12]
 800378a:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 800378c:	68b2      	ldr	r2, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800378e:	ea22 020c 	bic.w	r2, r2, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003792:	d031      	beq.n	80037f8 <HAL_GPIO_Init+0x100>
 8003794:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8003798:	4288      	cmp	r0, r1
 800379a:	f000 80b0 	beq.w	80038fe <HAL_GPIO_Init+0x206>
 800379e:	496f      	ldr	r1, [pc, #444]	@ (800395c <HAL_GPIO_Init+0x264>)
 80037a0:	4288      	cmp	r0, r1
 80037a2:	f000 80b2 	beq.w	800390a <HAL_GPIO_Init+0x212>
 80037a6:	f8df c1b8 	ldr.w	ip, [pc, #440]	@ 8003960 <HAL_GPIO_Init+0x268>
 80037aa:	4560      	cmp	r0, ip
 80037ac:	f000 80a1 	beq.w	80038f2 <HAL_GPIO_Init+0x1fa>
 80037b0:	f8df c1b0 	ldr.w	ip, [pc, #432]	@ 8003964 <HAL_GPIO_Init+0x26c>
 80037b4:	4560      	cmp	r0, ip
 80037b6:	f000 80b4 	beq.w	8003922 <HAL_GPIO_Init+0x22a>
 80037ba:	f8df c1ac 	ldr.w	ip, [pc, #428]	@ 8003968 <HAL_GPIO_Init+0x270>
 80037be:	4560      	cmp	r0, ip
 80037c0:	f000 80b5 	beq.w	800392e <HAL_GPIO_Init+0x236>
 80037c4:	f8df c1a4 	ldr.w	ip, [pc, #420]	@ 800396c <HAL_GPIO_Init+0x274>
 80037c8:	4560      	cmp	r0, ip
 80037ca:	f000 80a4 	beq.w	8003916 <HAL_GPIO_Init+0x21e>
 80037ce:	f8df c1a0 	ldr.w	ip, [pc, #416]	@ 8003970 <HAL_GPIO_Init+0x278>
 80037d2:	4560      	cmp	r0, ip
 80037d4:	f000 80b1 	beq.w	800393a <HAL_GPIO_Init+0x242>
 80037d8:	f8df c198 	ldr.w	ip, [pc, #408]	@ 8003974 <HAL_GPIO_Init+0x27c>
 80037dc:	4560      	cmp	r0, ip
 80037de:	f000 80b2 	beq.w	8003946 <HAL_GPIO_Init+0x24e>
 80037e2:	f8df c194 	ldr.w	ip, [pc, #404]	@ 8003978 <HAL_GPIO_Init+0x280>
 80037e6:	4560      	cmp	r0, ip
 80037e8:	bf0c      	ite	eq
 80037ea:	f04f 0c09 	moveq.w	ip, #9
 80037ee:	f04f 0c0a 	movne.w	ip, #10
 80037f2:	fa0c f707 	lsl.w	r7, ip, r7
 80037f6:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037f8:	60b2      	str	r2, [r6, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037fa:	02ef      	lsls	r7, r5, #11
        temp = EXTI->RTSR1;
 80037fc:	f8de 2000 	ldr.w	r2, [lr]
        temp &= ~(iocurrent);
 8003800:	ea6f 060a 	mvn.w	r6, sl
        {
          temp |= iocurrent;
 8003804:	bf4c      	ite	mi
 8003806:	ea4a 0202 	orrmi.w	r2, sl, r2
        temp &= ~(iocurrent);
 800380a:	4032      	andpl	r2, r6
        }
        EXTI->RTSR1 = temp;

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800380c:	02a9      	lsls	r1, r5, #10
        EXTI->RTSR1 = temp;
 800380e:	f8ce 2000 	str.w	r2, [lr]
        temp = EXTI->FTSR1;
 8003812:	f8de 2004 	ldr.w	r2, [lr, #4]
        temp &= ~(iocurrent);
 8003816:	bf54      	ite	pl
 8003818:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 800381a:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->FTSR1 = temp;

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800381e:	03af      	lsls	r7, r5, #14
        EXTI->FTSR1 = temp;
 8003820:	f8ce 2004 	str.w	r2, [lr, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8003824:	f8de 2084 	ldr.w	r2, [lr, #132]	@ 0x84
        temp &= ~(iocurrent);
 8003828:	bf54      	ite	pl
 800382a:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 800382c:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI_CurrentCPU->EMR1 = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003830:	03e9      	lsls	r1, r5, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8003832:	f8ce 2084 	str.w	r2, [lr, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8003836:	f8de 2080 	ldr.w	r2, [lr, #128]	@ 0x80
        temp &= ~(iocurrent);
 800383a:	bf54      	ite	pl
 800383c:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 800383e:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003842:	f8ce 2080 	str.w	r2, [lr, #128]	@ 0x80
      }
    }

    position++;
 8003846:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003848:	fa34 f203 	lsrs.w	r2, r4, r3
 800384c:	f47f af61 	bne.w	8003712 <HAL_GPIO_Init+0x1a>
  }
}
 8003850:	b005      	add	sp, #20
 8003852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003856:	9900      	ldr	r1, [sp, #0]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003858:	2a02      	cmp	r2, #2
        temp = GPIOx->OSPEEDR;
 800385a:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800385e:	68c9      	ldr	r1, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003860:	ea09 0906 	and.w	r9, r9, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003864:	fa01 f807 	lsl.w	r8, r1, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003868:	9900      	ldr	r1, [sp, #0]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800386a:	ea48 0809 	orr.w	r8, r8, r9
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800386e:	6889      	ldr	r1, [r1, #8]
        GPIOx->OSPEEDR = temp;
 8003870:	f8c0 8008 	str.w	r8, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003874:	f3c5 1800 	ubfx	r8, r5, #4, #1
        temp = GPIOx->OTYPER;
 8003878:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800387c:	fa08 f803 	lsl.w	r8, r8, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003880:	ea29 0c0c 	bic.w	ip, r9, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003884:	ea48 0c0c 	orr.w	ip, r8, ip
        GPIOx->OTYPER = temp;
 8003888:	f8c0 c004 	str.w	ip, [r0, #4]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800388c:	fa01 fc07 	lsl.w	ip, r1, r7
      temp = GPIOx->PUPDR;
 8003890:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003894:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003898:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 800389c:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038a0:	f47f af4f 	bne.w	8003742 <HAL_GPIO_Init+0x4a>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80038a4:	f003 0c07 	and.w	ip, r3, #7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80038a8:	9900      	ldr	r1, [sp, #0]
        temp = GPIOx->AFR[position >> 3U];
 80038aa:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80038ae:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80038b2:	6909      	ldr	r1, [r1, #16]
 80038b4:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 80038b8:	fa01 f10c 	lsl.w	r1, r1, ip
        temp = GPIOx->AFR[position >> 3U];
 80038bc:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80038c0:	9101      	str	r1, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80038c2:	210f      	movs	r1, #15
 80038c4:	fa01 fc0c 	lsl.w	ip, r1, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80038c8:	9901      	ldr	r1, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80038ca:	ea29 090c 	bic.w	r9, r9, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80038ce:	ea41 0c09 	orr.w	ip, r1, r9
        GPIOx->AFR[position >> 3U] = temp;
 80038d2:	f8c8 c020 	str.w	ip, [r8, #32]
 80038d6:	e734      	b.n	8003742 <HAL_GPIO_Init+0x4a>
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038d8:	9900      	ldr	r1, [sp, #0]
      temp = GPIOx->PUPDR;
 80038da:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038de:	6889      	ldr	r1, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80038e0:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038e4:	fa01 fc07 	lsl.w	ip, r1, r7
 80038e8:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 80038ec:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038f0:	e727      	b.n	8003742 <HAL_GPIO_Init+0x4a>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80038f2:	f04f 0c03 	mov.w	ip, #3
 80038f6:	fa0c f707 	lsl.w	r7, ip, r7
 80038fa:	433a      	orrs	r2, r7
 80038fc:	e77c      	b.n	80037f8 <HAL_GPIO_Init+0x100>
 80038fe:	f04f 0c01 	mov.w	ip, #1
 8003902:	fa0c f707 	lsl.w	r7, ip, r7
 8003906:	433a      	orrs	r2, r7
 8003908:	e776      	b.n	80037f8 <HAL_GPIO_Init+0x100>
 800390a:	f04f 0c02 	mov.w	ip, #2
 800390e:	fa0c f707 	lsl.w	r7, ip, r7
 8003912:	433a      	orrs	r2, r7
 8003914:	e770      	b.n	80037f8 <HAL_GPIO_Init+0x100>
 8003916:	f04f 0c06 	mov.w	ip, #6
 800391a:	fa0c f707 	lsl.w	r7, ip, r7
 800391e:	433a      	orrs	r2, r7
 8003920:	e76a      	b.n	80037f8 <HAL_GPIO_Init+0x100>
 8003922:	f04f 0c04 	mov.w	ip, #4
 8003926:	fa0c f707 	lsl.w	r7, ip, r7
 800392a:	433a      	orrs	r2, r7
 800392c:	e764      	b.n	80037f8 <HAL_GPIO_Init+0x100>
 800392e:	f04f 0c05 	mov.w	ip, #5
 8003932:	fa0c f707 	lsl.w	r7, ip, r7
 8003936:	433a      	orrs	r2, r7
 8003938:	e75e      	b.n	80037f8 <HAL_GPIO_Init+0x100>
 800393a:	f04f 0c07 	mov.w	ip, #7
 800393e:	fa0c f707 	lsl.w	r7, ip, r7
 8003942:	433a      	orrs	r2, r7
 8003944:	e758      	b.n	80037f8 <HAL_GPIO_Init+0x100>
 8003946:	f04f 0c08 	mov.w	ip, #8
 800394a:	fa0c f707 	lsl.w	r7, ip, r7
 800394e:	433a      	orrs	r2, r7
 8003950:	e752      	b.n	80037f8 <HAL_GPIO_Init+0x100>
 8003952:	bf00      	nop
 8003954:	58024400 	.word	0x58024400
 8003958:	58020000 	.word	0x58020000
 800395c:	58020800 	.word	0x58020800
 8003960:	58020c00 	.word	0x58020c00
 8003964:	58021000 	.word	0x58021000
 8003968:	58021400 	.word	0x58021400
 800396c:	58021800 	.word	0x58021800
 8003970:	58021c00 	.word	0x58021c00
 8003974:	58022000 	.word	0x58022000
 8003978:	58022400 	.word	0x58022400

0800397c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800397c:	b902      	cbnz	r2, 8003980 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800397e:	0409      	lsls	r1, r1, #16
 8003980:	6181      	str	r1, [r0, #24]
  }
}
 8003982:	4770      	bx	lr

08003984 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003984:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003986:	ea01 0203 	and.w	r2, r1, r3
 800398a:	ea21 0103 	bic.w	r1, r1, r3
 800398e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003992:	6181      	str	r1, [r0, #24]
}
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop

08003998 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003998:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800399a:	4c10      	ldr	r4, [pc, #64]	@ (80039dc <HAL_PWREx_ConfigSupply+0x44>)
 800399c:	68e3      	ldr	r3, [r4, #12]
 800399e:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80039a2:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80039a4:	d105      	bne.n	80039b2 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80039a6:	f003 0307 	and.w	r3, r3, #7
 80039aa:	1a18      	subs	r0, r3, r0
 80039ac:	bf18      	it	ne
 80039ae:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 80039b0:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80039b2:	f023 0307 	bic.w	r3, r3, #7
 80039b6:	4303      	orrs	r3, r0
 80039b8:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 80039ba:	f7fe f829 	bl	8001a10 <HAL_GetTick>
 80039be:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80039c0:	e005      	b.n	80039ce <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80039c2:	f7fe f825 	bl	8001a10 <HAL_GetTick>
 80039c6:	1b40      	subs	r0, r0, r5
 80039c8:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80039cc:	d804      	bhi.n	80039d8 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80039ce:	6863      	ldr	r3, [r4, #4]
 80039d0:	049b      	lsls	r3, r3, #18
 80039d2:	d5f6      	bpl.n	80039c2 <HAL_PWREx_ConfigSupply+0x2a>
      return HAL_OK;
 80039d4:	2000      	movs	r0, #0
}
 80039d6:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80039d8:	2001      	movs	r0, #1
}
 80039da:	bd38      	pop	{r3, r4, r5, pc}
 80039dc:	58024800 	.word	0x58024800

080039e0 <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80039e0:	4b33      	ldr	r3, [pc, #204]	@ (8003ab0 <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 80039e2:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80039e4:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80039e6:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80039e8:	6add      	ldr	r5, [r3, #44]	@ 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 80039ea:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80039ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80039f0:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 80039f4:	d036      	beq.n	8003a64 <HAL_RCC_GetSysClockFreq.part.0+0x84>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80039f6:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80039fa:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80039fe:	f001 0103 	and.w	r1, r1, #3
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a02:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003a06:	fb05 f202 	mul.w	r2, r5, r2
 8003a0a:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a10:	ee06 2a90 	vmov	s13, r2
 8003a14:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8003a18:	d002      	beq.n	8003a20 <HAL_RCC_GetSysClockFreq.part.0+0x40>
 8003a1a:	2902      	cmp	r1, #2
 8003a1c:	d042      	beq.n	8003aa4 <HAL_RCC_GetSysClockFreq.part.0+0xc4>
 8003a1e:	b319      	cbz	r1, 8003a68 <HAL_RCC_GetSysClockFreq.part.0+0x88>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a20:	eddf 7a24 	vldr	s15, [pc, #144]	@ 8003ab4 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 8003a24:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8003a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a2e:	ee07 3a90 	vmov	s15, r3
 8003a32:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8003a36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a3e:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8003a42:	ee67 7a86 	vmul.f32	s15, s15, s12
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003a46:	4b1a      	ldr	r3, [pc, #104]	@ (8003ab0 <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
 8003a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a4a:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8003a4e:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003a50:	ee07 3a10 	vmov	s14, r3
 8003a54:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8003a58:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003a5c:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8003a60:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8003a64:	bc30      	pop	{r4, r5}
 8003a66:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	0692      	lsls	r2, r2, #26
 8003a6c:	d51d      	bpl.n	8003aaa <HAL_RCC_GetSysClockFreq.part.0+0xca>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a6e:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a70:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a74:	4a10      	ldr	r2, [pc, #64]	@ (8003ab8 <HAL_RCC_GetSysClockFreq.part.0+0xd8>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a78:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a80:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a82:	ee07 3a90 	vmov	s15, r3
 8003a86:	ee06 2a10 	vmov	s12, r2
 8003a8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a8e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8003a92:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8003a96:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8003a9a:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8003a9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003aa2:	e7d0      	b.n	8003a46 <HAL_RCC_GetSysClockFreq.part.0+0x66>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003aa4:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8003abc <HAL_RCC_GetSysClockFreq.part.0+0xdc>
 8003aa8:	e7bc      	b.n	8003a24 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003aaa:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8003ac0 <HAL_RCC_GetSysClockFreq.part.0+0xe0>
 8003aae:	e7b9      	b.n	8003a24 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 8003ab0:	58024400 	.word	0x58024400
 8003ab4:	4a742400 	.word	0x4a742400
 8003ab8:	03d09000 	.word	0x03d09000
 8003abc:	4bbebc20 	.word	0x4bbebc20
 8003ac0:	4c742400 	.word	0x4c742400

08003ac4 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8003ac4:	2800      	cmp	r0, #0
 8003ac6:	f000 82e9 	beq.w	800409c <HAL_RCC_OscConfig+0x5d8>
{
 8003aca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003acc:	6803      	ldr	r3, [r0, #0]
 8003ace:	4604      	mov	r4, r0
 8003ad0:	07d9      	lsls	r1, r3, #31
 8003ad2:	d52e      	bpl.n	8003b32 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ad4:	4997      	ldr	r1, [pc, #604]	@ (8003d34 <HAL_RCC_OscConfig+0x270>)
 8003ad6:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ad8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ada:	f002 0238 	and.w	r2, r2, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003ade:	2a10      	cmp	r2, #16
 8003ae0:	f000 80ee 	beq.w	8003cc0 <HAL_RCC_OscConfig+0x1fc>
 8003ae4:	2a18      	cmp	r2, #24
 8003ae6:	f000 80e6 	beq.w	8003cb6 <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003aea:	6863      	ldr	r3, [r4, #4]
 8003aec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003af0:	f000 8111 	beq.w	8003d16 <HAL_RCC_OscConfig+0x252>
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f000 8167 	beq.w	8003dc8 <HAL_RCC_OscConfig+0x304>
 8003afa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003afe:	4b8d      	ldr	r3, [pc, #564]	@ (8003d34 <HAL_RCC_OscConfig+0x270>)
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	f000 828a 	beq.w	800401a <HAL_RCC_OscConfig+0x556>
 8003b06:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003b0a:	601a      	str	r2, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003b12:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003b14:	f7fd ff7c 	bl	8001a10 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b18:	4e86      	ldr	r6, [pc, #536]	@ (8003d34 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8003b1a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b1c:	e005      	b.n	8003b2a <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b1e:	f7fd ff77 	bl	8001a10 <HAL_GetTick>
 8003b22:	1b40      	subs	r0, r0, r5
 8003b24:	2864      	cmp	r0, #100	@ 0x64
 8003b26:	f200 814d 	bhi.w	8003dc4 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b2a:	6833      	ldr	r3, [r6, #0]
 8003b2c:	039b      	lsls	r3, r3, #14
 8003b2e:	d5f6      	bpl.n	8003b1e <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b30:	6823      	ldr	r3, [r4, #0]
 8003b32:	079d      	lsls	r5, r3, #30
 8003b34:	d470      	bmi.n	8003c18 <HAL_RCC_OscConfig+0x154>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003b36:	06d9      	lsls	r1, r3, #27
 8003b38:	d533      	bpl.n	8003ba2 <HAL_RCC_OscConfig+0xde>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b3a:	4a7e      	ldr	r2, [pc, #504]	@ (8003d34 <HAL_RCC_OscConfig+0x270>)
 8003b3c:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b3e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b40:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003b44:	2b08      	cmp	r3, #8
 8003b46:	f000 80cb 	beq.w	8003ce0 <HAL_RCC_OscConfig+0x21c>
 8003b4a:	2b18      	cmp	r3, #24
 8003b4c:	f000 80c3 	beq.w	8003cd6 <HAL_RCC_OscConfig+0x212>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003b50:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 8003b52:	4d78      	ldr	r5, [pc, #480]	@ (8003d34 <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f000 816f 	beq.w	8003e38 <HAL_RCC_OscConfig+0x374>
        __HAL_RCC_CSI_ENABLE();
 8003b5a:	682b      	ldr	r3, [r5, #0]
 8003b5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b60:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003b62:	f7fd ff55 	bl	8001a10 <HAL_GetTick>
 8003b66:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b68:	e005      	b.n	8003b76 <HAL_RCC_OscConfig+0xb2>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003b6a:	f7fd ff51 	bl	8001a10 <HAL_GetTick>
 8003b6e:	1b80      	subs	r0, r0, r6
 8003b70:	2802      	cmp	r0, #2
 8003b72:	f200 8127 	bhi.w	8003dc4 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b76:	682b      	ldr	r3, [r5, #0]
 8003b78:	05db      	lsls	r3, r3, #23
 8003b7a:	d5f6      	bpl.n	8003b6a <HAL_RCC_OscConfig+0xa6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b7c:	f7fd ff60 	bl	8001a40 <HAL_GetREVID>
 8003b80:	f241 0303 	movw	r3, #4099	@ 0x1003
 8003b84:	4298      	cmp	r0, r3
 8003b86:	f200 8269 	bhi.w	800405c <HAL_RCC_OscConfig+0x598>
 8003b8a:	6a22      	ldr	r2, [r4, #32]
 8003b8c:	686b      	ldr	r3, [r5, #4]
 8003b8e:	2a20      	cmp	r2, #32
 8003b90:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003b94:	bf0c      	ite	eq
 8003b96:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 8003b9a:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8003b9e:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ba0:	6823      	ldr	r3, [r4, #0]
 8003ba2:	071d      	lsls	r5, r3, #28
 8003ba4:	d516      	bpl.n	8003bd4 <HAL_RCC_OscConfig+0x110>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ba6:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8003ba8:	4d62      	ldr	r5, [pc, #392]	@ (8003d34 <HAL_RCC_OscConfig+0x270>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f000 8122 	beq.w	8003df4 <HAL_RCC_OscConfig+0x330>
      __HAL_RCC_LSI_ENABLE();
 8003bb0:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8003bb2:	f043 0301 	orr.w	r3, r3, #1
 8003bb6:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8003bb8:	f7fd ff2a 	bl	8001a10 <HAL_GetTick>
 8003bbc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003bbe:	e005      	b.n	8003bcc <HAL_RCC_OscConfig+0x108>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bc0:	f7fd ff26 	bl	8001a10 <HAL_GetTick>
 8003bc4:	1b80      	subs	r0, r0, r6
 8003bc6:	2802      	cmp	r0, #2
 8003bc8:	f200 80fc 	bhi.w	8003dc4 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003bcc:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8003bce:	0798      	lsls	r0, r3, #30
 8003bd0:	d5f6      	bpl.n	8003bc0 <HAL_RCC_OscConfig+0xfc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003bd2:	6823      	ldr	r3, [r4, #0]
 8003bd4:	069a      	lsls	r2, r3, #26
 8003bd6:	d516      	bpl.n	8003c06 <HAL_RCC_OscConfig+0x142>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003bd8:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 8003bda:	4d56      	ldr	r5, [pc, #344]	@ (8003d34 <HAL_RCC_OscConfig+0x270>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f000 811a 	beq.w	8003e16 <HAL_RCC_OscConfig+0x352>
      __HAL_RCC_HSI48_ENABLE();
 8003be2:	682b      	ldr	r3, [r5, #0]
 8003be4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003be8:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003bea:	f7fd ff11 	bl	8001a10 <HAL_GetTick>
 8003bee:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003bf0:	e005      	b.n	8003bfe <HAL_RCC_OscConfig+0x13a>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bf2:	f7fd ff0d 	bl	8001a10 <HAL_GetTick>
 8003bf6:	1b80      	subs	r0, r0, r6
 8003bf8:	2802      	cmp	r0, #2
 8003bfa:	f200 80e3 	bhi.w	8003dc4 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003bfe:	682b      	ldr	r3, [r5, #0]
 8003c00:	049f      	lsls	r7, r3, #18
 8003c02:	d5f6      	bpl.n	8003bf2 <HAL_RCC_OscConfig+0x12e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c04:	6823      	ldr	r3, [r4, #0]
 8003c06:	0759      	lsls	r1, r3, #29
 8003c08:	f100 808b 	bmi.w	8003d22 <HAL_RCC_OscConfig+0x25e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c0c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	f040 80bf 	bne.w	8003d92 <HAL_RCC_OscConfig+0x2ce>
  return HAL_OK;
 8003c14:	2000      	movs	r0, #0
}
 8003c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c18:	4a46      	ldr	r2, [pc, #280]	@ (8003d34 <HAL_RCC_OscConfig+0x270>)
 8003c1a:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003c1c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003c1e:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 8003c22:	d12d      	bne.n	8003c80 <HAL_RCC_OscConfig+0x1bc>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c24:	4b43      	ldr	r3, [pc, #268]	@ (8003d34 <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c26:	68e2      	ldr	r2, [r4, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	0759      	lsls	r1, r3, #29
 8003c2c:	d501      	bpl.n	8003c32 <HAL_RCC_OscConfig+0x16e>
 8003c2e:	2a00      	cmp	r2, #0
 8003c30:	d04f      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x20e>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003c32:	4d40      	ldr	r5, [pc, #256]	@ (8003d34 <HAL_RCC_OscConfig+0x270>)
 8003c34:	682b      	ldr	r3, [r5, #0]
 8003c36:	f023 0319 	bic.w	r3, r3, #25
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003c3e:	f7fd fee7 	bl	8001a10 <HAL_GetTick>
 8003c42:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c44:	e005      	b.n	8003c52 <HAL_RCC_OscConfig+0x18e>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c46:	f7fd fee3 	bl	8001a10 <HAL_GetTick>
 8003c4a:	1b80      	subs	r0, r0, r6
 8003c4c:	2802      	cmp	r0, #2
 8003c4e:	f200 80b9 	bhi.w	8003dc4 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c52:	682b      	ldr	r3, [r5, #0]
 8003c54:	075b      	lsls	r3, r3, #29
 8003c56:	d5f6      	bpl.n	8003c46 <HAL_RCC_OscConfig+0x182>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c58:	f7fd fef2 	bl	8001a40 <HAL_GetREVID>
 8003c5c:	f241 0303 	movw	r3, #4099	@ 0x1003
 8003c60:	4298      	cmp	r0, r3
 8003c62:	f200 8110 	bhi.w	8003e86 <HAL_RCC_OscConfig+0x3c2>
 8003c66:	6922      	ldr	r2, [r4, #16]
 8003c68:	686b      	ldr	r3, [r5, #4]
 8003c6a:	2a40      	cmp	r2, #64	@ 0x40
 8003c6c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003c70:	bf0c      	ite	eq
 8003c72:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
 8003c76:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8003c7a:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003c7c:	6823      	ldr	r3, [r4, #0]
 8003c7e:	e75a      	b.n	8003b36 <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003c80:	2b18      	cmp	r3, #24
 8003c82:	f000 80fc 	beq.w	8003e7e <HAL_RCC_OscConfig+0x3ba>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003c86:	4d2b      	ldr	r5, [pc, #172]	@ (8003d34 <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c88:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003c8a:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c8c:	2a00      	cmp	r2, #0
 8003c8e:	f000 80e5 	beq.w	8003e5c <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003c92:	f023 0319 	bic.w	r3, r3, #25
 8003c96:	4313      	orrs	r3, r2
 8003c98:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003c9a:	f7fd feb9 	bl	8001a10 <HAL_GetTick>
 8003c9e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ca0:	e005      	b.n	8003cae <HAL_RCC_OscConfig+0x1ea>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ca2:	f7fd feb5 	bl	8001a10 <HAL_GetTick>
 8003ca6:	1b80      	subs	r0, r0, r6
 8003ca8:	2802      	cmp	r0, #2
 8003caa:	f200 808b 	bhi.w	8003dc4 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003cae:	682b      	ldr	r3, [r5, #0]
 8003cb0:	075f      	lsls	r7, r3, #29
 8003cb2:	d5f6      	bpl.n	8003ca2 <HAL_RCC_OscConfig+0x1de>
 8003cb4:	e7d0      	b.n	8003c58 <HAL_RCC_OscConfig+0x194>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003cb6:	f001 0103 	and.w	r1, r1, #3
 8003cba:	2902      	cmp	r1, #2
 8003cbc:	f47f af15 	bne.w	8003aea <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cc0:	4a1c      	ldr	r2, [pc, #112]	@ (8003d34 <HAL_RCC_OscConfig+0x270>)
 8003cc2:	6812      	ldr	r2, [r2, #0]
 8003cc4:	0392      	lsls	r2, r2, #14
 8003cc6:	f57f af34 	bpl.w	8003b32 <HAL_RCC_OscConfig+0x6e>
 8003cca:	6862      	ldr	r2, [r4, #4]
 8003ccc:	2a00      	cmp	r2, #0
 8003cce:	f47f af30 	bne.w	8003b32 <HAL_RCC_OscConfig+0x6e>
    return HAL_ERROR;
 8003cd2:	2001      	movs	r0, #1
}
 8003cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003cd6:	f002 0203 	and.w	r2, r2, #3
 8003cda:	2a01      	cmp	r2, #1
 8003cdc:	f47f af38 	bne.w	8003b50 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ce0:	4b14      	ldr	r3, [pc, #80]	@ (8003d34 <HAL_RCC_OscConfig+0x270>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	05da      	lsls	r2, r3, #23
 8003ce6:	d502      	bpl.n	8003cee <HAL_RCC_OscConfig+0x22a>
 8003ce8:	69e3      	ldr	r3, [r4, #28]
 8003cea:	2b80      	cmp	r3, #128	@ 0x80
 8003cec:	d1f1      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x20e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003cee:	f7fd fea7 	bl	8001a40 <HAL_GetREVID>
 8003cf2:	f241 0303 	movw	r3, #4099	@ 0x1003
 8003cf6:	4298      	cmp	r0, r3
 8003cf8:	f200 80ce 	bhi.w	8003e98 <HAL_RCC_OscConfig+0x3d4>
 8003cfc:	6a22      	ldr	r2, [r4, #32]
 8003cfe:	2a20      	cmp	r2, #32
 8003d00:	f000 81bb 	beq.w	800407a <HAL_RCC_OscConfig+0x5b6>
 8003d04:	490b      	ldr	r1, [pc, #44]	@ (8003d34 <HAL_RCC_OscConfig+0x270>)
 8003d06:	684b      	ldr	r3, [r1, #4]
 8003d08:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003d0c:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8003d10:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d12:	6823      	ldr	r3, [r4, #0]
 8003d14:	e745      	b.n	8003ba2 <HAL_RCC_OscConfig+0xde>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d16:	4a07      	ldr	r2, [pc, #28]	@ (8003d34 <HAL_RCC_OscConfig+0x270>)
 8003d18:	6813      	ldr	r3, [r2, #0]
 8003d1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d1e:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d20:	e6f8      	b.n	8003b14 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 8003d22:	4d05      	ldr	r5, [pc, #20]	@ (8003d38 <HAL_RCC_OscConfig+0x274>)
 8003d24:	682b      	ldr	r3, [r5, #0]
 8003d26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d2a:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8003d2c:	f7fd fe70 	bl	8001a10 <HAL_GetTick>
 8003d30:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0x282>
 8003d34:	58024400 	.word	0x58024400
 8003d38:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d3c:	f7fd fe68 	bl	8001a10 <HAL_GetTick>
 8003d40:	1b80      	subs	r0, r0, r6
 8003d42:	2864      	cmp	r0, #100	@ 0x64
 8003d44:	d83e      	bhi.n	8003dc4 <HAL_RCC_OscConfig+0x300>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d46:	682b      	ldr	r3, [r5, #0]
 8003d48:	05da      	lsls	r2, r3, #23
 8003d4a:	d5f7      	bpl.n	8003d3c <HAL_RCC_OscConfig+0x278>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d4c:	68a3      	ldr	r3, [r4, #8]
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	f000 818d 	beq.w	800406e <HAL_RCC_OscConfig+0x5aa>
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f000 8168 	beq.w	800402a <HAL_RCC_OscConfig+0x566>
 8003d5a:	2b05      	cmp	r3, #5
 8003d5c:	4b85      	ldr	r3, [pc, #532]	@ (8003f74 <HAL_RCC_OscConfig+0x4b0>)
 8003d5e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003d60:	f000 8194 	beq.w	800408c <HAL_RCC_OscConfig+0x5c8>
 8003d64:	f022 0201 	bic.w	r2, r2, #1
 8003d68:	671a      	str	r2, [r3, #112]	@ 0x70
 8003d6a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003d6c:	f022 0204 	bic.w	r2, r2, #4
 8003d70:	671a      	str	r2, [r3, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8003d72:	f7fd fe4d 	bl	8001a10 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d76:	4e7f      	ldr	r6, [pc, #508]	@ (8003f74 <HAL_RCC_OscConfig+0x4b0>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d78:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8003d7c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d7e:	e004      	b.n	8003d8a <HAL_RCC_OscConfig+0x2c6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d80:	f7fd fe46 	bl	8001a10 <HAL_GetTick>
 8003d84:	1b40      	subs	r0, r0, r5
 8003d86:	42b8      	cmp	r0, r7
 8003d88:	d81c      	bhi.n	8003dc4 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d8a:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8003d8c:	079b      	lsls	r3, r3, #30
 8003d8e:	d5f7      	bpl.n	8003d80 <HAL_RCC_OscConfig+0x2bc>
 8003d90:	e73c      	b.n	8003c0c <HAL_RCC_OscConfig+0x148>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003d92:	4d78      	ldr	r5, [pc, #480]	@ (8003f74 <HAL_RCC_OscConfig+0x4b0>)
 8003d94:	692a      	ldr	r2, [r5, #16]
 8003d96:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8003d9a:	2a18      	cmp	r2, #24
 8003d9c:	f000 80f0 	beq.w	8003f80 <HAL_RCC_OscConfig+0x4bc>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003da0:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8003da2:	682b      	ldr	r3, [r5, #0]
 8003da4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003da8:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003daa:	d07f      	beq.n	8003eac <HAL_RCC_OscConfig+0x3e8>
        tickstart = HAL_GetTick();
 8003dac:	f7fd fe30 	bl	8001a10 <HAL_GetTick>
 8003db0:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003db2:	682b      	ldr	r3, [r5, #0]
 8003db4:	019b      	lsls	r3, r3, #6
 8003db6:	f57f af2d 	bpl.w	8003c14 <HAL_RCC_OscConfig+0x150>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dba:	f7fd fe29 	bl	8001a10 <HAL_GetTick>
 8003dbe:	1b00      	subs	r0, r0, r4
 8003dc0:	2802      	cmp	r0, #2
 8003dc2:	d9f6      	bls.n	8003db2 <HAL_RCC_OscConfig+0x2ee>
            return HAL_TIMEOUT;
 8003dc4:	2003      	movs	r0, #3
}
 8003dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dc8:	4d6a      	ldr	r5, [pc, #424]	@ (8003f74 <HAL_RCC_OscConfig+0x4b0>)
 8003dca:	682b      	ldr	r3, [r5, #0]
 8003dcc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dd0:	602b      	str	r3, [r5, #0]
 8003dd2:	682b      	ldr	r3, [r5, #0]
 8003dd4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dd8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003dda:	f7fd fe19 	bl	8001a10 <HAL_GetTick>
 8003dde:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003de0:	e004      	b.n	8003dec <HAL_RCC_OscConfig+0x328>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003de2:	f7fd fe15 	bl	8001a10 <HAL_GetTick>
 8003de6:	1b80      	subs	r0, r0, r6
 8003de8:	2864      	cmp	r0, #100	@ 0x64
 8003dea:	d8eb      	bhi.n	8003dc4 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003dec:	682b      	ldr	r3, [r5, #0]
 8003dee:	039f      	lsls	r7, r3, #14
 8003df0:	d4f7      	bmi.n	8003de2 <HAL_RCC_OscConfig+0x31e>
 8003df2:	e69d      	b.n	8003b30 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 8003df4:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8003df6:	f023 0301 	bic.w	r3, r3, #1
 8003dfa:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8003dfc:	f7fd fe08 	bl	8001a10 <HAL_GetTick>
 8003e00:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003e02:	e004      	b.n	8003e0e <HAL_RCC_OscConfig+0x34a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e04:	f7fd fe04 	bl	8001a10 <HAL_GetTick>
 8003e08:	1b80      	subs	r0, r0, r6
 8003e0a:	2802      	cmp	r0, #2
 8003e0c:	d8da      	bhi.n	8003dc4 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003e0e:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8003e10:	0799      	lsls	r1, r3, #30
 8003e12:	d4f7      	bmi.n	8003e04 <HAL_RCC_OscConfig+0x340>
 8003e14:	e6dd      	b.n	8003bd2 <HAL_RCC_OscConfig+0x10e>
      __HAL_RCC_HSI48_DISABLE();
 8003e16:	682b      	ldr	r3, [r5, #0]
 8003e18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e1c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003e1e:	f7fd fdf7 	bl	8001a10 <HAL_GetTick>
 8003e22:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003e24:	e004      	b.n	8003e30 <HAL_RCC_OscConfig+0x36c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e26:	f7fd fdf3 	bl	8001a10 <HAL_GetTick>
 8003e2a:	1b80      	subs	r0, r0, r6
 8003e2c:	2802      	cmp	r0, #2
 8003e2e:	d8c9      	bhi.n	8003dc4 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003e30:	682b      	ldr	r3, [r5, #0]
 8003e32:	0498      	lsls	r0, r3, #18
 8003e34:	d4f7      	bmi.n	8003e26 <HAL_RCC_OscConfig+0x362>
 8003e36:	e6e5      	b.n	8003c04 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_CSI_DISABLE();
 8003e38:	682b      	ldr	r3, [r5, #0]
 8003e3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e3e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003e40:	f7fd fde6 	bl	8001a10 <HAL_GetTick>
 8003e44:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003e46:	e004      	b.n	8003e52 <HAL_RCC_OscConfig+0x38e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003e48:	f7fd fde2 	bl	8001a10 <HAL_GetTick>
 8003e4c:	1b80      	subs	r0, r0, r6
 8003e4e:	2802      	cmp	r0, #2
 8003e50:	d8b8      	bhi.n	8003dc4 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003e52:	682b      	ldr	r3, [r5, #0]
 8003e54:	05df      	lsls	r7, r3, #23
 8003e56:	d4f7      	bmi.n	8003e48 <HAL_RCC_OscConfig+0x384>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e58:	6823      	ldr	r3, [r4, #0]
 8003e5a:	e6a2      	b.n	8003ba2 <HAL_RCC_OscConfig+0xde>
        __HAL_RCC_HSI_DISABLE();
 8003e5c:	f023 0301 	bic.w	r3, r3, #1
 8003e60:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003e62:	f7fd fdd5 	bl	8001a10 <HAL_GetTick>
 8003e66:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003e68:	e004      	b.n	8003e74 <HAL_RCC_OscConfig+0x3b0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e6a:	f7fd fdd1 	bl	8001a10 <HAL_GetTick>
 8003e6e:	1b80      	subs	r0, r0, r6
 8003e70:	2802      	cmp	r0, #2
 8003e72:	d8a7      	bhi.n	8003dc4 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003e74:	682b      	ldr	r3, [r5, #0]
 8003e76:	0758      	lsls	r0, r3, #29
 8003e78:	d4f7      	bmi.n	8003e6a <HAL_RCC_OscConfig+0x3a6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003e7a:	6823      	ldr	r3, [r4, #0]
 8003e7c:	e65b      	b.n	8003b36 <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003e7e:	0790      	lsls	r0, r2, #30
 8003e80:	f47f af01 	bne.w	8003c86 <HAL_RCC_OscConfig+0x1c2>
 8003e84:	e6ce      	b.n	8003c24 <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e86:	686b      	ldr	r3, [r5, #4]
 8003e88:	6922      	ldr	r2, [r4, #16]
 8003e8a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003e8e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003e92:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003e94:	6823      	ldr	r3, [r4, #0]
 8003e96:	e64e      	b.n	8003b36 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e98:	4a36      	ldr	r2, [pc, #216]	@ (8003f74 <HAL_RCC_OscConfig+0x4b0>)
 8003e9a:	6a21      	ldr	r1, [r4, #32]
 8003e9c:	68d3      	ldr	r3, [r2, #12]
 8003e9e:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8003ea2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003ea6:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ea8:	6823      	ldr	r3, [r4, #0]
 8003eaa:	e67a      	b.n	8003ba2 <HAL_RCC_OscConfig+0xde>
        tickstart = HAL_GetTick();
 8003eac:	f7fd fdb0 	bl	8001a10 <HAL_GetTick>
 8003eb0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003eb2:	e004      	b.n	8003ebe <HAL_RCC_OscConfig+0x3fa>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eb4:	f7fd fdac 	bl	8001a10 <HAL_GetTick>
 8003eb8:	1b80      	subs	r0, r0, r6
 8003eba:	2802      	cmp	r0, #2
 8003ebc:	d882      	bhi.n	8003dc4 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ebe:	682b      	ldr	r3, [r5, #0]
 8003ec0:	0199      	lsls	r1, r3, #6
 8003ec2:	d4f7      	bmi.n	8003eb4 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ec4:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8003ec6:	4b2c      	ldr	r3, [pc, #176]	@ (8003f78 <HAL_RCC_OscConfig+0x4b4>)
 8003ec8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8003eca:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003ecc:	492b      	ldr	r1, [pc, #172]	@ (8003f7c <HAL_RCC_OscConfig+0x4b8>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ece:	4e29      	ldr	r6, [pc, #164]	@ (8003f74 <HAL_RCC_OscConfig+0x4b0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003ed4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003ed8:	62ab      	str	r3, [r5, #40]	@ 0x28
 8003eda:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	@ 0x34
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	3a01      	subs	r2, #1
 8003ee2:	025b      	lsls	r3, r3, #9
 8003ee4:	0412      	lsls	r2, r2, #16
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8003eec:	4313      	orrs	r3, r2
 8003eee:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003ef0:	3a01      	subs	r2, #1
 8003ef2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8003efa:	3a01      	subs	r2, #1
 8003efc:	0612      	lsls	r2, r2, #24
 8003efe:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8003f02:	4313      	orrs	r3, r2
 8003f04:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8003f06:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003f08:	f023 0301 	bic.w	r3, r3, #1
 8003f0c:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003f0e:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8003f10:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8003f12:	4011      	ands	r1, r2
 8003f14:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8003f18:	6369      	str	r1, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003f1a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003f1c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003f1e:	f023 030c 	bic.w	r3, r3, #12
 8003f22:	4313      	orrs	r3, r2
 8003f24:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003f26:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003f28:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003f2a:	f023 0302 	bic.w	r3, r3, #2
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003f32:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003f34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f38:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f3a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003f3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f40:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003f42:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003f44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f48:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8003f4a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003f4c:	f043 0301 	orr.w	r3, r3, #1
 8003f50:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 8003f52:	682b      	ldr	r3, [r5, #0]
 8003f54:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f58:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003f5a:	f7fd fd59 	bl	8001a10 <HAL_GetTick>
 8003f5e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f60:	6833      	ldr	r3, [r6, #0]
 8003f62:	019a      	lsls	r2, r3, #6
 8003f64:	f53f ae56 	bmi.w	8003c14 <HAL_RCC_OscConfig+0x150>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f68:	f7fd fd52 	bl	8001a10 <HAL_GetTick>
 8003f6c:	1b00      	subs	r0, r0, r4
 8003f6e:	2802      	cmp	r0, #2
 8003f70:	d9f6      	bls.n	8003f60 <HAL_RCC_OscConfig+0x49c>
 8003f72:	e727      	b.n	8003dc4 <HAL_RCC_OscConfig+0x300>
 8003f74:	58024400 	.word	0x58024400
 8003f78:	fffffc0c 	.word	0xfffffc0c
 8003f7c:	ffff0007 	.word	0xffff0007
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f80:	2b01      	cmp	r3, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003f82:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003f84:	6b28      	ldr	r0, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f86:	f43f aea4 	beq.w	8003cd2 <HAL_RCC_OscConfig+0x20e>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f8a:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f8e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8003f90:	428b      	cmp	r3, r1
 8003f92:	f47f ae9e 	bne.w	8003cd2 <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f96:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f9a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	f47f ae98 	bne.w	8003cd2 <HAL_RCC_OscConfig+0x20e>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003fa2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003fa4:	f3c0 0208 	ubfx	r2, r0, #0, #9
 8003fa8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003faa:	429a      	cmp	r2, r3
 8003fac:	f47f ae91 	bne.w	8003cd2 <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003fb0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003fb2:	f3c0 2246 	ubfx	r2, r0, #9, #7
 8003fb6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	f47f ae8a 	bne.w	8003cd2 <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003fbe:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003fc0:	f3c0 4206 	ubfx	r2, r0, #16, #7
 8003fc4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	f47f ae83 	bne.w	8003cd2 <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003fcc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003fce:	f3c0 6006 	ubfx	r0, r0, #24, #7
 8003fd2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003fd4:	4298      	cmp	r0, r3
 8003fd6:	f47f ae7c 	bne.w	8003cd2 <HAL_RCC_OscConfig+0x20e>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003fda:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003fdc:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003fde:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	f43f ae16 	beq.w	8003c14 <HAL_RCC_OscConfig+0x150>
          __HAL_RCC_PLLFRACN_DISABLE();
 8003fe8:	4a2d      	ldr	r2, [pc, #180]	@ (80040a0 <HAL_RCC_OscConfig+0x5dc>)
 8003fea:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8003fec:	f023 0301 	bic.w	r3, r3, #1
 8003ff0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 8003ff2:	f7fd fd0d 	bl	8001a10 <HAL_GetTick>
 8003ff6:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003ff8:	f7fd fd0a 	bl	8001a10 <HAL_GetTick>
 8003ffc:	42a8      	cmp	r0, r5
 8003ffe:	d0fb      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x534>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004000:	4a27      	ldr	r2, [pc, #156]	@ (80040a0 <HAL_RCC_OscConfig+0x5dc>)
 8004002:	4b28      	ldr	r3, [pc, #160]	@ (80040a4 <HAL_RCC_OscConfig+0x5e0>)
 8004004:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 8004006:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004008:	4003      	ands	r3, r0
 800400a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800400e:	6353      	str	r3, [r2, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8004010:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8004012:	f043 0301 	orr.w	r3, r3, #1
 8004016:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004018:	e5fc      	b.n	8003c14 <HAL_RCC_OscConfig+0x150>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800401a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800401e:	601a      	str	r2, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004026:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004028:	e574      	b.n	8003b14 <HAL_RCC_OscConfig+0x50>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800402a:	4d1d      	ldr	r5, [pc, #116]	@ (80040a0 <HAL_RCC_OscConfig+0x5dc>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800402c:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004030:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8004032:	f023 0301 	bic.w	r3, r3, #1
 8004036:	672b      	str	r3, [r5, #112]	@ 0x70
 8004038:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800403a:	f023 0304 	bic.w	r3, r3, #4
 800403e:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8004040:	f7fd fce6 	bl	8001a10 <HAL_GetTick>
 8004044:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004046:	e005      	b.n	8004054 <HAL_RCC_OscConfig+0x590>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004048:	f7fd fce2 	bl	8001a10 <HAL_GetTick>
 800404c:	1b80      	subs	r0, r0, r6
 800404e:	42b8      	cmp	r0, r7
 8004050:	f63f aeb8 	bhi.w	8003dc4 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004054:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8004056:	0798      	lsls	r0, r3, #30
 8004058:	d4f6      	bmi.n	8004048 <HAL_RCC_OscConfig+0x584>
 800405a:	e5d7      	b.n	8003c0c <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800405c:	68eb      	ldr	r3, [r5, #12]
 800405e:	6a22      	ldr	r2, [r4, #32]
 8004060:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8004064:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004068:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800406a:	6823      	ldr	r3, [r4, #0]
 800406c:	e599      	b.n	8003ba2 <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800406e:	4a0c      	ldr	r2, [pc, #48]	@ (80040a0 <HAL_RCC_OscConfig+0x5dc>)
 8004070:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8004072:	f043 0301 	orr.w	r3, r3, #1
 8004076:	6713      	str	r3, [r2, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004078:	e67b      	b.n	8003d72 <HAL_RCC_OscConfig+0x2ae>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800407a:	4a09      	ldr	r2, [pc, #36]	@ (80040a0 <HAL_RCC_OscConfig+0x5dc>)
 800407c:	6853      	ldr	r3, [r2, #4]
 800407e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004082:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004086:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004088:	6823      	ldr	r3, [r4, #0]
 800408a:	e58a      	b.n	8003ba2 <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800408c:	f042 0204 	orr.w	r2, r2, #4
 8004090:	671a      	str	r2, [r3, #112]	@ 0x70
 8004092:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004094:	f042 0201 	orr.w	r2, r2, #1
 8004098:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800409a:	e66a      	b.n	8003d72 <HAL_RCC_OscConfig+0x2ae>
    return HAL_ERROR;
 800409c:	2001      	movs	r0, #1
}
 800409e:	4770      	bx	lr
 80040a0:	58024400 	.word	0x58024400
 80040a4:	ffff0007 	.word	0xffff0007

080040a8 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040a8:	4a0c      	ldr	r2, [pc, #48]	@ (80040dc <HAL_RCC_GetSysClockFreq+0x34>)
 80040aa:	6913      	ldr	r3, [r2, #16]
 80040ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80040b0:	2b10      	cmp	r3, #16
 80040b2:	d004      	beq.n	80040be <HAL_RCC_GetSysClockFreq+0x16>
 80040b4:	2b18      	cmp	r3, #24
 80040b6:	d00d      	beq.n	80040d4 <HAL_RCC_GetSysClockFreq+0x2c>
 80040b8:	b11b      	cbz	r3, 80040c2 <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
 80040ba:	4809      	ldr	r0, [pc, #36]	@ (80040e0 <HAL_RCC_GetSysClockFreq+0x38>)
 80040bc:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040be:	4809      	ldr	r0, [pc, #36]	@ (80040e4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80040c0:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80040c2:	6813      	ldr	r3, [r2, #0]
 80040c4:	069b      	lsls	r3, r3, #26
 80040c6:	d507      	bpl.n	80040d8 <HAL_RCC_GetSysClockFreq+0x30>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80040c8:	6813      	ldr	r3, [r2, #0]
 80040ca:	4807      	ldr	r0, [pc, #28]	@ (80040e8 <HAL_RCC_GetSysClockFreq+0x40>)
 80040cc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80040d0:	40d8      	lsrs	r0, r3
 80040d2:	4770      	bx	lr
 80040d4:	f7ff bc84 	b.w	80039e0 <HAL_RCC_GetSysClockFreq.part.0>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80040d8:	4803      	ldr	r0, [pc, #12]	@ (80040e8 <HAL_RCC_GetSysClockFreq+0x40>)
}
 80040da:	4770      	bx	lr
 80040dc:	58024400 	.word	0x58024400
 80040e0:	003d0900 	.word	0x003d0900
 80040e4:	017d7840 	.word	0x017d7840
 80040e8:	03d09000 	.word	0x03d09000

080040ec <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80040ec:	2800      	cmp	r0, #0
 80040ee:	f000 810e 	beq.w	800430e <HAL_RCC_ClockConfig+0x222>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040f2:	4a8d      	ldr	r2, [pc, #564]	@ (8004328 <HAL_RCC_ClockConfig+0x23c>)
 80040f4:	6813      	ldr	r3, [r2, #0]
 80040f6:	f003 030f 	and.w	r3, r3, #15
 80040fa:	428b      	cmp	r3, r1
{
 80040fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004100:	4604      	mov	r4, r0
 8004102:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004104:	d20c      	bcs.n	8004120 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004106:	6813      	ldr	r3, [r2, #0]
 8004108:	f023 030f 	bic.w	r3, r3, #15
 800410c:	430b      	orrs	r3, r1
 800410e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004110:	6813      	ldr	r3, [r2, #0]
 8004112:	f003 030f 	and.w	r3, r3, #15
 8004116:	428b      	cmp	r3, r1
 8004118:	d002      	beq.n	8004120 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800411a:	2001      	movs	r0, #1
}
 800411c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004120:	6823      	ldr	r3, [r4, #0]
 8004122:	0758      	lsls	r0, r3, #29
 8004124:	d50b      	bpl.n	800413e <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004126:	4981      	ldr	r1, [pc, #516]	@ (800432c <HAL_RCC_ClockConfig+0x240>)
 8004128:	6920      	ldr	r0, [r4, #16]
 800412a:	698a      	ldr	r2, [r1, #24]
 800412c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8004130:	4290      	cmp	r0, r2
 8004132:	d904      	bls.n	800413e <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004134:	698a      	ldr	r2, [r1, #24]
 8004136:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800413a:	4302      	orrs	r2, r0
 800413c:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800413e:	0719      	lsls	r1, r3, #28
 8004140:	d50b      	bpl.n	800415a <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004142:	497a      	ldr	r1, [pc, #488]	@ (800432c <HAL_RCC_ClockConfig+0x240>)
 8004144:	6960      	ldr	r0, [r4, #20]
 8004146:	69ca      	ldr	r2, [r1, #28]
 8004148:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800414c:	4290      	cmp	r0, r2
 800414e:	d904      	bls.n	800415a <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004150:	69ca      	ldr	r2, [r1, #28]
 8004152:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004156:	4302      	orrs	r2, r0
 8004158:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800415a:	06da      	lsls	r2, r3, #27
 800415c:	d50b      	bpl.n	8004176 <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800415e:	4973      	ldr	r1, [pc, #460]	@ (800432c <HAL_RCC_ClockConfig+0x240>)
 8004160:	69a0      	ldr	r0, [r4, #24]
 8004162:	69ca      	ldr	r2, [r1, #28]
 8004164:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8004168:	4290      	cmp	r0, r2
 800416a:	d904      	bls.n	8004176 <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800416c:	69ca      	ldr	r2, [r1, #28]
 800416e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004172:	4302      	orrs	r2, r0
 8004174:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004176:	069f      	lsls	r7, r3, #26
 8004178:	d50b      	bpl.n	8004192 <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800417a:	496c      	ldr	r1, [pc, #432]	@ (800432c <HAL_RCC_ClockConfig+0x240>)
 800417c:	69e0      	ldr	r0, [r4, #28]
 800417e:	6a0a      	ldr	r2, [r1, #32]
 8004180:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8004184:	4290      	cmp	r0, r2
 8004186:	d904      	bls.n	8004192 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004188:	6a0a      	ldr	r2, [r1, #32]
 800418a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800418e:	4302      	orrs	r2, r0
 8004190:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004192:	079e      	lsls	r6, r3, #30
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004194:	f003 0201 	and.w	r2, r3, #1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004198:	f140 80ab 	bpl.w	80042f2 <HAL_RCC_ClockConfig+0x206>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800419c:	4e63      	ldr	r6, [pc, #396]	@ (800432c <HAL_RCC_ClockConfig+0x240>)
 800419e:	68e0      	ldr	r0, [r4, #12]
 80041a0:	69b1      	ldr	r1, [r6, #24]
 80041a2:	f001 010f 	and.w	r1, r1, #15
 80041a6:	4288      	cmp	r0, r1
 80041a8:	d904      	bls.n	80041b4 <HAL_RCC_ClockConfig+0xc8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041aa:	69b1      	ldr	r1, [r6, #24]
 80041ac:	f021 010f 	bic.w	r1, r1, #15
 80041b0:	4301      	orrs	r1, r0
 80041b2:	61b1      	str	r1, [r6, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041b4:	2a00      	cmp	r2, #0
 80041b6:	d030      	beq.n	800421a <HAL_RCC_ClockConfig+0x12e>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80041b8:	4a5c      	ldr	r2, [pc, #368]	@ (800432c <HAL_RCC_ClockConfig+0x240>)
 80041ba:	68a1      	ldr	r1, [r4, #8]
 80041bc:	6993      	ldr	r3, [r2, #24]
 80041be:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80041c2:	430b      	orrs	r3, r1
 80041c4:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041c6:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041c8:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041ca:	2902      	cmp	r1, #2
 80041cc:	f000 80a1 	beq.w	8004312 <HAL_RCC_ClockConfig+0x226>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041d0:	2903      	cmp	r1, #3
 80041d2:	f000 8098 	beq.w	8004306 <HAL_RCC_ClockConfig+0x21a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80041d6:	2901      	cmp	r1, #1
 80041d8:	f000 80a1 	beq.w	800431e <HAL_RCC_ClockConfig+0x232>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041dc:	075f      	lsls	r7, r3, #29
 80041de:	d59c      	bpl.n	800411a <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041e0:	4e52      	ldr	r6, [pc, #328]	@ (800432c <HAL_RCC_ClockConfig+0x240>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041e2:	f241 3888 	movw	r8, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041e6:	6933      	ldr	r3, [r6, #16]
 80041e8:	f023 0307 	bic.w	r3, r3, #7
 80041ec:	430b      	orrs	r3, r1
 80041ee:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 80041f0:	f7fd fc0e 	bl	8001a10 <HAL_GetTick>
 80041f4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041f6:	e005      	b.n	8004204 <HAL_RCC_ClockConfig+0x118>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041f8:	f7fd fc0a 	bl	8001a10 <HAL_GetTick>
 80041fc:	1bc0      	subs	r0, r0, r7
 80041fe:	4540      	cmp	r0, r8
 8004200:	f200 808b 	bhi.w	800431a <HAL_RCC_ClockConfig+0x22e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004204:	6933      	ldr	r3, [r6, #16]
 8004206:	6862      	ldr	r2, [r4, #4]
 8004208:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800420c:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8004210:	d1f2      	bne.n	80041f8 <HAL_RCC_ClockConfig+0x10c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004212:	6823      	ldr	r3, [r4, #0]
 8004214:	079e      	lsls	r6, r3, #30
 8004216:	d506      	bpl.n	8004226 <HAL_RCC_ClockConfig+0x13a>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004218:	68e0      	ldr	r0, [r4, #12]
 800421a:	4944      	ldr	r1, [pc, #272]	@ (800432c <HAL_RCC_ClockConfig+0x240>)
 800421c:	698a      	ldr	r2, [r1, #24]
 800421e:	f002 020f 	and.w	r2, r2, #15
 8004222:	4282      	cmp	r2, r0
 8004224:	d869      	bhi.n	80042fa <HAL_RCC_ClockConfig+0x20e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004226:	4940      	ldr	r1, [pc, #256]	@ (8004328 <HAL_RCC_ClockConfig+0x23c>)
 8004228:	680a      	ldr	r2, [r1, #0]
 800422a:	f002 020f 	and.w	r2, r2, #15
 800422e:	42aa      	cmp	r2, r5
 8004230:	d90a      	bls.n	8004248 <HAL_RCC_ClockConfig+0x15c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004232:	680a      	ldr	r2, [r1, #0]
 8004234:	f022 020f 	bic.w	r2, r2, #15
 8004238:	432a      	orrs	r2, r5
 800423a:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800423c:	680a      	ldr	r2, [r1, #0]
 800423e:	f002 020f 	and.w	r2, r2, #15
 8004242:	42aa      	cmp	r2, r5
 8004244:	f47f af69 	bne.w	800411a <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004248:	0758      	lsls	r0, r3, #29
 800424a:	d50b      	bpl.n	8004264 <HAL_RCC_ClockConfig+0x178>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800424c:	4937      	ldr	r1, [pc, #220]	@ (800432c <HAL_RCC_ClockConfig+0x240>)
 800424e:	6920      	ldr	r0, [r4, #16]
 8004250:	698a      	ldr	r2, [r1, #24]
 8004252:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8004256:	4290      	cmp	r0, r2
 8004258:	d204      	bcs.n	8004264 <HAL_RCC_ClockConfig+0x178>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800425a:	698a      	ldr	r2, [r1, #24]
 800425c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004260:	4302      	orrs	r2, r0
 8004262:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004264:	0719      	lsls	r1, r3, #28
 8004266:	d50b      	bpl.n	8004280 <HAL_RCC_ClockConfig+0x194>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004268:	4930      	ldr	r1, [pc, #192]	@ (800432c <HAL_RCC_ClockConfig+0x240>)
 800426a:	6960      	ldr	r0, [r4, #20]
 800426c:	69ca      	ldr	r2, [r1, #28]
 800426e:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8004272:	4290      	cmp	r0, r2
 8004274:	d204      	bcs.n	8004280 <HAL_RCC_ClockConfig+0x194>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004276:	69ca      	ldr	r2, [r1, #28]
 8004278:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800427c:	4302      	orrs	r2, r0
 800427e:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004280:	06da      	lsls	r2, r3, #27
 8004282:	d50b      	bpl.n	800429c <HAL_RCC_ClockConfig+0x1b0>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004284:	4929      	ldr	r1, [pc, #164]	@ (800432c <HAL_RCC_ClockConfig+0x240>)
 8004286:	69a0      	ldr	r0, [r4, #24]
 8004288:	69ca      	ldr	r2, [r1, #28]
 800428a:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800428e:	4290      	cmp	r0, r2
 8004290:	d204      	bcs.n	800429c <HAL_RCC_ClockConfig+0x1b0>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004292:	69ca      	ldr	r2, [r1, #28]
 8004294:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004298:	4302      	orrs	r2, r0
 800429a:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800429c:	069b      	lsls	r3, r3, #26
 800429e:	d50b      	bpl.n	80042b8 <HAL_RCC_ClockConfig+0x1cc>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80042a0:	4a22      	ldr	r2, [pc, #136]	@ (800432c <HAL_RCC_ClockConfig+0x240>)
 80042a2:	69e1      	ldr	r1, [r4, #28]
 80042a4:	6a13      	ldr	r3, [r2, #32]
 80042a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80042aa:	4299      	cmp	r1, r3
 80042ac:	d204      	bcs.n	80042b8 <HAL_RCC_ClockConfig+0x1cc>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80042ae:	6a13      	ldr	r3, [r2, #32]
 80042b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042b4:	430b      	orrs	r3, r1
 80042b6:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80042b8:	f7ff fef6 	bl	80040a8 <HAL_RCC_GetSysClockFreq>
 80042bc:	4a1b      	ldr	r2, [pc, #108]	@ (800432c <HAL_RCC_ClockConfig+0x240>)
 80042be:	4603      	mov	r3, r0
 80042c0:	481b      	ldr	r0, [pc, #108]	@ (8004330 <HAL_RCC_ClockConfig+0x244>)
 80042c2:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80042c4:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80042c6:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 80042ca:	4d1a      	ldr	r5, [pc, #104]	@ (8004334 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80042cc:	f002 020f 	and.w	r2, r2, #15
 80042d0:	4c19      	ldr	r4, [pc, #100]	@ (8004338 <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80042d2:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80042d4:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80042d6:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 80042da:	4818      	ldr	r0, [pc, #96]	@ (800433c <HAL_RCC_ClockConfig+0x250>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80042dc:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80042e0:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 80042e2:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 80042e4:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80042e6:	40d3      	lsrs	r3, r2
 80042e8:	6023      	str	r3, [r4, #0]
}
 80042ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 80042ee:	f7fd b84f 	b.w	8001390 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042f2:	2a00      	cmp	r2, #0
 80042f4:	f47f af60 	bne.w	80041b8 <HAL_RCC_ClockConfig+0xcc>
 80042f8:	e795      	b.n	8004226 <HAL_RCC_ClockConfig+0x13a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042fa:	698a      	ldr	r2, [r1, #24]
 80042fc:	f022 020f 	bic.w	r2, r2, #15
 8004300:	4302      	orrs	r2, r0
 8004302:	618a      	str	r2, [r1, #24]
 8004304:	e78f      	b.n	8004226 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004306:	019a      	lsls	r2, r3, #6
 8004308:	f53f af6a 	bmi.w	80041e0 <HAL_RCC_ClockConfig+0xf4>
 800430c:	e705      	b.n	800411a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800430e:	2001      	movs	r0, #1
}
 8004310:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004312:	0398      	lsls	r0, r3, #14
 8004314:	f53f af64 	bmi.w	80041e0 <HAL_RCC_ClockConfig+0xf4>
 8004318:	e6ff      	b.n	800411a <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 800431a:	2003      	movs	r0, #3
 800431c:	e6fe      	b.n	800411c <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800431e:	05db      	lsls	r3, r3, #23
 8004320:	f53f af5e 	bmi.w	80041e0 <HAL_RCC_ClockConfig+0xf4>
 8004324:	e6f9      	b.n	800411a <HAL_RCC_ClockConfig+0x2e>
 8004326:	bf00      	nop
 8004328:	52002000 	.word	0x52002000
 800432c:	58024400 	.word	0x58024400
 8004330:	080126d0 	.word	0x080126d0
 8004334:	24000004 	.word	0x24000004
 8004338:	24000000 	.word	0x24000000
 800433c:	2400000c 	.word	0x2400000c

08004340 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004340:	4a18      	ldr	r2, [pc, #96]	@ (80043a4 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004342:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004344:	6913      	ldr	r3, [r2, #16]
 8004346:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800434a:	2b10      	cmp	r3, #16
 800434c:	d019      	beq.n	8004382 <HAL_RCC_GetHCLKFreq+0x42>
 800434e:	2b18      	cmp	r3, #24
 8004350:	d022      	beq.n	8004398 <HAL_RCC_GetHCLKFreq+0x58>
 8004352:	b1c3      	cbz	r3, 8004386 <HAL_RCC_GetHCLKFreq+0x46>
      sysclockfreq = CSI_VALUE;
 8004354:	4b14      	ldr	r3, [pc, #80]	@ (80043a8 <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004356:	4913      	ldr	r1, [pc, #76]	@ (80043a4 <HAL_RCC_GetHCLKFreq+0x64>)
 8004358:	4814      	ldr	r0, [pc, #80]	@ (80043ac <HAL_RCC_GetHCLKFreq+0x6c>)
 800435a:	698a      	ldr	r2, [r1, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800435c:	6989      	ldr	r1, [r1, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800435e:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004362:	4c13      	ldr	r4, [pc, #76]	@ (80043b0 <HAL_RCC_GetHCLKFreq+0x70>)
 8004364:	f001 010f 	and.w	r1, r1, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004368:	4d12      	ldr	r5, [pc, #72]	@ (80043b4 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800436a:	5c82      	ldrb	r2, [r0, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800436c:	5c40      	ldrb	r0, [r0, r1]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800436e:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004372:	f000 001f 	and.w	r0, r0, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004376:	40d3      	lsrs	r3, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004378:	fa23 f000 	lsr.w	r0, r3, r0
  SystemCoreClock = common_system_clock;
 800437c:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800437e:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8004380:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004382:	4b0d      	ldr	r3, [pc, #52]	@ (80043b8 <HAL_RCC_GetHCLKFreq+0x78>)
 8004384:	e7e7      	b.n	8004356 <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004386:	6813      	ldr	r3, [r2, #0]
 8004388:	069b      	lsls	r3, r3, #26
 800438a:	d509      	bpl.n	80043a0 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800438c:	6812      	ldr	r2, [r2, #0]
 800438e:	4b0b      	ldr	r3, [pc, #44]	@ (80043bc <HAL_RCC_GetHCLKFreq+0x7c>)
 8004390:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8004394:	40d3      	lsrs	r3, r2
 8004396:	e7de      	b.n	8004356 <HAL_RCC_GetHCLKFreq+0x16>
 8004398:	f7ff fb22 	bl	80039e0 <HAL_RCC_GetSysClockFreq.part.0>
 800439c:	4603      	mov	r3, r0
 800439e:	e7da      	b.n	8004356 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80043a0:	4b06      	ldr	r3, [pc, #24]	@ (80043bc <HAL_RCC_GetHCLKFreq+0x7c>)
 80043a2:	e7d8      	b.n	8004356 <HAL_RCC_GetHCLKFreq+0x16>
 80043a4:	58024400 	.word	0x58024400
 80043a8:	003d0900 	.word	0x003d0900
 80043ac:	080126d0 	.word	0x080126d0
 80043b0:	24000000 	.word	0x24000000
 80043b4:	24000004 	.word	0x24000004
 80043b8:	017d7840 	.word	0x017d7840
 80043bc:	03d09000 	.word	0x03d09000

080043c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043c0:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80043c2:	f7ff ffbd 	bl	8004340 <HAL_RCC_GetHCLKFreq>
 80043c6:	4b05      	ldr	r3, [pc, #20]	@ (80043dc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80043c8:	4a05      	ldr	r2, [pc, #20]	@ (80043e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043ca:	69db      	ldr	r3, [r3, #28]
 80043cc:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80043d0:	5cd3      	ldrb	r3, [r2, r3]
 80043d2:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80043d6:	40d8      	lsrs	r0, r3
 80043d8:	bd08      	pop	{r3, pc}
 80043da:	bf00      	nop
 80043dc:	58024400 	.word	0x58024400
 80043e0:	080126d0 	.word	0x080126d0

080043e4 <HAL_RCC_GetClockConfig>:
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80043e4:	4b13      	ldr	r3, [pc, #76]	@ (8004434 <HAL_RCC_GetClockConfig+0x50>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80043e6:	223f      	movs	r2, #63	@ 0x3f
 80043e8:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80043ea:	691a      	ldr	r2, [r3, #16]
 80043ec:	f002 0207 	and.w	r2, r2, #7
 80043f0:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80043f2:	699a      	ldr	r2, [r3, #24]
 80043f4:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 80043f8:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80043fa:	699a      	ldr	r2, [r3, #24]
 80043fc:	f002 020f 	and.w	r2, r2, #15
 8004400:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004402:	699a      	ldr	r2, [r3, #24]
 8004404:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8004408:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800440a:	69da      	ldr	r2, [r3, #28]
 800440c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8004410:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004412:	69da      	ldr	r2, [r3, #28]
 8004414:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8004418:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800441a:	6a1b      	ldr	r3, [r3, #32]
{
 800441c:	b410      	push	{r4}
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800441e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004422:	4c05      	ldr	r4, [pc, #20]	@ (8004438 <HAL_RCC_GetClockConfig+0x54>)
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004424:	61c3      	str	r3, [r0, #28]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004426:	6823      	ldr	r3, [r4, #0]
}
 8004428:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800442c:	f003 030f 	and.w	r3, r3, #15
 8004430:	600b      	str	r3, [r1, #0]
}
 8004432:	4770      	bx	lr
 8004434:	58024400 	.word	0x58024400
 8004438:	52002000 	.word	0x52002000

0800443c <RCCEx_PLL2_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 800443c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800443e:	4c36      	ldr	r4, [pc, #216]	@ (8004518 <RCCEx_PLL2_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 8004440:	4606      	mov	r6, r0
 8004442:	460f      	mov	r7, r1
    __HAL_RCC_PLL2_DISABLE();
 8004444:	6823      	ldr	r3, [r4, #0]
 8004446:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800444a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800444c:	f7fd fae0 	bl	8001a10 <HAL_GetTick>
 8004450:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004452:	e004      	b.n	800445e <RCCEx_PLL2_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004454:	f7fd fadc 	bl	8001a10 <HAL_GetTick>
 8004458:	1b40      	subs	r0, r0, r5
 800445a:	2802      	cmp	r0, #2
 800445c:	d856      	bhi.n	800450c <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800445e:	6823      	ldr	r3, [r4, #0]
 8004460:	011a      	lsls	r2, r3, #4
 8004462:	d4f7      	bmi.n	8004454 <RCCEx_PLL2_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004464:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004466:	6832      	ldr	r2, [r6, #0]
 8004468:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800446c:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8004470:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004472:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8004476:	3b01      	subs	r3, #1
 8004478:	3a01      	subs	r2, #1
 800447a:	025b      	lsls	r3, r3, #9
 800447c:	0412      	lsls	r2, r2, #16
 800447e:	b29b      	uxth	r3, r3
 8004480:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004484:	4313      	orrs	r3, r2
 8004486:	6872      	ldr	r2, [r6, #4]
 8004488:	3a01      	subs	r2, #1
 800448a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800448e:	4313      	orrs	r3, r2
 8004490:	6932      	ldr	r2, [r6, #16]
 8004492:	3a01      	subs	r2, #1
 8004494:	0612      	lsls	r2, r2, #24
 8004496:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800449a:	4313      	orrs	r3, r2
 800449c:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800449e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80044a0:	6972      	ldr	r2, [r6, #20]
 80044a2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80044a6:	4313      	orrs	r3, r2
 80044a8:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80044aa:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80044ac:	69b3      	ldr	r3, [r6, #24]
 80044ae:	f022 0220 	bic.w	r2, r2, #32
 80044b2:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80044b4:	4b19      	ldr	r3, [pc, #100]	@ (800451c <RCCEx_PLL2_Config.part.0+0xe0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80044b6:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 80044b8:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80044ba:	f022 0210 	bic.w	r2, r2, #16
 80044be:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80044c0:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80044c2:	69f2      	ldr	r2, [r6, #28]
 80044c4:	400b      	ands	r3, r1
 80044c6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80044ca:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80044cc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80044ce:	f043 0310 	orr.w	r3, r3, #16
 80044d2:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80044d4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 80044d6:	b1df      	cbz	r7, 8004510 <RCCEx_PLL2_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80044d8:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80044da:	bf0c      	ite	eq
 80044dc:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80044e0:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 80044e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80044e6:	4c0c      	ldr	r4, [pc, #48]	@ (8004518 <RCCEx_PLL2_Config.part.0+0xdc>)
 80044e8:	6823      	ldr	r3, [r4, #0]
 80044ea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80044ee:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044f0:	f7fd fa8e 	bl	8001a10 <HAL_GetTick>
 80044f4:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80044f6:	e004      	b.n	8004502 <RCCEx_PLL2_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80044f8:	f7fd fa8a 	bl	8001a10 <HAL_GetTick>
 80044fc:	1b40      	subs	r0, r0, r5
 80044fe:	2802      	cmp	r0, #2
 8004500:	d804      	bhi.n	800450c <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004502:	6823      	ldr	r3, [r4, #0]
 8004504:	011b      	lsls	r3, r3, #4
 8004506:	d5f7      	bpl.n	80044f8 <RCCEx_PLL2_Config.part.0+0xbc>
    }

  }


  return status;
 8004508:	2000      	movs	r0, #0
}
 800450a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800450c:	2003      	movs	r0, #3
}
 800450e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004510:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004514:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004516:	e7e6      	b.n	80044e6 <RCCEx_PLL2_Config.part.0+0xaa>
 8004518:	58024400 	.word	0x58024400
 800451c:	ffff0007 	.word	0xffff0007

08004520 <RCCEx_PLL3_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 8004520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004522:	4c36      	ldr	r4, [pc, #216]	@ (80045fc <RCCEx_PLL3_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 8004524:	4606      	mov	r6, r0
 8004526:	460f      	mov	r7, r1
    __HAL_RCC_PLL3_DISABLE();
 8004528:	6823      	ldr	r3, [r4, #0]
 800452a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800452e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004530:	f7fd fa6e 	bl	8001a10 <HAL_GetTick>
 8004534:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004536:	e004      	b.n	8004542 <RCCEx_PLL3_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004538:	f7fd fa6a 	bl	8001a10 <HAL_GetTick>
 800453c:	1b40      	subs	r0, r0, r5
 800453e:	2802      	cmp	r0, #2
 8004540:	d856      	bhi.n	80045f0 <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004542:	6823      	ldr	r3, [r4, #0]
 8004544:	009a      	lsls	r2, r3, #2
 8004546:	d4f7      	bmi.n	8004538 <RCCEx_PLL3_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004548:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800454a:	6832      	ldr	r2, [r6, #0]
 800454c:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 8004550:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8004554:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004556:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800455a:	3b01      	subs	r3, #1
 800455c:	3a01      	subs	r2, #1
 800455e:	025b      	lsls	r3, r3, #9
 8004560:	0412      	lsls	r2, r2, #16
 8004562:	b29b      	uxth	r3, r3
 8004564:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004568:	4313      	orrs	r3, r2
 800456a:	6872      	ldr	r2, [r6, #4]
 800456c:	3a01      	subs	r2, #1
 800456e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004572:	4313      	orrs	r3, r2
 8004574:	6932      	ldr	r2, [r6, #16]
 8004576:	3a01      	subs	r2, #1
 8004578:	0612      	lsls	r2, r2, #24
 800457a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800457e:	4313      	orrs	r3, r2
 8004580:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004582:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004584:	6972      	ldr	r2, [r6, #20]
 8004586:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800458a:	4313      	orrs	r3, r2
 800458c:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800458e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8004590:	69b3      	ldr	r3, [r6, #24]
 8004592:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004596:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004598:	4b19      	ldr	r3, [pc, #100]	@ (8004600 <RCCEx_PLL3_Config.part.0+0xe0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800459a:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 800459c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800459e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80045a2:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80045a4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80045a6:	69f2      	ldr	r2, [r6, #28]
 80045a8:	400b      	ands	r3, r1
 80045aa:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80045ae:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80045b0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80045b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045b6:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80045b8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 80045ba:	b1df      	cbz	r7, 80045f4 <RCCEx_PLL3_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80045bc:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80045be:	bf0c      	ite	eq
 80045c0:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80045c4:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 80045c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80045ca:	4c0c      	ldr	r4, [pc, #48]	@ (80045fc <RCCEx_PLL3_Config.part.0+0xdc>)
 80045cc:	6823      	ldr	r3, [r4, #0]
 80045ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045d2:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045d4:	f7fd fa1c 	bl	8001a10 <HAL_GetTick>
 80045d8:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80045da:	e004      	b.n	80045e6 <RCCEx_PLL3_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80045dc:	f7fd fa18 	bl	8001a10 <HAL_GetTick>
 80045e0:	1b40      	subs	r0, r0, r5
 80045e2:	2802      	cmp	r0, #2
 80045e4:	d804      	bhi.n	80045f0 <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80045e6:	6823      	ldr	r3, [r4, #0]
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	d5f7      	bpl.n	80045dc <RCCEx_PLL3_Config.part.0+0xbc>
    }

  }


  return status;
 80045ec:	2000      	movs	r0, #0
}
 80045ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80045f0:	2003      	movs	r0, #3
}
 80045f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80045f4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80045f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80045fa:	e7e6      	b.n	80045ca <RCCEx_PLL3_Config.part.0+0xaa>
 80045fc:	58024400 	.word	0x58024400
 8004600:	ffff0007 	.word	0xffff0007

08004604 <HAL_RCCEx_PeriphCLKConfig>:
{
 8004604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004608:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 800460c:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800460e:	011d      	lsls	r5, r3, #4
 8004610:	f003 6600 	and.w	r6, r3, #134217728	@ 0x8000000
 8004614:	d525      	bpl.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8004616:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 8004618:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800461c:	f000 8683 	beq.w	8005326 <HAL_RCCEx_PeriphCLKConfig+0xd22>
 8004620:	d814      	bhi.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x48>
 8004622:	2900      	cmp	r1, #0
 8004624:	f000 86f9 	beq.w	800541a <HAL_RCCEx_PeriphCLKConfig+0xe16>
 8004628:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800462c:	f040 841b 	bne.w	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x862>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004630:	49ad      	ldr	r1, [pc, #692]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004632:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004634:	f001 0103 	and.w	r1, r1, #3
 8004638:	2903      	cmp	r1, #3
 800463a:	f000 8414 	beq.w	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x862>
 800463e:	2102      	movs	r1, #2
 8004640:	3008      	adds	r0, #8
 8004642:	f7ff fefb 	bl	800443c <RCCEx_PLL2_Config.part.0>
 8004646:	4606      	mov	r6, r0
 8004648:	f000 be79 	b.w	800533e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800464c:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 8004650:	f040 8409 	bne.w	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x862>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004654:	4da4      	ldr	r5, [pc, #656]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004656:	2600      	movs	r6, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004658:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 800465a:	f420 1040 	bic.w	r0, r0, #3145728	@ 0x300000
 800465e:	4301      	orrs	r1, r0
 8004660:	6529      	str	r1, [r5, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004662:	05d8      	lsls	r0, r3, #23
 8004664:	d50a      	bpl.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x78>
    switch (PeriphClkInit->Sai1ClockSelection)
 8004666:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8004668:	2904      	cmp	r1, #4
 800466a:	d806      	bhi.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800466c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004670:	062504ce 	.word	0x062504ce
 8004674:	04d3063a 	.word	0x04d3063a
 8004678:	04d3      	.short	0x04d3
        ret = HAL_ERROR;
 800467a:	2601      	movs	r6, #1
 800467c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800467e:	0599      	lsls	r1, r3, #22
 8004680:	d524      	bpl.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0xc8>
    switch (PeriphClkInit->Sai23ClockSelection)
 8004682:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8004684:	2980      	cmp	r1, #128	@ 0x80
 8004686:	f000 863d 	beq.w	8005304 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800468a:	f200 8122 	bhi.w	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800468e:	2900      	cmp	r1, #0
 8004690:	f000 84a6 	beq.w	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x9dc>
 8004694:	2940      	cmp	r1, #64	@ 0x40
 8004696:	f040 8123 	bne.w	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800469a:	4993      	ldr	r1, [pc, #588]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800469c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800469e:	f001 0103 	and.w	r1, r1, #3
 80046a2:	2903      	cmp	r1, #3
 80046a4:	f000 811c 	beq.w	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 80046a8:	2100      	movs	r1, #0
 80046aa:	f104 0008 	add.w	r0, r4, #8
 80046ae:	f7ff fec5 	bl	800443c <RCCEx_PLL2_Config.part.0>
 80046b2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80046b4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80046b8:	2d00      	cmp	r5, #0
 80046ba:	f040 8499 	bne.w	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80046be:	4f8a      	ldr	r7, [pc, #552]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80046c0:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 80046c2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80046c4:	f421 71e0 	bic.w	r1, r1, #448	@ 0x1c0
 80046c8:	4301      	orrs	r1, r0
 80046ca:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80046cc:	055f      	lsls	r7, r3, #21
 80046ce:	d528      	bpl.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    switch (PeriphClkInit->Sai4AClockSelection)
 80046d0:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
 80046d4:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 80046d8:	f000 85de 	beq.w	8005298 <HAL_RCCEx_PeriphCLKConfig+0xc94>
 80046dc:	f200 8106 	bhi.w	80048ec <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 80046e0:	2900      	cmp	r1, #0
 80046e2:	f000 8472 	beq.w	8004fca <HAL_RCCEx_PeriphCLKConfig+0x9c6>
 80046e6:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80046ea:	f040 8107 	bne.w	80048fc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80046ee:	497e      	ldr	r1, [pc, #504]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80046f0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80046f2:	f001 0103 	and.w	r1, r1, #3
 80046f6:	2903      	cmp	r1, #3
 80046f8:	f000 8100 	beq.w	80048fc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 80046fc:	2100      	movs	r1, #0
 80046fe:	f104 0008 	add.w	r0, r4, #8
 8004702:	f7ff fe9b 	bl	800443c <RCCEx_PLL2_Config.part.0>
 8004706:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004708:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800470c:	2d00      	cmp	r5, #0
 800470e:	f040 8464 	bne.w	8004fda <HAL_RCCEx_PeriphCLKConfig+0x9d6>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004712:	4f75      	ldr	r7, [pc, #468]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004714:	f8d4 00a8 	ldr.w	r0, [r4, #168]	@ 0xa8
 8004718:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800471a:	f421 0160 	bic.w	r1, r1, #14680064	@ 0xe00000
 800471e:	4301      	orrs	r1, r0
 8004720:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004722:	0518      	lsls	r0, r3, #20
 8004724:	d528      	bpl.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x174>
    switch (PeriphClkInit->Sai4BClockSelection)
 8004726:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 800472a:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
 800472e:	f000 85a2 	beq.w	8005276 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8004732:	f200 80e6 	bhi.w	8004902 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8004736:	2900      	cmp	r1, #0
 8004738:	f000 847a 	beq.w	8005030 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 800473c:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 8004740:	f040 80e7 	bne.w	8004912 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004744:	4968      	ldr	r1, [pc, #416]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004746:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004748:	f001 0103 	and.w	r1, r1, #3
 800474c:	2903      	cmp	r1, #3
 800474e:	f000 80e0 	beq.w	8004912 <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8004752:	2100      	movs	r1, #0
 8004754:	f104 0008 	add.w	r0, r4, #8
 8004758:	f7ff fe70 	bl	800443c <RCCEx_PLL2_Config.part.0>
 800475c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800475e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004762:	2d00      	cmp	r5, #0
 8004764:	f040 846c 	bne.w	8005040 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004768:	4f5f      	ldr	r7, [pc, #380]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800476a:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 800476e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004770:	f021 61e0 	bic.w	r1, r1, #117440512	@ 0x7000000
 8004774:	4301      	orrs	r1, r0
 8004776:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004778:	0199      	lsls	r1, r3, #6
 800477a:	d518      	bpl.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    switch (PeriphClkInit->QspiClockSelection)
 800477c:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 800477e:	2920      	cmp	r1, #32
 8004780:	f000 84bb 	beq.w	80050fa <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 8004784:	f200 80c8 	bhi.w	8004918 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8004788:	b139      	cbz	r1, 800479a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800478a:	2910      	cmp	r1, #16
 800478c:	f040 80c7 	bne.w	800491e <HAL_RCCEx_PeriphCLKConfig+0x31a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004790:	4855      	ldr	r0, [pc, #340]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004792:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8004794:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8004798:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800479a:	2d00      	cmp	r5, #0
 800479c:	f040 8492 	bne.w	80050c4 <HAL_RCCEx_PeriphCLKConfig+0xac0>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80047a0:	4f51      	ldr	r7, [pc, #324]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80047a2:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 80047a4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80047a6:	f021 0130 	bic.w	r1, r1, #48	@ 0x30
 80047aa:	4301      	orrs	r1, r0
 80047ac:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80047ae:	04df      	lsls	r7, r3, #19
 80047b0:	d526      	bpl.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    switch (PeriphClkInit->Spi123ClockSelection)
 80047b2:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 80047b4:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 80047b8:	f000 854c 	beq.w	8005254 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 80047bc:	f200 80b2 	bhi.w	8004924 <HAL_RCCEx_PeriphCLKConfig+0x320>
 80047c0:	2900      	cmp	r1, #0
 80047c2:	f000 8418 	beq.w	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 80047c6:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 80047ca:	f040 80b3 	bne.w	8004934 <HAL_RCCEx_PeriphCLKConfig+0x330>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80047ce:	4946      	ldr	r1, [pc, #280]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80047d0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80047d2:	f001 0103 	and.w	r1, r1, #3
 80047d6:	2903      	cmp	r1, #3
 80047d8:	f000 80ac 	beq.w	8004934 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80047dc:	2100      	movs	r1, #0
 80047de:	f104 0008 	add.w	r0, r4, #8
 80047e2:	f7ff fe2b 	bl	800443c <RCCEx_PLL2_Config.part.0>
 80047e6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80047e8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80047ec:	2d00      	cmp	r5, #0
 80047ee:	f040 840a 	bne.w	8005006 <HAL_RCCEx_PeriphCLKConfig+0xa02>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80047f2:	4f3d      	ldr	r7, [pc, #244]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80047f4:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 80047f6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80047f8:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 80047fc:	4301      	orrs	r1, r0
 80047fe:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004800:	0498      	lsls	r0, r3, #18
 8004802:	d524      	bpl.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x24a>
    switch (PeriphClkInit->Spi45ClockSelection)
 8004804:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8004806:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 800480a:	f000 84e8 	beq.w	80051de <HAL_RCCEx_PeriphCLKConfig+0xbda>
 800480e:	f200 8094 	bhi.w	800493a <HAL_RCCEx_PeriphCLKConfig+0x336>
 8004812:	b191      	cbz	r1, 800483a <HAL_RCCEx_PeriphCLKConfig+0x236>
 8004814:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8004818:	f040 8099 	bne.w	800494e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800481c:	4932      	ldr	r1, [pc, #200]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800481e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004820:	f001 0103 	and.w	r1, r1, #3
 8004824:	2903      	cmp	r1, #3
 8004826:	f000 8092 	beq.w	800494e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800482a:	2101      	movs	r1, #1
 800482c:	f104 0008 	add.w	r0, r4, #8
 8004830:	f7ff fe04 	bl	800443c <RCCEx_PLL2_Config.part.0>
 8004834:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004836:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800483a:	2d00      	cmp	r5, #0
 800483c:	f040 8590 	bne.w	8005360 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004840:	4f29      	ldr	r7, [pc, #164]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004842:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8004844:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004846:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 800484a:	4301      	orrs	r1, r0
 800484c:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800484e:	0459      	lsls	r1, r3, #17
 8004850:	d523      	bpl.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x296>
    switch (PeriphClkInit->Spi6ClockSelection)
 8004852:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 8004856:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 800485a:	f000 8474 	beq.w	8005146 <HAL_RCCEx_PeriphCLKConfig+0xb42>
 800485e:	d879      	bhi.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8004860:	b181      	cbz	r1, 8004884 <HAL_RCCEx_PeriphCLKConfig+0x280>
 8004862:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 8004866:	d17d      	bne.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x360>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004868:	491f      	ldr	r1, [pc, #124]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800486a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800486c:	f001 0103 	and.w	r1, r1, #3
 8004870:	2903      	cmp	r1, #3
 8004872:	d077      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004874:	2101      	movs	r1, #1
 8004876:	f104 0008 	add.w	r0, r4, #8
 800487a:	f7ff fddf 	bl	800443c <RCCEx_PLL2_Config.part.0>
 800487e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004880:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004884:	2d00      	cmp	r5, #0
 8004886:	f040 8565 	bne.w	8005354 <HAL_RCCEx_PeriphCLKConfig+0xd50>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800488a:	4f17      	ldr	r7, [pc, #92]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800488c:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8004890:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004892:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 8004896:	4301      	orrs	r1, r0
 8004898:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800489a:	041f      	lsls	r7, r3, #16
 800489c:	d50d      	bpl.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    switch (PeriphClkInit->FdcanClockSelection)
 800489e:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 80048a0:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 80048a4:	f000 829a 	beq.w	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x7d8>
 80048a8:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 80048ac:	f000 83f5 	beq.w	800509a <HAL_RCCEx_PeriphCLKConfig+0xa96>
 80048b0:	2900      	cmp	r1, #0
 80048b2:	f000 8298 	beq.w	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
        ret = HAL_ERROR;
 80048b6:	2601      	movs	r6, #1
 80048b8:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80048ba:	01d8      	lsls	r0, r3, #7
 80048bc:	d564      	bpl.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x384>
    switch (PeriphClkInit->FmcClockSelection)
 80048be:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80048c0:	2903      	cmp	r1, #3
 80048c2:	f200 85b9 	bhi.w	8005438 <HAL_RCCEx_PeriphCLKConfig+0xe34>
 80048c6:	e8df f011 	tbh	[pc, r1, lsl #1]
 80048ca:	0055      	.short	0x0055
 80048cc:	04050050 	.word	0x04050050
 80048d0:	0055      	.short	0x0055
    switch (PeriphClkInit->Sai23ClockSelection)
 80048d2:	29c0      	cmp	r1, #192	@ 0xc0
 80048d4:	f43f aef0 	beq.w	80046b8 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80048d8:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80048dc:	f43f aeec 	beq.w	80046b8 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        ret = HAL_ERROR;
 80048e0:	2601      	movs	r6, #1
 80048e2:	4635      	mov	r5, r6
 80048e4:	e6f2      	b.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0xc8>
 80048e6:	bf00      	nop
 80048e8:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Sai4AClockSelection)
 80048ec:	f5b1 0fc0 	cmp.w	r1, #6291456	@ 0x600000
 80048f0:	f43f af0c 	beq.w	800470c <HAL_RCCEx_PeriphCLKConfig+0x108>
 80048f4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80048f8:	f43f af08 	beq.w	800470c <HAL_RCCEx_PeriphCLKConfig+0x108>
        ret = HAL_ERROR;
 80048fc:	2601      	movs	r6, #1
 80048fe:	4635      	mov	r5, r6
 8004900:	e70f      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    switch (PeriphClkInit->Sai4BClockSelection)
 8004902:	f1b1 7f40 	cmp.w	r1, #50331648	@ 0x3000000
 8004906:	f43f af2c 	beq.w	8004762 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800490a:	f1b1 6f80 	cmp.w	r1, #67108864	@ 0x4000000
 800490e:	f43f af28 	beq.w	8004762 <HAL_RCCEx_PeriphCLKConfig+0x15e>
        ret = HAL_ERROR;
 8004912:	2601      	movs	r6, #1
 8004914:	4635      	mov	r5, r6
 8004916:	e72f      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x174>
    switch (PeriphClkInit->QspiClockSelection)
 8004918:	2930      	cmp	r1, #48	@ 0x30
 800491a:	f43f af3e 	beq.w	800479a <HAL_RCCEx_PeriphCLKConfig+0x196>
        ret = HAL_ERROR;
 800491e:	2601      	movs	r6, #1
 8004920:	4635      	mov	r5, r6
 8004922:	e744      	b.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    switch (PeriphClkInit->Spi123ClockSelection)
 8004924:	f5b1 5f40 	cmp.w	r1, #12288	@ 0x3000
 8004928:	f43f af60 	beq.w	80047ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800492c:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 8004930:	f43f af5c 	beq.w	80047ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
        ret = HAL_ERROR;
 8004934:	2601      	movs	r6, #1
 8004936:	4635      	mov	r5, r6
 8004938:	e762      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    switch (PeriphClkInit->Spi45ClockSelection)
 800493a:	f421 3080 	bic.w	r0, r1, #65536	@ 0x10000
 800493e:	f5b0 2f80 	cmp.w	r0, #262144	@ 0x40000
 8004942:	f43f af7a 	beq.w	800483a <HAL_RCCEx_PeriphCLKConfig+0x236>
 8004946:	f5b1 3f40 	cmp.w	r1, #196608	@ 0x30000
 800494a:	f43f af76 	beq.w	800483a <HAL_RCCEx_PeriphCLKConfig+0x236>
        ret = HAL_ERROR;
 800494e:	2601      	movs	r6, #1
 8004950:	4635      	mov	r5, r6
 8004952:	e77c      	b.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x24a>
    switch (PeriphClkInit->Spi6ClockSelection)
 8004954:	f021 5080 	bic.w	r0, r1, #268435456	@ 0x10000000
 8004958:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800495c:	d092      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x280>
 800495e:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 8004962:	d08f      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x280>
        ret = HAL_ERROR;
 8004964:	2601      	movs	r6, #1
 8004966:	4635      	mov	r5, r6
 8004968:	e797      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x296>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800496a:	483d      	ldr	r0, [pc, #244]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800496c:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800496e:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8004972:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8004974:	2d00      	cmp	r5, #0
 8004976:	f040 83a3 	bne.w	80050c0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800497a:	4f39      	ldr	r7, [pc, #228]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800497c:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 800497e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004980:	f021 0103 	bic.w	r1, r1, #3
 8004984:	4301      	orrs	r1, r0
 8004986:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004988:	0259      	lsls	r1, r3, #9
 800498a:	f100 826f 	bmi.w	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x868>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800498e:	07d8      	lsls	r0, r3, #31
 8004990:	d52f      	bpl.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
    switch (PeriphClkInit->Usart16ClockSelection)
 8004992:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 8004994:	2928      	cmp	r1, #40	@ 0x28
 8004996:	d82a      	bhi.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8004998:	e8df f011 	tbh	[pc, r1, lsl #1]
 800499c:	0029025a 	.word	0x0029025a
 80049a0:	00290029 	.word	0x00290029
 80049a4:	00290029 	.word	0x00290029
 80049a8:	00290029 	.word	0x00290029
 80049ac:	0029024b 	.word	0x0029024b
 80049b0:	00290029 	.word	0x00290029
 80049b4:	00290029 	.word	0x00290029
 80049b8:	00290029 	.word	0x00290029
 80049bc:	00290518 	.word	0x00290518
 80049c0:	00290029 	.word	0x00290029
 80049c4:	00290029 	.word	0x00290029
 80049c8:	00290029 	.word	0x00290029
 80049cc:	0029025a 	.word	0x0029025a
 80049d0:	00290029 	.word	0x00290029
 80049d4:	00290029 	.word	0x00290029
 80049d8:	00290029 	.word	0x00290029
 80049dc:	0029025a 	.word	0x0029025a
 80049e0:	00290029 	.word	0x00290029
 80049e4:	00290029 	.word	0x00290029
 80049e8:	00290029 	.word	0x00290029
 80049ec:	025a      	.short	0x025a
        ret = HAL_ERROR;
 80049ee:	2601      	movs	r6, #1
 80049f0:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80049f2:	0799      	lsls	r1, r3, #30
 80049f4:	d524      	bpl.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    switch (PeriphClkInit->Usart234578ClockSelection)
 80049f6:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 80049f8:	2905      	cmp	r1, #5
 80049fa:	f200 8515 	bhi.w	8005428 <HAL_RCCEx_PeriphCLKConfig+0xe24>
 80049fe:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004a02:	0015      	.short	0x0015
 8004a04:	04c10006 	.word	0x04c10006
 8004a08:	00150015 	.word	0x00150015
 8004a0c:	0015      	.short	0x0015
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a0e:	4914      	ldr	r1, [pc, #80]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a10:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004a12:	f001 0103 	and.w	r1, r1, #3
 8004a16:	2903      	cmp	r1, #3
 8004a18:	f000 8506 	beq.w	8005428 <HAL_RCCEx_PeriphCLKConfig+0xe24>
 8004a1c:	2101      	movs	r1, #1
 8004a1e:	f104 0008 	add.w	r0, r4, #8
 8004a22:	f7ff fd0b 	bl	800443c <RCCEx_PLL2_Config.part.0>
 8004a26:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a28:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004a2c:	2d00      	cmp	r5, #0
 8004a2e:	f040 8494 	bne.w	800535a <HAL_RCCEx_PeriphCLKConfig+0xd56>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004a32:	4f0b      	ldr	r7, [pc, #44]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a34:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8004a36:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004a38:	f021 0107 	bic.w	r1, r1, #7
 8004a3c:	4301      	orrs	r1, r0
 8004a3e:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a40:	075f      	lsls	r7, r3, #29
 8004a42:	d529      	bpl.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x494>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004a44:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8004a48:	2905      	cmp	r1, #5
 8004a4a:	f200 84f1 	bhi.w	8005430 <HAL_RCCEx_PeriphCLKConfig+0xe2c>
 8004a4e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004a52:	0018      	.short	0x0018
 8004a54:	04ab0009 	.word	0x04ab0009
 8004a58:	00180018 	.word	0x00180018
 8004a5c:	0018      	.short	0x0018
 8004a5e:	bf00      	nop
 8004a60:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a64:	49ae      	ldr	r1, [pc, #696]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004a66:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004a68:	f001 0103 	and.w	r1, r1, #3
 8004a6c:	2903      	cmp	r1, #3
 8004a6e:	f000 84df 	beq.w	8005430 <HAL_RCCEx_PeriphCLKConfig+0xe2c>
 8004a72:	2101      	movs	r1, #1
 8004a74:	f104 0008 	add.w	r0, r4, #8
 8004a78:	f7ff fce0 	bl	800443c <RCCEx_PLL2_Config.part.0>
 8004a7c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a7e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004a82:	2d00      	cmp	r5, #0
 8004a84:	f040 8463 	bne.w	800534e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a88:	4fa5      	ldr	r7, [pc, #660]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004a8a:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 8004a8e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004a90:	f021 0107 	bic.w	r1, r1, #7
 8004a94:	4301      	orrs	r1, r0
 8004a96:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a98:	0698      	lsls	r0, r3, #26
 8004a9a:	d526      	bpl.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x4e6>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004a9c:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 8004aa0:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8004aa4:	f000 833c 	beq.w	8005120 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004aa8:	f200 813c 	bhi.w	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x720>
 8004aac:	b191      	cbz	r1, 8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004aae:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 8004ab2:	f040 8141 	bne.w	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x734>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004ab6:	499a      	ldr	r1, [pc, #616]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004ab8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004aba:	f001 0103 	and.w	r1, r1, #3
 8004abe:	2903      	cmp	r1, #3
 8004ac0:	f000 813a 	beq.w	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x734>
 8004ac4:	2100      	movs	r1, #0
 8004ac6:	f104 0008 	add.w	r0, r4, #8
 8004aca:	f7ff fcb7 	bl	800443c <RCCEx_PLL2_Config.part.0>
 8004ace:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004ad0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004ad4:	2d00      	cmp	r5, #0
 8004ad6:	f040 8448 	bne.w	800536a <HAL_RCCEx_PeriphCLKConfig+0xd66>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ada:	4f91      	ldr	r7, [pc, #580]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004adc:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8004ae0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004ae2:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 8004ae6:	4301      	orrs	r1, r0
 8004ae8:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004aea:	0659      	lsls	r1, r3, #25
 8004aec:	d526      	bpl.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x538>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004aee:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 8004af2:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8004af6:	f000 834c 	beq.w	8005192 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8004afa:	f200 8120 	bhi.w	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8004afe:	b191      	cbz	r1, 8004b26 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004b00:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8004b04:	f040 8125 	bne.w	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x74e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004b08:	4985      	ldr	r1, [pc, #532]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004b0a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004b0c:	f001 0103 	and.w	r1, r1, #3
 8004b10:	2903      	cmp	r1, #3
 8004b12:	f000 811e 	beq.w	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x74e>
 8004b16:	2100      	movs	r1, #0
 8004b18:	f104 0008 	add.w	r0, r4, #8
 8004b1c:	f7ff fc8e 	bl	800443c <RCCEx_PLL2_Config.part.0>
 8004b20:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004b22:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004b26:	2d00      	cmp	r5, #0
 8004b28:	f040 8422 	bne.w	8005370 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b2c:	4f7c      	ldr	r7, [pc, #496]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004b2e:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 8004b32:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004b34:	f421 51e0 	bic.w	r1, r1, #7168	@ 0x1c00
 8004b38:	4301      	orrs	r1, r0
 8004b3a:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004b3c:	061f      	lsls	r7, r3, #24
 8004b3e:	d526      	bpl.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x58a>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004b40:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 8004b44:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 8004b48:	f000 8336 	beq.w	80051b8 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8004b4c:	f200 8104 	bhi.w	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8004b50:	b191      	cbz	r1, 8004b78 <HAL_RCCEx_PeriphCLKConfig+0x574>
 8004b52:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8004b56:	f040 8109 	bne.w	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x768>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004b5a:	4971      	ldr	r1, [pc, #452]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004b5c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004b5e:	f001 0103 	and.w	r1, r1, #3
 8004b62:	2903      	cmp	r1, #3
 8004b64:	f000 8102 	beq.w	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x768>
 8004b68:	2100      	movs	r1, #0
 8004b6a:	f104 0008 	add.w	r0, r4, #8
 8004b6e:	f7ff fc65 	bl	800443c <RCCEx_PLL2_Config.part.0>
 8004b72:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004b74:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004b78:	2d00      	cmp	r5, #0
 8004b7a:	f040 83f4 	bne.w	8005366 <HAL_RCCEx_PeriphCLKConfig+0xd62>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004b7e:	4f68      	ldr	r7, [pc, #416]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004b80:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
 8004b84:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004b86:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 8004b8a:	4301      	orrs	r1, r0
 8004b8c:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004b8e:	0718      	lsls	r0, r3, #28
 8004b90:	d50b      	bpl.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004b92:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8004b96:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8004b9a:	f000 8347 	beq.w	800522c <HAL_RCCEx_PeriphCLKConfig+0xc28>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004b9e:	4f60      	ldr	r7, [pc, #384]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004ba0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004ba2:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 8004ba6:	4301      	orrs	r1, r0
 8004ba8:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004baa:	06d9      	lsls	r1, r3, #27
 8004bac:	d50b      	bpl.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004bae:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 8004bb2:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8004bb6:	f000 8325 	beq.w	8005204 <HAL_RCCEx_PeriphCLKConfig+0xc00>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004bba:	4f59      	ldr	r7, [pc, #356]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004bbc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004bbe:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
 8004bc2:	4301      	orrs	r1, r0
 8004bc4:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004bc6:	031f      	lsls	r7, r3, #12
 8004bc8:	d50e      	bpl.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    switch (PeriphClkInit->AdcClockSelection)
 8004bca:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
 8004bce:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8004bd2:	f000 8113 	beq.w	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x7f8>
 8004bd6:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 8004bda:	f000 811e 	beq.w	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x816>
 8004bde:	2900      	cmp	r1, #0
 8004be0:	f000 8249 	beq.w	8005076 <HAL_RCCEx_PeriphCLKConfig+0xa72>
        ret = HAL_ERROR;
 8004be4:	2601      	movs	r6, #1
 8004be6:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004be8:	0358      	lsls	r0, r3, #13
 8004bea:	d50f      	bpl.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x608>
    switch (PeriphClkInit->UsbClockSelection)
 8004bec:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 8004bf0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8004bf4:	f000 82ba 	beq.w	800516c <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8004bf8:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 8004bfc:	f000 80e2 	beq.w	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8004c00:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8004c04:	f000 80d9 	beq.w	8004dba <HAL_RCCEx_PeriphCLKConfig+0x7b6>
        ret = HAL_ERROR;
 8004c08:	2601      	movs	r6, #1
 8004c0a:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004c0c:	03d9      	lsls	r1, r3, #15
 8004c0e:	d520      	bpl.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x64e>
    switch (PeriphClkInit->SdmmcClockSelection)
 8004c10:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8004c12:	2900      	cmp	r1, #0
 8004c14:	f000 8217 	beq.w	8005046 <HAL_RCCEx_PeriphCLKConfig+0xa42>
 8004c18:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8004c1c:	f040 80b6 	bne.w	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x788>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c20:	493f      	ldr	r1, [pc, #252]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004c22:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004c24:	f001 0103 	and.w	r1, r1, #3
 8004c28:	2903      	cmp	r1, #3
 8004c2a:	f000 80af 	beq.w	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x788>
 8004c2e:	2102      	movs	r1, #2
 8004c30:	f104 0008 	add.w	r0, r4, #8
 8004c34:	f7ff fc02 	bl	800443c <RCCEx_PLL2_Config.part.0>
 8004c38:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004c3a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004c3e:	2d00      	cmp	r5, #0
 8004c40:	f040 8209 	bne.w	8005056 <HAL_RCCEx_PeriphCLKConfig+0xa52>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004c44:	4f36      	ldr	r7, [pc, #216]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004c46:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8004c48:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004c4a:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8004c4e:	4301      	orrs	r1, r0
 8004c50:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004c52:	009f      	lsls	r7, r3, #2
 8004c54:	f100 809f 	bmi.w	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x792>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004c58:	0398      	lsls	r0, r3, #14
 8004c5a:	f140 8095 	bpl.w	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x784>
    switch (PeriphClkInit->RngClockSelection)
 8004c5e:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 8004c62:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8004c66:	f000 81fd 	beq.w	8005064 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8004c6a:	f240 8082 	bls.w	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x76e>
 8004c6e:	f421 7080 	bic.w	r0, r1, #256	@ 0x100
 8004c72:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8004c76:	d07e      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x772>
 8004c78:	2501      	movs	r5, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004c7a:	02d9      	lsls	r1, r3, #11
 8004c7c:	d506      	bpl.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x688>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004c7e:	4828      	ldr	r0, [pc, #160]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004c80:	6f66      	ldr	r6, [r4, #116]	@ 0x74
 8004c82:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8004c84:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8004c88:	4331      	orrs	r1, r6
 8004c8a:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004c8c:	00df      	lsls	r7, r3, #3
 8004c8e:	d507      	bpl.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004c90:	4823      	ldr	r0, [pc, #140]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004c92:	f8d4 60b8 	ldr.w	r6, [r4, #184]	@ 0xb8
 8004c96:	6901      	ldr	r1, [r0, #16]
 8004c98:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8004c9c:	4331      	orrs	r1, r6
 8004c9e:	6101      	str	r1, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ca0:	029e      	lsls	r6, r3, #10
 8004ca2:	d506      	bpl.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ca4:	481e      	ldr	r0, [pc, #120]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004ca6:	6ee6      	ldr	r6, [r4, #108]	@ 0x6c
 8004ca8:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8004caa:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 8004cae:	4331      	orrs	r1, r6
 8004cb0:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004cb2:	0058      	lsls	r0, r3, #1
 8004cb4:	d509      	bpl.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x6c6>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004cb6:	491a      	ldr	r1, [pc, #104]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004cb8:	6908      	ldr	r0, [r1, #16]
 8004cba:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 8004cbe:	6108      	str	r0, [r1, #16]
 8004cc0:	6908      	ldr	r0, [r1, #16]
 8004cc2:	f8d4 60bc 	ldr.w	r6, [r4, #188]	@ 0xbc
 8004cc6:	4330      	orrs	r0, r6
 8004cc8:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	da06      	bge.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004cce:	4814      	ldr	r0, [pc, #80]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004cd0:	6d66      	ldr	r6, [r4, #84]	@ 0x54
 8004cd2:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8004cd4:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 8004cd8:	4331      	orrs	r1, r6
 8004cda:	64c1      	str	r1, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004cdc:	0219      	lsls	r1, r3, #8
 8004cde:	d507      	bpl.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ce0:	490f      	ldr	r1, [pc, #60]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004ce2:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 8004ce6:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 8004ce8:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004cec:	4303      	orrs	r3, r0
 8004cee:	654b      	str	r3, [r1, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004cf0:	07d3      	lsls	r3, r2, #31
 8004cf2:	f100 810f 	bmi.w	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x910>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004cf6:	0797      	lsls	r7, r2, #30
 8004cf8:	f100 80fa 	bmi.w	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004cfc:	0756      	lsls	r6, r2, #29
 8004cfe:	f100 8140 	bmi.w	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x97e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004d02:	0710      	lsls	r0, r2, #28
 8004d04:	f100 812b 	bmi.w	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x95a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004d08:	06d1      	lsls	r1, r2, #27
 8004d0a:	f100 8115 	bmi.w	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x934>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004d0e:	0693      	lsls	r3, r2, #26
 8004d10:	f100 8149 	bmi.w	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
  if (status == HAL_OK)
 8004d14:	1e28      	subs	r0, r5, #0
 8004d16:	bf18      	it	ne
 8004d18:	2001      	movne	r0, #1
}
 8004d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d1e:	bf00      	nop
 8004d20:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004d24:	f021 5080 	bic.w	r0, r1, #268435456	@ 0x10000000
 8004d28:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8004d2c:	f43f aed2 	beq.w	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004d30:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 8004d34:	f43f aece 	beq.w	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        ret = HAL_ERROR;
 8004d38:	2601      	movs	r6, #1
 8004d3a:	4635      	mov	r5, r6
 8004d3c:	e6d5      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x4e6>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004d3e:	f421 6080 	bic.w	r0, r1, #1024	@ 0x400
 8004d42:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8004d46:	f43f aeee 	beq.w	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004d4a:	f5b1 6f40 	cmp.w	r1, #3072	@ 0xc00
 8004d4e:	f43f aeea 	beq.w	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x522>
        ret = HAL_ERROR;
 8004d52:	2601      	movs	r6, #1
 8004d54:	4635      	mov	r5, r6
 8004d56:	e6f1      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x538>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004d58:	f421 5000 	bic.w	r0, r1, #8192	@ 0x2000
 8004d5c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8004d60:	f43f af0a 	beq.w	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x574>
 8004d64:	f5b1 4fc0 	cmp.w	r1, #24576	@ 0x6000
 8004d68:	f43f af06 	beq.w	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x574>
        ret = HAL_ERROR;
 8004d6c:	2601      	movs	r6, #1
 8004d6e:	4635      	mov	r5, r6
 8004d70:	e70d      	b.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x58a>
    switch (PeriphClkInit->RngClockSelection)
 8004d72:	2900      	cmp	r1, #0
 8004d74:	d180      	bne.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x674>
    if (ret == HAL_OK)
 8004d76:	2d00      	cmp	r5, #0
 8004d78:	f47f af7f 	bne.w	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x676>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d7c:	4db7      	ldr	r5, [pc, #732]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 8004d7e:	6d68      	ldr	r0, [r5, #84]	@ 0x54
 8004d80:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 8004d84:	4301      	orrs	r1, r0
 8004d86:	6569      	str	r1, [r5, #84]	@ 0x54
      status = HAL_ERROR;
 8004d88:	4635      	mov	r5, r6
 8004d8a:	e776      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x676>
        ret = HAL_ERROR;
 8004d8c:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004d8e:	009f      	lsls	r7, r3, #2
        ret = HAL_ERROR;
 8004d90:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004d92:	f57f af61 	bpl.w	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x654>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d96:	49b1      	ldr	r1, [pc, #708]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 8004d98:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004d9a:	f001 0103 	and.w	r1, r1, #3
 8004d9e:	2903      	cmp	r1, #3
 8004da0:	d009      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x7b2>
 8004da2:	2102      	movs	r1, #2
 8004da4:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8004da8:	f7ff fbba 	bl	8004520 <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004dac:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004db0:	2800      	cmp	r0, #0
 8004db2:	f43f af51 	beq.w	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x654>
      status = HAL_ERROR;
 8004db6:	2601      	movs	r6, #1
 8004db8:	e74e      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x654>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dba:	48a8      	ldr	r0, [pc, #672]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 8004dbc:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8004dbe:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8004dc2:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8004dc4:	2d00      	cmp	r5, #0
 8004dc6:	f040 8183 	bne.w	80050d0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004dca:	4fa4      	ldr	r7, [pc, #656]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 8004dcc:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8004dd0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004dd2:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8004dd6:	4301      	orrs	r1, r0
 8004dd8:	6579      	str	r1, [r7, #84]	@ 0x54
 8004dda:	e717      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x608>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ddc:	489f      	ldr	r0, [pc, #636]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 8004dde:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8004de0:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8004de4:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8004de6:	2d00      	cmp	r5, #0
 8004de8:	f040 816f 	bne.w	80050ca <HAL_RCCEx_PeriphCLKConfig+0xac6>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004dec:	4f9b      	ldr	r7, [pc, #620]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 8004dee:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8004df0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004df2:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 8004df6:	4301      	orrs	r1, r0
 8004df8:	6539      	str	r1, [r7, #80]	@ 0x50
 8004dfa:	e55e      	b.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004dfc:	4997      	ldr	r1, [pc, #604]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 8004dfe:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004e00:	f001 0103 	and.w	r1, r1, #3
 8004e04:	2903      	cmp	r1, #3
 8004e06:	f43f aeed 	beq.w	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
 8004e0a:	2102      	movs	r1, #2
 8004e0c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8004e10:	f7ff fb86 	bl	8004520 <RCCEx_PLL3_Config.part.0>
 8004e14:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004e16:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004e1a:	2d00      	cmp	r5, #0
 8004e1c:	f040 82ab 	bne.w	8005376 <HAL_RCCEx_PeriphCLKConfig+0xd72>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e20:	4f8e      	ldr	r7, [pc, #568]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 8004e22:	f8d4 00a4 	ldr.w	r0, [r4, #164]	@ 0xa4
 8004e26:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004e28:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 8004e2c:	4301      	orrs	r1, r0
 8004e2e:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004e30:	e6da      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e32:	498a      	ldr	r1, [pc, #552]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 8004e34:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004e36:	f001 0103 	and.w	r1, r1, #3
 8004e3a:	2903      	cmp	r1, #3
 8004e3c:	f43f add7 	beq.w	80049ee <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8004e40:	2101      	movs	r1, #1
 8004e42:	f104 0008 	add.w	r0, r4, #8
 8004e46:	f7ff faf9 	bl	800443c <RCCEx_PLL2_Config.part.0>
 8004e4a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004e4c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004e50:	2d00      	cmp	r5, #0
 8004e52:	f040 8292 	bne.w	800537a <HAL_RCCEx_PeriphCLKConfig+0xd76>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004e56:	4f81      	ldr	r7, [pc, #516]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 8004e58:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8004e5a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004e5c:	f021 0138 	bic.w	r1, r1, #56	@ 0x38
 8004e60:	4301      	orrs	r1, r0
 8004e62:	6579      	str	r1, [r7, #84]	@ 0x54
 8004e64:	e5c5      	b.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
        ret = HAL_ERROR;
 8004e66:	2601      	movs	r6, #1
 8004e68:	f7ff bbfb 	b.w	8004662 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e6c:	4f7c      	ldr	r7, [pc, #496]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0xa5c>)
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e74:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8004e76:	f7fc fdcb 	bl	8001a10 <HAL_GetTick>
 8004e7a:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e7c:	e006      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x888>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e7e:	f7fc fdc7 	bl	8001a10 <HAL_GetTick>
 8004e82:	eba0 0008 	sub.w	r0, r0, r8
 8004e86:	2864      	cmp	r0, #100	@ 0x64
 8004e88:	f200 82b3 	bhi.w	80053f2 <HAL_RCCEx_PeriphCLKConfig+0xdee>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	05da      	lsls	r2, r3, #23
 8004e90:	d5f5      	bpl.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x87a>
    if (ret == HAL_OK)
 8004e92:	2d00      	cmp	r5, #0
 8004e94:	f040 82ae 	bne.w	80053f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004e98:	4a70      	ldr	r2, [pc, #448]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 8004e9a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8004e9e:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8004ea0:	4059      	eors	r1, r3
 8004ea2:	f411 7f40 	tst.w	r1, #768	@ 0x300
 8004ea6:	d00b      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ea8:	6f11      	ldr	r1, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8004eaa:	6f10      	ldr	r0, [r2, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004eac:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8004eb0:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 8004eb4:	6710      	str	r0, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004eb6:	6f10      	ldr	r0, [r2, #112]	@ 0x70
 8004eb8:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
 8004ebc:	6710      	str	r0, [r2, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 8004ebe:	6711      	str	r1, [r2, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004ec0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ec4:	f000 82c2 	beq.w	800544c <HAL_RCCEx_PeriphCLKConfig+0xe48>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ec8:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8004ecc:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8004ed0:	f000 82d0 	beq.w	8005474 <HAL_RCCEx_PeriphCLKConfig+0xe70>
 8004ed4:	4961      	ldr	r1, [pc, #388]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 8004ed6:	690a      	ldr	r2, [r1, #16]
 8004ed8:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 8004edc:	610a      	str	r2, [r1, #16]
 8004ede:	485f      	ldr	r0, [pc, #380]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 8004ee0:	f3c3 010b 	ubfx	r1, r3, #0, #12
 8004ee4:	6f07      	ldr	r7, [r0, #112]	@ 0x70
 8004ee6:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004ee8:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004eec:	6701      	str	r1, [r0, #112]	@ 0x70
 8004eee:	e54e      	b.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x38a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004ef0:	4b5a      	ldr	r3, [pc, #360]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 8004ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ef4:	f003 0303 	and.w	r3, r3, #3
 8004ef8:	2b03      	cmp	r3, #3
 8004efa:	f000 8280 	beq.w	80053fe <HAL_RCCEx_PeriphCLKConfig+0xdfa>
 8004efe:	2101      	movs	r1, #1
 8004f00:	f104 0008 	add.w	r0, r4, #8
 8004f04:	f7ff fa9a 	bl	800443c <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004f08:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004f0a:	2800      	cmp	r0, #0
 8004f0c:	f43f aef6 	beq.w	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004f10:	4605      	mov	r5, r0
 8004f12:	e6f3      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f14:	4b51      	ldr	r3, [pc, #324]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 8004f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f18:	f003 0303 	and.w	r3, r3, #3
 8004f1c:	2b03      	cmp	r3, #3
 8004f1e:	f000 827a 	beq.w	8005416 <HAL_RCCEx_PeriphCLKConfig+0xe12>
 8004f22:	2100      	movs	r1, #0
 8004f24:	f104 0008 	add.w	r0, r4, #8
 8004f28:	f7ff fa88 	bl	800443c <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004f2c:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004f2e:	2800      	cmp	r0, #0
 8004f30:	f43f aee1 	beq.w	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004f34:	4605      	mov	r5, r0
 8004f36:	e6de      	b.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f38:	4b48      	ldr	r3, [pc, #288]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0xa58>)
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f3a:	f104 0628 	add.w	r6, r4, #40	@ 0x28
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f40:	f003 0303 	and.w	r3, r3, #3
 8004f44:	2b03      	cmp	r3, #3
 8004f46:	f000 8260 	beq.w	800540a <HAL_RCCEx_PeriphCLKConfig+0xe06>
 8004f4a:	2101      	movs	r1, #1
 8004f4c:	4630      	mov	r0, r6
 8004f4e:	f7ff fae7 	bl	8004520 <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004f52:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004f54:	2800      	cmp	r0, #0
 8004f56:	f43f aeda 	beq.w	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x70a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004f5a:	4605      	mov	r5, r0
 8004f5c:	e256      	b.n	800540c <HAL_RCCEx_PeriphCLKConfig+0xe08>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f5e:	4b3f      	ldr	r3, [pc, #252]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 8004f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f62:	f003 0303 	and.w	r3, r3, #3
 8004f66:	2b03      	cmp	r3, #3
 8004f68:	f000 824d 	beq.w	8005406 <HAL_RCCEx_PeriphCLKConfig+0xe02>
 8004f6c:	2100      	movs	r1, #0
 8004f6e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8004f72:	f7ff fad5 	bl	8004520 <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004f76:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004f78:	2800      	cmp	r0, #0
 8004f7a:	f43f aec5 	beq.w	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x704>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004f7e:	4605      	mov	r5, r0
 8004f80:	e6c2      	b.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x704>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f82:	4b36      	ldr	r3, [pc, #216]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 8004f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f86:	f003 0303 	and.w	r3, r3, #3
 8004f8a:	2b03      	cmp	r3, #3
 8004f8c:	f000 8239 	beq.w	8005402 <HAL_RCCEx_PeriphCLKConfig+0xdfe>
 8004f90:	2102      	movs	r1, #2
 8004f92:	f104 0008 	add.w	r0, r4, #8
 8004f96:	f7ff fa51 	bl	800443c <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004f9a:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004f9c:	2800      	cmp	r0, #0
 8004f9e:	f43f aeb0 	beq.w	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004fa2:	4605      	mov	r5, r0
 8004fa4:	e6ad      	b.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004fa6:	f104 0628 	add.w	r6, r4, #40	@ 0x28
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004faa:	4b2c      	ldr	r3, [pc, #176]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 8004fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fae:	f003 0303 	and.w	r3, r3, #3
 8004fb2:	2b03      	cmp	r3, #3
 8004fb4:	d006      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>
 8004fb6:	2102      	movs	r1, #2
 8004fb8:	4630      	mov	r0, r6
 8004fba:	f7ff fab1 	bl	8004520 <RCCEx_PLL3_Config.part.0>
    if (ret == HAL_OK)
 8004fbe:	2800      	cmp	r0, #0
 8004fc0:	f43f aea8 	beq.w	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x710>
  return HAL_ERROR;
 8004fc4:	2001      	movs	r0, #1
}
 8004fc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fca:	4824      	ldr	r0, [pc, #144]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 8004fcc:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8004fce:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8004fd2:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8004fd4:	2d00      	cmp	r5, #0
 8004fd6:	f43f ab9c 	beq.w	8004712 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8004fda:	462e      	mov	r6, r5
 8004fdc:	f7ff bba1 	b.w	8004722 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fe0:	481e      	ldr	r0, [pc, #120]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 8004fe2:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8004fe4:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8004fe8:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8004fea:	2d00      	cmp	r5, #0
 8004fec:	f43f ab67 	beq.w	80046be <HAL_RCCEx_PeriphCLKConfig+0xba>
 8004ff0:	462e      	mov	r6, r5
 8004ff2:	f7ff bb6b 	b.w	80046cc <HAL_RCCEx_PeriphCLKConfig+0xc8>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ff6:	4819      	ldr	r0, [pc, #100]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 8004ff8:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8004ffa:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8004ffe:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8005000:	2d00      	cmp	r5, #0
 8005002:	f43f abf6 	beq.w	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005006:	462e      	mov	r6, r5
 8005008:	f7ff bbfa 	b.w	8004800 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800500c:	4813      	ldr	r0, [pc, #76]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 800500e:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8005010:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8005014:	62c1      	str	r1, [r0, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005016:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 8005018:	2d00      	cmp	r5, #0
 800501a:	f040 8160 	bne.w	80052de <HAL_RCCEx_PeriphCLKConfig+0xcda>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800501e:	4f0f      	ldr	r7, [pc, #60]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 8005020:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005022:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005024:	f021 0107 	bic.w	r1, r1, #7
 8005028:	4301      	orrs	r1, r0
 800502a:	6539      	str	r1, [r7, #80]	@ 0x50
 800502c:	f7ff bb27 	b.w	800467e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005030:	480a      	ldr	r0, [pc, #40]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 8005032:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8005034:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8005038:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800503a:	2d00      	cmp	r5, #0
 800503c:	f43f ab94 	beq.w	8004768 <HAL_RCCEx_PeriphCLKConfig+0x164>
 8005040:	462e      	mov	r6, r5
 8005042:	f7ff bb99 	b.w	8004778 <HAL_RCCEx_PeriphCLKConfig+0x174>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005046:	4805      	ldr	r0, [pc, #20]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 8005048:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800504a:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800504e:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8005050:	2d00      	cmp	r5, #0
 8005052:	f43f adf7 	beq.w	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x640>
 8005056:	462e      	mov	r6, r5
 8005058:	e5fb      	b.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800505a:	bf00      	nop
 800505c:	58024400 	.word	0x58024400
 8005060:	58024800 	.word	0x58024800
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005064:	4fc6      	ldr	r7, [pc, #792]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 8005066:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005068:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 800506c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (ret == HAL_OK)
 800506e:	2d00      	cmp	r5, #0
 8005070:	f47f ae03 	bne.w	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005074:	e682      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x778>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005076:	48c2      	ldr	r0, [pc, #776]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 8005078:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800507a:	f000 0003 	and.w	r0, r0, #3
 800507e:	2803      	cmp	r0, #3
 8005080:	f43f adb0 	beq.w	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
 8005084:	f104 0008 	add.w	r0, r4, #8
 8005088:	f7ff f9d8 	bl	800443c <RCCEx_PLL2_Config.part.0>
 800508c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800508e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005092:	2d00      	cmp	r5, #0
 8005094:	f43f aec4 	beq.w	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x81c>
 8005098:	e16d      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0xd72>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800509a:	49b9      	ldr	r1, [pc, #740]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 800509c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800509e:	f001 0103 	and.w	r1, r1, #3
 80050a2:	2903      	cmp	r1, #3
 80050a4:	f43f ac07 	beq.w	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
 80050a8:	2101      	movs	r1, #1
 80050aa:	f104 0008 	add.w	r0, r4, #8
 80050ae:	f7ff f9c5 	bl	800443c <RCCEx_PLL2_Config.part.0>
 80050b2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80050b4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80050b8:	2d00      	cmp	r5, #0
 80050ba:	f43f ae97 	beq.w	8004dec <HAL_RCCEx_PeriphCLKConfig+0x7e8>
 80050be:	e004      	b.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0xac6>
 80050c0:	462e      	mov	r6, r5
 80050c2:	e461      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80050c4:	462e      	mov	r6, r5
 80050c6:	f7ff bb72 	b.w	80047ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80050ca:	462e      	mov	r6, r5
 80050cc:	f7ff bbf5 	b.w	80048ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 80050d0:	462e      	mov	r6, r5
 80050d2:	e59b      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x608>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80050d4:	49aa      	ldr	r1, [pc, #680]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 80050d6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80050d8:	f001 0103 	and.w	r1, r1, #3
 80050dc:	2903      	cmp	r1, #3
 80050de:	f000 81ab 	beq.w	8005438 <HAL_RCCEx_PeriphCLKConfig+0xe34>
 80050e2:	2102      	movs	r1, #2
 80050e4:	f104 0008 	add.w	r0, r4, #8
 80050e8:	f7ff f9a8 	bl	800443c <RCCEx_PLL2_Config.part.0>
 80050ec:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80050ee:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80050f2:	2d00      	cmp	r5, #0
 80050f4:	f43f ac41 	beq.w	800497a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80050f8:	e7e2      	b.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80050fa:	49a1      	ldr	r1, [pc, #644]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 80050fc:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80050fe:	f001 0103 	and.w	r1, r1, #3
 8005102:	2903      	cmp	r1, #3
 8005104:	f43f ac0b 	beq.w	800491e <HAL_RCCEx_PeriphCLKConfig+0x31a>
 8005108:	2102      	movs	r1, #2
 800510a:	f104 0008 	add.w	r0, r4, #8
 800510e:	f7ff f995 	bl	800443c <RCCEx_PLL2_Config.part.0>
 8005112:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005114:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005118:	2d00      	cmp	r5, #0
 800511a:	f43f ab41 	beq.w	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800511e:	e7d1      	b.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0xac0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005120:	4997      	ldr	r1, [pc, #604]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 8005122:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005124:	f001 0103 	and.w	r1, r1, #3
 8005128:	2903      	cmp	r1, #3
 800512a:	f43f ae05 	beq.w	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x734>
 800512e:	2102      	movs	r1, #2
 8005130:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005134:	f7ff f9f4 	bl	8004520 <RCCEx_PLL3_Config.part.0>
 8005138:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800513a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800513e:	2d00      	cmp	r5, #0
 8005140:	f43f accb 	beq.w	8004ada <HAL_RCCEx_PeriphCLKConfig+0x4d6>
 8005144:	e111      	b.n	800536a <HAL_RCCEx_PeriphCLKConfig+0xd66>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005146:	498e      	ldr	r1, [pc, #568]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 8005148:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800514a:	f001 0103 	and.w	r1, r1, #3
 800514e:	2903      	cmp	r1, #3
 8005150:	f43f ac08 	beq.w	8004964 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005154:	2101      	movs	r1, #1
 8005156:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800515a:	f7ff f9e1 	bl	8004520 <RCCEx_PLL3_Config.part.0>
 800515e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005160:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005164:	2d00      	cmp	r5, #0
 8005166:	f43f ab90 	beq.w	800488a <HAL_RCCEx_PeriphCLKConfig+0x286>
 800516a:	e0f3      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0xd50>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800516c:	4984      	ldr	r1, [pc, #528]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 800516e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005170:	f001 0103 	and.w	r1, r1, #3
 8005174:	2903      	cmp	r1, #3
 8005176:	f43f ad47 	beq.w	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800517a:	2101      	movs	r1, #1
 800517c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005180:	f7ff f9ce 	bl	8004520 <RCCEx_PLL3_Config.part.0>
 8005184:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005186:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800518a:	2d00      	cmp	r5, #0
 800518c:	f43f ae1d 	beq.w	8004dca <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 8005190:	e79e      	b.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005192:	497b      	ldr	r1, [pc, #492]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 8005194:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005196:	f001 0103 	and.w	r1, r1, #3
 800519a:	2903      	cmp	r1, #3
 800519c:	f43f add9 	beq.w	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x74e>
 80051a0:	2102      	movs	r1, #2
 80051a2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80051a6:	f7ff f9bb 	bl	8004520 <RCCEx_PLL3_Config.part.0>
 80051aa:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80051ac:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80051b0:	2d00      	cmp	r5, #0
 80051b2:	f43f acbb 	beq.w	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x528>
 80051b6:	e0db      	b.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80051b8:	4971      	ldr	r1, [pc, #452]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 80051ba:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80051bc:	f001 0103 	and.w	r1, r1, #3
 80051c0:	2903      	cmp	r1, #3
 80051c2:	f43f add3 	beq.w	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x768>
 80051c6:	2102      	movs	r1, #2
 80051c8:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80051cc:	f7ff f9a8 	bl	8004520 <RCCEx_PLL3_Config.part.0>
 80051d0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80051d2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80051d6:	2d00      	cmp	r5, #0
 80051d8:	f43f acd1 	beq.w	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80051dc:	e0c3      	b.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80051de:	4968      	ldr	r1, [pc, #416]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 80051e0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80051e2:	f001 0103 	and.w	r1, r1, #3
 80051e6:	2903      	cmp	r1, #3
 80051e8:	f43f abb1 	beq.w	800494e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80051ec:	2101      	movs	r1, #1
 80051ee:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80051f2:	f7ff f995 	bl	8004520 <RCCEx_PLL3_Config.part.0>
 80051f6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80051f8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80051fc:	2d00      	cmp	r5, #0
 80051fe:	f43f ab1f 	beq.w	8004840 <HAL_RCCEx_PeriphCLKConfig+0x23c>
 8005202:	e0ad      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005204:	495e      	ldr	r1, [pc, #376]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 8005206:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005208:	f001 0103 	and.w	r1, r1, #3
 800520c:	2903      	cmp	r1, #3
 800520e:	f000 811a 	beq.w	8005446 <HAL_RCCEx_PeriphCLKConfig+0xe42>
 8005212:	2102      	movs	r1, #2
 8005214:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005218:	f7ff f982 	bl	8004520 <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800521c:	2800      	cmp	r0, #0
 800521e:	f040 8139 	bne.w	8005494 <HAL_RCCEx_PeriphCLKConfig+0xe90>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005222:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005226:	e9d4 3200 	ldrd	r3, r2, [r4]
 800522a:	e4c6      	b.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800522c:	4954      	ldr	r1, [pc, #336]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 800522e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005230:	f001 0103 	and.w	r1, r1, #3
 8005234:	2903      	cmp	r1, #3
 8005236:	f000 8103 	beq.w	8005440 <HAL_RCCEx_PeriphCLKConfig+0xe3c>
 800523a:	2102      	movs	r1, #2
 800523c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005240:	f7ff f96e 	bl	8004520 <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005244:	2800      	cmp	r0, #0
 8005246:	f040 812c 	bne.w	80054a2 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800524a:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800524e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005252:	e4a4      	b.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x59a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005254:	494a      	ldr	r1, [pc, #296]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 8005256:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005258:	f001 0103 	and.w	r1, r1, #3
 800525c:	2903      	cmp	r1, #3
 800525e:	f43f ab69 	beq.w	8004934 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8005262:	2100      	movs	r1, #0
 8005264:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005268:	f7ff f95a 	bl	8004520 <RCCEx_PLL3_Config.part.0>
 800526c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800526e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005272:	f7ff babb 	b.w	80047ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005276:	4942      	ldr	r1, [pc, #264]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 8005278:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800527a:	f001 0103 	and.w	r1, r1, #3
 800527e:	2903      	cmp	r1, #3
 8005280:	f43f ab47 	beq.w	8004912 <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8005284:	2100      	movs	r1, #0
 8005286:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800528a:	f7ff f949 	bl	8004520 <RCCEx_PLL3_Config.part.0>
 800528e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005290:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005294:	f7ff ba65 	b.w	8004762 <HAL_RCCEx_PeriphCLKConfig+0x15e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005298:	4939      	ldr	r1, [pc, #228]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 800529a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800529c:	f001 0103 	and.w	r1, r1, #3
 80052a0:	2903      	cmp	r1, #3
 80052a2:	f43f ab2b 	beq.w	80048fc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 80052a6:	2100      	movs	r1, #0
 80052a8:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80052ac:	f7ff f938 	bl	8004520 <RCCEx_PLL3_Config.part.0>
 80052b0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80052b2:	e9d4 3200 	ldrd	r3, r2, [r4]
 80052b6:	f7ff ba29 	b.w	800470c <HAL_RCCEx_PeriphCLKConfig+0x108>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80052ba:	4931      	ldr	r1, [pc, #196]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 80052bc:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80052be:	f001 0103 	and.w	r1, r1, #3
 80052c2:	2903      	cmp	r1, #3
 80052c4:	f43f a9d9 	beq.w	800467a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80052c8:	2100      	movs	r1, #0
 80052ca:	f104 0008 	add.w	r0, r4, #8
 80052ce:	f7ff f8b5 	bl	800443c <RCCEx_PLL2_Config.part.0>
 80052d2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80052d4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80052d8:	2d00      	cmp	r5, #0
 80052da:	f43f aea0 	beq.w	800501e <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80052de:	462e      	mov	r6, r5
 80052e0:	f7ff b9cd 	b.w	800467e <HAL_RCCEx_PeriphCLKConfig+0x7a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80052e4:	4926      	ldr	r1, [pc, #152]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 80052e6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80052e8:	f001 0103 	and.w	r1, r1, #3
 80052ec:	2903      	cmp	r1, #3
 80052ee:	f43f a9c4 	beq.w	800467a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80052f2:	2100      	movs	r1, #0
 80052f4:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80052f8:	f7ff f912 	bl	8004520 <RCCEx_PLL3_Config.part.0>
 80052fc:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80052fe:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005302:	e689      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0xa14>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005304:	491e      	ldr	r1, [pc, #120]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 8005306:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005308:	f001 0103 	and.w	r1, r1, #3
 800530c:	2903      	cmp	r1, #3
 800530e:	f43f aae7 	beq.w	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8005312:	2100      	movs	r1, #0
 8005314:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005318:	f7ff f902 	bl	8004520 <RCCEx_PLL3_Config.part.0>
 800531c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800531e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005322:	f7ff b9c9 	b.w	80046b8 <HAL_RCCEx_PeriphCLKConfig+0xb4>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005326:	4916      	ldr	r1, [pc, #88]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 8005328:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800532a:	f001 0103 	and.w	r1, r1, #3
 800532e:	2903      	cmp	r1, #3
 8005330:	f43f ad99 	beq.w	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x862>
 8005334:	2102      	movs	r1, #2
 8005336:	3028      	adds	r0, #40	@ 0x28
 8005338:	f7ff f8f2 	bl	8004520 <RCCEx_PLL3_Config.part.0>
 800533c:	4606      	mov	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800533e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005342:	2e00      	cmp	r6, #0
 8005344:	f47f a98d 	bne.w	8004662 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005348:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800534a:	f7ff b983 	b.w	8004654 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800534e:	462e      	mov	r6, r5
 8005350:	f7ff bba2 	b.w	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005354:	462e      	mov	r6, r5
 8005356:	f7ff baa0 	b.w	800489a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800535a:	462e      	mov	r6, r5
 800535c:	f7ff bb70 	b.w	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x43c>
 8005360:	462e      	mov	r6, r5
 8005362:	f7ff ba74 	b.w	800484e <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8005366:	462e      	mov	r6, r5
 8005368:	e411      	b.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800536a:	462e      	mov	r6, r5
 800536c:	f7ff bbbd 	b.w	8004aea <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005370:	462e      	mov	r6, r5
 8005372:	f7ff bbe3 	b.w	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x538>
 8005376:	462e      	mov	r6, r5
 8005378:	e436      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
 800537a:	462e      	mov	r6, r5
 800537c:	f7ff bb39 	b.w	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
 8005380:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005384:	494a      	ldr	r1, [pc, #296]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 8005386:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005388:	f001 0103 	and.w	r1, r1, #3
 800538c:	2903      	cmp	r1, #3
 800538e:	d04b      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0xe24>
 8005390:	2101      	movs	r1, #1
 8005392:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005396:	f7ff f8c3 	bl	8004520 <RCCEx_PLL3_Config.part.0>
 800539a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800539c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80053a0:	2d00      	cmp	r5, #0
 80053a2:	f43f ab46 	beq.w	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80053a6:	e7d8      	b.n	800535a <HAL_RCCEx_PeriphCLKConfig+0xd56>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80053a8:	4941      	ldr	r1, [pc, #260]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 80053aa:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80053ac:	f001 0103 	and.w	r1, r1, #3
 80053b0:	2903      	cmp	r1, #3
 80053b2:	d03d      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0xe2c>
 80053b4:	2101      	movs	r1, #1
 80053b6:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80053ba:	f7ff f8b1 	bl	8004520 <RCCEx_PLL3_Config.part.0>
 80053be:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80053c0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80053c4:	2d00      	cmp	r5, #0
 80053c6:	f43f ab5f 	beq.w	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80053ca:	e7c0      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80053cc:	4938      	ldr	r1, [pc, #224]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 80053ce:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80053d0:	f001 0103 	and.w	r1, r1, #3
 80053d4:	2903      	cmp	r1, #3
 80053d6:	f43f ab0a 	beq.w	80049ee <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80053da:	2101      	movs	r1, #1
 80053dc:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80053e0:	f7ff f89e 	bl	8004520 <RCCEx_PLL3_Config.part.0>
 80053e4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80053e6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80053ea:	2d00      	cmp	r5, #0
 80053ec:	f43f ad33 	beq.w	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80053f0:	e7c3      	b.n	800537a <HAL_RCCEx_PeriphCLKConfig+0xd76>
        ret = HAL_TIMEOUT;
 80053f2:	2503      	movs	r5, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80053f4:	462e      	mov	r6, r5
 80053f6:	e9d4 3200 	ldrd	r3, r2, [r4]
 80053fa:	f7ff bac8 	b.w	800498e <HAL_RCCEx_PeriphCLKConfig+0x38a>
    return HAL_ERROR;
 80053fe:	2501      	movs	r5, #1
 8005400:	e47c      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8005402:	2501      	movs	r5, #1
 8005404:	e47d      	b.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    return HAL_ERROR;
 8005406:	2501      	movs	r5, #1
 8005408:	e47e      	b.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x704>
 800540a:	2501      	movs	r5, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800540c:	0692      	lsls	r2, r2, #26
 800540e:	f53f adcc 	bmi.w	8004faa <HAL_RCCEx_PeriphCLKConfig+0x9a6>
  return HAL_ERROR;
 8005412:	2001      	movs	r0, #1
 8005414:	e5d7      	b.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
    return HAL_ERROR;
 8005416:	2501      	movs	r5, #1
 8005418:	e46d      	b.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800541a:	4d25      	ldr	r5, [pc, #148]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 800541c:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 800541e:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8005422:	62e8      	str	r0, [r5, #44]	@ 0x2c
    if (ret == HAL_OK)
 8005424:	f7ff b916 	b.w	8004654 <HAL_RCCEx_PeriphCLKConfig+0x50>
        ret = HAL_ERROR;
 8005428:	2601      	movs	r6, #1
 800542a:	4635      	mov	r5, r6
 800542c:	f7ff bb08 	b.w	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x43c>
        ret = HAL_ERROR;
 8005430:	2601      	movs	r6, #1
 8005432:	4635      	mov	r5, r6
 8005434:	f7ff bb30 	b.w	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x494>
        ret = HAL_ERROR;
 8005438:	2601      	movs	r6, #1
 800543a:	4635      	mov	r5, r6
 800543c:	f7ff baa4 	b.w	8004988 <HAL_RCCEx_PeriphCLKConfig+0x384>
        status = HAL_ERROR;
 8005440:	2601      	movs	r6, #1
 8005442:	f7ff bbac 	b.w	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x59a>
        status = HAL_ERROR;
 8005446:	2601      	movs	r6, #1
 8005448:	f7ff bbb7 	b.w	8004bba <HAL_RCCEx_PeriphCLKConfig+0x5b6>
        tickstart = HAL_GetTick();
 800544c:	f7fc fae0 	bl	8001a10 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005450:	f8df 805c 	ldr.w	r8, [pc, #92]	@ 80054b0 <HAL_RCCEx_PeriphCLKConfig+0xeac>
        tickstart = HAL_GetTick();
 8005454:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005456:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800545a:	e004      	b.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0xe62>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800545c:	f7fc fad8 	bl	8001a10 <HAL_GetTick>
 8005460:	1bc0      	subs	r0, r0, r7
 8005462:	4548      	cmp	r0, r9
 8005464:	d810      	bhi.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0xe84>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005466:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800546a:	079b      	lsls	r3, r3, #30
 800546c:	d5f6      	bpl.n	800545c <HAL_RCCEx_PeriphCLKConfig+0xe58>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800546e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8005472:	e529      	b.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8005474:	480e      	ldr	r0, [pc, #56]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 8005476:	4a0f      	ldr	r2, [pc, #60]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0xeb0>)
 8005478:	6901      	ldr	r1, [r0, #16]
 800547a:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800547e:	f421 517c 	bic.w	r1, r1, #16128	@ 0x3f00
 8005482:	430a      	orrs	r2, r1
 8005484:	6102      	str	r2, [r0, #16]
 8005486:	e52a      	b.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x8da>
        status = ret;
 8005488:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800548a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800548e:	4635      	mov	r5, r6
 8005490:	f7ff ba7d 	b.w	800498e <HAL_RCCEx_PeriphCLKConfig+0x38a>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005494:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
        status = HAL_ERROR;
 8005498:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800549a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800549e:	f7ff bb8c 	b.w	8004bba <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80054a2:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
        status = HAL_ERROR;
 80054a6:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80054a8:	e9d4 3200 	ldrd	r3, r2, [r4]
 80054ac:	f7ff bb77 	b.w	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80054b0:	58024400 	.word	0x58024400
 80054b4:	00ffffcf 	.word	0x00ffffcf

080054b8 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80054b8:	4a47      	ldr	r2, [pc, #284]	@ (80055d8 <HAL_RCCEx_GetPLL2ClockFreq+0x120>)
{
 80054ba:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80054bc:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80054be:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80054c0:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll2m != 0U)
 80054c2:	f415 3f7c 	tst.w	r5, #258048	@ 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80054c6:	f3c5 3305 	ubfx	r3, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80054ca:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
  if (pll2m != 0U)
 80054cc:	d05b      	beq.n	8005586 <HAL_RCCEx_GetPLL2ClockFreq+0xce>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80054ce:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80054d2:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80054d6:	f004 0403 	and.w	r4, r4, #3
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80054da:	ee07 3a90 	vmov	s15, r3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80054de:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 80054e2:	2c01      	cmp	r4, #1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80054e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80054e8:	ee06 1a90 	vmov	s13, r1
 80054ec:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 80054f0:	d003      	beq.n	80054fa <HAL_RCCEx_GetPLL2ClockFreq+0x42>
 80054f2:	2c02      	cmp	r4, #2
 80054f4:	d06a      	beq.n	80055cc <HAL_RCCEx_GetPLL2ClockFreq+0x114>
 80054f6:	2c00      	cmp	r4, #0
 80054f8:	d04a      	beq.n	8005590 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80054fa:	eddf 7a38 	vldr	s15, [pc, #224]	@ 80055dc <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 80054fe:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8005502:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8005504:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005508:	ee07 3a90 	vmov	s15, r3
 800550c:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8005510:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005514:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005518:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800551c:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005520:	4a2d      	ldr	r2, [pc, #180]	@ (80055d8 <HAL_RCCEx_GetPLL2ClockFreq+0x120>)
 8005522:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8005526:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8005528:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800552c:	ee07 3a10 	vmov	s14, r3
 8005530:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8005534:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005536:	ee37 7a06 	vadd.f32	s14, s14, s12
 800553a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800553e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005542:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005546:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8005548:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800554c:	ee07 3a10 	vmov	s14, r3
 8005550:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005554:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005558:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800555c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005560:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005564:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8005566:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800556a:	ee06 3a90 	vmov	s13, r3
 800556e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8005572:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005576:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800557a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800557e:	ee17 3a90 	vmov	r3, s15
 8005582:	6083      	str	r3, [r0, #8]
}
 8005584:	4770      	bx	lr
 8005586:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005588:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800558c:	6083      	str	r3, [r0, #8]
}
 800558e:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005590:	6813      	ldr	r3, [r2, #0]
 8005592:	069b      	lsls	r3, r3, #26
 8005594:	d51d      	bpl.n	80055d2 <HAL_RCCEx_GetPLL2ClockFreq+0x11a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005596:	6814      	ldr	r4, [r2, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005598:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800559c:	6b93      	ldr	r3, [r2, #56]	@ 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800559e:	4910      	ldr	r1, [pc, #64]	@ (80055e0 <HAL_RCCEx_GetPLL2ClockFreq+0x128>)
 80055a0:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80055a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80055a8:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80055aa:	ee07 3a90 	vmov	s15, r3
 80055ae:	ee06 1a10 	vmov	s12, r1
 80055b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055b6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80055ba:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80055be:	eec6 7a07 	vdiv.f32	s15, s12, s14
 80055c2:	ee36 7aa5 	vadd.f32	s14, s13, s11
 80055c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055ca:	e7a9      	b.n	8005520 <HAL_RCCEx_GetPLL2ClockFreq+0x68>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80055cc:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80055e4 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>
 80055d0:	e795      	b.n	80054fe <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80055d2:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80055e8 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
 80055d6:	e792      	b.n	80054fe <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 80055d8:	58024400 	.word	0x58024400
 80055dc:	4a742400 	.word	0x4a742400
 80055e0:	03d09000 	.word	0x03d09000
 80055e4:	4bbebc20 	.word	0x4bbebc20
 80055e8:	4c742400 	.word	0x4c742400

080055ec <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80055ec:	4a47      	ldr	r2, [pc, #284]	@ (800570c <HAL_RCCEx_GetPLL3ClockFreq+0x120>)
{
 80055ee:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80055f0:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80055f2:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80055f4:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll3m != 0U)
 80055f6:	f015 7f7c 	tst.w	r5, #66060288	@ 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80055fa:	f3c5 5305 	ubfx	r3, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80055fe:	6c51      	ldr	r1, [r2, #68]	@ 0x44
  if (pll3m != 0U)
 8005600:	d05b      	beq.n	80056ba <HAL_RCCEx_GetPLL3ClockFreq+0xce>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005602:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005606:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800560a:	f004 0403 	and.w	r4, r4, #3
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800560e:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005612:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 8005616:	2c01      	cmp	r4, #1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005618:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800561c:	ee06 1a90 	vmov	s13, r1
 8005620:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8005624:	d003      	beq.n	800562e <HAL_RCCEx_GetPLL3ClockFreq+0x42>
 8005626:	2c02      	cmp	r4, #2
 8005628:	d06a      	beq.n	8005700 <HAL_RCCEx_GetPLL3ClockFreq+0x114>
 800562a:	2c00      	cmp	r4, #0
 800562c:	d04a      	beq.n	80056c4 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800562e:	eddf 7a38 	vldr	s15, [pc, #224]	@ 8005710 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 8005632:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8005636:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005638:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800563c:	ee07 3a90 	vmov	s15, r3
 8005640:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8005644:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005648:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800564c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8005650:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005654:	4a2d      	ldr	r2, [pc, #180]	@ (800570c <HAL_RCCEx_GetPLL3ClockFreq+0x120>)
 8005656:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800565a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800565c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005660:	ee07 3a10 	vmov	s14, r3
 8005664:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8005668:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800566a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800566e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005672:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005676:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800567a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800567c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005680:	ee07 3a10 	vmov	s14, r3
 8005684:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005688:	ee37 7a06 	vadd.f32	s14, s14, s12
 800568c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005690:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005694:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005698:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800569a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800569e:	ee06 3a90 	vmov	s13, r3
 80056a2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80056a6:	ee76 6a86 	vadd.f32	s13, s13, s12
 80056aa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80056ae:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80056b2:	ee17 3a90 	vmov	r3, s15
 80056b6:	6083      	str	r3, [r0, #8]
}
 80056b8:	4770      	bx	lr
 80056ba:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80056bc:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80056c0:	6083      	str	r3, [r0, #8]
}
 80056c2:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056c4:	6813      	ldr	r3, [r2, #0]
 80056c6:	069b      	lsls	r3, r3, #26
 80056c8:	d51d      	bpl.n	8005706 <HAL_RCCEx_GetPLL3ClockFreq+0x11a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80056ca:	6814      	ldr	r4, [r2, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80056cc:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 80056d0:	6c13      	ldr	r3, [r2, #64]	@ 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80056d2:	4910      	ldr	r1, [pc, #64]	@ (8005714 <HAL_RCCEx_GetPLL3ClockFreq+0x128>)
 80056d4:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80056d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80056dc:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80056de:	ee07 3a90 	vmov	s15, r3
 80056e2:	ee06 1a10 	vmov	s12, r1
 80056e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056ea:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80056ee:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80056f2:	eec6 7a07 	vdiv.f32	s15, s12, s14
 80056f6:	ee36 7aa5 	vadd.f32	s14, s13, s11
 80056fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80056fe:	e7a9      	b.n	8005654 <HAL_RCCEx_GetPLL3ClockFreq+0x68>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005700:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8005718 <HAL_RCCEx_GetPLL3ClockFreq+0x12c>
 8005704:	e795      	b.n	8005632 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005706:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800571c <HAL_RCCEx_GetPLL3ClockFreq+0x130>
 800570a:	e792      	b.n	8005632 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 800570c:	58024400 	.word	0x58024400
 8005710:	4a742400 	.word	0x4a742400
 8005714:	03d09000 	.word	0x03d09000
 8005718:	4bbebc20 	.word	0x4bbebc20
 800571c:	4c742400 	.word	0x4c742400

08005720 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005720:	4a47      	ldr	r2, [pc, #284]	@ (8005840 <HAL_RCCEx_GetPLL1ClockFreq+0x120>)
{
 8005722:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005724:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8005726:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005728:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll1m != 0U)
 800572a:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800572e:	f3c5 1305 	ubfx	r3, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005732:	6b51      	ldr	r1, [r2, #52]	@ 0x34
  if (pll1m != 0U)
 8005734:	d05b      	beq.n	80057ee <HAL_RCCEx_GetPLL1ClockFreq+0xce>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005736:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800573a:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800573e:	f004 0403 	and.w	r4, r4, #3
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005742:	ee07 3a90 	vmov	s15, r3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005746:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 800574a:	2c01      	cmp	r4, #1
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800574c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005750:	ee06 1a90 	vmov	s13, r1
 8005754:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8005758:	d06f      	beq.n	800583a <HAL_RCCEx_GetPLL1ClockFreq+0x11a>
 800575a:	2c02      	cmp	r4, #2
 800575c:	d06a      	beq.n	8005834 <HAL_RCCEx_GetPLL1ClockFreq+0x114>
 800575e:	2c00      	cmp	r4, #0
 8005760:	d04a      	beq.n	80057f8 <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005762:	eddf 7a38 	vldr	s15, [pc, #224]	@ 8005844 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 8005766:	ee87 6a87 	vdiv.f32	s12, s15, s14
 800576a:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800576c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005770:	ee07 3a90 	vmov	s15, r3
 8005774:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8005778:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800577c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005780:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8005784:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8005788:	4a2d      	ldr	r2, [pc, #180]	@ (8005840 <HAL_RCCEx_GetPLL1ClockFreq+0x120>)
 800578a:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800578e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8005790:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005794:	ee07 3a10 	vmov	s14, r3
 8005798:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800579c:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800579e:	ee37 7a06 	vadd.f32	s14, s14, s12
 80057a2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80057a6:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80057aa:	edc0 6a00 	vstr	s13, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80057ae:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80057b0:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80057b4:	ee07 3a10 	vmov	s14, r3
 80057b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80057bc:	ee37 7a06 	vadd.f32	s14, s14, s12
 80057c0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80057c4:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80057c8:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80057cc:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80057ce:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80057d2:	ee06 3a90 	vmov	s13, r3
 80057d6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80057da:	ee76 6a86 	vadd.f32	s13, s13, s12
 80057de:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80057e2:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80057e6:	ee17 3a90 	vmov	r3, s15
 80057ea:	6083      	str	r3, [r0, #8]
}
 80057ec:	4770      	bx	lr
 80057ee:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80057f0:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80057f4:	6083      	str	r3, [r0, #8]
}
 80057f6:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057f8:	6813      	ldr	r3, [r2, #0]
 80057fa:	069b      	lsls	r3, r3, #26
 80057fc:	d5b1      	bpl.n	8005762 <HAL_RCCEx_GetPLL1ClockFreq+0x42>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80057fe:	6814      	ldr	r4, [r2, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005800:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8005804:	6b13      	ldr	r3, [r2, #48]	@ 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005806:	4910      	ldr	r1, [pc, #64]	@ (8005848 <HAL_RCCEx_GetPLL1ClockFreq+0x128>)
 8005808:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800580c:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005810:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005812:	ee07 3a90 	vmov	s15, r3
 8005816:	ee06 1a10 	vmov	s12, r1
 800581a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800581e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8005822:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8005826:	eec6 7a07 	vdiv.f32	s15, s12, s14
 800582a:	ee36 7aa5 	vadd.f32	s14, s13, s11
 800582e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005832:	e7a9      	b.n	8005788 <HAL_RCCEx_GetPLL1ClockFreq+0x68>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005834:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800584c <HAL_RCCEx_GetPLL1ClockFreq+0x12c>
 8005838:	e795      	b.n	8005766 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800583a:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8005850 <HAL_RCCEx_GetPLL1ClockFreq+0x130>
 800583e:	e792      	b.n	8005766 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
 8005840:	58024400 	.word	0x58024400
 8005844:	4c742400 	.word	0x4c742400
 8005848:	03d09000 	.word	0x03d09000
 800584c:	4bbebc20 	.word	0x4bbebc20
 8005850:	4a742400 	.word	0x4a742400

08005854 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005854:	f5a0 7380 	sub.w	r3, r0, #256	@ 0x100
 8005858:	430b      	orrs	r3, r1
{
 800585a:	b500      	push	{lr}
 800585c:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800585e:	f000 8083 	beq.w	8005968 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005862:	f5a0 7300 	sub.w	r3, r0, #512	@ 0x200
 8005866:	430b      	orrs	r3, r1
 8005868:	d038      	beq.n	80058dc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800586a:	f5a0 6380 	sub.w	r3, r0, #1024	@ 0x400
 800586e:	430b      	orrs	r3, r1
 8005870:	f000 80e6 	beq.w	8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005874:	f5a0 6300 	sub.w	r3, r0, #2048	@ 0x800
 8005878:	430b      	orrs	r3, r1
 800587a:	f000 8089 	beq.w	8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800587e:	f5a0 5380 	sub.w	r3, r0, #4096	@ 0x1000
 8005882:	430b      	orrs	r3, r1
 8005884:	d060      	beq.n	8005948 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8005886:	f5a0 5300 	sub.w	r3, r0, #8192	@ 0x2000
 800588a:	430b      	orrs	r3, r1
 800588c:	f000 8112 	beq.w	8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005890:	f5a0 2300 	sub.w	r3, r0, #524288	@ 0x80000
 8005894:	430b      	orrs	r3, r1
 8005896:	f000 80a3 	beq.w	80059e0 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800589a:	f5a0 3380 	sub.w	r3, r0, #65536	@ 0x10000
 800589e:	430b      	orrs	r3, r1
 80058a0:	f000 80fa 	beq.w	8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80058a4:	f5a0 4380 	sub.w	r3, r0, #16384	@ 0x4000
 80058a8:	430b      	orrs	r3, r1
 80058aa:	f000 8143 	beq.w	8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80058ae:	f5a0 4000 	sub.w	r0, r0, #32768	@ 0x8000
 80058b2:	4308      	orrs	r0, r1
 80058b4:	d137      	bne.n	8005926 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80058b6:	4a9a      	ldr	r2, [pc, #616]	@ (8005b20 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80058b8:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80058ba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
    switch (srcclk)
 80058be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80058c2:	f000 8084 	beq.w	80059ce <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 80058c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058ca:	f000 8157 	beq.w	8005b7c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80058ce:	bb53      	cbnz	r3, 8005926 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80058d0:	6810      	ldr	r0, [r2, #0]
 80058d2:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 80058d6:	d044      	beq.n	8005962 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = HSE_VALUE;
 80058d8:	4892      	ldr	r0, [pc, #584]	@ (8005b24 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80058da:	e042      	b.n	8005962 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80058dc:	4a90      	ldr	r2, [pc, #576]	@ (8005b20 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80058de:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80058e0:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
    switch (saiclocksource)
 80058e4:	2b80      	cmp	r3, #128	@ 0x80
 80058e6:	f000 80a6 	beq.w	8005a36 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 80058ea:	d920      	bls.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80058ec:	2bc0      	cmp	r3, #192	@ 0xc0
 80058ee:	d037      	beq.n	8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 80058f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058f4:	d117      	bne.n	8005926 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80058f6:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80058f8:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80058fa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80058fe:	0749      	lsls	r1, r1, #29
 8005900:	d502      	bpl.n	8005908 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 8005902:	2b00      	cmp	r3, #0
 8005904:	f000 80c2 	beq.w	8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x238>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005908:	4a85      	ldr	r2, [pc, #532]	@ (8005b20 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800590a:	6812      	ldr	r2, [r2, #0]
 800590c:	05d0      	lsls	r0, r2, #23
 800590e:	d503      	bpl.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
 8005910:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005914:	f000 8102 	beq.w	8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005918:	4a81      	ldr	r2, [pc, #516]	@ (8005b20 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800591a:	6812      	ldr	r2, [r2, #0]
 800591c:	0391      	lsls	r1, r2, #14
 800591e:	d502      	bpl.n	8005926 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8005920:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005924:	d0d8      	beq.n	80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
          frequency = 0;
 8005926:	2000      	movs	r0, #0
}
 8005928:	b005      	add	sp, #20
 800592a:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
 800592e:	2b00      	cmp	r3, #0
 8005930:	d04d      	beq.n	80059ce <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8005932:	2b40      	cmp	r3, #64	@ 0x40
 8005934:	d1f7      	bne.n	8005926 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005936:	6810      	ldr	r0, [r2, #0]
 8005938:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800593c:	d011      	beq.n	8005962 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800593e:	a801      	add	r0, sp, #4
 8005940:	f7ff fdba 	bl	80054b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005944:	9801      	ldr	r0, [sp, #4]
 8005946:	e00c      	b.n	8005962 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005948:	4a75      	ldr	r2, [pc, #468]	@ (8005b20 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800594a:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800594c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
    switch (srcclk)
 8005950:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005954:	d06f      	beq.n	8005a36 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8005956:	d938      	bls.n	80059ca <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8005958:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800595c:	f040 8088 	bne.w	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x21c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005960:	4871      	ldr	r0, [pc, #452]	@ (8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
}
 8005962:	b005      	add	sp, #20
 8005964:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005968:	4b6d      	ldr	r3, [pc, #436]	@ (8005b20 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800596a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800596c:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 8005970:	2b04      	cmp	r3, #4
 8005972:	d8d8      	bhi.n	8005926 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8005974:	a201      	add	r2, pc, #4	@ (adr r2, 800597c <HAL_RCCEx_GetPeriphCLKFreq+0x128>)
 8005976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800597a:	bf00      	nop
 800597c:	08005a1f 	.word	0x08005a1f
 8005980:	080059fb 	.word	0x080059fb
 8005984:	08005a0b 	.word	0x08005a0b
 8005988:	08005961 	.word	0x08005961
 800598c:	08005a07 	.word	0x08005a07
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8005990:	4a63      	ldr	r2, [pc, #396]	@ (8005b20 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005992:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8005994:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
    switch (saiclocksource)
 8005998:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800599c:	d04b      	beq.n	8005a36 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800599e:	d944      	bls.n	8005a2a <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
 80059a0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80059a4:	d0dc      	beq.n	8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 80059a6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80059aa:	d1bc      	bne.n	8005926 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80059ac:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80059ae:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80059b0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80059b4:	0752      	lsls	r2, r2, #29
 80059b6:	d5a7      	bpl.n	8005908 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d1a5      	bne.n	8005908 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80059bc:	4b58      	ldr	r3, [pc, #352]	@ (8005b20 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80059be:	485b      	ldr	r0, [pc, #364]	@ (8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80059c6:	40d8      	lsrs	r0, r3
 80059c8:	e7cb      	b.n	8005962 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d154      	bne.n	8005a78 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80059ce:	6810      	ldr	r0, [r2, #0]
 80059d0:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 80059d4:	d0c5      	beq.n	8005962 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80059d6:	a801      	add	r0, sp, #4
 80059d8:	f7ff fea2 	bl	8005720 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80059dc:	9802      	ldr	r0, [sp, #8]
 80059de:	e7c0      	b.n	8005962 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80059e0:	4a4f      	ldr	r2, [pc, #316]	@ (8005b20 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80059e2:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80059e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
    switch (srcclk)
 80059e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059ec:	f000 80d0 	beq.w	8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
 80059f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059f4:	d0da      	beq.n	80059ac <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d195      	bne.n	8005926 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80059fa:	4b49      	ldr	r3, [pc, #292]	@ (8005b20 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80059fc:	6818      	ldr	r0, [r3, #0]
 80059fe:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8005a02:	d0ae      	beq.n	8005962 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8005a04:	e79b      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005a06:	4a46      	ldr	r2, [pc, #280]	@ (8005b20 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005a08:	e775      	b.n	80058f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005a0a:	4b45      	ldr	r3, [pc, #276]	@ (8005b20 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005a0c:	6818      	ldr	r0, [r3, #0]
 8005a0e:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8005a12:	d0a6      	beq.n	8005962 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a14:	a801      	add	r0, sp, #4
 8005a16:	f7ff fde9 	bl	80055ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005a1a:	9801      	ldr	r0, [sp, #4]
 8005a1c:	e7a1      	b.n	8005962 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005a1e:	4b40      	ldr	r3, [pc, #256]	@ (8005b20 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005a20:	6818      	ldr	r0, [r3, #0]
 8005a22:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8005a26:	d09c      	beq.n	8005962 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8005a28:	e7d5      	b.n	80059d6 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
    switch (saiclocksource)
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d0cf      	beq.n	80059ce <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8005a2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005a32:	d080      	beq.n	8005936 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 8005a34:	e777      	b.n	8005926 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005a36:	6810      	ldr	r0, [r2, #0]
 8005a38:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8005a3c:	d091      	beq.n	8005962 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8005a3e:	e7e9      	b.n	8005a14 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8005a40:	4a37      	ldr	r2, [pc, #220]	@ (8005b20 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005a42:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8005a44:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
    switch (saiclocksource)
 8005a48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a4c:	d0f3      	beq.n	8005a36 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8005a4e:	d806      	bhi.n	8005a5e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d0bc      	beq.n	80059ce <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8005a54:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a58:	f43f af6d 	beq.w	8005936 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 8005a5c:	e763      	b.n	8005926 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8005a5e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005a62:	f43f af7d 	beq.w	8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8005a66:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005a6a:	f43f af44 	beq.w	80058f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 8005a6e:	e75a      	b.n	8005926 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    switch (srcclk)
 8005a70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a74:	d09a      	beq.n	80059ac <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8005a76:	e756      	b.n	8005926 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8005a78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a7c:	f43f af5b 	beq.w	8005936 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 8005a80:	e751      	b.n	8005926 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005a82:	6810      	ldr	r0, [r2, #0]
 8005a84:	f010 0004 	ands.w	r0, r0, #4
 8005a88:	f43f af6b 	beq.w	8005962 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005a8c:	6813      	ldr	r3, [r2, #0]
 8005a8e:	4827      	ldr	r0, [pc, #156]	@ (8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8005a90:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005a94:	40d8      	lsrs	r0, r3
 8005a96:	e764      	b.n	8005962 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005a98:	4b21      	ldr	r3, [pc, #132]	@ (8005b20 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005a9a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    switch (srcclk)
 8005a9c:	03d2      	lsls	r2, r2, #15
 8005a9e:	d5bf      	bpl.n	8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005aa0:	6818      	ldr	r0, [r3, #0]
 8005aa2:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8005aa6:	f43f af5c 	beq.w	8005962 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005aaa:	a801      	add	r0, sp, #4
 8005aac:	f7ff fd04 	bl	80054b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005ab0:	9803      	ldr	r0, [sp, #12]
 8005ab2:	e756      	b.n	8005962 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8005ab4:	4a1a      	ldr	r2, [pc, #104]	@ (8005b20 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005ab6:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8005ab8:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
    switch (srcclk)
 8005abc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005ac0:	d0df      	beq.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8005ac2:	d810      	bhi.n	8005ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 8005ac4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ac8:	d058      	beq.n	8005b7c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8005aca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ace:	d118      	bne.n	8005b02 <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005ad0:	4b13      	ldr	r3, [pc, #76]	@ (8005b20 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005ad2:	6818      	ldr	r0, [r3, #0]
 8005ad4:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8005ad8:	f43f af43 	beq.w	8005962 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005adc:	a801      	add	r0, sp, #4
 8005ade:	f7ff fd85 	bl	80055ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005ae2:	9802      	ldr	r0, [sp, #8]
 8005ae4:	e73d      	b.n	8005962 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 8005ae6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005aea:	d012      	beq.n	8005b12 <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
 8005aec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005af0:	f47f af19 	bne.w	8005926 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005af4:	4b0a      	ldr	r3, [pc, #40]	@ (8005b20 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005af6:	6818      	ldr	r0, [r3, #0]
 8005af8:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8005afc:	f43f af31 	beq.w	8005962 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8005b00:	e6ea      	b.n	80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
    switch (srcclk)
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	f47f af0f 	bne.w	8005926 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
}
 8005b08:	b005      	add	sp, #20
 8005b0a:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 8005b0e:	f7fe bc57 	b.w	80043c0 <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005b12:	6810      	ldr	r0, [r2, #0]
 8005b14:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
 8005b18:	f43f af23 	beq.w	8005962 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = CSI_VALUE;
 8005b1c:	4804      	ldr	r0, [pc, #16]	@ (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8005b1e:	e720      	b.n	8005962 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8005b20:	58024400 	.word	0x58024400
 8005b24:	017d7840 	.word	0x017d7840
 8005b28:	00bb8000 	.word	0x00bb8000
 8005b2c:	03d09000 	.word	0x03d09000
 8005b30:	003d0900 	.word	0x003d0900
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8005b34:	4b28      	ldr	r3, [pc, #160]	@ (8005bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 8005b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b38:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
    switch (srcclk)
 8005b3c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005b40:	d037      	beq.n	8005bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
 8005b42:	d814      	bhi.n	8005b6e <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 8005b44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b48:	d03f      	beq.n	8005bca <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8005b4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b4e:	d0bf      	beq.n	8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f47f aee8 	bne.w	8005926 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005b56:	f7fe fbf3 	bl	8004340 <HAL_RCC_GetHCLKFreq>
 8005b5a:	4b1f      	ldr	r3, [pc, #124]	@ (8005bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 8005b5c:	4a1f      	ldr	r2, [pc, #124]	@ (8005bdc <HAL_RCCEx_GetPeriphCLKFreq+0x388>)
 8005b5e:	6a1b      	ldr	r3, [r3, #32]
 8005b60:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8005b64:	5cd3      	ldrb	r3, [r2, r3]
 8005b66:	f003 031f 	and.w	r3, r3, #31
 8005b6a:	40d8      	lsrs	r0, r3
        break;
 8005b6c:	e6f9      	b.n	8005962 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 8005b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b72:	d017      	beq.n	8005ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
 8005b74:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b78:	d0bc      	beq.n	8005af4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8005b7a:	e6d4      	b.n	8005926 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005b7c:	6810      	ldr	r0, [r2, #0]
 8005b7e:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8005b82:	f43f aeee 	beq.w	8005962 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b86:	a801      	add	r0, sp, #4
 8005b88:	f7ff fc96 	bl	80054b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005b8c:	9802      	ldr	r0, [sp, #8]
 8005b8e:	e6e8      	b.n	8005962 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005b90:	6810      	ldr	r0, [r2, #0]
 8005b92:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8005b96:	f43f aee4 	beq.w	8005962 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b9a:	a801      	add	r0, sp, #4
 8005b9c:	f7ff fd26 	bl	80055ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005ba0:	9803      	ldr	r0, [sp, #12]
 8005ba2:	e6de      	b.n	8005962 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8005bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 8005ba6:	6818      	ldr	r0, [r3, #0]
 8005ba8:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
 8005bac:	f43f aed9 	beq.w	8005962 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8005bb0:	e7b4      	b.n	8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005bb2:	4b09      	ldr	r3, [pc, #36]	@ (8005bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 8005bb4:	6818      	ldr	r0, [r3, #0]
 8005bb6:	f010 0004 	ands.w	r0, r0, #4
 8005bba:	f43f aed2 	beq.w	8005962 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4807      	ldr	r0, [pc, #28]	@ (8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0x38c>)
 8005bc2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005bc6:	40d8      	lsrs	r0, r3
 8005bc8:	e6cb      	b.n	8005962 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005bca:	4b03      	ldr	r3, [pc, #12]	@ (8005bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 8005bcc:	6818      	ldr	r0, [r3, #0]
 8005bce:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8005bd2:	f43f aec6 	beq.w	8005962 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8005bd6:	e7d6      	b.n	8005b86 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8005bd8:	58024400 	.word	0x58024400
 8005bdc:	080126d0 	.word	0x080126d0
 8005be0:	03d09000 	.word	0x03d09000

08005be4 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005be4:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d13d      	bne.n	8005c68 <HAL_TIM_Base_Start_IT+0x84>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005bec:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005bee:	2102      	movs	r1, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bf0:	4b1e      	ldr	r3, [pc, #120]	@ (8005c6c <HAL_TIM_Base_Start_IT+0x88>)
 8005bf2:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8005bf6:	bf18      	it	ne
 8005bf8:	429a      	cmpne	r2, r3
{
 8005bfa:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bfc:	bf0c      	ite	eq
 8005bfe:	2301      	moveq	r3, #1
 8005c00:	2300      	movne	r3, #0
 8005c02:	4d1b      	ldr	r5, [pc, #108]	@ (8005c70 <HAL_TIM_Base_Start_IT+0x8c>)
 8005c04:	4c1b      	ldr	r4, [pc, #108]	@ (8005c74 <HAL_TIM_Base_Start_IT+0x90>)
 8005c06:	42aa      	cmp	r2, r5
 8005c08:	bf08      	it	eq
 8005c0a:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8005c0e:	f880 103d 	strb.w	r1, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c12:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c14:	42a2      	cmp	r2, r4
 8005c16:	bf08      	it	eq
 8005c18:	f043 0301 	orreq.w	r3, r3, #1
 8005c1c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c20:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c24:	4814      	ldr	r0, [pc, #80]	@ (8005c78 <HAL_TIM_Base_Start_IT+0x94>)
 8005c26:	42a2      	cmp	r2, r4
 8005c28:	bf08      	it	eq
 8005c2a:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c2e:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c30:	4282      	cmp	r2, r0
 8005c32:	bf08      	it	eq
 8005c34:	f043 0301 	orreq.w	r3, r3, #1
 8005c38:	4910      	ldr	r1, [pc, #64]	@ (8005c7c <HAL_TIM_Base_Start_IT+0x98>)
 8005c3a:	428a      	cmp	r2, r1
 8005c3c:	bf08      	it	eq
 8005c3e:	f043 0301 	orreq.w	r3, r3, #1
 8005c42:	b913      	cbnz	r3, 8005c4a <HAL_TIM_Base_Start_IT+0x66>
 8005c44:	4b0e      	ldr	r3, [pc, #56]	@ (8005c80 <HAL_TIM_Base_Start_IT+0x9c>)
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d107      	bne.n	8005c5a <HAL_TIM_Base_Start_IT+0x76>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c4a:	6891      	ldr	r1, [r2, #8]
 8005c4c:	4b0d      	ldr	r3, [pc, #52]	@ (8005c84 <HAL_TIM_Base_Start_IT+0xa0>)
 8005c4e:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c50:	2b06      	cmp	r3, #6
 8005c52:	d006      	beq.n	8005c62 <HAL_TIM_Base_Start_IT+0x7e>
 8005c54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c58:	d003      	beq.n	8005c62 <HAL_TIM_Base_Start_IT+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8005c5a:	6813      	ldr	r3, [r2, #0]
 8005c5c:	f043 0301 	orr.w	r3, r3, #1
 8005c60:	6013      	str	r3, [r2, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8005c62:	2000      	movs	r0, #0
}
 8005c64:	bc30      	pop	{r4, r5}
 8005c66:	4770      	bx	lr
    return HAL_ERROR;
 8005c68:	2001      	movs	r0, #1
}
 8005c6a:	4770      	bx	lr
 8005c6c:	40010000 	.word	0x40010000
 8005c70:	40000400 	.word	0x40000400
 8005c74:	40000800 	.word	0x40000800
 8005c78:	40010400 	.word	0x40010400
 8005c7c:	40001800 	.word	0x40001800
 8005c80:	40014000 	.word	0x40014000
 8005c84:	00010007 	.word	0x00010007

08005c88 <HAL_TIM_Base_Stop_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005c88:	6802      	ldr	r2, [r0, #0]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005c8a:	f241 1c11 	movw	ip, #4369	@ 0x1111
{
 8005c8e:	4603      	mov	r3, r0
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005c90:	68d1      	ldr	r1, [r2, #12]
 8005c92:	f021 0101 	bic.w	r1, r1, #1
 8005c96:	60d1      	str	r1, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 8005c98:	6a11      	ldr	r1, [r2, #32]
 8005c9a:	ea11 0f0c 	tst.w	r1, ip
 8005c9e:	d108      	bne.n	8005cb2 <HAL_TIM_Base_Stop_IT+0x2a>
 8005ca0:	6a10      	ldr	r0, [r2, #32]
 8005ca2:	f240 4144 	movw	r1, #1092	@ 0x444
 8005ca6:	4208      	tst	r0, r1
 8005ca8:	d103      	bne.n	8005cb2 <HAL_TIM_Base_Stop_IT+0x2a>
 8005caa:	6811      	ldr	r1, [r2, #0]
 8005cac:	f021 0101 	bic.w	r1, r1, #1
 8005cb0:	6011      	str	r1, [r2, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005cb2:	2201      	movs	r2, #1

  /* Return function status */
  return HAL_OK;
}
 8005cb4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005cb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 8005cba:	4770      	bx	lr

08005cbc <HAL_TIM_ConfigClockSource>:
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cbc:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d07e      	beq.n	8005dc2 <HAL_TIM_ConfigClockSource+0x106>
 8005cc4:	4602      	mov	r2, r0

  htim->State = HAL_TIM_STATE_BUSY;
 8005cc6:	2302      	movs	r3, #2
{
 8005cc8:	b430      	push	{r4, r5}

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005cca:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(htim);
 8005ccc:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8005cce:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_LOCK(htim);
 8005cd2:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cd6:	4b58      	ldr	r3, [pc, #352]	@ (8005e38 <HAL_TIM_ConfigClockSource+0x17c>)
  tmpsmcr = htim->Instance->SMCR;
 8005cd8:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cda:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8005cdc:	60a3      	str	r3, [r4, #8]

  switch (sClockSourceConfig->ClockSource)
 8005cde:	680b      	ldr	r3, [r1, #0]
 8005ce0:	2b70      	cmp	r3, #112	@ 0x70
 8005ce2:	f000 8098 	beq.w	8005e16 <HAL_TIM_ConfigClockSource+0x15a>
 8005ce6:	d825      	bhi.n	8005d34 <HAL_TIM_ConfigClockSource+0x78>
 8005ce8:	2b50      	cmp	r3, #80	@ 0x50
 8005cea:	d06c      	beq.n	8005dc6 <HAL_TIM_ConfigClockSource+0x10a>
 8005cec:	d938      	bls.n	8005d60 <HAL_TIM_ConfigClockSource+0xa4>
 8005cee:	2b60      	cmp	r3, #96	@ 0x60
 8005cf0:	d118      	bne.n	8005d24 <HAL_TIM_ConfigClockSource+0x68>
      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
                               sClockSourceConfig->ClockPolarity,
 8005cf2:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005cf4:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005cf6:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cf8:	6a20      	ldr	r0, [r4, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= (TIM_ICFilter << 12U);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cfa:	f021 01a0 	bic.w	r1, r1, #160	@ 0xa0
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cfe:	f020 0010 	bic.w	r0, r0, #16
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d02:	ea41 1103 	orr.w	r1, r1, r3, lsl #4
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d06:	4b4d      	ldr	r3, [pc, #308]	@ (8005e3c <HAL_TIM_ConfigClockSource+0x180>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d08:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d0a:	69a0      	ldr	r0, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d0c:	f420 4070 	bic.w	r0, r0, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d10:	ea40 3005 	orr.w	r0, r0, r5, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8005d14:	61a0      	str	r0, [r4, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8005d16:	2000      	movs	r0, #0
  TIMx->CCER = tmpccer;
 8005d18:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8005d1a:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d1c:	400b      	ands	r3, r1
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d1e:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d22:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 8005d24:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8005d26:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8005d28:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8005d2c:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 8005d30:	bc30      	pop	{r4, r5}
 8005d32:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8005d34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d38:	d05d      	beq.n	8005df6 <HAL_TIM_ConfigClockSource+0x13a>
 8005d3a:	d931      	bls.n	8005da0 <HAL_TIM_ConfigClockSource+0xe4>
 8005d3c:	4940      	ldr	r1, [pc, #256]	@ (8005e40 <HAL_TIM_ConfigClockSource+0x184>)
 8005d3e:	428b      	cmp	r3, r1
 8005d40:	d006      	beq.n	8005d50 <HAL_TIM_ConfigClockSource+0x94>
 8005d42:	d927      	bls.n	8005d94 <HAL_TIM_ConfigClockSource+0xd8>
 8005d44:	493f      	ldr	r1, [pc, #252]	@ (8005e44 <HAL_TIM_ConfigClockSource+0x188>)
 8005d46:	428b      	cmp	r3, r1
 8005d48:	d002      	beq.n	8005d50 <HAL_TIM_ConfigClockSource+0x94>
 8005d4a:	3110      	adds	r1, #16
 8005d4c:	428b      	cmp	r3, r1
 8005d4e:	d1e9      	bne.n	8005d24 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 8005d50:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d52:	493a      	ldr	r1, [pc, #232]	@ (8005e3c <HAL_TIM_ConfigClockSource+0x180>)
 8005d54:	4001      	ands	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d56:	4319      	orrs	r1, r3
 8005d58:	f041 0107 	orr.w	r1, r1, #7
  TIMx->SMCR = tmpsmcr;
 8005d5c:	60a1      	str	r1, [r4, #8]
}
 8005d5e:	e022      	b.n	8005da6 <HAL_TIM_ConfigClockSource+0xea>
  switch (sClockSourceConfig->ClockSource)
 8005d60:	2b40      	cmp	r3, #64	@ 0x40
 8005d62:	d122      	bne.n	8005daa <HAL_TIM_ConfigClockSource+0xee>
  tmpccer = TIMx->CCER;
 8005d64:	6a23      	ldr	r3, [r4, #32]
                               sClockSourceConfig->ClockPolarity,
 8005d66:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005d68:	68cd      	ldr	r5, [r1, #12]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d6a:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d6e:	6a21      	ldr	r1, [r4, #32]
  tmpccer |= TIM_ICPolarity;
 8005d70:	4318      	orrs	r0, r3
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d72:	4b32      	ldr	r3, [pc, #200]	@ (8005e3c <HAL_TIM_ConfigClockSource+0x180>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d74:	f021 0101 	bic.w	r1, r1, #1
 8005d78:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d7a:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d7c:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d80:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8005d84:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 8005d86:	6220      	str	r0, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8005d88:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d8a:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d8c:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8005d90:	60a3      	str	r3, [r4, #8]
}
 8005d92:	e008      	b.n	8005da6 <HAL_TIM_ConfigClockSource+0xea>
  switch (sClockSourceConfig->ClockSource)
 8005d94:	f023 0110 	bic.w	r1, r3, #16
 8005d98:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8005d9c:	d1c2      	bne.n	8005d24 <HAL_TIM_ConfigClockSource+0x68>
 8005d9e:	e7d7      	b.n	8005d50 <HAL_TIM_ConfigClockSource+0x94>
 8005da0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005da4:	d1be      	bne.n	8005d24 <HAL_TIM_ConfigClockSource+0x68>
  HAL_StatusTypeDef status = HAL_OK;
 8005da6:	2000      	movs	r0, #0
 8005da8:	e7bc      	b.n	8005d24 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8005daa:	d8bb      	bhi.n	8005d24 <HAL_TIM_ConfigClockSource+0x68>
 8005dac:	2b20      	cmp	r3, #32
 8005dae:	d0cf      	beq.n	8005d50 <HAL_TIM_ConfigClockSource+0x94>
 8005db0:	d903      	bls.n	8005dba <HAL_TIM_ConfigClockSource+0xfe>
 8005db2:	2b30      	cmp	r3, #48	@ 0x30
 8005db4:	d0cc      	beq.n	8005d50 <HAL_TIM_ConfigClockSource+0x94>
      status = HAL_ERROR;
 8005db6:	2001      	movs	r0, #1
 8005db8:	e7b4      	b.n	8005d24 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8005dba:	f033 0110 	bics.w	r1, r3, #16
 8005dbe:	d1b1      	bne.n	8005d24 <HAL_TIM_ConfigClockSource+0x68>
 8005dc0:	e7c6      	b.n	8005d50 <HAL_TIM_ConfigClockSource+0x94>
  __HAL_LOCK(htim);
 8005dc2:	2002      	movs	r0, #2
}
 8005dc4:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 8005dc6:	6a23      	ldr	r3, [r4, #32]
                               sClockSourceConfig->ClockPolarity,
 8005dc8:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005dca:	68cd      	ldr	r5, [r1, #12]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005dcc:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dd0:	6a21      	ldr	r1, [r4, #32]
  tmpccer |= TIM_ICPolarity;
 8005dd2:	4318      	orrs	r0, r3
  tmpsmcr &= ~TIM_SMCR_TS;
 8005dd4:	4b19      	ldr	r3, [pc, #100]	@ (8005e3c <HAL_TIM_ConfigClockSource+0x180>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dd6:	f021 0101 	bic.w	r1, r1, #1
 8005dda:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ddc:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005dde:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005de2:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8005de6:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 8005de8:	6220      	str	r0, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8005dea:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005dec:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005dee:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8005df2:	60a3      	str	r3, [r4, #8]
}
 8005df4:	e7d7      	b.n	8005da6 <HAL_TIM_ConfigClockSource+0xea>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005df6:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8005dfa:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005dfc:	432b      	orrs	r3, r5
 8005dfe:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e00:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e04:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8005e08:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e0a:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e0c:	68a3      	ldr	r3, [r4, #8]
 8005e0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005e12:	60a3      	str	r3, [r4, #8]
      break;
 8005e14:	e7c7      	b.n	8005da6 <HAL_TIM_ConfigClockSource+0xea>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e16:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8005e1a:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e1c:	432b      	orrs	r3, r5
 8005e1e:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e20:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e24:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8005e28:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8005e2a:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8005e2c:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e2e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8005e32:	60a3      	str	r3, [r4, #8]
      break;
 8005e34:	e7b7      	b.n	8005da6 <HAL_TIM_ConfigClockSource+0xea>
 8005e36:	bf00      	nop
 8005e38:	ffce0088 	.word	0xffce0088
 8005e3c:	ffcfff8f 	.word	0xffcfff8f
 8005e40:	00100020 	.word	0x00100020
 8005e44:	00100030 	.word	0x00100030

08005e48 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop

08005e4c <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8005e4c:	4770      	bx	lr
 8005e4e:	bf00      	nop

08005e50 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop

08005e54 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop

08005e58 <HAL_TIM_IRQHandler>:
{
 8005e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t itsource = htim->Instance->DIER;
 8005e5a:	6803      	ldr	r3, [r0, #0]
{
 8005e5c:	4605      	mov	r5, r0
  uint32_t itsource = htim->Instance->DIER;
 8005e5e:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005e60:	691c      	ldr	r4, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005e62:	07a1      	lsls	r1, r4, #30
 8005e64:	d501      	bpl.n	8005e6a <HAL_TIM_IRQHandler+0x12>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005e66:	07b2      	lsls	r2, r6, #30
 8005e68:	d457      	bmi.n	8005f1a <HAL_TIM_IRQHandler+0xc2>
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005e6a:	0767      	lsls	r7, r4, #29
 8005e6c:	d501      	bpl.n	8005e72 <HAL_TIM_IRQHandler+0x1a>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005e6e:	0770      	lsls	r0, r6, #29
 8005e70:	d440      	bmi.n	8005ef4 <HAL_TIM_IRQHandler+0x9c>
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005e72:	0721      	lsls	r1, r4, #28
 8005e74:	d501      	bpl.n	8005e7a <HAL_TIM_IRQHandler+0x22>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005e76:	0732      	lsls	r2, r6, #28
 8005e78:	d42a      	bmi.n	8005ed0 <HAL_TIM_IRQHandler+0x78>
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005e7a:	06e7      	lsls	r7, r4, #27
 8005e7c:	d501      	bpl.n	8005e82 <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005e7e:	06f0      	lsls	r0, r6, #27
 8005e80:	d413      	bmi.n	8005eaa <HAL_TIM_IRQHandler+0x52>
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005e82:	07e1      	lsls	r1, r4, #31
 8005e84:	d501      	bpl.n	8005e8a <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005e86:	07f2      	lsls	r2, r6, #31
 8005e88:	d465      	bmi.n	8005f56 <HAL_TIM_IRQHandler+0xfe>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005e8a:	f414 5f02 	tst.w	r4, #8320	@ 0x2080
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005e8e:	f404 7780 	and.w	r7, r4, #256	@ 0x100
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005e92:	d052      	beq.n	8005f3a <HAL_TIM_IRQHandler+0xe2>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005e94:	0633      	lsls	r3, r6, #24
 8005e96:	d466      	bmi.n	8005f66 <HAL_TIM_IRQHandler+0x10e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005e98:	0660      	lsls	r0, r4, #25
 8005e9a:	d501      	bpl.n	8005ea0 <HAL_TIM_IRQHandler+0x48>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005e9c:	0671      	lsls	r1, r6, #25
 8005e9e:	d473      	bmi.n	8005f88 <HAL_TIM_IRQHandler+0x130>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005ea0:	06a2      	lsls	r2, r4, #26
 8005ea2:	d501      	bpl.n	8005ea8 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005ea4:	06b3      	lsls	r3, r6, #26
 8005ea6:	d44d      	bmi.n	8005f44 <HAL_TIM_IRQHandler+0xec>
}
 8005ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005eaa:	682b      	ldr	r3, [r5, #0]
 8005eac:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 8005eb0:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005eb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005eb4:	2208      	movs	r2, #8
 8005eb6:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005eb8:	69db      	ldr	r3, [r3, #28]
 8005eba:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8005ebe:	d174      	bne.n	8005faa <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ec0:	f7ff ffc2 	bl	8005e48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ec4:	4628      	mov	r0, r5
 8005ec6:	f7ff ffc3 	bl	8005e50 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	772b      	strb	r3, [r5, #28]
 8005ece:	e7d8      	b.n	8005e82 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005ed0:	682b      	ldr	r3, [r5, #0]
 8005ed2:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8005ed6:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005ed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005eda:	2204      	movs	r2, #4
 8005edc:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ede:	69db      	ldr	r3, [r3, #28]
 8005ee0:	079b      	lsls	r3, r3, #30
 8005ee2:	d15f      	bne.n	8005fa4 <HAL_TIM_IRQHandler+0x14c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ee4:	f7ff ffb0 	bl	8005e48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ee8:	4628      	mov	r0, r5
 8005eea:	f7ff ffb1 	bl	8005e50 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	772b      	strb	r3, [r5, #28]
 8005ef2:	e7c2      	b.n	8005e7a <HAL_TIM_IRQHandler+0x22>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005ef4:	682b      	ldr	r3, [r5, #0]
 8005ef6:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8005efa:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005efe:	2202      	movs	r2, #2
 8005f00:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f02:	699b      	ldr	r3, [r3, #24]
 8005f04:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8005f08:	d149      	bne.n	8005f9e <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f0a:	f7ff ff9d 	bl	8005e48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f0e:	4628      	mov	r0, r5
 8005f10:	f7ff ff9e 	bl	8005e50 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f14:	2300      	movs	r3, #0
 8005f16:	772b      	strb	r3, [r5, #28]
 8005f18:	e7ab      	b.n	8005e72 <HAL_TIM_IRQHandler+0x1a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005f1a:	f06f 0202 	mvn.w	r2, #2
 8005f1e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f20:	2201      	movs	r2, #1
 8005f22:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f24:	699b      	ldr	r3, [r3, #24]
 8005f26:	079b      	lsls	r3, r3, #30
 8005f28:	d136      	bne.n	8005f98 <HAL_TIM_IRQHandler+0x140>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f2a:	f7ff ff8d 	bl	8005e48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f2e:	4628      	mov	r0, r5
 8005f30:	f7ff ff8e 	bl	8005e50 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f34:	2300      	movs	r3, #0
 8005f36:	772b      	strb	r3, [r5, #28]
 8005f38:	e797      	b.n	8005e6a <HAL_TIM_IRQHandler+0x12>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005f3a:	2f00      	cmp	r7, #0
 8005f3c:	d0ac      	beq.n	8005e98 <HAL_TIM_IRQHandler+0x40>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005f3e:	0637      	lsls	r7, r6, #24
 8005f40:	d41a      	bmi.n	8005f78 <HAL_TIM_IRQHandler+0x120>
 8005f42:	e7a9      	b.n	8005e98 <HAL_TIM_IRQHandler+0x40>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005f44:	682b      	ldr	r3, [r5, #0]
 8005f46:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8005f4a:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005f4c:	611a      	str	r2, [r3, #16]
}
 8005f4e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      HAL_TIMEx_CommutCallback(htim);
 8005f52:	f000 b92d 	b.w	80061b0 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005f56:	682b      	ldr	r3, [r5, #0]
 8005f58:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f5c:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005f5e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f60:	f7fb fc1e 	bl	80017a0 <HAL_TIM_PeriodElapsedCallback>
 8005f64:	e791      	b.n	8005e8a <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005f66:	682b      	ldr	r3, [r5, #0]
 8005f68:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
      HAL_TIMEx_BreakCallback(htim);
 8005f6c:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005f6e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005f70:	f000 f920 	bl	80061b4 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005f74:	2f00      	cmp	r7, #0
 8005f76:	d08f      	beq.n	8005e98 <HAL_TIM_IRQHandler+0x40>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f78:	682b      	ldr	r3, [r5, #0]
 8005f7a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
      HAL_TIMEx_Break2Callback(htim);
 8005f7e:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f80:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8005f82:	f000 f919 	bl	80061b8 <HAL_TIMEx_Break2Callback>
 8005f86:	e787      	b.n	8005e98 <HAL_TIM_IRQHandler+0x40>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005f88:	682b      	ldr	r3, [r5, #0]
 8005f8a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 8005f8e:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005f90:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005f92:	f7ff ff5f 	bl	8005e54 <HAL_TIM_TriggerCallback>
 8005f96:	e783      	b.n	8005ea0 <HAL_TIM_IRQHandler+0x48>
          HAL_TIM_IC_CaptureCallback(htim);
 8005f98:	f7ff ff58 	bl	8005e4c <HAL_TIM_IC_CaptureCallback>
 8005f9c:	e7ca      	b.n	8005f34 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8005f9e:	f7ff ff55 	bl	8005e4c <HAL_TIM_IC_CaptureCallback>
 8005fa2:	e7b7      	b.n	8005f14 <HAL_TIM_IRQHandler+0xbc>
        HAL_TIM_IC_CaptureCallback(htim);
 8005fa4:	f7ff ff52 	bl	8005e4c <HAL_TIM_IC_CaptureCallback>
 8005fa8:	e7a1      	b.n	8005eee <HAL_TIM_IRQHandler+0x96>
        HAL_TIM_IC_CaptureCallback(htim);
 8005faa:	f7ff ff4f 	bl	8005e4c <HAL_TIM_IC_CaptureCallback>
 8005fae:	e78c      	b.n	8005eca <HAL_TIM_IRQHandler+0x72>

08005fb0 <TIM_Base_SetConfig>:
{
 8005fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fb2:	4a34      	ldr	r2, [pc, #208]	@ (8006084 <TIM_Base_SetConfig+0xd4>)
 8005fb4:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8005fb8:	4c33      	ldr	r4, [pc, #204]	@ (8006088 <TIM_Base_SetConfig+0xd8>)
 8005fba:	eba0 0202 	sub.w	r2, r0, r2
  tmpcr1 = TIMx->CR1;
 8005fbe:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fc0:	eba0 0e04 	sub.w	lr, r0, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fc4:	694f      	ldr	r7, [r1, #20]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fc6:	fab2 f282 	clz	r2, r2
  TIMx->PSC = Structure->Prescaler;
 8005fca:	680d      	ldr	r5, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fcc:	fabe fe8e 	clz	lr, lr
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fd0:	688e      	ldr	r6, [r1, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fd2:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8005fd6:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8005fda:	d020      	beq.n	800601e <TIM_Base_SetConfig+0x6e>
 8005fdc:	b9fa      	cbnz	r2, 800601e <TIM_Base_SetConfig+0x6e>
 8005fde:	f8df c0b4 	ldr.w	ip, [pc, #180]	@ 8006094 <TIM_Base_SetConfig+0xe4>
 8005fe2:	4560      	cmp	r0, ip
 8005fe4:	d01b      	beq.n	800601e <TIM_Base_SetConfig+0x6e>
 8005fe6:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8005fea:	4560      	cmp	r0, ip
 8005fec:	d017      	beq.n	800601e <TIM_Base_SetConfig+0x6e>
 8005fee:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8005ff2:	4560      	cmp	r0, ip
 8005ff4:	d013      	beq.n	800601e <TIM_Base_SetConfig+0x6e>
 8005ff6:	f1be 0f00 	cmp.w	lr, #0
 8005ffa:	d110      	bne.n	800601e <TIM_Base_SetConfig+0x6e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ffc:	4c23      	ldr	r4, [pc, #140]	@ (800608c <TIM_Base_SetConfig+0xdc>)
 8005ffe:	4a24      	ldr	r2, [pc, #144]	@ (8006090 <TIM_Base_SetConfig+0xe0>)
 8006000:	4290      	cmp	r0, r2
 8006002:	bf18      	it	ne
 8006004:	42a0      	cmpne	r0, r4
 8006006:	d032      	beq.n	800606e <TIM_Base_SetConfig+0xbe>
 8006008:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800600c:	4290      	cmp	r0, r2
 800600e:	d02e      	beq.n	800606e <TIM_Base_SetConfig+0xbe>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006010:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006014:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
 8006016:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006018:	62c6      	str	r6, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800601a:	6285      	str	r5, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800601c:	e01d      	b.n	800605a <TIM_Base_SetConfig+0xaa>
    tmpcr1 |= Structure->CounterMode;
 800601e:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006020:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8006024:	4323      	orrs	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006026:	68cc      	ldr	r4, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006028:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800602c:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800602e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006032:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
 8006034:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006036:	62c6      	str	r6, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006038:	6285      	str	r5, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800603a:	b962      	cbnz	r2, 8006056 <TIM_Base_SetConfig+0xa6>
 800603c:	f1be 0f00 	cmp.w	lr, #0
 8006040:	d109      	bne.n	8006056 <TIM_Base_SetConfig+0xa6>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006042:	4a13      	ldr	r2, [pc, #76]	@ (8006090 <TIM_Base_SetConfig+0xe0>)
 8006044:	4b11      	ldr	r3, [pc, #68]	@ (800608c <TIM_Base_SetConfig+0xdc>)
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006046:	4298      	cmp	r0, r3
 8006048:	bf18      	it	ne
 800604a:	4290      	cmpne	r0, r2
 800604c:	d003      	beq.n	8006056 <TIM_Base_SetConfig+0xa6>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800604e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006052:	4298      	cmp	r0, r3
 8006054:	d101      	bne.n	800605a <TIM_Base_SetConfig+0xaa>
    TIMx->RCR = Structure->RepetitionCounter;
 8006056:	690b      	ldr	r3, [r1, #16]
 8006058:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 800605a:	2301      	movs	r3, #1
 800605c:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800605e:	6903      	ldr	r3, [r0, #16]
 8006060:	07db      	lsls	r3, r3, #31
 8006062:	d503      	bpl.n	800606c <TIM_Base_SetConfig+0xbc>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006064:	6903      	ldr	r3, [r0, #16]
 8006066:	f023 0301 	bic.w	r3, r3, #1
 800606a:	6103      	str	r3, [r0, #16]
}
 800606c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800606e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006070:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006074:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006076:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800607a:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
 800607c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800607e:	62c6      	str	r6, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006080:	6285      	str	r5, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006082:	e7de      	b.n	8006042 <TIM_Base_SetConfig+0x92>
 8006084:	40010000 	.word	0x40010000
 8006088:	40010400 	.word	0x40010400
 800608c:	40014000 	.word	0x40014000
 8006090:	40014400 	.word	0x40014400
 8006094:	40000400 	.word	0x40000400

08006098 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8006098:	b370      	cbz	r0, 80060f8 <HAL_TIM_Base_Init+0x60>
{
 800609a:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800609c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80060a0:	4604      	mov	r4, r0
 80060a2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80060a6:	b313      	cbz	r3, 80060ee <HAL_TIM_Base_Init+0x56>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060a8:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80060aa:	2302      	movs	r3, #2
 80060ac:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060b0:	f851 0b04 	ldr.w	r0, [r1], #4
 80060b4:	f7ff ff7c 	bl	8005fb0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060b8:	2301      	movs	r3, #1
  return HAL_OK;
 80060ba:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060bc:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060c0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80060c4:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80060c8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80060cc:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 80060d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80060d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060d8:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80060dc:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80060e0:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 80060e4:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 80060e8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 80060ec:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80060ee:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80060f2:	f7fb f933 	bl	800135c <HAL_TIM_Base_MspInit>
 80060f6:	e7d7      	b.n	80060a8 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 80060f8:	2001      	movs	r0, #1
}
 80060fa:	4770      	bx	lr

080060fc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060fc:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8006100:	2b01      	cmp	r3, #1
 8006102:	d04b      	beq.n	800619c <HAL_TIMEx_MasterConfigSynchronization+0xa0>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006104:	6803      	ldr	r3, [r0, #0]
 8006106:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8006108:	2002      	movs	r0, #2
{
 800610a:	b430      	push	{r4, r5}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800610c:	4d24      	ldr	r5, [pc, #144]	@ (80061a0 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
  htim->State = HAL_TIM_STATE_BUSY;
 800610e:	f882 003d 	strb.w	r0, [r2, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006112:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8006114:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8006116:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006118:	d029      	beq.n	800616e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800611a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800611e:	42ab      	cmp	r3, r5
 8006120:	d025      	beq.n	800616e <HAL_TIMEx_MasterConfigSynchronization+0x72>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006122:	4d20      	ldr	r5, [pc, #128]	@ (80061a4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8006124:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006128:	42ab      	cmp	r3, r5
 800612a:	bf18      	it	ne
 800612c:	f1b3 4f80 	cmpne.w	r3, #1073741824	@ 0x40000000
 8006130:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006134:	bf0c      	ite	eq
 8006136:	f04f 0c01 	moveq.w	ip, #1
 800613a:	f04f 0c00 	movne.w	ip, #0
 800613e:	42ab      	cmp	r3, r5
 8006140:	bf08      	it	eq
 8006142:	f04c 0c01 	orreq.w	ip, ip, #1
 8006146:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800614a:	42ab      	cmp	r3, r5
 800614c:	bf08      	it	eq
 800614e:	f04c 0c01 	orreq.w	ip, ip, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006152:	680d      	ldr	r5, [r1, #0]
 8006154:	4328      	orrs	r0, r5
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006156:	4d14      	ldr	r5, [pc, #80]	@ (80061a8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
  htim->Instance->CR2 = tmpcr2;
 8006158:	6058      	str	r0, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800615a:	42ab      	cmp	r3, r5
 800615c:	bf14      	ite	ne
 800615e:	4660      	movne	r0, ip
 8006160:	f04c 0001 	orreq.w	r0, ip, #1
 8006164:	b960      	cbnz	r0, 8006180 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006166:	4811      	ldr	r0, [pc, #68]	@ (80061ac <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006168:	4283      	cmp	r3, r0
 800616a:	d009      	beq.n	8006180 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800616c:	e00d      	b.n	800618a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800616e:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006170:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006174:	4328      	orrs	r0, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006176:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8006178:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800617c:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 800617e:	6058      	str	r0, [r3, #4]
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006180:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006182:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006186:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006188:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800618a:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800618c:	2101      	movs	r1, #1

  return HAL_OK;
 800618e:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 8006190:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8006194:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 8006198:	bc30      	pop	{r4, r5}
 800619a:	4770      	bx	lr
  __HAL_LOCK(htim);
 800619c:	2002      	movs	r0, #2
}
 800619e:	4770      	bx	lr
 80061a0:	40010000 	.word	0x40010000
 80061a4:	40000400 	.word	0x40000400
 80061a8:	40001800 	.word	0x40001800
 80061ac:	40014000 	.word	0x40014000

080061b0 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop

080061b4 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 80061b4:	4770      	bx	lr
 80061b6:	bf00      	nop

080061b8 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 80061b8:	4770      	bx	lr
 80061ba:	bf00      	nop

080061bc <ethernet_link_status_updated>:
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80061bc:	4770      	bx	lr
 80061be:	bf00      	nop

080061c0 <MX_LWIP_Init>:
{
 80061c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  IP_ADDRESS[0] = 192;
 80061c2:	4b24      	ldr	r3, [pc, #144]	@ (8006254 <MX_LWIP_Init+0x94>)
	tcpip_init(tcpip_init_done, arg);
 80061c4:	2100      	movs	r1, #0
  IP_ADDRESS[0] = 192;
 80061c6:	4f24      	ldr	r7, [pc, #144]	@ (8006258 <MX_LWIP_Init+0x98>)
{
 80061c8:	b085      	sub	sp, #20
  NETMASK_ADDRESS[0] = 255;
 80061ca:	4e24      	ldr	r6, [pc, #144]	@ (800625c <MX_LWIP_Init+0x9c>)
	tcpip_init(tcpip_init_done, arg);
 80061cc:	4608      	mov	r0, r1
  IP_ADDRESS[0] = 192;
 80061ce:	603b      	str	r3, [r7, #0]
  NETMASK_ADDRESS[0] = 255;
 80061d0:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
  GATEWAY_ADDRESS[0] = 192;
 80061d4:	4d22      	ldr	r5, [pc, #136]	@ (8006260 <MX_LWIP_Init+0xa0>)
  NETMASK_ADDRESS[0] = 255;
 80061d6:	6033      	str	r3, [r6, #0]
  GATEWAY_ADDRESS[0] = 192;
 80061d8:	f503 4328 	add.w	r3, r3, #43008	@ 0xa800
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80061dc:	4c21      	ldr	r4, [pc, #132]	@ (8006264 <MX_LWIP_Init+0xa4>)
  GATEWAY_ADDRESS[0] = 192;
 80061de:	33c1      	adds	r3, #193	@ 0xc1
 80061e0:	602b      	str	r3, [r5, #0]
	tcpip_init(tcpip_init_done, arg);
 80061e2:	f003 f831 	bl	8009248 <tcpip_init>
	LOCK_TCPIP_CORE();
 80061e6:	f000 fb23 	bl	8006830 <sys_lock_tcpip_core>
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80061ea:	683a      	ldr	r2, [r7, #0]
 80061ec:	491e      	ldr	r1, [pc, #120]	@ (8006268 <MX_LWIP_Init+0xa8>)
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80061ee:	6833      	ldr	r3, [r6, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80061f0:	2600      	movs	r6, #0
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80061f2:	600a      	str	r2, [r1, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80061f4:	4a1d      	ldr	r2, [pc, #116]	@ (800626c <MX_LWIP_Init+0xac>)
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80061f6:	6828      	ldr	r0, [r5, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80061f8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80061fa:	4b1d      	ldr	r3, [pc, #116]	@ (8006270 <MX_LWIP_Init+0xb0>)
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80061fc:	4d1d      	ldr	r5, [pc, #116]	@ (8006274 <MX_LWIP_Init+0xb4>)
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80061fe:	6018      	str	r0, [r3, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8006200:	481d      	ldr	r0, [pc, #116]	@ (8006278 <MX_LWIP_Init+0xb8>)
 8006202:	9600      	str	r6, [sp, #0]
 8006204:	9002      	str	r0, [sp, #8]
 8006206:	481d      	ldr	r0, [pc, #116]	@ (800627c <MX_LWIP_Init+0xbc>)
 8006208:	9001      	str	r0, [sp, #4]
 800620a:	4620      	mov	r0, r4
 800620c:	f003 fcd4 	bl	8009bb8 <netif_add>
  netif_set_default(&gnetif);
 8006210:	4620      	mov	r0, r4
 8006212:	f003 fd83 	bl	8009d1c <netif_set_default>
  netif_set_up(&gnetif);
 8006216:	4620      	mov	r0, r4
 8006218:	f003 fd8a 	bl	8009d30 <netif_set_up>
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800621c:	4620      	mov	r0, r4
 800621e:	4918      	ldr	r1, [pc, #96]	@ (8006280 <MX_LWIP_Init+0xc0>)
 8006220:	f003 fe1a 	bl	8009e58 <netif_set_link_callback>
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8006224:	4631      	mov	r1, r6
 8006226:	2220      	movs	r2, #32
 8006228:	4628      	mov	r0, r5
 800622a:	f00a fdca 	bl	8010dc2 <memset>
  attributes.name = "EthLink";
 800622e:	4b15      	ldr	r3, [pc, #84]	@ (8006284 <MX_LWIP_Init+0xc4>)
 8006230:	1f2a      	subs	r2, r5, #4
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8006232:	f44f 6080 	mov.w	r0, #1024	@ 0x400
  attributes.name = "EthLink";
 8006236:	f845 3c04 	str.w	r3, [r5, #-4]
  attributes.priority = osPriorityBelowNormal;
 800623a:	2310      	movs	r3, #16
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800623c:	4621      	mov	r1, r4
  attributes.priority = osPriorityBelowNormal;
 800623e:	e9c2 0305 	strd	r0, r3, [r2, #20]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8006242:	4811      	ldr	r0, [pc, #68]	@ (8006288 <MX_LWIP_Init+0xc8>)
 8006244:	f000 fbf6 	bl	8006a34 <osThreadNew>
}
 8006248:	b005      	add	sp, #20
 800624a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  UNLOCK_TCPIP_CORE();
 800624e:	f000 bb6d 	b.w	800692c <sys_unlock_tcpip_core>
 8006252:	bf00      	nop
 8006254:	0a00a8c0 	.word	0x0a00a8c0
 8006258:	240001f0 	.word	0x240001f0
 800625c:	240001ec 	.word	0x240001ec
 8006260:	240001e8 	.word	0x240001e8
 8006264:	24000200 	.word	0x24000200
 8006268:	240001fc 	.word	0x240001fc
 800626c:	240001f8 	.word	0x240001f8
 8006270:	240001f4 	.word	0x240001f4
 8006274:	240001c8 	.word	0x240001c8
 8006278:	080091cd 	.word	0x080091cd
 800627c:	08006451 	.word	0x08006451
 8006280:	080061bd 	.word	0x080061bd
 8006284:	080127bc 	.word	0x080127bc
 8006288:	0800684d 	.word	0x0800684d

0800628c <ETH_PHY_IO_DeInit>:
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
  return 0;
}
 800628c:	2000      	movs	r0, #0
 800628e:	4770      	bx	lr

08006290 <low_level_output>:
{
 8006290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006292:	b08d      	sub	sp, #52	@ 0x34
 8006294:	460c      	mov	r4, r1
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8006296:	2230      	movs	r2, #48	@ 0x30
 8006298:	2100      	movs	r1, #0
 800629a:	4668      	mov	r0, sp
 800629c:	f00a fd91 	bl	8010dc2 <memset>
  for(q = p; q != NULL; q = q->next)
 80062a0:	b1fc      	cbz	r4, 80062e2 <low_level_output+0x52>
 80062a2:	466b      	mov	r3, sp
 80062a4:	4622      	mov	r2, r4
  uint32_t i = 0U;
 80062a6:	2000      	movs	r0, #0
    Txbuffer[i].len = q->len;
 80062a8:	8951      	ldrh	r1, [r2, #10]
    Txbuffer[i].buffer = q->payload;
 80062aa:	6855      	ldr	r5, [r2, #4]
    if(q->next == NULL)
 80062ac:	6812      	ldr	r2, [r2, #0]
    Txbuffer[i].len = q->len;
 80062ae:	e9c3 5100 	strd	r5, r1, [r3]
    if(i>0)
 80062b2:	b918      	cbnz	r0, 80062bc <low_level_output+0x2c>
    if(i >= ETH_TX_DESC_CNT)
 80062b4:	330c      	adds	r3, #12
    if(q->next == NULL)
 80062b6:	b162      	cbz	r2, 80062d2 <low_level_output+0x42>
    i++;
 80062b8:	2001      	movs	r0, #1
 80062ba:	e7f5      	b.n	80062a8 <low_level_output+0x18>
      Txbuffer[i-1].next = &Txbuffer[i];
 80062bc:	f843 3c04 	str.w	r3, [r3, #-4]
    if(q->next == NULL)
 80062c0:	b13a      	cbz	r2, 80062d2 <low_level_output+0x42>
    i++;
 80062c2:	3001      	adds	r0, #1
    if(i >= ETH_TX_DESC_CNT)
 80062c4:	330c      	adds	r3, #12
 80062c6:	2804      	cmp	r0, #4
 80062c8:	d1ee      	bne.n	80062a8 <low_level_output+0x18>
      return ERR_IF;
 80062ca:	f06f 000b 	mvn.w	r0, #11
}
 80062ce:	b00d      	add	sp, #52	@ 0x34
 80062d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Txbuffer[i].next = NULL;
 80062d2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80062d6:	aa0c      	add	r2, sp, #48	@ 0x30
 80062d8:	2300      	movs	r3, #0
 80062da:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 80062de:	f840 3c28 	str.w	r3, [r0, #-40]
  TxConfig.Length = p->tot_len;
 80062e2:	8923      	ldrh	r3, [r4, #8]
  pbuf_ref(p);
 80062e4:	4620      	mov	r0, r4
  TxConfig.Length = p->tot_len;
 80062e6:	4e10      	ldr	r6, [pc, #64]	@ (8006328 <low_level_output+0x98>)
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 80062e8:	4d10      	ldr	r5, [pc, #64]	@ (800632c <low_level_output+0x9c>)
        osSemaphoreAcquire(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 80062ea:	4f11      	ldr	r7, [pc, #68]	@ (8006330 <low_level_output+0xa0>)
  TxConfig.Length = p->tot_len;
 80062ec:	6073      	str	r3, [r6, #4]
  TxConfig.TxBuffer = Txbuffer;
 80062ee:	f8c6 d008 	str.w	sp, [r6, #8]
  TxConfig.pData = p;
 80062f2:	6374      	str	r4, [r6, #52]	@ 0x34
  pbuf_ref(p);
 80062f4:	f004 f83a 	bl	800a36c <pbuf_ref>
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 80062f8:	4631      	mov	r1, r6
 80062fa:	4628      	mov	r0, r5
 80062fc:	f7fc fdc8 	bl	8002e90 <HAL_ETH_Transmit_IT>
 8006300:	2800      	cmp	r0, #0
 8006302:	d0e4      	beq.n	80062ce <low_level_output+0x3e>
      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 8006304:	4628      	mov	r0, r5
 8006306:	f7fd f9ef 	bl	80036e8 <HAL_ETH_GetError>
 800630a:	0783      	lsls	r3, r0, #30
        osSemaphoreAcquire(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 800630c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 8006310:	d506      	bpl.n	8006320 <low_level_output+0x90>
        osSemaphoreAcquire(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 8006312:	6838      	ldr	r0, [r7, #0]
 8006314:	f000 fcb4 	bl	8006c80 <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 8006318:	4628      	mov	r0, r5
 800631a:	f7fc fe73 	bl	8003004 <HAL_ETH_ReleaseTxPacket>
  }while(errval == ERR_BUF);
 800631e:	e7eb      	b.n	80062f8 <low_level_output+0x68>
        pbuf_free(p);
 8006320:	4620      	mov	r0, r4
 8006322:	f003 feab 	bl	800a07c <pbuf_free>
  }while(errval == ERR_BUF);
 8006326:	e7d0      	b.n	80062ca <low_level_output+0x3a>
 8006328:	2400025c 	.word	0x2400025c
 800632c:	24000294 	.word	0x24000294
 8006330:	24000344 	.word	0x24000344

08006334 <ETH_PHY_IO_GetTick>:
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
  return HAL_GetTick();
 8006334:	f7fb bb6c 	b.w	8001a10 <HAL_GetTick>

08006338 <ETH_PHY_IO_Init>:
  HAL_ETH_SetMDIOClockRange(&heth);
 8006338:	4802      	ldr	r0, [pc, #8]	@ (8006344 <ETH_PHY_IO_Init+0xc>)
{
 800633a:	b508      	push	{r3, lr}
  HAL_ETH_SetMDIOClockRange(&heth);
 800633c:	f7fd f874 	bl	8003428 <HAL_ETH_SetMDIOClockRange>
}
 8006340:	2000      	movs	r0, #0
 8006342:	bd08      	pop	{r3, pc}
 8006344:	24000294 	.word	0x24000294

08006348 <ETH_PHY_IO_ReadReg>:
{
 8006348:	4684      	mov	ip, r0
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800634a:	4806      	ldr	r0, [pc, #24]	@ (8006364 <ETH_PHY_IO_ReadReg+0x1c>)
{
 800634c:	b508      	push	{r3, lr}
 800634e:	4613      	mov	r3, r2
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8006350:	460a      	mov	r2, r1
 8006352:	4661      	mov	r1, ip
 8006354:	f7fc ff30 	bl	80031b8 <HAL_ETH_ReadPHYRegister>
 8006358:	3800      	subs	r0, #0
 800635a:	bf18      	it	ne
 800635c:	2001      	movne	r0, #1
}
 800635e:	4240      	negs	r0, r0
 8006360:	bd08      	pop	{r3, pc}
 8006362:	bf00      	nop
 8006364:	24000294 	.word	0x24000294

08006368 <ETH_PHY_IO_WriteReg>:
{
 8006368:	4684      	mov	ip, r0
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800636a:	4806      	ldr	r0, [pc, #24]	@ (8006384 <ETH_PHY_IO_WriteReg+0x1c>)
{
 800636c:	b508      	push	{r3, lr}
 800636e:	4613      	mov	r3, r2
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8006370:	460a      	mov	r2, r1
 8006372:	4661      	mov	r1, ip
 8006374:	f7fc ff4e 	bl	8003214 <HAL_ETH_WritePHYRegister>
 8006378:	3800      	subs	r0, #0
 800637a:	bf18      	it	ne
 800637c:	2001      	movne	r0, #1
}
 800637e:	4240      	negs	r0, r0
 8006380:	bd08      	pop	{r3, pc}
 8006382:	bf00      	nop
 8006384:	24000294 	.word	0x24000294

08006388 <pbuf_free_custom>:
{
 8006388:	4601      	mov	r1, r0
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800638a:	4808      	ldr	r0, [pc, #32]	@ (80063ac <pbuf_free_custom+0x24>)
{
 800638c:	b508      	push	{r3, lr}
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800638e:	f003 fb3f 	bl	8009a10 <memp_free_pool>
  if (RxAllocStatus == RX_ALLOC_ERROR)
 8006392:	4b07      	ldr	r3, [pc, #28]	@ (80063b0 <pbuf_free_custom+0x28>)
 8006394:	781a      	ldrb	r2, [r3, #0]
 8006396:	2a01      	cmp	r2, #1
 8006398:	d000      	beq.n	800639c <pbuf_free_custom+0x14>
}
 800639a:	bd08      	pop	{r3, pc}
    osSemaphoreRelease(RxPktSemaphore);
 800639c:	4905      	ldr	r1, [pc, #20]	@ (80063b4 <pbuf_free_custom+0x2c>)
    RxAllocStatus = RX_ALLOC_OK;
 800639e:	2200      	movs	r2, #0
    osSemaphoreRelease(RxPktSemaphore);
 80063a0:	6808      	ldr	r0, [r1, #0]
    RxAllocStatus = RX_ALLOC_OK;
 80063a2:	701a      	strb	r2, [r3, #0]
}
 80063a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    osSemaphoreRelease(RxPktSemaphore);
 80063a8:	f000 bc9c 	b.w	8006ce4 <osSemaphoreRelease>
 80063ac:	0801287c 	.word	0x0801287c
 80063b0:	2400034c 	.word	0x2400034c
 80063b4:	24000348 	.word	0x24000348

080063b8 <ethernetif_input>:
{
 80063b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80063bc:	4c14      	ldr	r4, [pc, #80]	@ (8006410 <ethernetif_input+0x58>)
 80063be:	b083      	sub	sp, #12
 80063c0:	f8df 8050 	ldr.w	r8, [pc, #80]	@ 8006414 <ethernetif_input+0x5c>
 80063c4:	4606      	mov	r6, r0
  struct pbuf *p = NULL;
 80063c6:	2700      	movs	r7, #0
    HAL_ETH_ReadData(&heth, (void **)&p);
 80063c8:	f8df 904c 	ldr.w	r9, [pc, #76]	@ 8006418 <ethernetif_input+0x60>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80063cc:	f04f 31ff 	mov.w	r1, #4294967295
 80063d0:	6820      	ldr	r0, [r4, #0]
 80063d2:	f000 fc55 	bl	8006c80 <osSemaphoreAcquire>
 80063d6:	2800      	cmp	r0, #0
 80063d8:	d1f8      	bne.n	80063cc <ethernetif_input+0x14>
  if(RxAllocStatus == RX_ALLOC_OK)
 80063da:	f898 3000 	ldrb.w	r3, [r8]
  struct pbuf *p = NULL;
 80063de:	9701      	str	r7, [sp, #4]
  if(RxAllocStatus == RX_ALLOC_OK)
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d1f3      	bne.n	80063cc <ethernetif_input+0x14>
    HAL_ETH_ReadData(&heth, (void **)&p);
 80063e4:	a901      	add	r1, sp, #4
 80063e6:	4648      	mov	r0, r9
 80063e8:	f7fc fd82 	bl	8002ef0 <HAL_ETH_ReadData>
  return p;
 80063ec:	9d01      	ldr	r5, [sp, #4]
          if (netif->input( p, netif) != ERR_OK )
 80063ee:	4631      	mov	r1, r6
 80063f0:	4628      	mov	r0, r5
        if (p != NULL)
 80063f2:	2d00      	cmp	r5, #0
 80063f4:	d0ea      	beq.n	80063cc <ethernetif_input+0x14>
          if (netif->input( p, netif) != ERR_OK )
 80063f6:	6933      	ldr	r3, [r6, #16]
 80063f8:	4798      	blx	r3
 80063fa:	2800      	cmp	r0, #0
 80063fc:	d0ed      	beq.n	80063da <ethernetif_input+0x22>
            pbuf_free(p);
 80063fe:	4628      	mov	r0, r5
 8006400:	f003 fe3c 	bl	800a07c <pbuf_free>
  if(RxAllocStatus == RX_ALLOC_OK)
 8006404:	f898 3000 	ldrb.w	r3, [r8]
  struct pbuf *p = NULL;
 8006408:	9701      	str	r7, [sp, #4]
  if(RxAllocStatus == RX_ALLOC_OK)
 800640a:	2b00      	cmp	r3, #0
 800640c:	d1de      	bne.n	80063cc <ethernetif_input+0x14>
 800640e:	e7e9      	b.n	80063e4 <ethernetif_input+0x2c>
 8006410:	24000348 	.word	0x24000348
 8006414:	2400034c 	.word	0x2400034c
 8006418:	24000294 	.word	0x24000294

0800641c <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(RxPktSemaphore);
 800641c:	4b01      	ldr	r3, [pc, #4]	@ (8006424 <HAL_ETH_RxCpltCallback+0x8>)
 800641e:	6818      	ldr	r0, [r3, #0]
 8006420:	f000 bc60 	b.w	8006ce4 <osSemaphoreRelease>
 8006424:	24000348 	.word	0x24000348

08006428 <HAL_ETH_TxCpltCallback>:
  osSemaphoreRelease(TxPktSemaphore);
 8006428:	4b01      	ldr	r3, [pc, #4]	@ (8006430 <HAL_ETH_TxCpltCallback+0x8>)
 800642a:	6818      	ldr	r0, [r3, #0]
 800642c:	f000 bc5a 	b.w	8006ce4 <osSemaphoreRelease>
 8006430:	24000344 	.word	0x24000344

08006434 <HAL_ETH_ErrorCallback>:
{
 8006434:	b508      	push	{r3, lr}
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 8006436:	f7fd f95b 	bl	80036f0 <HAL_ETH_GetDMAError>
 800643a:	0603      	lsls	r3, r0, #24
 800643c:	d400      	bmi.n	8006440 <HAL_ETH_ErrorCallback+0xc>
}
 800643e:	bd08      	pop	{r3, pc}
     osSemaphoreRelease(RxPktSemaphore);
 8006440:	4b02      	ldr	r3, [pc, #8]	@ (800644c <HAL_ETH_ErrorCallback+0x18>)
 8006442:	6818      	ldr	r0, [r3, #0]
}
 8006444:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     osSemaphoreRelease(RxPktSemaphore);
 8006448:	f000 bc4c 	b.w	8006ce4 <osSemaphoreRelease>
 800644c:	24000348 	.word	0x24000348

08006450 <ethernetif_init>:
{
 8006450:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006454:	4604      	mov	r4, r0
{
 8006456:	b0a5      	sub	sp, #148	@ 0x94
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006458:	2800      	cmp	r0, #0
 800645a:	f000 80b8 	beq.w	80065ce <ethernetif_init+0x17e>
  netif->linkoutput = low_level_output;
 800645e:	4b60      	ldr	r3, [pc, #384]	@ (80065e0 <ethernetif_init+0x190>)
  netif->name[0] = IFNAME0;
 8006460:	f247 4173 	movw	r1, #29811	@ 0x7473
  netif->output = etharp_output;
 8006464:	4a5f      	ldr	r2, [pc, #380]	@ (80065e4 <ethernetif_init+0x194>)
  ETH_MACConfigTypeDef MACConf = {0};
 8006466:	a80b      	add	r0, sp, #44	@ 0x2c
  netif->name[0] = IFNAME0;
 8006468:	85e1      	strh	r1, [r4, #46]	@ 0x2e
  ETH_MACConfigTypeDef MACConf = {0};
 800646a:	2100      	movs	r1, #0
  netif->output = etharp_output;
 800646c:	6162      	str	r2, [r4, #20]
  ETH_MACConfigTypeDef MACConf = {0};
 800646e:	2264      	movs	r2, #100	@ 0x64
  netif->linkoutput = low_level_output;
 8006470:	61a3      	str	r3, [r4, #24]
  MACAddr[4] = 0x00;
 8006472:	2600      	movs	r6, #0
  ETH_MACConfigTypeDef MACConf = {0};
 8006474:	f00a fca5 	bl	8010dc2 <memset>
  heth.Instance = ETH;
 8006478:	4d5b      	ldr	r5, [pc, #364]	@ (80065e8 <ethernetif_init+0x198>)
 800647a:	4b5c      	ldr	r3, [pc, #368]	@ (80065ec <ethernetif_init+0x19c>)
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800647c:	2701      	movs	r7, #1
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800647e:	f8df 91ac 	ldr.w	r9, [pc, #428]	@ 800662c <ethernetif_init+0x1dc>
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8006482:	4628      	mov	r0, r5
  heth.Instance = ETH;
 8006484:	602b      	str	r3, [r5, #0]
  MACAddr[0] = 0x00;
 8006486:	4b5a      	ldr	r3, [pc, #360]	@ (80065f0 <ethernetif_init+0x1a0>)
  MACAddr[4] = 0x00;
 8006488:	f8ad 6004 	strh.w	r6, [sp, #4]
  MACAddr[0] = 0x00;
 800648c:	9300      	str	r3, [sp, #0]
  heth.Init.TxDesc = DMATxDscrTab;
 800648e:	4b59      	ldr	r3, [pc, #356]	@ (80065f4 <ethernetif_init+0x1a4>)
  heth.Init.MACAddr = &MACAddr[0];
 8006490:	f8c5 d004 	str.w	sp, [r5, #4]
  heth.Init.TxDesc = DMATxDscrTab;
 8006494:	60eb      	str	r3, [r5, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8006496:	4b58      	ldr	r3, [pc, #352]	@ (80065f8 <ethernetif_init+0x1a8>)
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8006498:	722f      	strb	r7, [r5, #8]
  heth.Init.RxDesc = DMARxDscrTab;
 800649a:	612b      	str	r3, [r5, #16]
  heth.Init.RxBuffLen = 1536;
 800649c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80064a0:	616b      	str	r3, [r5, #20]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 80064a2:	f7fc fff7 	bl	8003494 <HAL_ETH_Init>
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80064a6:	2234      	movs	r2, #52	@ 0x34
 80064a8:	4631      	mov	r1, r6
  hal_eth_init_status = HAL_ETH_Init(&heth);
 80064aa:	4680      	mov	r8, r0
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80064ac:	4648      	mov	r0, r9
 80064ae:	f00a fc88 	bl	8010dc2 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80064b2:	2321      	movs	r3, #33	@ 0x21
  LWIP_MEMPOOL_INIT(RX_POOL);
 80064b4:	4851      	ldr	r0, [pc, #324]	@ (80065fc <ethernetif_init+0x1ac>)
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80064b6:	f849 3c04 	str.w	r3, [r9, #-4]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80064ba:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80064be:	f8c9 3010 	str.w	r3, [r9, #16]
  LWIP_MEMPOOL_INIT(RX_POOL);
 80064c2:	f003 fa2d 	bl	8009920 <memp_init_pool>
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80064c6:	686b      	ldr	r3, [r5, #4]
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80064c8:	2206      	movs	r2, #6
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 80064ca:	4638      	mov	r0, r7
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80064cc:	f884 202c 	strb.w	r2, [r4, #44]	@ 0x2c
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80064d0:	781a      	ldrb	r2, [r3, #0]
 80064d2:	f884 2026 	strb.w	r2, [r4, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80064d6:	785a      	ldrb	r2, [r3, #1]
 80064d8:	f884 2027 	strb.w	r2, [r4, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80064dc:	789a      	ldrb	r2, [r3, #2]
 80064de:	f884 2028 	strb.w	r2, [r4, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80064e2:	78da      	ldrb	r2, [r3, #3]
 80064e4:	f884 2029 	strb.w	r2, [r4, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80064e8:	7919      	ldrb	r1, [r3, #4]
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80064ea:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80064ee:	f884 102a 	strb.w	r1, [r4, #42]	@ 0x2a
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 80064f2:	4631      	mov	r1, r6
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80064f4:	795b      	ldrb	r3, [r3, #5]
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80064f6:	f042 020a 	orr.w	r2, r2, #10
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80064fa:	f884 302b 	strb.w	r3, [r4, #43]	@ 0x2b
  netif->mtu = ETH_MAX_PAYLOAD;
 80064fe:	f240 53dc 	movw	r3, #1500	@ 0x5dc
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006502:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8006506:	4632      	mov	r2, r6
  netif->mtu = ETH_MAX_PAYLOAD;
 8006508:	84a3      	strh	r3, [r4, #36]	@ 0x24
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800650a:	f000 fb6d 	bl	8006be8 <osSemaphoreNew>
 800650e:	4b3c      	ldr	r3, [pc, #240]	@ (8006600 <ethernetif_init+0x1b0>)
 8006510:	4602      	mov	r2, r0
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8006512:	4631      	mov	r1, r6
 8006514:	4638      	mov	r0, r7
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8006516:	601a      	str	r2, [r3, #0]
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8006518:	4632      	mov	r2, r6
 800651a:	f000 fb65 	bl	8006be8 <osSemaphoreNew>
 800651e:	4b39      	ldr	r3, [pc, #228]	@ (8006604 <ethernetif_init+0x1b4>)
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8006520:	4631      	mov	r1, r6
 8006522:	2220      	movs	r2, #32
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8006524:	6018      	str	r0, [r3, #0]
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8006526:	a803      	add	r0, sp, #12
 8006528:	f00a fc4b 	bl	8010dc2 <memset>
  attributes.name = "EthIf";
 800652c:	4b36      	ldr	r3, [pc, #216]	@ (8006608 <ethernetif_init+0x1b8>)
  attributes.priority = osPriorityRealtime;
 800652e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
  osThreadNew(ethernetif_input, netif, &attributes);
 8006532:	aa02      	add	r2, sp, #8
  attributes.name = "EthIf";
 8006534:	9302      	str	r3, [sp, #8]
  attributes.priority = osPriorityRealtime;
 8006536:	2330      	movs	r3, #48	@ 0x30
  osThreadNew(ethernetif_input, netif, &attributes);
 8006538:	4834      	ldr	r0, [pc, #208]	@ (800660c <ethernetif_init+0x1bc>)
  attributes.priority = osPriorityRealtime;
 800653a:	e9cd 1307 	strd	r1, r3, [sp, #28]
  osThreadNew(ethernetif_input, netif, &attributes);
 800653e:	4621      	mov	r1, r4
 8006540:	f000 fa78 	bl	8006a34 <osThreadNew>
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8006544:	4932      	ldr	r1, [pc, #200]	@ (8006610 <ethernetif_init+0x1c0>)
 8006546:	4833      	ldr	r0, [pc, #204]	@ (8006614 <ethernetif_init+0x1c4>)
 8006548:	f7fb f98a 	bl	8001860 <LAN8742_RegisterBusIO>
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 800654c:	4831      	ldr	r0, [pc, #196]	@ (8006614 <ethernetif_init+0x1c4>)
 800654e:	f7fb f9a1 	bl	8001894 <LAN8742_Init>
 8006552:	bb68      	cbnz	r0, 80065b0 <ethernetif_init+0x160>
  if (hal_eth_init_status == HAL_OK)
 8006554:	f1b8 0f00 	cmp.w	r8, #0
 8006558:	d124      	bne.n	80065a4 <ethernetif_init+0x154>
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800655a:	482e      	ldr	r0, [pc, #184]	@ (8006614 <ethernetif_init+0x1c4>)
 800655c:	f7fb f9ce 	bl	80018fc <LAN8742_GetLinkState>
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8006560:	2801      	cmp	r0, #1
 8006562:	dd25      	ble.n	80065b0 <ethernetif_init+0x160>
      switch (PHYLinkState)
 8006564:	3803      	subs	r0, #3
 8006566:	2802      	cmp	r0, #2
 8006568:	d82c      	bhi.n	80065c4 <ethernetif_init+0x174>
 800656a:	4a2b      	ldr	r2, [pc, #172]	@ (8006618 <ethernetif_init+0x1c8>)
 800656c:	4b2b      	ldr	r3, [pc, #172]	@ (800661c <ethernetif_init+0x1cc>)
 800656e:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8006572:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8006576:	a90b      	add	r1, sp, #44	@ 0x2c
 8006578:	481b      	ldr	r0, [pc, #108]	@ (80065e8 <ethernetif_init+0x198>)
 800657a:	f7fc fe7d 	bl	8003278 <HAL_ETH_GetMACConfig>
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800657e:	a90b      	add	r1, sp, #44	@ 0x2c
 8006580:	4819      	ldr	r0, [pc, #100]	@ (80065e8 <ethernetif_init+0x198>)
    MACConf.Speed = speed;
 8006582:	e9cd 5610 	strd	r5, r6, [sp, #64]	@ 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8006586:	f7fc ff41 	bl	800340c <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800658a:	4817      	ldr	r0, [pc, #92]	@ (80065e8 <ethernetif_init+0x198>)
 800658c:	f7fc fbfc 	bl	8002d88 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8006590:	4620      	mov	r0, r4
 8006592:	f003 fbcd 	bl	8009d30 <netif_set_up>
    netif_set_link_up(netif);
 8006596:	4620      	mov	r0, r4
 8006598:	f003 fc12 	bl	8009dc0 <netif_set_link_up>
}
 800659c:	2000      	movs	r0, #0
 800659e:	b025      	add	sp, #148	@ 0x94
 80065a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    Error_Handler();
 80065a4:	f7fa fe52 	bl	800124c <Error_Handler>
}
 80065a8:	2000      	movs	r0, #0
 80065aa:	b025      	add	sp, #148	@ 0x94
 80065ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      netif_set_link_down(netif);
 80065b0:	4620      	mov	r0, r4
 80065b2:	f003 fc2d 	bl	8009e10 <netif_set_link_down>
      netif_set_down(netif);
 80065b6:	4620      	mov	r0, r4
 80065b8:	f003 fbde 	bl	8009d78 <netif_set_down>
}
 80065bc:	2000      	movs	r0, #0
 80065be:	b025      	add	sp, #148	@ 0x94
 80065c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      switch (PHYLinkState)
 80065c4:	f44f 4580 	mov.w	r5, #16384	@ 0x4000
 80065c8:	f44f 5600 	mov.w	r6, #8192	@ 0x2000
 80065cc:	e7d3      	b.n	8006576 <ethernetif_init+0x126>
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80065ce:	4b14      	ldr	r3, [pc, #80]	@ (8006620 <ethernetif_init+0x1d0>)
 80065d0:	f44f 720e 	mov.w	r2, #568	@ 0x238
 80065d4:	4913      	ldr	r1, [pc, #76]	@ (8006624 <ethernetif_init+0x1d4>)
 80065d6:	4814      	ldr	r0, [pc, #80]	@ (8006628 <ethernetif_init+0x1d8>)
 80065d8:	f00a fb40 	bl	8010c5c <iprintf>
 80065dc:	e73f      	b.n	800645e <ethernetif_init+0xe>
 80065de:	bf00      	nop
 80065e0:	08006291 	.word	0x08006291
 80065e4:	0800f86d 	.word	0x0800f86d
 80065e8:	24000294 	.word	0x24000294
 80065ec:	40028000 	.word	0x40028000
 80065f0:	00e18000 	.word	0x00e18000
 80065f4:	30040060 	.word	0x30040060
 80065f8:	30040000 	.word	0x30040000
 80065fc:	0801287c 	.word	0x0801287c
 8006600:	24000348 	.word	0x24000348
 8006604:	24000344 	.word	0x24000344
 8006608:	080127f0 	.word	0x080127f0
 800660c:	080063b9 	.word	0x080063b9
 8006610:	24000010 	.word	0x24000010
 8006614:	2400023c 	.word	0x2400023c
 8006618:	08012870 	.word	0x08012870
 800661c:	08012864 	.word	0x08012864
 8006620:	080127c4 	.word	0x080127c4
 8006624:	080127e0 	.word	0x080127e0
 8006628:	08011f14 	.word	0x08011f14
 800662c:	24000260 	.word	0x24000260

08006630 <sys_now>:
  return HAL_GetTick();
 8006630:	f7fb b9ee 	b.w	8001a10 <HAL_GetTick>

08006634 <HAL_ETH_MspInit>:
  if(ethHandle->Instance==ETH)
 8006634:	4b4d      	ldr	r3, [pc, #308]	@ (800676c <HAL_ETH_MspInit+0x138>)
 8006636:	6802      	ldr	r2, [r0, #0]
{
 8006638:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(ethHandle->Instance==ETH)
 800663a:	429a      	cmp	r2, r3
{
 800663c:	b08f      	sub	sp, #60	@ 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800663e:	f04f 0400 	mov.w	r4, #0
 8006642:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8006646:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
 800664a:	940c      	str	r4, [sp, #48]	@ 0x30
  if(ethHandle->Instance==ETH)
 800664c:	d001      	beq.n	8006652 <HAL_ETH_MspInit+0x1e>
}
 800664e:	b00f      	add	sp, #60	@ 0x3c
 8006650:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8006652:	4b47      	ldr	r3, [pc, #284]	@ (8006770 <HAL_ETH_MspInit+0x13c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006654:	2603      	movs	r6, #3
 8006656:	250b      	movs	r5, #11
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006658:	a908      	add	r1, sp, #32
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800665a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800665e:	2702      	movs	r7, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006660:	4844      	ldr	r0, [pc, #272]	@ (8006774 <HAL_ETH_MspInit+0x140>)
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8006662:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006666:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 800666a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 800666e:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 8006672:	9201      	str	r2, [sp, #4]
 8006674:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8006676:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 800667a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800667e:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 8006682:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8006686:	f402 3280 	and.w	r2, r2, #65536	@ 0x10000
 800668a:	9202      	str	r2, [sp, #8]
 800668c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800668e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8006692:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8006696:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 800669a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 800669e:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 80066a2:	9203      	str	r2, [sp, #12]
 80066a4:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80066a6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80066aa:	f042 0204 	orr.w	r2, r2, #4
 80066ae:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80066b2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80066b6:	f002 0204 	and.w	r2, r2, #4
 80066ba:	9204      	str	r2, [sp, #16]
 80066bc:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80066be:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80066c2:	f042 0201 	orr.w	r2, r2, #1
 80066c6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80066ca:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80066ce:	f002 0201 	and.w	r2, r2, #1
 80066d2:	9205      	str	r2, [sp, #20]
 80066d4:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80066d6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80066da:	f042 0202 	orr.w	r2, r2, #2
 80066de:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80066e2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80066e6:	f002 0202 	and.w	r2, r2, #2
 80066ea:	9206      	str	r2, [sp, #24]
 80066ec:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80066ee:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80066f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80066f6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80066fa:	2232      	movs	r2, #50	@ 0x32
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80066fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006700:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006704:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8006706:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006708:	e9cd 650b 	strd	r6, r5, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800670c:	e9cd 2308 	strd	r2, r3, [sp, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006710:	9b07      	ldr	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006712:	f7fc fff1 	bl	80036f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8006716:	2386      	movs	r3, #134	@ 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006718:	a908      	add	r1, sp, #32
 800671a:	4817      	ldr	r0, [pc, #92]	@ (8006778 <HAL_ETH_MspInit+0x144>)
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800671c:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800671e:	950c      	str	r5, [sp, #48]	@ 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006720:	9709      	str	r7, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006722:	e9cd 460a 	strd	r4, r6, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006726:	f7fc ffe7 	bl	80036f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800672a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800672e:	a908      	add	r1, sp, #32
 8006730:	4812      	ldr	r0, [pc, #72]	@ (800677c <HAL_ETH_MspInit+0x148>)
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8006732:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006734:	e9cd 7409 	strd	r7, r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006738:	e9cd 650b 	strd	r6, r5, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800673c:	f7fc ffdc 	bl	80036f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8006740:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006744:	a908      	add	r1, sp, #32
 8006746:	480e      	ldr	r0, [pc, #56]	@ (8006780 <HAL_ETH_MspInit+0x14c>)
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8006748:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800674a:	9709      	str	r7, [sp, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800674c:	950c      	str	r5, [sp, #48]	@ 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800674e:	e9cd 460a 	strd	r4, r6, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006752:	f7fc ffd1 	bl	80036f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8006756:	4622      	mov	r2, r4
 8006758:	2105      	movs	r1, #5
 800675a:	203d      	movs	r0, #61	@ 0x3d
 800675c:	f7fb ff80 	bl	8002660 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8006760:	203d      	movs	r0, #61	@ 0x3d
 8006762:	f7fb ffb9 	bl	80026d8 <HAL_NVIC_EnableIRQ>
}
 8006766:	b00f      	add	sp, #60	@ 0x3c
 8006768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800676a:	bf00      	nop
 800676c:	40028000 	.word	0x40028000
 8006770:	58024400 	.word	0x58024400
 8006774:	58020800 	.word	0x58020800
 8006778:	58020000 	.word	0x58020000
 800677c:	58020400 	.word	0x58020400
 8006780:	58021800 	.word	0x58021800

08006784 <HAL_ETH_RxAllocateCallback>:
    osDelay(100);
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8006784:	b530      	push	{r4, r5, lr}
 8006786:	4604      	mov	r4, r0
 8006788:	b083      	sub	sp, #12
/* USER CODE BEGIN HAL ETH RxAllocateCallback */

  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800678a:	480d      	ldr	r0, [pc, #52]	@ (80067c0 <HAL_ETH_RxAllocateCallback+0x3c>)
 800678c:	f003 f910 	bl	80099b0 <memp_malloc_pool>
  if (p)
 8006790:	4603      	mov	r3, r0
 8006792:	b178      	cbz	r0, 80067b4 <HAL_ETH_RxAllocateCallback+0x30>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8006794:	f100 0520 	add.w	r5, r0, #32
    p->custom_free_function = pbuf_free_custom;
 8006798:	4a0a      	ldr	r2, [pc, #40]	@ (80067c4 <HAL_ETH_RxAllocateCallback+0x40>)
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800679a:	2100      	movs	r1, #0
 800679c:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80067a0:	6025      	str	r5, [r4, #0]
    p->custom_free_function = pbuf_free_custom;
 80067a2:	611a      	str	r2, [r3, #16]
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 80067a4:	2241      	movs	r2, #65	@ 0x41
 80067a6:	9001      	str	r0, [sp, #4]
 80067a8:	4608      	mov	r0, r1
 80067aa:	9500      	str	r5, [sp, #0]
 80067ac:	f003 fbb4 	bl	8009f18 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80067b0:	b003      	add	sp, #12
 80067b2:	bd30      	pop	{r4, r5, pc}
    RxAllocStatus = RX_ALLOC_ERROR;
 80067b4:	4a04      	ldr	r2, [pc, #16]	@ (80067c8 <HAL_ETH_RxAllocateCallback+0x44>)
 80067b6:	2101      	movs	r1, #1
    *buff = NULL;
 80067b8:	6020      	str	r0, [r4, #0]
    RxAllocStatus = RX_ALLOC_ERROR;
 80067ba:	7011      	strb	r1, [r2, #0]
}
 80067bc:	b003      	add	sp, #12
 80067be:	bd30      	pop	{r4, r5, pc}
 80067c0:	0801287c 	.word	0x0801287c
 80067c4:	08006389 	.word	0x08006389
 80067c8:	2400034c 	.word	0x2400034c

080067cc <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80067cc:	b430      	push	{r4, r5}
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
  struct pbuf *p = NULL;

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
  p->next = NULL;
 80067ce:	2500      	movs	r5, #0
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80067d0:	f1a2 0420 	sub.w	r4, r2, #32
  p->tot_len = 0;
  p->len = Length;
 80067d4:	f822 3c16 	strh.w	r3, [r2, #-22]
  p->next = NULL;
 80067d8:	f842 5c20 	str.w	r5, [r2, #-32]
  p->tot_len = 0;
 80067dc:	f822 5c18 	strh.w	r5, [r2, #-24]

  /* Chain the buffer. */
  if (!*ppStart)
 80067e0:	6805      	ldr	r5, [r0, #0]
 80067e2:	b1f5      	cbz	r5, 8006822 <HAL_ETH_RxLinkCallback+0x56>
    *ppStart = p;
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80067e4:	680d      	ldr	r5, [r1, #0]
 80067e6:	602c      	str	r4, [r5, #0]
  }
  *ppEnd  = p;
 80067e8:	600c      	str	r4, [r1, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80067ea:	6801      	ldr	r1, [r0, #0]
 80067ec:	b129      	cbz	r1, 80067fa <HAL_ETH_RxLinkCallback+0x2e>
  {
    p->tot_len += Length;
 80067ee:	8908      	ldrh	r0, [r1, #8]
 80067f0:	4418      	add	r0, r3
 80067f2:	8108      	strh	r0, [r1, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80067f4:	6809      	ldr	r1, [r1, #0]
 80067f6:	2900      	cmp	r1, #0
 80067f8:	d1f9      	bne.n	80067ee <HAL_ETH_RxLinkCallback+0x22>
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 80067fa:	b183      	cbz	r3, 800681e <HAL_ETH_RxLinkCallback+0x52>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80067fc:	f002 011f 	and.w	r1, r2, #31
 8006800:	4419      	add	r1, r3
 8006802:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8006806:	4808      	ldr	r0, [pc, #32]	@ (8006828 <HAL_ETH_RxLinkCallback+0x5c>)
 8006808:	4411      	add	r1, r2
 800680a:	f8c0 225c 	str.w	r2, [r0, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800680e:	3220      	adds	r2, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 8006810:	1a8b      	subs	r3, r1, r2
 8006812:	2b00      	cmp	r3, #0
 8006814:	dcf9      	bgt.n	800680a <HAL_ETH_RxLinkCallback+0x3e>
 8006816:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800681a:	f3bf 8f6f 	isb	sy

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);

/* USER CODE END HAL ETH RxLinkCallback */
}
 800681e:	bc30      	pop	{r4, r5}
 8006820:	4770      	bx	lr
    *ppStart = p;
 8006822:	6004      	str	r4, [r0, #0]
 8006824:	e7e0      	b.n	80067e8 <HAL_ETH_RxLinkCallback+0x1c>
 8006826:	bf00      	nop
 8006828:	e000ed00 	.word	0xe000ed00

0800682c <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800682c:	f003 bc26 	b.w	800a07c <pbuf_free>

08006830 <sys_lock_tcpip_core>:
/* ETH_CODE: add functions needed for proper multithreading support and check */

static osThreadId_t lwip_core_lock_holder_thread_id;
static osThreadId_t lwip_tcpip_thread_id;

void sys_lock_tcpip_core(void){
 8006830:	b508      	push	{r3, lr}
	sys_mutex_lock(&lock_tcpip_core);
 8006832:	4804      	ldr	r0, [pc, #16]	@ (8006844 <sys_lock_tcpip_core+0x14>)
 8006834:	f00a f8e0 	bl	80109f8 <sys_mutex_lock>
	lwip_core_lock_holder_thread_id = osThreadGetId();
 8006838:	f000 f93e 	bl	8006ab8 <osThreadGetId>
 800683c:	4b02      	ldr	r3, [pc, #8]	@ (8006848 <sys_lock_tcpip_core+0x18>)
 800683e:	6018      	str	r0, [r3, #0]
}
 8006840:	bd08      	pop	{r3, pc}
 8006842:	bf00      	nop
 8006844:	24004d38 	.word	0x24004d38
 8006848:	24000238 	.word	0x24000238

0800684c <ethernet_link_thread>:
{
 800684c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006850:	b09b      	sub	sp, #108	@ 0x6c
  LOCK_TCPIP_CORE();
 8006852:	f04f 0900 	mov.w	r9, #0
  ETH_MACConfigTypeDef MACConf = {0};
 8006856:	2264      	movs	r2, #100	@ 0x64
 8006858:	2100      	movs	r1, #0
{
 800685a:	4606      	mov	r6, r0
  ETH_MACConfigTypeDef MACConf = {0};
 800685c:	4668      	mov	r0, sp
 800685e:	f00a fab0 	bl	8010dc2 <memset>
  LOCK_TCPIP_CORE();
 8006862:	46cb      	mov	fp, r9
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8006864:	46ca      	mov	sl, r9
 8006866:	4d2b      	ldr	r5, [pc, #172]	@ (8006914 <ethernet_link_thread+0xc8>)
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006868:	4f2b      	ldr	r7, [pc, #172]	@ (8006918 <ethernet_link_thread+0xcc>)
  LOCK_TCPIP_CORE();
 800686a:	f7ff ffe1 	bl	8006830 <sys_lock_tcpip_core>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800686e:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 8006928 <ethernet_link_thread+0xdc>

void sys_unlock_tcpip_core(void){
	lwip_core_lock_holder_thread_id = 0;
	sys_mutex_unlock(&lock_tcpip_core);
 8006872:	4c2a      	ldr	r4, [pc, #168]	@ (800691c <ethernet_link_thread+0xd0>)
 8006874:	e02f      	b.n	80068d6 <ethernet_link_thread+0x8a>
  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8006876:	2801      	cmp	r0, #1
 8006878:	dd41      	ble.n	80068fe <ethernet_link_thread+0xb2>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800687a:	075a      	lsls	r2, r3, #29
 800687c:	d41d      	bmi.n	80068ba <ethernet_link_thread+0x6e>
    switch (PHYLinkState)
 800687e:	3802      	subs	r0, #2
 8006880:	2803      	cmp	r0, #3
 8006882:	d838      	bhi.n	80068f6 <ethernet_link_thread+0xaa>
 8006884:	4b26      	ldr	r3, [pc, #152]	@ (8006920 <ethernet_link_thread+0xd4>)
 8006886:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 800688a:	4b26      	ldr	r3, [pc, #152]	@ (8006924 <ethernet_link_thread+0xd8>)
 800688c:	f853 b020 	ldr.w	fp, [r3, r0, lsl #2]
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8006890:	4669      	mov	r1, sp
 8006892:	4640      	mov	r0, r8
 8006894:	f7fc fcf0 	bl	8003278 <HAL_ETH_GetMACConfig>
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8006898:	4669      	mov	r1, sp
 800689a:	4640      	mov	r0, r8
      netif_set_link_up(netif);
 800689c:	f04f 0a01 	mov.w	sl, #1
      MACConf.Speed = speed;
 80068a0:	e9cd 9b05 	strd	r9, fp, [sp, #20]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80068a4:	f7fc fdb2 	bl	800340c <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 80068a8:	4640      	mov	r0, r8
 80068aa:	f7fc fa6d 	bl	8002d88 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 80068ae:	4630      	mov	r0, r6
 80068b0:	f003 fa3e 	bl	8009d30 <netif_set_up>
      netif_set_link_up(netif);
 80068b4:	4630      	mov	r0, r6
 80068b6:	f003 fa83 	bl	8009dc0 <netif_set_link_up>
	lwip_core_lock_holder_thread_id = 0;
 80068ba:	2300      	movs	r3, #0
	sys_mutex_unlock(&lock_tcpip_core);
 80068bc:	4620      	mov	r0, r4
	lwip_core_lock_holder_thread_id = 0;
 80068be:	602b      	str	r3, [r5, #0]
	sys_mutex_unlock(&lock_tcpip_core);
 80068c0:	f00a f8a0 	bl	8010a04 <sys_mutex_unlock>
  osDelay(100);
 80068c4:	2064      	movs	r0, #100	@ 0x64
 80068c6:	f000 f8f9 	bl	8006abc <osDelay>
	sys_mutex_lock(&lock_tcpip_core);
 80068ca:	4620      	mov	r0, r4
 80068cc:	f00a f894 	bl	80109f8 <sys_mutex_lock>
	lwip_core_lock_holder_thread_id = osThreadGetId();
 80068d0:	f000 f8f2 	bl	8006ab8 <osThreadGetId>
 80068d4:	6028      	str	r0, [r5, #0]
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80068d6:	4638      	mov	r0, r7
 80068d8:	f7fb f810 	bl	80018fc <LAN8742_GetLinkState>
  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80068dc:	f896 302d 	ldrb.w	r3, [r6, #45]	@ 0x2d
 80068e0:	0759      	lsls	r1, r3, #29
 80068e2:	ea4f 0293 	mov.w	r2, r3, lsr #2
 80068e6:	d4c6      	bmi.n	8006876 <ethernet_link_thread+0x2a>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80068e8:	07d3      	lsls	r3, r2, #31
 80068ea:	d4e6      	bmi.n	80068ba <ethernet_link_thread+0x6e>
 80068ec:	2801      	cmp	r0, #1
 80068ee:	dde4      	ble.n	80068ba <ethernet_link_thread+0x6e>
    switch (PHYLinkState)
 80068f0:	3802      	subs	r0, #2
 80068f2:	2803      	cmp	r0, #3
 80068f4:	d9c6      	bls.n	8006884 <ethernet_link_thread+0x38>
    if(linkchanged)
 80068f6:	f1ba 0f00 	cmp.w	sl, #0
 80068fa:	d0de      	beq.n	80068ba <ethernet_link_thread+0x6e>
 80068fc:	e7c8      	b.n	8006890 <ethernet_link_thread+0x44>
    HAL_ETH_Stop_IT(&heth);
 80068fe:	4640      	mov	r0, r8
 8006900:	f7fc fa82 	bl	8002e08 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8006904:	4630      	mov	r0, r6
 8006906:	f003 fa37 	bl	8009d78 <netif_set_down>
    netif_set_link_down(netif);
 800690a:	4630      	mov	r0, r6
 800690c:	f003 fa80 	bl	8009e10 <netif_set_link_down>
 8006910:	e7d3      	b.n	80068ba <ethernet_link_thread+0x6e>
 8006912:	bf00      	nop
 8006914:	24000238 	.word	0x24000238
 8006918:	2400023c 	.word	0x2400023c
 800691c:	24004d38 	.word	0x24004d38
 8006920:	08012854 	.word	0x08012854
 8006924:	08012844 	.word	0x08012844
 8006928:	24000294 	.word	0x24000294

0800692c <sys_unlock_tcpip_core>:
	lwip_core_lock_holder_thread_id = 0;
 800692c:	4b02      	ldr	r3, [pc, #8]	@ (8006938 <sys_unlock_tcpip_core+0xc>)
 800692e:	2200      	movs	r2, #0
	sys_mutex_unlock(&lock_tcpip_core);
 8006930:	4802      	ldr	r0, [pc, #8]	@ (800693c <sys_unlock_tcpip_core+0x10>)
	lwip_core_lock_holder_thread_id = 0;
 8006932:	601a      	str	r2, [r3, #0]
	sys_mutex_unlock(&lock_tcpip_core);
 8006934:	f00a b866 	b.w	8010a04 <sys_mutex_unlock>
 8006938:	24000238 	.word	0x24000238
 800693c:	24004d38 	.word	0x24004d38

08006940 <sys_check_core_locking>:
}

void sys_check_core_locking(void){
  /* Embedded systems should check we are NOT in an interrupt context here */

  LWIP_ASSERT("Function called from interrupt context", (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0);
 8006940:	4b10      	ldr	r3, [pc, #64]	@ (8006984 <sys_check_core_locking+0x44>)
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	f3c3 0308 	ubfx	r3, r3, #0, #9
void sys_check_core_locking(void){
 8006948:	b510      	push	{r4, lr}
  LWIP_ASSERT("Function called from interrupt context", (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0);
 800694a:	b993      	cbnz	r3, 8006972 <sys_check_core_locking+0x32>

  if (lwip_tcpip_thread_id != 0) {
 800694c:	4b0e      	ldr	r3, [pc, #56]	@ (8006988 <sys_check_core_locking+0x48>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	b173      	cbz	r3, 8006970 <sys_check_core_locking+0x30>
	  osThreadId_t current_thread_id = osThreadGetId();
 8006952:	f000 f8b1 	bl	8006ab8 <osThreadGetId>

#if LWIP_TCPIP_CORE_LOCKING
	LWIP_ASSERT("Function called without core lock", current_thread_id == lwip_core_lock_holder_thread_id);
 8006956:	4b0d      	ldr	r3, [pc, #52]	@ (800698c <sys_check_core_locking+0x4c>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4283      	cmp	r3, r0
 800695c:	d008      	beq.n	8006970 <sys_check_core_locking+0x30>
 800695e:	4b0c      	ldr	r3, [pc, #48]	@ (8006990 <sys_check_core_locking+0x50>)
 8006960:	f240 32f7 	movw	r2, #1015	@ 0x3f7
 8006964:	490b      	ldr	r1, [pc, #44]	@ (8006994 <sys_check_core_locking+0x54>)
 8006966:	480c      	ldr	r0, [pc, #48]	@ (8006998 <sys_check_core_locking+0x58>)
#else /* LWIP_TCPIP_CORE_LOCKING */
	LWIP_ASSERT("Function called from wrong thread", current_thread_id == lwip_tcpip_thread_id);
#endif /* LWIP_TCPIP_CORE_LOCKING */
	LWIP_UNUSED_ARG(current_thread_id); /* for LWIP_NOASSERT */
  }
}
 8006968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	LWIP_ASSERT("Function called without core lock", current_thread_id == lwip_core_lock_holder_thread_id);
 800696c:	f00a b976 	b.w	8010c5c <iprintf>
}
 8006970:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("Function called from interrupt context", (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0);
 8006972:	4b07      	ldr	r3, [pc, #28]	@ (8006990 <sys_check_core_locking+0x50>)
 8006974:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8006978:	4908      	ldr	r1, [pc, #32]	@ (800699c <sys_check_core_locking+0x5c>)
 800697a:	4807      	ldr	r0, [pc, #28]	@ (8006998 <sys_check_core_locking+0x58>)
 800697c:	f00a f96e 	bl	8010c5c <iprintf>
 8006980:	e7e4      	b.n	800694c <sys_check_core_locking+0xc>
 8006982:	bf00      	nop
 8006984:	e000ed00 	.word	0xe000ed00
 8006988:	24000234 	.word	0x24000234
 800698c:	24000238 	.word	0x24000238
 8006990:	080127c4 	.word	0x080127c4
 8006994:	08012820 	.word	0x08012820
 8006998:	08011f14 	.word	0x08011f14
 800699c:	080127f8 	.word	0x080127f8

080069a0 <sys_mark_tcpip_thread>:
void sys_mark_tcpip_thread(void){
 80069a0:	b508      	push	{r3, lr}
	lwip_tcpip_thread_id = osThreadGetId();
 80069a2:	f000 f889 	bl	8006ab8 <osThreadGetId>
 80069a6:	4b01      	ldr	r3, [pc, #4]	@ (80069ac <sys_mark_tcpip_thread+0xc>)
 80069a8:	6018      	str	r0, [r3, #0]
}
 80069aa:	bd08      	pop	{r3, pc}
 80069ac:	24000234 	.word	0x24000234

080069b0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80069b0:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 80069b2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80069b6:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80069b8:	f001 fdb4 	bl	8008524 <xTaskGetSchedulerState>
 80069bc:	2801      	cmp	r0, #1
 80069be:	d100      	bne.n	80069c2 <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 80069c0:	bd08      	pop	{r3, pc}
 80069c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 80069c6:	f002 b985 	b.w	8008cd4 <xPortSysTickHandler>
 80069ca:	bf00      	nop

080069cc <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069cc:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 80069d0:	b92b      	cbnz	r3, 80069de <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 80069d2:	4b06      	ldr	r3, [pc, #24]	@ (80069ec <osKernelInitialize+0x20>)
 80069d4:	6818      	ldr	r0, [r3, #0]
 80069d6:	b928      	cbnz	r0, 80069e4 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80069d8:	2201      	movs	r2, #1
 80069da:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80069dc:	4770      	bx	lr
    stat = osErrorISR;
 80069de:	f06f 0005 	mvn.w	r0, #5
 80069e2:	4770      	bx	lr
    } else {
      stat = osError;
 80069e4:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 80069e8:	4770      	bx	lr
 80069ea:	bf00      	nop
 80069ec:	24000aa4 	.word	0x24000aa4

080069f0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80069f0:	b510      	push	{r4, lr}
 80069f2:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80069f6:	b974      	cbnz	r4, 8006a16 <osKernelStart+0x26>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 80069f8:	4b08      	ldr	r3, [pc, #32]	@ (8006a1c <osKernelStart+0x2c>)
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	2a01      	cmp	r2, #1
 80069fe:	d107      	bne.n	8006a10 <osKernelStart+0x20>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a00:	4907      	ldr	r1, [pc, #28]	@ (8006a20 <osKernelStart+0x30>)
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006a02:	2202      	movs	r2, #2
 8006a04:	77cc      	strb	r4, [r1, #31]
 8006a06:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006a08:	f001 fa84 	bl	8007f14 <vTaskStartScheduler>
      stat = osOK;
 8006a0c:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8006a0e:	bd10      	pop	{r4, pc}
      stat = osError;
 8006a10:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006a14:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8006a16:	f06f 0005 	mvn.w	r0, #5
}
 8006a1a:	bd10      	pop	{r4, pc}
 8006a1c:	24000aa4 	.word	0x24000aa4
 8006a20:	e000ed00 	.word	0xe000ed00

08006a24 <osKernelGetTickCount>:
 8006a24:	f3ef 8305 	mrs	r3, IPSR
}

uint32_t osKernelGetTickCount (void) {
  TickType_t ticks;

  if (IS_IRQ()) {
 8006a28:	b10b      	cbz	r3, 8006a2e <osKernelGetTickCount+0xa>
    ticks = xTaskGetTickCountFromISR();
 8006a2a:	f001 bad1 	b.w	8007fd0 <xTaskGetTickCountFromISR>
  } else {
    ticks = xTaskGetTickCount();
 8006a2e:	f001 bac9 	b.w	8007fc4 <xTaskGetTickCount>
 8006a32:	bf00      	nop

08006a34 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006a34:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006a36:	2500      	movs	r5, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006a38:	b087      	sub	sp, #28
  hTask = NULL;
 8006a3a:	9505      	str	r5, [sp, #20]
 8006a3c:	f3ef 8305 	mrs	r3, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8006a40:	b300      	cbz	r0, 8006a84 <osThreadNew+0x50>
 8006a42:	b9fb      	cbnz	r3, 8006a84 <osThreadNew+0x50>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8006a44:	4614      	mov	r4, r2
 8006a46:	b302      	cbz	r2, 8006a8a <osThreadNew+0x56>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8006a48:	6996      	ldr	r6, [r2, #24]
 8006a4a:	b9c6      	cbnz	r6, 8006a7e <osThreadNew+0x4a>
 8006a4c:	2618      	movs	r6, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006a4e:	6863      	ldr	r3, [r4, #4]
 8006a50:	07db      	lsls	r3, r3, #31
 8006a52:	d417      	bmi.n	8006a84 <osThreadNew+0x50>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8006a54:	6963      	ldr	r3, [r4, #20]
 8006a56:	b32b      	cbz	r3, 8006aa4 <osThreadNew+0x70>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006a58:	089a      	lsrs	r2, r3, #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006a5a:	68a5      	ldr	r5, [r4, #8]
      if (attr->name != NULL) {
 8006a5c:	f8d4 c000 	ldr.w	ip, [r4]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006a60:	68e7      	ldr	r7, [r4, #12]
 8006a62:	b30d      	cbz	r5, 8006aa8 <osThreadNew+0x74>
 8006a64:	2fa7      	cmp	r7, #167	@ 0xa7
 8006a66:	d90d      	bls.n	8006a84 <osThreadNew+0x50>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006a68:	6924      	ldr	r4, [r4, #16]
 8006a6a:	b15b      	cbz	r3, 8006a84 <osThreadNew+0x50>
 8006a6c:	b154      	cbz	r4, 8006a84 <osThreadNew+0x50>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006a6e:	460b      	mov	r3, r1
 8006a70:	9600      	str	r6, [sp, #0]
 8006a72:	4661      	mov	r1, ip
 8006a74:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8006a78:	f001 f9e2 	bl	8007e40 <xTaskCreateStatic>
 8006a7c:	e003      	b.n	8006a86 <osThreadNew+0x52>
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006a7e:	1e72      	subs	r2, r6, #1
 8006a80:	2a37      	cmp	r2, #55	@ 0x37
 8006a82:	d9e4      	bls.n	8006a4e <osThreadNew+0x1a>
        return (NULL);
 8006a84:	2000      	movs	r0, #0
      }
    }
  }

  return ((osThreadId_t)hTask);
}
 8006a86:	b007      	add	sp, #28
 8006a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a8a:	2280      	movs	r2, #128	@ 0x80
    prio  = (UBaseType_t)osPriorityNormal;
 8006a8c:	2618      	movs	r6, #24
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006a8e:	460b      	mov	r3, r1
 8006a90:	4621      	mov	r1, r4
 8006a92:	ac05      	add	r4, sp, #20
 8006a94:	9600      	str	r6, [sp, #0]
 8006a96:	9401      	str	r4, [sp, #4]
 8006a98:	f001 fa0c 	bl	8007eb4 <xTaskCreate>
 8006a9c:	2801      	cmp	r0, #1
 8006a9e:	d1f1      	bne.n	8006a84 <osThreadNew+0x50>
  return ((osThreadId_t)hTask);
 8006aa0:	9805      	ldr	r0, [sp, #20]
 8006aa2:	e7f0      	b.n	8006a86 <osThreadNew+0x52>
    stack = configMINIMAL_STACK_SIZE;
 8006aa4:	2280      	movs	r2, #128	@ 0x80
 8006aa6:	e7d8      	b.n	8006a5a <osThreadNew+0x26>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006aa8:	2f00      	cmp	r7, #0
 8006aaa:	d1eb      	bne.n	8006a84 <osThreadNew+0x50>
 8006aac:	6923      	ldr	r3, [r4, #16]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d1e8      	bne.n	8006a84 <osThreadNew+0x50>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006ab2:	b292      	uxth	r2, r2
 8006ab4:	4664      	mov	r4, ip
 8006ab6:	e7ea      	b.n	8006a8e <osThreadNew+0x5a>

08006ab8 <osThreadGetId>:
}

osThreadId_t osThreadGetId (void) {
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8006ab8:	f001 bd2e 	b.w	8008518 <xTaskGetCurrentTaskHandle>

08006abc <osDelay>:
 8006abc:	f3ef 8205 	mrs	r2, IPSR
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ac0:	b93a      	cbnz	r2, 8006ad2 <osDelay+0x16>
osStatus_t osDelay (uint32_t ticks) {
 8006ac2:	b508      	push	{r3, lr}
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8006ac4:	b908      	cbnz	r0, 8006aca <osDelay+0xe>
    stat = osOK;
 8006ac6:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8006ac8:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 8006aca:	f001 fbd7 	bl	800827c <vTaskDelay>
    stat = osOK;
 8006ace:	2000      	movs	r0, #0
}
 8006ad0:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 8006ad2:	f06f 0005 	mvn.w	r0, #5
}
 8006ad6:	4770      	bx	lr

08006ad8 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006ad8:	b530      	push	{r4, r5, lr}
 8006ada:	b083      	sub	sp, #12
 8006adc:	f3ef 8505 	mrs	r5, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 8006ae0:	b9bd      	cbnz	r5, 8006b12 <osMutexNew+0x3a>
    if (attr != NULL) {
 8006ae2:	4604      	mov	r4, r0
 8006ae4:	b1c0      	cbz	r0, 8006b18 <osMutexNew+0x40>
      type = attr->attr_bits;
 8006ae6:	6845      	ldr	r5, [r0, #4]
      rmtx = 1U;
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006ae8:	072b      	lsls	r3, r5, #28
 8006aea:	d412      	bmi.n	8006b12 <osMutexNew+0x3a>
      mem = -1;

      if (attr != NULL) {
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006aec:	6881      	ldr	r1, [r0, #8]
    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006aee:	f005 0501 	and.w	r5, r5, #1
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006af2:	68c3      	ldr	r3, [r0, #12]
 8006af4:	b309      	cbz	r1, 8006b3a <osMutexNew+0x62>
 8006af6:	2b4f      	cmp	r3, #79	@ 0x4f
 8006af8:	d90b      	bls.n	8006b12 <osMutexNew+0x3a>
        mem = 0;
      }

      if (mem == 1) {
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8006afa:	b345      	cbz	r5, 8006b4e <osMutexNew+0x76>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006afc:	2004      	movs	r0, #4
 8006afe:	f000 fc79 	bl	80073f4 <xQueueCreateMutexStatic>
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006b02:	b130      	cbz	r0, 8006b12 <osMutexNew+0x3a>
        if (attr != NULL) {
          name = attr->name;
 8006b04:	6824      	ldr	r4, [r4, #0]
 8006b06:	e00c      	b.n	8006b22 <osMutexNew+0x4a>
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8006b08:	2004      	movs	r0, #4
 8006b0a:	f000 fcc9 	bl	80074a0 <xQueueCreateMutex>
      if (hMutex != NULL) {
 8006b0e:	2800      	cmp	r0, #0
 8006b10:	d1f8      	bne.n	8006b04 <osMutexNew+0x2c>
  hMutex = NULL;
 8006b12:	2000      	movs	r0, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 8006b14:	b003      	add	sp, #12
 8006b16:	bd30      	pop	{r4, r5, pc}
              hMutex = xSemaphoreCreateMutex ();
 8006b18:	2001      	movs	r0, #1
 8006b1a:	f000 fcc1 	bl	80074a0 <xQueueCreateMutex>
      if (hMutex != NULL) {
 8006b1e:	2800      	cmp	r0, #0
 8006b20:	d0f7      	beq.n	8006b12 <osMutexNew+0x3a>
        vQueueAddToRegistry (hMutex, name);
 8006b22:	4621      	mov	r1, r4
 8006b24:	9001      	str	r0, [sp, #4]
 8006b26:	f000 ffd3 	bl	8007ad0 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006b2a:	9801      	ldr	r0, [sp, #4]
 8006b2c:	f015 0f01 	tst.w	r5, #1
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006b30:	bf18      	it	ne
 8006b32:	f040 0001 	orrne.w	r0, r0, #1
}
 8006b36:	b003      	add	sp, #12
 8006b38:	bd30      	pop	{r4, r5, pc}
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d1e9      	bne.n	8006b12 <osMutexNew+0x3a>
            if (rmtx != 0U) {
 8006b3e:	2d00      	cmp	r5, #0
 8006b40:	d1e2      	bne.n	8006b08 <osMutexNew+0x30>
              hMutex = xSemaphoreCreateMutex ();
 8006b42:	2001      	movs	r0, #1
 8006b44:	f000 fcac 	bl	80074a0 <xQueueCreateMutex>
      if (hMutex != NULL) {
 8006b48:	2800      	cmp	r0, #0
 8006b4a:	d1db      	bne.n	8006b04 <osMutexNew+0x2c>
 8006b4c:	e7e1      	b.n	8006b12 <osMutexNew+0x3a>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006b4e:	2001      	movs	r0, #1
 8006b50:	f000 fc50 	bl	80073f4 <xQueueCreateMutexStatic>
      if (hMutex != NULL) {
 8006b54:	2800      	cmp	r0, #0
 8006b56:	d1d5      	bne.n	8006b04 <osMutexNew+0x2c>
 8006b58:	e7db      	b.n	8006b12 <osMutexNew+0x3a>
 8006b5a:	bf00      	nop

08006b5c <osMutexAcquire>:
 8006b5c:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8006b60:	b9d2      	cbnz	r2, 8006b98 <osMutexAcquire+0x3c>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8006b62:	2801      	cmp	r0, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006b64:	b538      	push	{r3, r4, r5, lr}
 8006b66:	4603      	mov	r3, r0
  else if (hMutex == NULL) {
 8006b68:	d919      	bls.n	8006b9e <osMutexAcquire+0x42>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8006b6a:	f003 0501 	and.w	r5, r3, #1
 8006b6e:	460c      	mov	r4, r1
 8006b70:	f020 0001 	bic.w	r0, r0, #1
 8006b74:	b955      	cbnz	r5, 8006b8c <osMutexAcquire+0x30>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006b76:	f000 fe2b 	bl	80077d0 <xQueueSemaphoreTake>
 8006b7a:	2801      	cmp	r0, #1
 8006b7c:	d00a      	beq.n	8006b94 <osMutexAcquire+0x38>
        if (timeout != 0U) {
          stat = osErrorTimeout;
        } else {
          stat = osErrorResource;
 8006b7e:	2c00      	cmp	r4, #0
 8006b80:	bf14      	ite	ne
 8006b82:	f06f 0001 	mvnne.w	r0, #1
 8006b86:	f06f 0002 	mvneq.w	r0, #2
      }
    }
  }

  return (stat);
}
 8006b8a:	bd38      	pop	{r3, r4, r5, pc}
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006b8c:	f000 fefa 	bl	8007984 <xQueueTakeMutexRecursive>
 8006b90:	2801      	cmp	r0, #1
 8006b92:	d1f4      	bne.n	8006b7e <osMutexAcquire+0x22>
  stat = osOK;
 8006b94:	2000      	movs	r0, #0
}
 8006b96:	bd38      	pop	{r3, r4, r5, pc}
    stat = osErrorISR;
 8006b98:	f06f 0005 	mvn.w	r0, #5
}
 8006b9c:	4770      	bx	lr
    stat = osErrorParameter;
 8006b9e:	f06f 0003 	mvn.w	r0, #3
}
 8006ba2:	bd38      	pop	{r3, r4, r5, pc}

08006ba4 <osMutexRelease>:
 8006ba4:	f3ef 8105 	mrs	r1, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8006ba8:	b9b9      	cbnz	r1, 8006bda <osMutexRelease+0x36>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8006baa:	2801      	cmp	r0, #1
 8006bac:	4602      	mov	r2, r0
 8006bae:	d917      	bls.n	8006be0 <osMutexRelease+0x3c>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8006bb0:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006bb4:	b508      	push	{r3, lr}
 8006bb6:	f002 0301 	and.w	r3, r2, #1
    if (rmtx != 0U) {
 8006bba:	b93b      	cbnz	r3, 8006bcc <osMutexRelease+0x28>
        stat = osErrorResource;
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	f000 fb54 	bl	800726c <xQueueGenericSend>
 8006bc4:	2801      	cmp	r0, #1
 8006bc6:	d105      	bne.n	8006bd4 <osMutexRelease+0x30>
  stat = osOK;
 8006bc8:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8006bca:	bd08      	pop	{r3, pc}
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006bcc:	f000 fc48 	bl	8007460 <xQueueGiveMutexRecursive>
 8006bd0:	2801      	cmp	r0, #1
 8006bd2:	d0f9      	beq.n	8006bc8 <osMutexRelease+0x24>
        stat = osErrorResource;
 8006bd4:	f06f 0002 	mvn.w	r0, #2
}
 8006bd8:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 8006bda:	f06f 0005 	mvn.w	r0, #5
 8006bde:	4770      	bx	lr
    stat = osErrorParameter;
 8006be0:	f06f 0003 	mvn.w	r0, #3
}
 8006be4:	4770      	bx	lr
 8006be6:	bf00      	nop

08006be8 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bea:	b083      	sub	sp, #12
 8006bec:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006bf0:	b98e      	cbnz	r6, 8006c16 <osSemaphoreNew+0x2e>
 8006bf2:	4605      	mov	r5, r0
 8006bf4:	b178      	cbz	r0, 8006c16 <osSemaphoreNew+0x2e>
 8006bf6:	4288      	cmp	r0, r1
 8006bf8:	460f      	mov	r7, r1
 8006bfa:	d30c      	bcc.n	8006c16 <osSemaphoreNew+0x2e>
    mem = -1;

    if (attr != NULL) {
 8006bfc:	4614      	mov	r4, r2
 8006bfe:	b172      	cbz	r2, 8006c1e <osSemaphoreNew+0x36>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006c00:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
 8006c04:	b14a      	cbz	r2, 8006c1a <osSemaphoreNew+0x32>
 8006c06:	2b4f      	cmp	r3, #79	@ 0x4f
 8006c08:	d905      	bls.n	8006c16 <osSemaphoreNew+0x2e>
    else {
      mem = 0;
    }

    if (mem != -1) {
      if (max_count == 1U) {
 8006c0a:	2801      	cmp	r0, #1
 8006c0c:	d02f      	beq.n	8006c6e <osSemaphoreNew+0x86>
        }
      }
      else {
        if (mem == 1) {
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006c0e:	f000 faeb 	bl	80071e8 <xQueueCreateCountingSemaphoreStatic>
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006c12:	4605      	mov	r5, r0
 8006c14:	b968      	cbnz	r0, 8006c32 <osSemaphoreNew+0x4a>
  hSemaphore = NULL;
 8006c16:	2500      	movs	r5, #0
 8006c18:	e010      	b.n	8006c3c <osSemaphoreNew+0x54>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d1fb      	bne.n	8006c16 <osSemaphoreNew+0x2e>
      if (max_count == 1U) {
 8006c1e:	2d01      	cmp	r5, #1
 8006c20:	d00f      	beq.n	8006c42 <osSemaphoreNew+0x5a>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006c22:	4628      	mov	r0, r5
 8006c24:	4639      	mov	r1, r7
 8006c26:	f000 fb03 	bl	8007230 <xQueueCreateCountingSemaphore>
 8006c2a:	4605      	mov	r5, r0
      if (hSemaphore != NULL) {
 8006c2c:	2d00      	cmp	r5, #0
 8006c2e:	d0f2      	beq.n	8006c16 <osSemaphoreNew+0x2e>
        if (attr != NULL) {
 8006c30:	b104      	cbz	r4, 8006c34 <osSemaphoreNew+0x4c>
          name = attr->name;
 8006c32:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006c34:	4621      	mov	r1, r4
 8006c36:	4628      	mov	r0, r5
 8006c38:	f000 ff4a 	bl	8007ad0 <vQueueAddToRegistry>
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8006c3c:	4628      	mov	r0, r5
 8006c3e:	b003      	add	sp, #12
 8006c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
            hSemaphore = xSemaphoreCreateBinary();
 8006c42:	4628      	mov	r0, r5
 8006c44:	2203      	movs	r2, #3
 8006c46:	2100      	movs	r1, #0
 8006c48:	f000 faa6 	bl	8007198 <xQueueGenericCreate>
 8006c4c:	4605      	mov	r5, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006c4e:	2d00      	cmp	r5, #0
 8006c50:	d0e1      	beq.n	8006c16 <osSemaphoreNew+0x2e>
 8006c52:	2f00      	cmp	r7, #0
 8006c54:	d0ea      	beq.n	8006c2c <osSemaphoreNew+0x44>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006c56:	2300      	movs	r3, #0
 8006c58:	4628      	mov	r0, r5
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	f000 fb05 	bl	800726c <xQueueGenericSend>
 8006c62:	2801      	cmp	r0, #1
 8006c64:	d0e4      	beq.n	8006c30 <osSemaphoreNew+0x48>
            vSemaphoreDelete (hSemaphore);
 8006c66:	4628      	mov	r0, r5
 8006c68:	f000 ff08 	bl	8007a7c <vQueueDelete>
      if (hSemaphore != NULL) {
 8006c6c:	e7d3      	b.n	8006c16 <osSemaphoreNew+0x2e>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006c6e:	4613      	mov	r3, r2
 8006c70:	2203      	movs	r2, #3
 8006c72:	4631      	mov	r1, r6
 8006c74:	9200      	str	r2, [sp, #0]
 8006c76:	4632      	mov	r2, r6
 8006c78:	f000 fa3c 	bl	80070f4 <xQueueGenericCreateStatic>
 8006c7c:	4605      	mov	r5, r0
 8006c7e:	e7e6      	b.n	8006c4e <osSemaphoreNew+0x66>

08006c80 <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8006c80:	b360      	cbz	r0, 8006cdc <osSemaphoreAcquire+0x5c>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006c82:	b510      	push	{r4, lr}
 8006c84:	460c      	mov	r4, r1
 8006c86:	b082      	sub	sp, #8
 8006c88:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8006c8c:	b1b3      	cbz	r3, 8006cbc <osSemaphoreAcquire+0x3c>
    if (timeout != 0U) {
 8006c8e:	bb11      	cbnz	r1, 8006cd6 <osSemaphoreAcquire+0x56>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006c90:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8006c92:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006c94:	f000 fe96 	bl	80079c4 <xQueueReceiveFromISR>
 8006c98:	2801      	cmp	r0, #1
 8006c9a:	d118      	bne.n	8006cce <osSemaphoreAcquire+0x4e>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8006c9c:	9b01      	ldr	r3, [sp, #4]
 8006c9e:	b913      	cbnz	r3, 8006ca6 <osSemaphoreAcquire+0x26>
  stat = osOK;
 8006ca0:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8006ca2:	b002      	add	sp, #8
 8006ca4:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 8006ca6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006caa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cae:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006cb2:	f3bf 8f4f 	dsb	sy
 8006cb6:	f3bf 8f6f 	isb	sy
 8006cba:	e7f1      	b.n	8006ca0 <osSemaphoreAcquire+0x20>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006cbc:	f000 fd88 	bl	80077d0 <xQueueSemaphoreTake>
 8006cc0:	2801      	cmp	r0, #1
 8006cc2:	d0ed      	beq.n	8006ca0 <osSemaphoreAcquire+0x20>
      if (timeout != 0U) {
 8006cc4:	b11c      	cbz	r4, 8006cce <osSemaphoreAcquire+0x4e>
        stat = osErrorTimeout;
 8006cc6:	f06f 0001 	mvn.w	r0, #1
}
 8006cca:	b002      	add	sp, #8
 8006ccc:	bd10      	pop	{r4, pc}
        stat = osErrorResource;
 8006cce:	f06f 0002 	mvn.w	r0, #2
}
 8006cd2:	b002      	add	sp, #8
 8006cd4:	bd10      	pop	{r4, pc}
    stat = osErrorParameter;
 8006cd6:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8006cda:	e7e2      	b.n	8006ca2 <osSemaphoreAcquire+0x22>
    stat = osErrorParameter;
 8006cdc:	f06f 0003 	mvn.w	r0, #3
}
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop

08006ce4 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8006ce4:	b328      	cbz	r0, 8006d32 <osSemaphoreRelease+0x4e>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006ce6:	b500      	push	{lr}
 8006ce8:	b083      	sub	sp, #12
 8006cea:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8006cee:	b19b      	cbz	r3, 8006d18 <osSemaphoreRelease+0x34>
    yield = pdFALSE;
 8006cf0:	2300      	movs	r3, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006cf2:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 8006cf4:	9301      	str	r3, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006cf6:	f000 fc57 	bl	80075a8 <xQueueGiveFromISR>
 8006cfa:	2801      	cmp	r0, #1
 8006cfc:	d116      	bne.n	8006d2c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 8006cfe:	9b01      	ldr	r3, [sp, #4]
 8006d00:	b183      	cbz	r3, 8006d24 <osSemaphoreRelease+0x40>
 8006d02:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006d06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d0a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006d0e:	f3bf 8f4f 	dsb	sy
 8006d12:	f3bf 8f6f 	isb	sy
 8006d16:	e005      	b.n	8006d24 <osSemaphoreRelease+0x40>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006d18:	461a      	mov	r2, r3
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	f000 faa6 	bl	800726c <xQueueGenericSend>
 8006d20:	2801      	cmp	r0, #1
 8006d22:	d103      	bne.n	8006d2c <osSemaphoreRelease+0x48>
  stat = osOK;
 8006d24:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 8006d26:	b003      	add	sp, #12
 8006d28:	f85d fb04 	ldr.w	pc, [sp], #4
      stat = osErrorResource;
 8006d2c:	f06f 0002 	mvn.w	r0, #2
 8006d30:	e7f9      	b.n	8006d26 <osSemaphoreRelease+0x42>
    stat = osErrorParameter;
 8006d32:	f06f 0003 	mvn.w	r0, #3
}
 8006d36:	4770      	bx	lr

08006d38 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006d40:	b987      	cbnz	r7, 8006d64 <osMessageQueueNew+0x2c>
 8006d42:	4605      	mov	r5, r0
 8006d44:	b170      	cbz	r0, 8006d64 <osMessageQueueNew+0x2c>
 8006d46:	b169      	cbz	r1, 8006d64 <osMessageQueueNew+0x2c>
    mem = -1;

    if (attr != NULL) {
 8006d48:	4614      	mov	r4, r2
 8006d4a:	b17a      	cbz	r2, 8006d6c <osMessageQueueNew+0x34>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006d4c:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 8006d50:	b1c3      	cbz	r3, 8006d84 <osMessageQueueNew+0x4c>
 8006d52:	2a4f      	cmp	r2, #79	@ 0x4f
 8006d54:	d906      	bls.n	8006d64 <osMessageQueueNew+0x2c>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006d56:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006d58:	b122      	cbz	r2, 8006d64 <osMessageQueueNew+0x2c>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006d5a:	fb01 f505 	mul.w	r5, r1, r5
 8006d5e:	6966      	ldr	r6, [r4, #20]
 8006d60:	42ae      	cmp	r6, r5
 8006d62:	d21e      	bcs.n	8006da2 <osMessageQueueNew+0x6a>
  hQueue = NULL;
 8006d64:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8006d66:	4628      	mov	r0, r5
 8006d68:	b003      	add	sp, #12
 8006d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hQueue = xQueueCreate (msg_count, msg_size);
 8006d6c:	f000 fa14 	bl	8007198 <xQueueGenericCreate>
    if (hQueue != NULL) {
 8006d70:	4605      	mov	r5, r0
 8006d72:	2800      	cmp	r0, #0
 8006d74:	d0f6      	beq.n	8006d64 <osMessageQueueNew+0x2c>
      vQueueAddToRegistry (hQueue, name);
 8006d76:	4628      	mov	r0, r5
 8006d78:	4621      	mov	r1, r4
 8006d7a:	f000 fea9 	bl	8007ad0 <vQueueAddToRegistry>
}
 8006d7e:	4628      	mov	r0, r5
 8006d80:	b003      	add	sp, #12
 8006d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006d84:	2a00      	cmp	r2, #0
 8006d86:	d1ed      	bne.n	8006d64 <osMessageQueueNew+0x2c>
 8006d88:	6923      	ldr	r3, [r4, #16]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d1ea      	bne.n	8006d64 <osMessageQueueNew+0x2c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006d8e:	6962      	ldr	r2, [r4, #20]
 8006d90:	2a00      	cmp	r2, #0
 8006d92:	d1e7      	bne.n	8006d64 <osMessageQueueNew+0x2c>
          hQueue = xQueueCreate (msg_count, msg_size);
 8006d94:	f000 fa00 	bl	8007198 <xQueueGenericCreate>
    if (hQueue != NULL) {
 8006d98:	4605      	mov	r5, r0
 8006d9a:	2800      	cmp	r0, #0
 8006d9c:	d0e2      	beq.n	8006d64 <osMessageQueueNew+0x2c>
        name = attr->name;
 8006d9e:	6824      	ldr	r4, [r4, #0]
 8006da0:	e7e9      	b.n	8006d76 <osMessageQueueNew+0x3e>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006da2:	9700      	str	r7, [sp, #0]
 8006da4:	f000 f9a6 	bl	80070f4 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 8006da8:	4605      	mov	r5, r0
 8006daa:	2800      	cmp	r0, #0
 8006dac:	d1f7      	bne.n	8006d9e <osMessageQueueNew+0x66>
 8006dae:	e7d9      	b.n	8006d64 <osMessageQueueNew+0x2c>

08006db0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006db0:	b560      	push	{r5, r6, lr}
 8006db2:	461e      	mov	r6, r3
 8006db4:	b083      	sub	sp, #12
 8006db6:	f3ef 8205 	mrs	r2, IPSR
  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006dba:	fab0 f580 	clz	r5, r0
 8006dbe:	fab1 f381 	clz	r3, r1
 8006dc2:	096d      	lsrs	r5, r5, #5
 8006dc4:	095b      	lsrs	r3, r3, #5
  if (IS_IRQ()) {
 8006dc6:	b1da      	cbz	r2, 8006e00 <osMessageQueuePut+0x50>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006dc8:	2e00      	cmp	r6, #0
 8006dca:	bf18      	it	ne
 8006dcc:	f043 0301 	orrne.w	r3, r3, #1
 8006dd0:	bb33      	cbnz	r3, 8006e20 <osMessageQueuePut+0x70>
 8006dd2:	bb2d      	cbnz	r5, 8006e20 <osMessageQueuePut+0x70>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006dd4:	462b      	mov	r3, r5
 8006dd6:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8006dd8:	9501      	str	r5, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006dda:	f000 fb7f 	bl	80074dc <xQueueGenericSendFromISR>
 8006dde:	2801      	cmp	r0, #1
 8006de0:	d11a      	bne.n	8006e18 <osMessageQueuePut+0x68>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8006de2:	9b01      	ldr	r3, [sp, #4]
 8006de4:	b14b      	cbz	r3, 8006dfa <osMessageQueuePut+0x4a>
 8006de6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006dea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006dee:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006df2:	f3bf 8f4f 	dsb	sy
 8006df6:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8006dfa:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8006dfc:	b003      	add	sp, #12
 8006dfe:	bd60      	pop	{r5, r6, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006e00:	b975      	cbnz	r5, 8006e20 <osMessageQueuePut+0x70>
 8006e02:	b96b      	cbnz	r3, 8006e20 <osMessageQueuePut+0x70>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006e04:	4632      	mov	r2, r6
 8006e06:	f000 fa31 	bl	800726c <xQueueGenericSend>
 8006e0a:	2801      	cmp	r0, #1
 8006e0c:	d0f5      	beq.n	8006dfa <osMessageQueuePut+0x4a>
        if (timeout != 0U) {
 8006e0e:	b11e      	cbz	r6, 8006e18 <osMessageQueuePut+0x68>
          stat = osErrorTimeout;
 8006e10:	f06f 0001 	mvn.w	r0, #1
}
 8006e14:	b003      	add	sp, #12
 8006e16:	bd60      	pop	{r5, r6, pc}
        stat = osErrorResource;
 8006e18:	f06f 0002 	mvn.w	r0, #2
}
 8006e1c:	b003      	add	sp, #12
 8006e1e:	bd60      	pop	{r5, r6, pc}
      stat = osErrorParameter;
 8006e20:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8006e24:	e7ea      	b.n	8006dfc <osMessageQueuePut+0x4c>
 8006e26:	bf00      	nop

08006e28 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006e28:	b570      	push	{r4, r5, r6, lr}
 8006e2a:	461e      	mov	r6, r3
 8006e2c:	b082      	sub	sp, #8
 8006e2e:	f3ef 8305 	mrs	r3, IPSR
  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006e32:	fab0 f580 	clz	r5, r0
 8006e36:	fab1 f481 	clz	r4, r1
 8006e3a:	096d      	lsrs	r5, r5, #5
 8006e3c:	0964      	lsrs	r4, r4, #5
  if (IS_IRQ()) {
 8006e3e:	b1d3      	cbz	r3, 8006e76 <osMessageQueueGet+0x4e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006e40:	2e00      	cmp	r6, #0
 8006e42:	bf18      	it	ne
 8006e44:	f044 0401 	orrne.w	r4, r4, #1
 8006e48:	bb2c      	cbnz	r4, 8006e96 <osMessageQueueGet+0x6e>
 8006e4a:	bb25      	cbnz	r5, 8006e96 <osMessageQueueGet+0x6e>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006e4c:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8006e4e:	9501      	str	r5, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006e50:	f000 fdb8 	bl	80079c4 <xQueueReceiveFromISR>
 8006e54:	2801      	cmp	r0, #1
 8006e56:	d11a      	bne.n	8006e8e <osMessageQueueGet+0x66>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8006e58:	9b01      	ldr	r3, [sp, #4]
 8006e5a:	b14b      	cbz	r3, 8006e70 <osMessageQueueGet+0x48>
 8006e5c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006e60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e64:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006e68:	f3bf 8f4f 	dsb	sy
 8006e6c:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8006e70:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8006e72:	b002      	add	sp, #8
 8006e74:	bd70      	pop	{r4, r5, r6, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006e76:	b975      	cbnz	r5, 8006e96 <osMessageQueueGet+0x6e>
 8006e78:	b96c      	cbnz	r4, 8006e96 <osMessageQueueGet+0x6e>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006e7a:	4632      	mov	r2, r6
 8006e7c:	f000 fbea 	bl	8007654 <xQueueReceive>
 8006e80:	2801      	cmp	r0, #1
 8006e82:	d0f5      	beq.n	8006e70 <osMessageQueueGet+0x48>
        if (timeout != 0U) {
 8006e84:	b11e      	cbz	r6, 8006e8e <osMessageQueueGet+0x66>
          stat = osErrorTimeout;
 8006e86:	f06f 0001 	mvn.w	r0, #1
}
 8006e8a:	b002      	add	sp, #8
 8006e8c:	bd70      	pop	{r4, r5, r6, pc}
        stat = osErrorResource;
 8006e8e:	f06f 0002 	mvn.w	r0, #2
}
 8006e92:	b002      	add	sp, #8
 8006e94:	bd70      	pop	{r4, r5, r6, pc}
      stat = osErrorParameter;
 8006e96:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8006e9a:	e7ea      	b.n	8006e72 <osMessageQueueGet+0x4a>

08006e9c <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006e9c:	4b04      	ldr	r3, [pc, #16]	@ (8006eb0 <vApplicationGetIdleTaskMemory+0x14>)
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006e9e:	b410      	push	{r4}
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006ea0:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006ea2:	2380      	movs	r3, #128	@ 0x80
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006ea4:	4c03      	ldr	r4, [pc, #12]	@ (8006eb4 <vApplicationGetIdleTaskMemory+0x18>)
 8006ea6:	600c      	str	r4, [r1, #0]
}
 8006ea8:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006eac:	6013      	str	r3, [r2, #0]
}
 8006eae:	4770      	bx	lr
 8006eb0:	240009fc 	.word	0x240009fc
 8006eb4:	240007fc 	.word	0x240007fc

08006eb8 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006eb8:	4b05      	ldr	r3, [pc, #20]	@ (8006ed0 <vApplicationGetTimerTaskMemory+0x18>)
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006eba:	b410      	push	{r4}
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006ebc:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006ebe:	f44f 7380 	mov.w	r3, #256	@ 0x100
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006ec2:	4c04      	ldr	r4, [pc, #16]	@ (8006ed4 <vApplicationGetTimerTaskMemory+0x1c>)
 8006ec4:	600c      	str	r4, [r1, #0]
}
 8006ec6:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006eca:	6013      	str	r3, [r2, #0]
}
 8006ecc:	4770      	bx	lr
 8006ece:	bf00      	nop
 8006ed0:	24000754 	.word	0x24000754
 8006ed4:	24000354 	.word	0x24000354

08006ed8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ed8:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006edc:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006ee0:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006ee2:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006ee4:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ee6:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ee8:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006eec:	4770      	bx	lr
 8006eee:	bf00      	nop

08006ef0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006ef4:	4770      	bx	lr
 8006ef6:	bf00      	nop

08006ef8 <vListInsertEnd>:
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8006ef8:	6803      	ldr	r3, [r0, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006efa:	6842      	ldr	r2, [r0, #4]
	( pxList->uxNumberOfItems )++;
 8006efc:	3301      	adds	r3, #1
{
 8006efe:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006f00:	6894      	ldr	r4, [r2, #8]
 8006f02:	e9c1 2401 	strd	r2, r4, [r1, #4]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006f06:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006f08:	6091      	str	r1, [r2, #8]
}
 8006f0a:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 8006f0e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8006f10:	6003      	str	r3, [r0, #0]
}
 8006f12:	4770      	bx	lr

08006f14 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f14:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006f16:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006f18:	1c6b      	adds	r3, r5, #1
 8006f1a:	d010      	beq.n	8006f3e <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006f1c:	f100 0308 	add.w	r3, r0, #8
 8006f20:	461c      	mov	r4, r3
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	42aa      	cmp	r2, r5
 8006f28:	d9fa      	bls.n	8006f20 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8006f2a:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8006f2c:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8006f2e:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006f30:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006f32:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8006f34:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 8006f36:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8006f38:	6002      	str	r2, [r0, #0]
}
 8006f3a:	bc30      	pop	{r4, r5}
 8006f3c:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8006f3e:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8006f40:	6863      	ldr	r3, [r4, #4]
 8006f42:	e7f2      	b.n	8006f2a <vListInsert+0x16>

08006f44 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006f44:	6903      	ldr	r3, [r0, #16]
{
 8006f46:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006f48:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006f4a:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
	if( pxList->pxIndex == pxItemToRemove )
 8006f4e:	4284      	cmp	r4, r0

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
 8006f50:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006f54:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006f56:	6051      	str	r1, [r2, #4]
	pxItemToRemove->pxContainer = NULL;
 8006f58:	f04f 0100 	mov.w	r1, #0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006f5c:	bf08      	it	eq
 8006f5e:	605a      	streq	r2, [r3, #4]
	( pxList->uxNumberOfItems )--;
 8006f60:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pxContainer = NULL;
 8006f62:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8006f64:	3a01      	subs	r2, #1
 8006f66:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 8006f68:	6818      	ldr	r0, [r3, #0]
}
 8006f6a:	4770      	bx	lr

08006f6c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006f6c:	b570      	push	{r4, r5, r6, lr}
 8006f6e:	4616      	mov	r6, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006f70:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 8006f72:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f74:	6b85      	ldr	r5, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006f76:	b92a      	cbnz	r2, 8006f84 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f78:	6806      	ldr	r6, [r0, #0]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f7a:	3501      	adds	r5, #1
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f7c:	b34e      	cbz	r6, 8006fd2 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8006f7e:	4610      	mov	r0, r2
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f80:	63a5      	str	r5, [r4, #56]	@ 0x38

	return xReturn;
}
 8006f82:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8006f84:	b97e      	cbnz	r6, 8006fa6 <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006f86:	6840      	ldr	r0, [r0, #4]
 8006f88:	f009 ffe7 	bl	8010f5a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006f8c:	6863      	ldr	r3, [r4, #4]
 8006f8e:	6c21      	ldr	r1, [r4, #64]	@ 0x40
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f90:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006f92:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f94:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006f96:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f98:	bf24      	itt	cs
 8006f9a:	6823      	ldrcs	r3, [r4, #0]
 8006f9c:	6063      	strcs	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f9e:	3501      	adds	r5, #1
BaseType_t xReturn = pdFALSE;
 8006fa0:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006fa2:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 8006fa4:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006fa6:	68c0      	ldr	r0, [r0, #12]
 8006fa8:	f009 ffd7 	bl	8010f5a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006fac:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8006fae:	68e3      	ldr	r3, [r4, #12]
 8006fb0:	4251      	negs	r1, r2
 8006fb2:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006fb4:	6822      	ldr	r2, [r4, #0]
 8006fb6:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006fb8:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006fba:	d202      	bcs.n	8006fc2 <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006fbc:	68a3      	ldr	r3, [r4, #8]
 8006fbe:	440b      	add	r3, r1
 8006fc0:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8006fc2:	2e02      	cmp	r6, #2
 8006fc4:	d1eb      	bne.n	8006f9e <prvCopyDataToQueue+0x32>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006fc6:	2d01      	cmp	r5, #1
BaseType_t xReturn = pdFALSE;
 8006fc8:	f04f 0000 	mov.w	r0, #0
 8006fcc:	bf38      	it	cc
 8006fce:	2501      	movcc	r5, #1
 8006fd0:	e7d6      	b.n	8006f80 <prvCopyDataToQueue+0x14>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006fd2:	6880      	ldr	r0, [r0, #8]
 8006fd4:	f001 faf6 	bl	80085c4 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006fd8:	60a6      	str	r6, [r4, #8]
 8006fda:	e7d1      	b.n	8006f80 <prvCopyDataToQueue+0x14>

08006fdc <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006fdc:	b570      	push	{r4, r5, r6, lr}
 8006fde:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006fe0:	f001 fe10 	bl	8008c04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006fe4:	f895 3045 	ldrb.w	r3, [r5, #69]	@ 0x45
 8006fe8:	b25c      	sxtb	r4, r3

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006fea:	2c00      	cmp	r4, #0
 8006fec:	dd14      	ble.n	8007018 <prvUnlockQueue+0x3c>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006fee:	f105 0624 	add.w	r6, r5, #36	@ 0x24
 8006ff2:	e003      	b.n	8006ffc <prvUnlockQueue+0x20>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006ff4:	1e63      	subs	r3, r4, #1
 8006ff6:	b2da      	uxtb	r2, r3
 8006ff8:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006ffa:	b16a      	cbz	r2, 8007018 <prvUnlockQueue+0x3c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ffc:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ffe:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007000:	b153      	cbz	r3, 8007018 <prvUnlockQueue+0x3c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007002:	f001 f9ef 	bl	80083e4 <xTaskRemoveFromEventList>
 8007006:	2800      	cmp	r0, #0
 8007008:	d0f4      	beq.n	8006ff4 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 800700a:	f001 fa7f 	bl	800850c <vTaskMissedYield>
			--cTxLock;
 800700e:	1e63      	subs	r3, r4, #1
 8007010:	b2da      	uxtb	r2, r3
 8007012:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007014:	2a00      	cmp	r2, #0
 8007016:	d1f1      	bne.n	8006ffc <prvUnlockQueue+0x20>
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007018:	23ff      	movs	r3, #255	@ 0xff
 800701a:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800701e:	f001 fe13 	bl	8008c48 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007022:	f001 fdef 	bl	8008c04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007026:	f895 3044 	ldrb.w	r3, [r5, #68]	@ 0x44
 800702a:	b25c      	sxtb	r4, r3

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800702c:	2c00      	cmp	r4, #0
 800702e:	dd14      	ble.n	800705a <prvUnlockQueue+0x7e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007030:	f105 0610 	add.w	r6, r5, #16
 8007034:	e003      	b.n	800703e <prvUnlockQueue+0x62>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007036:	1e63      	subs	r3, r4, #1
 8007038:	b2da      	uxtb	r2, r3
 800703a:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800703c:	b16a      	cbz	r2, 800705a <prvUnlockQueue+0x7e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800703e:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007040:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007042:	b153      	cbz	r3, 800705a <prvUnlockQueue+0x7e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007044:	f001 f9ce 	bl	80083e4 <xTaskRemoveFromEventList>
 8007048:	2800      	cmp	r0, #0
 800704a:	d0f4      	beq.n	8007036 <prvUnlockQueue+0x5a>
					vTaskMissedYield();
 800704c:	f001 fa5e 	bl	800850c <vTaskMissedYield>
				--cRxLock;
 8007050:	1e63      	subs	r3, r4, #1
 8007052:	b2da      	uxtb	r2, r3
 8007054:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007056:	2a00      	cmp	r2, #0
 8007058:	d1f1      	bne.n	800703e <prvUnlockQueue+0x62>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800705a:	23ff      	movs	r3, #255	@ 0xff
 800705c:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
}
 8007060:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8007064:	f001 bdf0 	b.w	8008c48 <vPortExitCritical>

08007068 <xQueueGenericReset>:
{
 8007068:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800706a:	b1e0      	cbz	r0, 80070a6 <xQueueGenericReset+0x3e>
 800706c:	4604      	mov	r4, r0
 800706e:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8007070:	f001 fdc8 	bl	8008c04 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007074:	6822      	ldr	r2, [r4, #0]
 8007076:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800707a:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800707c:	fb01 f303 	mul.w	r3, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007080:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007082:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007084:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007086:	60a3      	str	r3, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007088:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800708a:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800708c:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800708e:	63a1      	str	r1, [r4, #56]	@ 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8007090:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007094:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 8007098:	b975      	cbnz	r5, 80070b8 <xQueueGenericReset+0x50>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800709a:	6923      	ldr	r3, [r4, #16]
 800709c:	b9c3      	cbnz	r3, 80070d0 <xQueueGenericReset+0x68>
	taskEXIT_CRITICAL();
 800709e:	f001 fdd3 	bl	8008c48 <vPortExitCritical>
}
 80070a2:	2001      	movs	r0, #1
 80070a4:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80070a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070aa:	f383 8811 	msr	BASEPRI, r3
 80070ae:	f3bf 8f6f 	isb	sy
 80070b2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80070b6:	e7fe      	b.n	80070b6 <xQueueGenericReset+0x4e>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80070b8:	f104 0010 	add.w	r0, r4, #16
 80070bc:	f7ff ff0c 	bl	8006ed8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80070c0:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80070c4:	f7ff ff08 	bl	8006ed8 <vListInitialise>
	taskEXIT_CRITICAL();
 80070c8:	f001 fdbe 	bl	8008c48 <vPortExitCritical>
}
 80070cc:	2001      	movs	r0, #1
 80070ce:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070d0:	f104 0010 	add.w	r0, r4, #16
 80070d4:	f001 f986 	bl	80083e4 <xTaskRemoveFromEventList>
 80070d8:	2800      	cmp	r0, #0
 80070da:	d0e0      	beq.n	800709e <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 80070dc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80070e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070e4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80070e8:	f3bf 8f4f 	dsb	sy
 80070ec:	f3bf 8f6f 	isb	sy
 80070f0:	e7d5      	b.n	800709e <xQueueGenericReset+0x36>
 80070f2:	bf00      	nop

080070f4 <xQueueGenericCreateStatic>:
	{
 80070f4:	b530      	push	{r4, r5, lr}
 80070f6:	b085      	sub	sp, #20
 80070f8:	f89d 4020 	ldrb.w	r4, [sp, #32]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80070fc:	b940      	cbnz	r0, 8007110 <xQueueGenericCreateStatic+0x1c>
 80070fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007102:	f383 8811 	msr	BASEPRI, r3
 8007106:	f3bf 8f6f 	isb	sy
 800710a:	f3bf 8f4f 	dsb	sy
 800710e:	e7fe      	b.n	800710e <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
 8007110:	b153      	cbz	r3, 8007128 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007112:	b30a      	cbz	r2, 8007158 <xQueueGenericCreateStatic+0x64>
 8007114:	b989      	cbnz	r1, 800713a <xQueueGenericCreateStatic+0x46>
 8007116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800711a:	f383 8811 	msr	BASEPRI, r3
 800711e:	f3bf 8f6f 	isb	sy
 8007122:	f3bf 8f4f 	dsb	sy
 8007126:	e7fe      	b.n	8007126 <xQueueGenericCreateStatic+0x32>
 8007128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800712c:	f383 8811 	msr	BASEPRI, r3
 8007130:	f3bf 8f6f 	isb	sy
 8007134:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8007138:	e7fe      	b.n	8007138 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800713a:	b16a      	cbz	r2, 8007158 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800713c:	2550      	movs	r5, #80	@ 0x50
 800713e:	9503      	str	r5, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007140:	9d03      	ldr	r5, [sp, #12]
 8007142:	2d50      	cmp	r5, #80	@ 0x50
 8007144:	d013      	beq.n	800716e <xQueueGenericCreateStatic+0x7a>
 8007146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800714a:	f383 8811 	msr	BASEPRI, r3
 800714e:	f3bf 8f6f 	isb	sy
 8007152:	f3bf 8f4f 	dsb	sy
 8007156:	e7fe      	b.n	8007156 <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007158:	2900      	cmp	r1, #0
 800715a:	d0ef      	beq.n	800713c <xQueueGenericCreateStatic+0x48>
 800715c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007160:	f383 8811 	msr	BASEPRI, r3
 8007164:	f3bf 8f6f 	isb	sy
 8007168:	f3bf 8f4f 	dsb	sy
 800716c:	e7fe      	b.n	800716c <xQueueGenericCreateStatic+0x78>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800716e:	2900      	cmp	r1, #0
 8007170:	bf08      	it	eq
 8007172:	461a      	moveq	r2, r3
	pxNewQueue->uxItemSize = uxItemSize;
 8007174:	6419      	str	r1, [r3, #64]	@ 0x40
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007176:	2101      	movs	r1, #1
	pxNewQueue->uxLength = uxQueueLength;
 8007178:	63d8      	str	r0, [r3, #60]	@ 0x3c
 800717a:	601a      	str	r2, [r3, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800717c:	4618      	mov	r0, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800717e:	f883 1046 	strb.w	r1, [r3, #70]	@ 0x46
 8007182:	9301      	str	r3, [sp, #4]
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007184:	9a03      	ldr	r2, [sp, #12]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007186:	f7ff ff6f 	bl	8007068 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800718a:	9b01      	ldr	r3, [sp, #4]
	}
 800718c:	4618      	mov	r0, r3
		pxNewQueue->ucQueueType = ucQueueType;
 800718e:	f883 404c 	strb.w	r4, [r3, #76]	@ 0x4c
	}
 8007192:	b005      	add	sp, #20
 8007194:	bd30      	pop	{r4, r5, pc}
 8007196:	bf00      	nop

08007198 <xQueueGenericCreate>:
	{
 8007198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800719a:	b940      	cbnz	r0, 80071ae <xQueueGenericCreate+0x16>
 800719c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071a0:	f383 8811 	msr	BASEPRI, r3
 80071a4:	f3bf 8f6f 	isb	sy
 80071a8:	f3bf 8f4f 	dsb	sy
 80071ac:	e7fe      	b.n	80071ac <xQueueGenericCreate+0x14>
 80071ae:	4604      	mov	r4, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071b0:	fb01 f000 	mul.w	r0, r1, r0
 80071b4:	460d      	mov	r5, r1
 80071b6:	4616      	mov	r6, r2
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80071b8:	3050      	adds	r0, #80	@ 0x50
 80071ba:	f001 fe97 	bl	8008eec <pvPortMalloc>
		if( pxNewQueue != NULL )
 80071be:	4607      	mov	r7, r0
 80071c0:	b170      	cbz	r0, 80071e0 <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80071c2:	2300      	movs	r3, #0
 80071c4:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 80071c8:	b165      	cbz	r5, 80071e4 <xQueueGenericCreate+0x4c>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80071ca:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80071ce:	2101      	movs	r1, #1
 80071d0:	4638      	mov	r0, r7
 80071d2:	603b      	str	r3, [r7, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 80071d4:	e9c7 450f 	strd	r4, r5, [r7, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80071d8:	f7ff ff46 	bl	8007068 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80071dc:	f887 604c 	strb.w	r6, [r7, #76]	@ 0x4c
	}
 80071e0:	4638      	mov	r0, r7
 80071e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80071e4:	4603      	mov	r3, r0
 80071e6:	e7f2      	b.n	80071ce <xQueueGenericCreate+0x36>

080071e8 <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 80071e8:	b940      	cbnz	r0, 80071fc <xQueueCreateCountingSemaphoreStatic+0x14>
 80071ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071ee:	f383 8811 	msr	BASEPRI, r3
 80071f2:	f3bf 8f6f 	isb	sy
 80071f6:	f3bf 8f4f 	dsb	sy
 80071fa:	e7fe      	b.n	80071fa <xQueueCreateCountingSemaphoreStatic+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 80071fc:	4288      	cmp	r0, r1
	{
 80071fe:	b510      	push	{r4, lr}
 8007200:	460c      	mov	r4, r1
 8007202:	b082      	sub	sp, #8
		configASSERT( uxInitialCount <= uxMaxCount );
 8007204:	d208      	bcs.n	8007218 <xQueueCreateCountingSemaphoreStatic+0x30>
 8007206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800720a:	f383 8811 	msr	BASEPRI, r3
 800720e:	f3bf 8f6f 	isb	sy
 8007212:	f3bf 8f4f 	dsb	sy
 8007216:	e7fe      	b.n	8007216 <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007218:	2102      	movs	r1, #2
 800721a:	4613      	mov	r3, r2
 800721c:	2200      	movs	r2, #0
 800721e:	9100      	str	r1, [sp, #0]
 8007220:	4611      	mov	r1, r2
 8007222:	f7ff ff67 	bl	80070f4 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 8007226:	b100      	cbz	r0, 800722a <xQueueCreateCountingSemaphoreStatic+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007228:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800722a:	b002      	add	sp, #8
 800722c:	bd10      	pop	{r4, pc}
 800722e:	bf00      	nop

08007230 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 8007230:	b940      	cbnz	r0, 8007244 <xQueueCreateCountingSemaphore+0x14>
 8007232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007236:	f383 8811 	msr	BASEPRI, r3
 800723a:	f3bf 8f6f 	isb	sy
 800723e:	f3bf 8f4f 	dsb	sy
 8007242:	e7fe      	b.n	8007242 <xQueueCreateCountingSemaphore+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007244:	4288      	cmp	r0, r1
	{
 8007246:	b510      	push	{r4, lr}
 8007248:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 800724a:	d208      	bcs.n	800725e <xQueueCreateCountingSemaphore+0x2e>
 800724c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007250:	f383 8811 	msr	BASEPRI, r3
 8007254:	f3bf 8f6f 	isb	sy
 8007258:	f3bf 8f4f 	dsb	sy
 800725c:	e7fe      	b.n	800725c <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800725e:	2202      	movs	r2, #2
 8007260:	2100      	movs	r1, #0
 8007262:	f7ff ff99 	bl	8007198 <xQueueGenericCreate>
		if( xHandle != NULL )
 8007266:	b100      	cbz	r0, 800726a <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007268:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800726a:	bd10      	pop	{r4, pc}

0800726c <xQueueGenericSend>:
{
 800726c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007270:	b085      	sub	sp, #20
 8007272:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8007274:	2800      	cmp	r0, #0
 8007276:	d07e      	beq.n	8007376 <xQueueGenericSend+0x10a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007278:	460f      	mov	r7, r1
 800727a:	4604      	mov	r4, r0
 800727c:	461e      	mov	r6, r3
 800727e:	2900      	cmp	r1, #0
 8007280:	d069      	beq.n	8007356 <xQueueGenericSend+0xea>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007282:	2e02      	cmp	r6, #2
 8007284:	d10b      	bne.n	800729e <xQueueGenericSend+0x32>
 8007286:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007288:	2b01      	cmp	r3, #1
 800728a:	d008      	beq.n	800729e <xQueueGenericSend+0x32>
 800728c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007290:	f383 8811 	msr	BASEPRI, r3
 8007294:	f3bf 8f6f 	isb	sy
 8007298:	f3bf 8f4f 	dsb	sy
 800729c:	e7fe      	b.n	800729c <xQueueGenericSend+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800729e:	f001 f941 	bl	8008524 <xTaskGetSchedulerState>
 80072a2:	2800      	cmp	r0, #0
 80072a4:	d070      	beq.n	8007388 <xQueueGenericSend+0x11c>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80072a6:	f1a6 0802 	sub.w	r8, r6, #2
 80072aa:	2500      	movs	r5, #0
 80072ac:	fab8 f888 	clz	r8, r8
		prvLockQueue( pxQueue );
 80072b0:	46a9      	mov	r9, r5
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80072b2:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80072b6:	e007      	b.n	80072c8 <xQueueGenericSend+0x5c>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80072b8:	f001 fcc6 	bl	8008c48 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 80072bc:	4620      	mov	r0, r4
 80072be:	f7ff fe8d 	bl	8006fdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80072c2:	f000 ffcb 	bl	800825c <xTaskResumeAll>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80072c6:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 80072c8:	f001 fc9c 	bl	8008c04 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80072cc:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80072ce:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80072d0:	4290      	cmp	r0, r2
 80072d2:	d365      	bcc.n	80073a0 <xQueueGenericSend+0x134>
 80072d4:	f1b8 0f00 	cmp.w	r8, #0
 80072d8:	d162      	bne.n	80073a0 <xQueueGenericSend+0x134>
				if( xTicksToWait == ( TickType_t ) 0 )
 80072da:	9b01      	ldr	r3, [sp, #4]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d077      	beq.n	80073d0 <xQueueGenericSend+0x164>
				else if( xEntryTimeSet == pdFALSE )
 80072e0:	2d00      	cmp	r5, #0
 80072e2:	d044      	beq.n	800736e <xQueueGenericSend+0x102>
		taskEXIT_CRITICAL();
 80072e4:	f001 fcb0 	bl	8008c48 <vPortExitCritical>
		vTaskSuspendAll();
 80072e8:	f000 fe64 	bl	8007fb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80072ec:	f001 fc8a 	bl	8008c04 <vPortEnterCritical>
 80072f0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80072f4:	2bff      	cmp	r3, #255	@ 0xff
 80072f6:	d101      	bne.n	80072fc <xQueueGenericSend+0x90>
 80072f8:	f884 9044 	strb.w	r9, [r4, #68]	@ 0x44
 80072fc:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007300:	2bff      	cmp	r3, #255	@ 0xff
 8007302:	d101      	bne.n	8007308 <xQueueGenericSend+0x9c>
 8007304:	f884 9045 	strb.w	r9, [r4, #69]	@ 0x45
 8007308:	f001 fc9e 	bl	8008c48 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800730c:	a901      	add	r1, sp, #4
 800730e:	a802      	add	r0, sp, #8
 8007310:	f001 f8ba 	bl	8008488 <xTaskCheckForTimeOut>
 8007314:	2800      	cmp	r0, #0
 8007316:	d15f      	bne.n	80073d8 <xQueueGenericSend+0x16c>
	taskENTER_CRITICAL();
 8007318:	f001 fc74 	bl	8008c04 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800731c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800731e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007320:	429a      	cmp	r2, r3
 8007322:	d1c9      	bne.n	80072b8 <xQueueGenericSend+0x4c>
	taskEXIT_CRITICAL();
 8007324:	f001 fc90 	bl	8008c48 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007328:	9901      	ldr	r1, [sp, #4]
 800732a:	f104 0010 	add.w	r0, r4, #16
 800732e:	f001 f821 	bl	8008374 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007332:	4620      	mov	r0, r4
 8007334:	f7ff fe52 	bl	8006fdc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007338:	f000 ff90 	bl	800825c <xTaskResumeAll>
 800733c:	2800      	cmp	r0, #0
 800733e:	d1c2      	bne.n	80072c6 <xQueueGenericSend+0x5a>
					portYIELD_WITHIN_API();
 8007340:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007344:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007348:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800734c:	f3bf 8f4f 	dsb	sy
 8007350:	f3bf 8f6f 	isb	sy
 8007354:	e7b7      	b.n	80072c6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007356:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007358:	2b00      	cmp	r3, #0
 800735a:	d092      	beq.n	8007282 <xQueueGenericSend+0x16>
 800735c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007360:	f383 8811 	msr	BASEPRI, r3
 8007364:	f3bf 8f6f 	isb	sy
 8007368:	f3bf 8f4f 	dsb	sy
 800736c:	e7fe      	b.n	800736c <xQueueGenericSend+0x100>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800736e:	a802      	add	r0, sp, #8
 8007370:	f001 f87e 	bl	8008470 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007374:	e7b6      	b.n	80072e4 <xQueueGenericSend+0x78>
 8007376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800737a:	f383 8811 	msr	BASEPRI, r3
 800737e:	f3bf 8f6f 	isb	sy
 8007382:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8007386:	e7fe      	b.n	8007386 <xQueueGenericSend+0x11a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007388:	9b01      	ldr	r3, [sp, #4]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d08b      	beq.n	80072a6 <xQueueGenericSend+0x3a>
 800738e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007392:	f383 8811 	msr	BASEPRI, r3
 8007396:	f3bf 8f6f 	isb	sy
 800739a:	f3bf 8f4f 	dsb	sy
 800739e:	e7fe      	b.n	800739e <xQueueGenericSend+0x132>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80073a0:	4632      	mov	r2, r6
 80073a2:	4639      	mov	r1, r7
 80073a4:	4620      	mov	r0, r4
 80073a6:	f7ff fde1 	bl	8006f6c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073aa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80073ac:	b9d3      	cbnz	r3, 80073e4 <xQueueGenericSend+0x178>
					else if( xYieldRequired != pdFALSE )
 80073ae:	b148      	cbz	r0, 80073c4 <xQueueGenericSend+0x158>
						queueYIELD_IF_USING_PREEMPTION();
 80073b0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80073b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073b8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80073bc:	f3bf 8f4f 	dsb	sy
 80073c0:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80073c4:	f001 fc40 	bl	8008c48 <vPortExitCritical>
				return pdPASS;
 80073c8:	2001      	movs	r0, #1
}
 80073ca:	b005      	add	sp, #20
 80073cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					taskEXIT_CRITICAL();
 80073d0:	f001 fc3a 	bl	8008c48 <vPortExitCritical>
					return errQUEUE_FULL;
 80073d4:	2000      	movs	r0, #0
 80073d6:	e7f8      	b.n	80073ca <xQueueGenericSend+0x15e>
			prvUnlockQueue( pxQueue );
 80073d8:	4620      	mov	r0, r4
 80073da:	f7ff fdff 	bl	8006fdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80073de:	f000 ff3d 	bl	800825c <xTaskResumeAll>
			return errQUEUE_FULL;
 80073e2:	e7f7      	b.n	80073d4 <xQueueGenericSend+0x168>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073e4:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80073e8:	f000 fffc 	bl	80083e4 <xTaskRemoveFromEventList>
 80073ec:	2800      	cmp	r0, #0
 80073ee:	d0e9      	beq.n	80073c4 <xQueueGenericSend+0x158>
 80073f0:	e7de      	b.n	80073b0 <xQueueGenericSend+0x144>
 80073f2:	bf00      	nop

080073f4 <xQueueCreateMutexStatic>:
		configASSERT( pxStaticQueue != NULL );
 80073f4:	b179      	cbz	r1, 8007416 <xQueueCreateMutexStatic+0x22>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80073f6:	2350      	movs	r3, #80	@ 0x50
	{
 80073f8:	b570      	push	{r4, r5, r6, lr}
 80073fa:	b082      	sub	sp, #8
			volatile size_t xSize = sizeof( StaticQueue_t );
 80073fc:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80073fe:	9b01      	ldr	r3, [sp, #4]
 8007400:	2b50      	cmp	r3, #80	@ 0x50
 8007402:	d011      	beq.n	8007428 <xQueueCreateMutexStatic+0x34>
 8007404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007408:	f383 8811 	msr	BASEPRI, r3
 800740c:	f3bf 8f6f 	isb	sy
 8007410:	f3bf 8f4f 	dsb	sy
 8007414:	e7fe      	b.n	8007414 <xQueueCreateMutexStatic+0x20>
 8007416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800741a:	f383 8811 	msr	BASEPRI, r3
 800741e:	f3bf 8f6f 	isb	sy
 8007422:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8007426:	e7fe      	b.n	8007426 <xQueueCreateMutexStatic+0x32>
 8007428:	460c      	mov	r4, r1
	pxNewQueue->uxLength = uxQueueLength;
 800742a:	2600      	movs	r6, #0
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800742c:	2101      	movs	r1, #1
 800742e:	4605      	mov	r5, r0
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007430:	6024      	str	r4, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007432:	4620      	mov	r0, r4
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007434:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007438:	9a01      	ldr	r2, [sp, #4]
	pxNewQueue->uxLength = uxQueueLength;
 800743a:	e9c4 160f 	strd	r1, r6, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800743e:	f7ff fe13 	bl	8007068 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007442:	4633      	mov	r3, r6
 8007444:	4632      	mov	r2, r6
 8007446:	4631      	mov	r1, r6
 8007448:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800744a:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800744e:	60a6      	str	r6, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007450:	6026      	str	r6, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007452:	60e6      	str	r6, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007454:	f7ff ff0a 	bl	800726c <xQueueGenericSend>
	}
 8007458:	4620      	mov	r0, r4
 800745a:	b002      	add	sp, #8
 800745c:	bd70      	pop	{r4, r5, r6, pc}
 800745e:	bf00      	nop

08007460 <xQueueGiveMutexRecursive>:
	{
 8007460:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 8007462:	b138      	cbz	r0, 8007474 <xQueueGiveMutexRecursive+0x14>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007464:	6885      	ldr	r5, [r0, #8]
 8007466:	4604      	mov	r4, r0
 8007468:	f001 f856 	bl	8008518 <xTaskGetCurrentTaskHandle>
 800746c:	4285      	cmp	r5, r0
 800746e:	d00a      	beq.n	8007486 <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
 8007470:	2000      	movs	r0, #0
	}
 8007472:	bd38      	pop	{r3, r4, r5, pc}
 8007474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007478:	f383 8811 	msr	BASEPRI, r3
 800747c:	f3bf 8f6f 	isb	sy
 8007480:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 8007484:	e7fe      	b.n	8007484 <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007486:	68e3      	ldr	r3, [r4, #12]
 8007488:	3b01      	subs	r3, #1
 800748a:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800748c:	b10b      	cbz	r3, 8007492 <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
 800748e:	2001      	movs	r0, #1
	}
 8007490:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007492:	461a      	mov	r2, r3
 8007494:	4619      	mov	r1, r3
 8007496:	4620      	mov	r0, r4
 8007498:	f7ff fee8 	bl	800726c <xQueueGenericSend>
 800749c:	e7f7      	b.n	800748e <xQueueGiveMutexRecursive+0x2e>
 800749e:	bf00      	nop

080074a0 <xQueueCreateMutex>:
	{
 80074a0:	b570      	push	{r4, r5, r6, lr}
 80074a2:	4605      	mov	r5, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80074a4:	2050      	movs	r0, #80	@ 0x50
 80074a6:	f001 fd21 	bl	8008eec <pvPortMalloc>
		if( pxNewQueue != NULL )
 80074aa:	4604      	mov	r4, r0
 80074ac:	b198      	cbz	r0, 80074d6 <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80074ae:	2600      	movs	r6, #0
	pxNewQueue->uxLength = uxQueueLength;
 80074b0:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80074b2:	6020      	str	r0, [r4, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80074b4:	f880 6046 	strb.w	r6, [r0, #70]	@ 0x46
	pxNewQueue->uxLength = uxQueueLength;
 80074b8:	e9c0 160f 	strd	r1, r6, [r0, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80074bc:	f7ff fdd4 	bl	8007068 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80074c0:	4633      	mov	r3, r6
 80074c2:	4632      	mov	r2, r6
 80074c4:	4631      	mov	r1, r6
 80074c6:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 80074c8:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80074cc:	60a6      	str	r6, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80074ce:	6026      	str	r6, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80074d0:	60e6      	str	r6, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80074d2:	f7ff fecb 	bl	800726c <xQueueGenericSend>
	}
 80074d6:	4620      	mov	r0, r4
 80074d8:	bd70      	pop	{r4, r5, r6, pc}
 80074da:	bf00      	nop

080074dc <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
 80074dc:	2800      	cmp	r0, #0
 80074de:	d04b      	beq.n	8007578 <xQueueGenericSendFromISR+0x9c>
{
 80074e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074e4:	460e      	mov	r6, r1
 80074e6:	4604      	mov	r4, r0
 80074e8:	4617      	mov	r7, r2
 80074ea:	461d      	mov	r5, r3
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80074ec:	b339      	cbz	r1, 800753e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80074ee:	2d02      	cmp	r5, #2
 80074f0:	d10b      	bne.n	800750a <xQueueGenericSendFromISR+0x2e>
 80074f2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d008      	beq.n	800750a <xQueueGenericSendFromISR+0x2e>
 80074f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074fc:	f383 8811 	msr	BASEPRI, r3
 8007500:	f3bf 8f6f 	isb	sy
 8007504:	f3bf 8f4f 	dsb	sy
 8007508:	e7fe      	b.n	8007508 <xQueueGenericSendFromISR+0x2c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800750a:	f001 fc97 	bl	8008e3c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800750e:	f3ef 8811 	mrs	r8, BASEPRI
 8007512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007516:	f383 8811 	msr	BASEPRI, r3
 800751a:	f3bf 8f6f 	isb	sy
 800751e:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007522:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007524:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007526:	429a      	cmp	r2, r3
 8007528:	d315      	bcc.n	8007556 <xQueueGenericSendFromISR+0x7a>
 800752a:	f1a5 0002 	sub.w	r0, r5, #2
 800752e:	fab0 f080 	clz	r0, r0
 8007532:	0940      	lsrs	r0, r0, #5
 8007534:	b978      	cbnz	r0, 8007556 <xQueueGenericSendFromISR+0x7a>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007536:	f388 8811 	msr	BASEPRI, r8
}
 800753a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800753e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007540:	2b00      	cmp	r3, #0
 8007542:	d0d4      	beq.n	80074ee <xQueueGenericSendFromISR+0x12>
	__asm volatile
 8007544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007548:	f383 8811 	msr	BASEPRI, r3
 800754c:	f3bf 8f6f 	isb	sy
 8007550:	f3bf 8f4f 	dsb	sy
 8007554:	e7fe      	b.n	8007554 <xQueueGenericSendFromISR+0x78>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007556:	462a      	mov	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
 8007558:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800755c:	4631      	mov	r1, r6
 800755e:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8007560:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007562:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007564:	f7ff fd02 	bl	8006f6c <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8007568:	1c6b      	adds	r3, r5, #1
 800756a:	d00e      	beq.n	800758a <xQueueGenericSendFromISR+0xae>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800756c:	1c6b      	adds	r3, r5, #1
 800756e:	b25b      	sxtb	r3, r3
 8007570:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
			xReturn = pdPASS;
 8007574:	2001      	movs	r0, #1
 8007576:	e7de      	b.n	8007536 <xQueueGenericSendFromISR+0x5a>
 8007578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800757c:	f383 8811 	msr	BASEPRI, r3
 8007580:	f3bf 8f6f 	isb	sy
 8007584:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8007588:	e7fe      	b.n	8007588 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800758a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800758c:	2b00      	cmp	r3, #0
 800758e:	d0f1      	beq.n	8007574 <xQueueGenericSendFromISR+0x98>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007590:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007594:	f000 ff26 	bl	80083e4 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 8007598:	2800      	cmp	r0, #0
 800759a:	d0eb      	beq.n	8007574 <xQueueGenericSendFromISR+0x98>
 800759c:	2f00      	cmp	r7, #0
 800759e:	d0e9      	beq.n	8007574 <xQueueGenericSendFromISR+0x98>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80075a0:	2301      	movs	r3, #1
 80075a2:	603b      	str	r3, [r7, #0]
 80075a4:	e7e6      	b.n	8007574 <xQueueGenericSendFromISR+0x98>
 80075a6:	bf00      	nop

080075a8 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 80075a8:	b360      	cbz	r0, 8007604 <xQueueGiveFromISR+0x5c>
	configASSERT( pxQueue->uxItemSize == 0 );
 80075aa:	6c03      	ldr	r3, [r0, #64]	@ 0x40
{
 80075ac:	b570      	push	{r4, r5, r6, lr}
 80075ae:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 80075b0:	b143      	cbz	r3, 80075c4 <xQueueGiveFromISR+0x1c>
 80075b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075b6:	f383 8811 	msr	BASEPRI, r3
 80075ba:	f3bf 8f6f 	isb	sy
 80075be:	f3bf 8f4f 	dsb	sy
 80075c2:	e7fe      	b.n	80075c2 <xQueueGiveFromISR+0x1a>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80075c4:	6803      	ldr	r3, [r0, #0]
 80075c6:	460d      	mov	r5, r1
 80075c8:	b32b      	cbz	r3, 8007616 <xQueueGiveFromISR+0x6e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80075ca:	f001 fc37 	bl	8008e3c <vPortValidateInterruptPriority>
	__asm volatile
 80075ce:	f3ef 8611 	mrs	r6, BASEPRI
 80075d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075d6:	f383 8811 	msr	BASEPRI, r3
 80075da:	f3bf 8f6f 	isb	sy
 80075de:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075e2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 80075e4:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d921      	bls.n	800762e <xQueueGiveFromISR+0x86>
			const int8_t cTxLock = pxQueue->cTxLock;
 80075ea:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80075ee:	3301      	adds	r3, #1
			if( cTxLock == queueUNLOCKED )
 80075f0:	2aff      	cmp	r2, #255	@ 0xff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80075f2:	63a3      	str	r3, [r4, #56]	@ 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 80075f4:	b253      	sxtb	r3, r2
			if( cTxLock == queueUNLOCKED )
 80075f6:	d01e      	beq.n	8007636 <xQueueGiveFromISR+0x8e>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80075f8:	3301      	adds	r3, #1
 80075fa:	b25b      	sxtb	r3, r3
 80075fc:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
			xReturn = pdPASS;
 8007600:	2001      	movs	r0, #1
 8007602:	e015      	b.n	8007630 <xQueueGiveFromISR+0x88>
	__asm volatile
 8007604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007608:	f383 8811 	msr	BASEPRI, r3
 800760c:	f3bf 8f6f 	isb	sy
 8007610:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8007614:	e7fe      	b.n	8007614 <xQueueGiveFromISR+0x6c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007616:	6883      	ldr	r3, [r0, #8]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d0d6      	beq.n	80075ca <xQueueGiveFromISR+0x22>
 800761c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007620:	f383 8811 	msr	BASEPRI, r3
 8007624:	f3bf 8f6f 	isb	sy
 8007628:	f3bf 8f4f 	dsb	sy
 800762c:	e7fe      	b.n	800762c <xQueueGiveFromISR+0x84>
			xReturn = errQUEUE_FULL;
 800762e:	2000      	movs	r0, #0
	__asm volatile
 8007630:	f386 8811 	msr	BASEPRI, r6
}
 8007634:	bd70      	pop	{r4, r5, r6, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007636:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007638:	2b00      	cmp	r3, #0
 800763a:	d0e1      	beq.n	8007600 <xQueueGiveFromISR+0x58>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800763c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007640:	f000 fed0 	bl	80083e4 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 8007644:	2d00      	cmp	r5, #0
 8007646:	d0db      	beq.n	8007600 <xQueueGiveFromISR+0x58>
 8007648:	2800      	cmp	r0, #0
 800764a:	d0d9      	beq.n	8007600 <xQueueGiveFromISR+0x58>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800764c:	2301      	movs	r3, #1
 800764e:	602b      	str	r3, [r5, #0]
 8007650:	e7d6      	b.n	8007600 <xQueueGiveFromISR+0x58>
 8007652:	bf00      	nop

08007654 <xQueueReceive>:
{
 8007654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007656:	b085      	sub	sp, #20
 8007658:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800765a:	2800      	cmp	r0, #0
 800765c:	f000 809d 	beq.w	800779a <xQueueReceive+0x146>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007660:	460e      	mov	r6, r1
 8007662:	4604      	mov	r4, r0
 8007664:	2900      	cmp	r1, #0
 8007666:	d041      	beq.n	80076ec <xQueueReceive+0x98>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007668:	f000 ff5c 	bl	8008524 <xTaskGetSchedulerState>
 800766c:	2800      	cmp	r0, #0
 800766e:	d049      	beq.n	8007704 <xQueueReceive+0xb0>
		taskENTER_CRITICAL();
 8007670:	f001 fac8 	bl	8008c04 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007674:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007676:	2d00      	cmp	r5, #0
 8007678:	d161      	bne.n	800773e <xQueueReceive+0xea>
				if( xTicksToWait == ( TickType_t ) 0 )
 800767a:	9b01      	ldr	r3, [sp, #4]
 800767c:	b38b      	cbz	r3, 80076e2 <xQueueReceive+0x8e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800767e:	a802      	add	r0, sp, #8
		prvLockQueue( pxQueue );
 8007680:	462f      	mov	r7, r5
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007682:	f000 fef5 	bl	8008470 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8007686:	f001 fadf 	bl	8008c48 <vPortExitCritical>
		vTaskSuspendAll();
 800768a:	f000 fc93 	bl	8007fb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800768e:	f001 fab9 	bl	8008c04 <vPortEnterCritical>
 8007692:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007696:	2bff      	cmp	r3, #255	@ 0xff
 8007698:	d101      	bne.n	800769e <xQueueReceive+0x4a>
 800769a:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 800769e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80076a2:	2bff      	cmp	r3, #255	@ 0xff
 80076a4:	d101      	bne.n	80076aa <xQueueReceive+0x56>
 80076a6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80076aa:	f001 facd 	bl	8008c48 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80076ae:	a901      	add	r1, sp, #4
 80076b0:	a802      	add	r0, sp, #8
 80076b2:	f000 fee9 	bl	8008488 <xTaskCheckForTimeOut>
 80076b6:	2800      	cmp	r0, #0
 80076b8:	d130      	bne.n	800771c <xQueueReceive+0xc8>
	taskENTER_CRITICAL();
 80076ba:	f001 faa3 	bl	8008c04 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80076be:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d051      	beq.n	8007768 <xQueueReceive+0x114>
	taskEXIT_CRITICAL();
 80076c4:	f001 fac0 	bl	8008c48 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 80076c8:	4620      	mov	r0, r4
 80076ca:	f7ff fc87 	bl	8006fdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80076ce:	f000 fdc5 	bl	800825c <xTaskResumeAll>
		taskENTER_CRITICAL();
 80076d2:	f001 fa97 	bl	8008c04 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076d6:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80076d8:	2d00      	cmp	r5, #0
 80076da:	d130      	bne.n	800773e <xQueueReceive+0xea>
				if( xTicksToWait == ( TickType_t ) 0 )
 80076dc:	9b01      	ldr	r3, [sp, #4]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d1d1      	bne.n	8007686 <xQueueReceive+0x32>
					taskEXIT_CRITICAL();
 80076e2:	f001 fab1 	bl	8008c48 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80076e6:	2000      	movs	r0, #0
}
 80076e8:	b005      	add	sp, #20
 80076ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80076ec:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d0ba      	beq.n	8007668 <xQueueReceive+0x14>
	__asm volatile
 80076f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076f6:	f383 8811 	msr	BASEPRI, r3
 80076fa:	f3bf 8f6f 	isb	sy
 80076fe:	f3bf 8f4f 	dsb	sy
 8007702:	e7fe      	b.n	8007702 <xQueueReceive+0xae>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007704:	9b01      	ldr	r3, [sp, #4]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d0b2      	beq.n	8007670 <xQueueReceive+0x1c>
 800770a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800770e:	f383 8811 	msr	BASEPRI, r3
 8007712:	f3bf 8f6f 	isb	sy
 8007716:	f3bf 8f4f 	dsb	sy
 800771a:	e7fe      	b.n	800771a <xQueueReceive+0xc6>
			prvUnlockQueue( pxQueue );
 800771c:	4620      	mov	r0, r4
 800771e:	f7ff fc5d 	bl	8006fdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007722:	f000 fd9b 	bl	800825c <xTaskResumeAll>
	taskENTER_CRITICAL();
 8007726:	f001 fa6d 	bl	8008c04 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800772a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800772c:	2b00      	cmp	r3, #0
 800772e:	d0d8      	beq.n	80076e2 <xQueueReceive+0x8e>
	taskEXIT_CRITICAL();
 8007730:	f001 fa8a 	bl	8008c48 <vPortExitCritical>
		taskENTER_CRITICAL();
 8007734:	f001 fa66 	bl	8008c04 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007738:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800773a:	2d00      	cmp	r5, #0
 800773c:	d0ce      	beq.n	80076dc <xQueueReceive+0x88>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800773e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8007740:	b152      	cbz	r2, 8007758 <xQueueReceive+0x104>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007742:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007744:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007746:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007748:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800774a:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800774c:	d301      	bcc.n	8007752 <xQueueReceive+0xfe>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800774e:	6821      	ldr	r1, [r4, #0]
 8007750:	60e1      	str	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007752:	4630      	mov	r0, r6
 8007754:	f009 fc01 	bl	8010f5a <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007758:	3d01      	subs	r5, #1
 800775a:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800775c:	6923      	ldr	r3, [r4, #16]
 800775e:	bb2b      	cbnz	r3, 80077ac <xQueueReceive+0x158>
				taskEXIT_CRITICAL();
 8007760:	f001 fa72 	bl	8008c48 <vPortExitCritical>
				return pdPASS;
 8007764:	2001      	movs	r0, #1
 8007766:	e7bf      	b.n	80076e8 <xQueueReceive+0x94>
	taskEXIT_CRITICAL();
 8007768:	f001 fa6e 	bl	8008c48 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800776c:	9901      	ldr	r1, [sp, #4]
 800776e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007772:	f000 fdff 	bl	8008374 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007776:	4620      	mov	r0, r4
 8007778:	f7ff fc30 	bl	8006fdc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800777c:	f000 fd6e 	bl	800825c <xTaskResumeAll>
 8007780:	2800      	cmp	r0, #0
 8007782:	d1d7      	bne.n	8007734 <xQueueReceive+0xe0>
					portYIELD_WITHIN_API();
 8007784:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007788:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800778c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007790:	f3bf 8f4f 	dsb	sy
 8007794:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 8007798:	e7cc      	b.n	8007734 <xQueueReceive+0xe0>
 800779a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800779e:	f383 8811 	msr	BASEPRI, r3
 80077a2:	f3bf 8f6f 	isb	sy
 80077a6:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 80077aa:	e7fe      	b.n	80077aa <xQueueReceive+0x156>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80077ac:	f104 0010 	add.w	r0, r4, #16
 80077b0:	f000 fe18 	bl	80083e4 <xTaskRemoveFromEventList>
 80077b4:	2800      	cmp	r0, #0
 80077b6:	d0d3      	beq.n	8007760 <xQueueReceive+0x10c>
						queueYIELD_IF_USING_PREEMPTION();
 80077b8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80077bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077c0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80077c4:	f3bf 8f4f 	dsb	sy
 80077c8:	f3bf 8f6f 	isb	sy
 80077cc:	e7c8      	b.n	8007760 <xQueueReceive+0x10c>
 80077ce:	bf00      	nop

080077d0 <xQueueSemaphoreTake>:
{
 80077d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077d2:	b085      	sub	sp, #20
 80077d4:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 80077d6:	2800      	cmp	r0, #0
 80077d8:	d056      	beq.n	8007888 <xQueueSemaphoreTake+0xb8>
	configASSERT( pxQueue->uxItemSize == 0 );
 80077da:	6c06      	ldr	r6, [r0, #64]	@ 0x40
 80077dc:	4604      	mov	r4, r0
 80077de:	b146      	cbz	r6, 80077f2 <xQueueSemaphoreTake+0x22>
 80077e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077e4:	f383 8811 	msr	BASEPRI, r3
 80077e8:	f3bf 8f6f 	isb	sy
 80077ec:	f3bf 8f4f 	dsb	sy
 80077f0:	e7fe      	b.n	80077f0 <xQueueSemaphoreTake+0x20>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80077f2:	f000 fe97 	bl	8008524 <xTaskGetSchedulerState>
 80077f6:	4605      	mov	r5, r0
 80077f8:	2800      	cmp	r0, #0
 80077fa:	d04e      	beq.n	800789a <xQueueSemaphoreTake+0xca>
 80077fc:	4635      	mov	r5, r6
		taskENTER_CRITICAL();
 80077fe:	f001 fa01 	bl	8008c04 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007802:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
		prvLockQueue( pxQueue );
 8007804:	2700      	movs	r7, #0
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007806:	bb8b      	cbnz	r3, 800786c <xQueueSemaphoreTake+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007808:	9b01      	ldr	r3, [sp, #4]
 800780a:	2b00      	cmp	r3, #0
 800780c:	f000 809a 	beq.w	8007944 <xQueueSemaphoreTake+0x174>
				else if( xEntryTimeSet == pdFALSE )
 8007810:	2d00      	cmp	r5, #0
 8007812:	d05c      	beq.n	80078ce <xQueueSemaphoreTake+0xfe>
		taskEXIT_CRITICAL();
 8007814:	f001 fa18 	bl	8008c48 <vPortExitCritical>
		vTaskSuspendAll();
 8007818:	f000 fbcc 	bl	8007fb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800781c:	f001 f9f2 	bl	8008c04 <vPortEnterCritical>
 8007820:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007824:	2bff      	cmp	r3, #255	@ 0xff
 8007826:	d101      	bne.n	800782c <xQueueSemaphoreTake+0x5c>
 8007828:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 800782c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007830:	2bff      	cmp	r3, #255	@ 0xff
 8007832:	d101      	bne.n	8007838 <xQueueSemaphoreTake+0x68>
 8007834:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007838:	f001 fa06 	bl	8008c48 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800783c:	a901      	add	r1, sp, #4
 800783e:	a802      	add	r0, sp, #8
 8007840:	f000 fe22 	bl	8008488 <xTaskCheckForTimeOut>
 8007844:	2800      	cmp	r0, #0
 8007846:	d134      	bne.n	80078b2 <xQueueSemaphoreTake+0xe2>
	taskENTER_CRITICAL();
 8007848:	f001 f9dc 	bl	8008c04 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800784c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800784e:	2b00      	cmp	r3, #0
 8007850:	d044      	beq.n	80078dc <xQueueSemaphoreTake+0x10c>
	taskEXIT_CRITICAL();
 8007852:	f001 f9f9 	bl	8008c48 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8007856:	4620      	mov	r0, r4
 8007858:	f7ff fbc0 	bl	8006fdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800785c:	f000 fcfe 	bl	800825c <xTaskResumeAll>
		taskENTER_CRITICAL();
 8007860:	f001 f9d0 	bl	8008c04 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007864:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007866:	2501      	movs	r5, #1
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007868:	2b00      	cmp	r3, #0
 800786a:	d0cd      	beq.n	8007808 <xQueueSemaphoreTake+0x38>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800786c:	3b01      	subs	r3, #1
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800786e:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007870:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007872:	2a00      	cmp	r2, #0
 8007874:	f000 8082 	beq.w	800797c <xQueueSemaphoreTake+0x1ac>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007878:	6923      	ldr	r3, [r4, #16]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d16d      	bne.n	800795a <xQueueSemaphoreTake+0x18a>
				taskEXIT_CRITICAL();
 800787e:	f001 f9e3 	bl	8008c48 <vPortExitCritical>
				return pdPASS;
 8007882:	2001      	movs	r0, #1
}
 8007884:	b005      	add	sp, #20
 8007886:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800788c:	f383 8811 	msr	BASEPRI, r3
 8007890:	f3bf 8f6f 	isb	sy
 8007894:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8007898:	e7fe      	b.n	8007898 <xQueueSemaphoreTake+0xc8>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800789a:	9b01      	ldr	r3, [sp, #4]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d038      	beq.n	8007912 <xQueueSemaphoreTake+0x142>
 80078a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078a4:	f383 8811 	msr	BASEPRI, r3
 80078a8:	f3bf 8f6f 	isb	sy
 80078ac:	f3bf 8f4f 	dsb	sy
 80078b0:	e7fe      	b.n	80078b0 <xQueueSemaphoreTake+0xe0>
			prvUnlockQueue( pxQueue );
 80078b2:	4620      	mov	r0, r4
 80078b4:	f7ff fb92 	bl	8006fdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80078b8:	f000 fcd0 	bl	800825c <xTaskResumeAll>
	taskENTER_CRITICAL();
 80078bc:	f001 f9a2 	bl	8008c04 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80078c0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80078c2:	b943      	cbnz	r3, 80078d6 <xQueueSemaphoreTake+0x106>
	taskEXIT_CRITICAL();
 80078c4:	f001 f9c0 	bl	8008c48 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 80078c8:	bb2e      	cbnz	r6, 8007916 <xQueueSemaphoreTake+0x146>
					return errQUEUE_EMPTY;
 80078ca:	2000      	movs	r0, #0
 80078cc:	e7da      	b.n	8007884 <xQueueSemaphoreTake+0xb4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80078ce:	a802      	add	r0, sp, #8
 80078d0:	f000 fdce 	bl	8008470 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80078d4:	e79e      	b.n	8007814 <xQueueSemaphoreTake+0x44>
	taskEXIT_CRITICAL();
 80078d6:	f001 f9b7 	bl	8008c48 <vPortExitCritical>
	return xReturn;
 80078da:	e7c1      	b.n	8007860 <xQueueSemaphoreTake+0x90>
	taskEXIT_CRITICAL();
 80078dc:	f001 f9b4 	bl	8008c48 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80078e0:	6823      	ldr	r3, [r4, #0]
 80078e2:	b333      	cbz	r3, 8007932 <xQueueSemaphoreTake+0x162>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80078e4:	9901      	ldr	r1, [sp, #4]
 80078e6:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80078ea:	f000 fd43 	bl	8008374 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80078ee:	4620      	mov	r0, r4
 80078f0:	f7ff fb74 	bl	8006fdc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80078f4:	f000 fcb2 	bl	800825c <xTaskResumeAll>
 80078f8:	2800      	cmp	r0, #0
 80078fa:	d1b1      	bne.n	8007860 <xQueueSemaphoreTake+0x90>
					portYIELD_WITHIN_API();
 80078fc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007900:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007904:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007908:	f3bf 8f4f 	dsb	sy
 800790c:	f3bf 8f6f 	isb	sy
 8007910:	e7a6      	b.n	8007860 <xQueueSemaphoreTake+0x90>
 8007912:	462e      	mov	r6, r5
 8007914:	e773      	b.n	80077fe <xQueueSemaphoreTake+0x2e>
						taskENTER_CRITICAL();
 8007916:	f001 f975 	bl	8008c04 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800791a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800791c:	b119      	cbz	r1, 8007926 <xQueueSemaphoreTake+0x156>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800791e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007920:	6819      	ldr	r1, [r3, #0]
 8007922:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007926:	68a0      	ldr	r0, [r4, #8]
 8007928:	f000 fe90 	bl	800864c <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800792c:	f001 f98c 	bl	8008c48 <vPortExitCritical>
 8007930:	e7cb      	b.n	80078ca <xQueueSemaphoreTake+0xfa>
						taskENTER_CRITICAL();
 8007932:	f001 f967 	bl	8008c04 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007936:	68a0      	ldr	r0, [r4, #8]
 8007938:	f000 fe04 	bl	8008544 <xTaskPriorityInherit>
 800793c:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 800793e:	f001 f983 	bl	8008c48 <vPortExitCritical>
 8007942:	e7cf      	b.n	80078e4 <xQueueSemaphoreTake+0x114>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007944:	2e00      	cmp	r6, #0
 8007946:	d0f1      	beq.n	800792c <xQueueSemaphoreTake+0x15c>
 8007948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800794c:	f383 8811 	msr	BASEPRI, r3
 8007950:	f3bf 8f6f 	isb	sy
 8007954:	f3bf 8f4f 	dsb	sy
 8007958:	e7fe      	b.n	8007958 <xQueueSemaphoreTake+0x188>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800795a:	f104 0010 	add.w	r0, r4, #16
 800795e:	f000 fd41 	bl	80083e4 <xTaskRemoveFromEventList>
 8007962:	2800      	cmp	r0, #0
 8007964:	d08b      	beq.n	800787e <xQueueSemaphoreTake+0xae>
						queueYIELD_IF_USING_PREEMPTION();
 8007966:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800796a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800796e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007972:	f3bf 8f4f 	dsb	sy
 8007976:	f3bf 8f6f 	isb	sy
 800797a:	e780      	b.n	800787e <xQueueSemaphoreTake+0xae>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800797c:	f000 feb6 	bl	80086ec <pvTaskIncrementMutexHeldCount>
 8007980:	60a0      	str	r0, [r4, #8]
 8007982:	e779      	b.n	8007878 <xQueueSemaphoreTake+0xa8>

08007984 <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 8007984:	b1a8      	cbz	r0, 80079b2 <xQueueTakeMutexRecursive+0x2e>
	{
 8007986:	b570      	push	{r4, r5, r6, lr}
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007988:	6886      	ldr	r6, [r0, #8]
 800798a:	4604      	mov	r4, r0
 800798c:	460d      	mov	r5, r1
 800798e:	f000 fdc3 	bl	8008518 <xTaskGetCurrentTaskHandle>
 8007992:	4286      	cmp	r6, r0
 8007994:	d008      	beq.n	80079a8 <xQueueTakeMutexRecursive+0x24>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007996:	4629      	mov	r1, r5
 8007998:	4620      	mov	r0, r4
 800799a:	f7ff ff19 	bl	80077d0 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 800799e:	b110      	cbz	r0, 80079a6 <xQueueTakeMutexRecursive+0x22>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80079a0:	68e3      	ldr	r3, [r4, #12]
 80079a2:	3301      	adds	r3, #1
 80079a4:	60e3      	str	r3, [r4, #12]
	}
 80079a6:	bd70      	pop	{r4, r5, r6, pc}
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80079a8:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 80079aa:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80079ac:	4403      	add	r3, r0
 80079ae:	60e3      	str	r3, [r4, #12]
	}
 80079b0:	bd70      	pop	{r4, r5, r6, pc}
 80079b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079b6:	f383 8811 	msr	BASEPRI, r3
 80079ba:	f3bf 8f6f 	isb	sy
 80079be:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 80079c2:	e7fe      	b.n	80079c2 <xQueueTakeMutexRecursive+0x3e>

080079c4 <xQueueReceiveFromISR>:
{
 80079c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80079c8:	b310      	cbz	r0, 8007a10 <xQueueReceiveFromISR+0x4c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80079ca:	460f      	mov	r7, r1
 80079cc:	4604      	mov	r4, r0
 80079ce:	4616      	mov	r6, r2
 80079d0:	b191      	cbz	r1, 80079f8 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80079d2:	f001 fa33 	bl	8008e3c <vPortValidateInterruptPriority>
	__asm volatile
 80079d6:	f3ef 8911 	mrs	r9, BASEPRI
 80079da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079de:	f383 8811 	msr	BASEPRI, r3
 80079e2:	f3bf 8f6f 	isb	sy
 80079e6:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079ea:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80079ec:	b9cd      	cbnz	r5, 8007a22 <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 80079ee:	4628      	mov	r0, r5
	__asm volatile
 80079f0:	f389 8811 	msr	BASEPRI, r9
}
 80079f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80079f8:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d0e9      	beq.n	80079d2 <xQueueReceiveFromISR+0xe>
	__asm volatile
 80079fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a02:	f383 8811 	msr	BASEPRI, r3
 8007a06:	f3bf 8f6f 	isb	sy
 8007a0a:	f3bf 8f4f 	dsb	sy
 8007a0e:	e7fe      	b.n	8007a0e <xQueueReceiveFromISR+0x4a>
 8007a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a14:	f383 8811 	msr	BASEPRI, r3
 8007a18:	f3bf 8f6f 	isb	sy
 8007a1c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8007a20:	e7fe      	b.n	8007a20 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 8007a22:	f894 8044 	ldrb.w	r8, [r4, #68]	@ 0x44
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007a26:	6c22      	ldr	r2, [r4, #64]	@ 0x40
			const int8_t cRxLock = pxQueue->cRxLock;
 8007a28:	fa4f f888 	sxtb.w	r8, r8
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007a2c:	b142      	cbz	r2, 8007a40 <xQueueReceiveFromISR+0x7c>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007a2e:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007a30:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007a32:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007a34:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007a36:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007a38:	d21c      	bcs.n	8007a74 <xQueueReceiveFromISR+0xb0>
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007a3a:	4638      	mov	r0, r7
 8007a3c:	f009 fa8d 	bl	8010f5a <memcpy>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007a40:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 8007a42:	f1b8 3fff 	cmp.w	r8, #4294967295
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007a46:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 8007a48:	d006      	beq.n	8007a58 <xQueueReceiveFromISR+0x94>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007a4a:	f108 0301 	add.w	r3, r8, #1
 8007a4e:	b25b      	sxtb	r3, r3
 8007a50:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
			xReturn = pdPASS;
 8007a54:	2001      	movs	r0, #1
 8007a56:	e7cb      	b.n	80079f0 <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a58:	6923      	ldr	r3, [r4, #16]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d0fa      	beq.n	8007a54 <xQueueReceiveFromISR+0x90>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a5e:	f104 0010 	add.w	r0, r4, #16
 8007a62:	f000 fcbf 	bl	80083e4 <xTaskRemoveFromEventList>
						if( pxHigherPriorityTaskWoken != NULL )
 8007a66:	2e00      	cmp	r6, #0
 8007a68:	d0f4      	beq.n	8007a54 <xQueueReceiveFromISR+0x90>
 8007a6a:	2800      	cmp	r0, #0
 8007a6c:	d0f2      	beq.n	8007a54 <xQueueReceiveFromISR+0x90>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	6033      	str	r3, [r6, #0]
 8007a72:	e7ef      	b.n	8007a54 <xQueueReceiveFromISR+0x90>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007a74:	6821      	ldr	r1, [r4, #0]
 8007a76:	60e1      	str	r1, [r4, #12]
 8007a78:	e7df      	b.n	8007a3a <xQueueReceiveFromISR+0x76>
 8007a7a:	bf00      	nop

08007a7c <vQueueDelete>:
	configASSERT( pxQueue );
 8007a7c:	b170      	cbz	r0, 8007a9c <vQueueDelete+0x20>
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a7e:	2300      	movs	r3, #0
 8007a80:	4911      	ldr	r1, [pc, #68]	@ (8007ac8 <vQueueDelete+0x4c>)
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007a82:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 8007a86:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a8a:	3301      	adds	r3, #1
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007a8c:	4290      	cmp	r0, r2
 8007a8e:	d010      	beq.n	8007ab2 <vQueueDelete+0x36>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a90:	2b08      	cmp	r3, #8
 8007a92:	d1f6      	bne.n	8007a82 <vQueueDelete+0x6>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007a94:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 8007a98:	b14b      	cbz	r3, 8007aae <vQueueDelete+0x32>
}
 8007a9a:	4770      	bx	lr
 8007a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aa0:	f383 8811 	msr	BASEPRI, r3
 8007aa4:	f3bf 8f6f 	isb	sy
 8007aa8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8007aac:	e7fe      	b.n	8007aac <vQueueDelete+0x30>
			vPortFree( pxQueue );
 8007aae:	f001 bab3 	b.w	8009018 <vPortFree>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007ab2:	4906      	ldr	r1, [pc, #24]	@ (8007acc <vQueueDelete+0x50>)
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	448c      	add	ip, r1
 8007aba:	e9cc 2300 	strd	r2, r3, [ip]
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007abe:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d1e9      	bne.n	8007a9a <vQueueDelete+0x1e>
 8007ac6:	e7f2      	b.n	8007aae <vQueueDelete+0x32>
 8007ac8:	24000aac 	.word	0x24000aac
 8007acc:	24000aa8 	.word	0x24000aa8

08007ad0 <vQueueAddToRegistry>:
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8007afc <vQueueAddToRegistry+0x2c>)
	{
 8007ad4:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007ad6:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 8007ada:	eb02 0cc3 	add.w	ip, r2, r3, lsl #3
 8007ade:	b12c      	cbz	r4, 8007aec <vQueueAddToRegistry+0x1c>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	2b08      	cmp	r3, #8
 8007ae4:	d1f7      	bne.n	8007ad6 <vQueueAddToRegistry+0x6>
	}
 8007ae6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007aea:	4770      	bx	lr
 8007aec:	f85d 4b04 	ldr.w	r4, [sp], #4
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007af0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007af4:	f8cc 0004 	str.w	r0, [ip, #4]
	}
 8007af8:	4770      	bx	lr
 8007afa:	bf00      	nop
 8007afc:	24000aa8 	.word	0x24000aa8

08007b00 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007b00:	b570      	push	{r4, r5, r6, lr}
 8007b02:	4604      	mov	r4, r0
 8007b04:	460e      	mov	r6, r1
 8007b06:	4615      	mov	r5, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007b08:	f001 f87c 	bl	8008c04 <vPortEnterCritical>
 8007b0c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007b10:	2bff      	cmp	r3, #255	@ 0xff
 8007b12:	d102      	bne.n	8007b1a <vQueueWaitForMessageRestricted+0x1a>
 8007b14:	2300      	movs	r3, #0
 8007b16:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8007b1a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007b1e:	2bff      	cmp	r3, #255	@ 0xff
 8007b20:	d102      	bne.n	8007b28 <vQueueWaitForMessageRestricted+0x28>
 8007b22:	2300      	movs	r3, #0
 8007b24:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8007b28:	f001 f88e 	bl	8008c48 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007b2c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007b2e:	b123      	cbz	r3, 8007b3a <vQueueWaitForMessageRestricted+0x3a>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007b30:	4620      	mov	r0, r4
	}
 8007b32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8007b36:	f7ff ba51 	b.w	8006fdc <prvUnlockQueue>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007b3a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007b3e:	462a      	mov	r2, r5
 8007b40:	4631      	mov	r1, r6
 8007b42:	f000 fc31 	bl	80083a8 <vTaskPlaceOnEventListRestricted>
		prvUnlockQueue( pxQueue );
 8007b46:	4620      	mov	r0, r4
	}
 8007b48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8007b4c:	f7ff ba46 	b.w	8006fdc <prvUnlockQueue>

08007b50 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b54:	4605      	mov	r5, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007b56:	f001 f855 	bl	8008c04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007b5a:	4a34      	ldr	r2, [pc, #208]	@ (8007c2c <prvAddNewTaskToReadyList+0xdc>)
		if( pxCurrentTCB == NULL )
 8007b5c:	4e34      	ldr	r6, [pc, #208]	@ (8007c30 <prvAddNewTaskToReadyList+0xe0>)
		uxCurrentNumberOfTasks++;
 8007b5e:	6813      	ldr	r3, [r2, #0]
 8007b60:	3301      	adds	r3, #1
 8007b62:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007b64:	6833      	ldr	r3, [r6, #0]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d031      	beq.n	8007bce <prvAddNewTaskToReadyList+0x7e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007b6a:	4c32      	ldr	r4, [pc, #200]	@ (8007c34 <prvAddNewTaskToReadyList+0xe4>)
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007b6c:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 8007b6e:	6823      	ldr	r3, [r4, #0]
 8007b70:	b333      	cbz	r3, 8007bc0 <prvAddNewTaskToReadyList+0x70>
 8007b72:	4f31      	ldr	r7, [pc, #196]	@ (8007c38 <prvAddNewTaskToReadyList+0xe8>)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007b74:	4a31      	ldr	r2, [pc, #196]	@ (8007c3c <prvAddNewTaskToReadyList+0xec>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007b76:	4932      	ldr	r1, [pc, #200]	@ (8007c40 <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
 8007b78:	6813      	ldr	r3, [r2, #0]
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007b7e:	646b      	str	r3, [r5, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8007b80:	680b      	ldr	r3, [r1, #0]
 8007b82:	4283      	cmp	r3, r0
 8007b84:	d200      	bcs.n	8007b88 <prvAddNewTaskToReadyList+0x38>
 8007b86:	6008      	str	r0, [r1, #0]
 8007b88:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007b8c:	1d29      	adds	r1, r5, #4
 8007b8e:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8007b92:	f7ff f9b1 	bl	8006ef8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007b96:	f001 f857 	bl	8008c48 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007b9a:	6823      	ldr	r3, [r4, #0]
 8007b9c:	b173      	cbz	r3, 8007bbc <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007b9e:	6832      	ldr	r2, [r6, #0]
 8007ba0:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8007ba2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d209      	bcs.n	8007bbc <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007ba8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007bac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007bb0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007bb4:	f3bf 8f4f 	dsb	sy
 8007bb8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007bbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007bc0:	6833      	ldr	r3, [r6, #0]
 8007bc2:	4f1d      	ldr	r7, [pc, #116]	@ (8007c38 <prvAddNewTaskToReadyList+0xe8>)
 8007bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bc6:	4283      	cmp	r3, r0
 8007bc8:	d8d4      	bhi.n	8007b74 <prvAddNewTaskToReadyList+0x24>
					pxCurrentTCB = pxNewTCB;
 8007bca:	6035      	str	r5, [r6, #0]
 8007bcc:	e7d2      	b.n	8007b74 <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
 8007bce:	6035      	str	r5, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007bd0:	6813      	ldr	r3, [r2, #0]
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d003      	beq.n	8007bde <prvAddNewTaskToReadyList+0x8e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007bd6:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8007bd8:	4f17      	ldr	r7, [pc, #92]	@ (8007c38 <prvAddNewTaskToReadyList+0xe8>)
 8007bda:	4c16      	ldr	r4, [pc, #88]	@ (8007c34 <prvAddNewTaskToReadyList+0xe4>)
 8007bdc:	e7ca      	b.n	8007b74 <prvAddNewTaskToReadyList+0x24>
 8007bde:	4f16      	ldr	r7, [pc, #88]	@ (8007c38 <prvAddNewTaskToReadyList+0xe8>)
 8007be0:	463c      	mov	r4, r7
 8007be2:	f507 688c 	add.w	r8, r7, #1120	@ 0x460
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007be6:	4620      	mov	r0, r4
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007be8:	3414      	adds	r4, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007bea:	f7ff f975 	bl	8006ed8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007bee:	45a0      	cmp	r8, r4
 8007bf0:	d1f9      	bne.n	8007be6 <prvAddNewTaskToReadyList+0x96>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007bf2:	f8df 9064 	ldr.w	r9, [pc, #100]	@ 8007c58 <prvAddNewTaskToReadyList+0x108>
	vListInitialise( &xDelayedTaskList2 );
 8007bf6:	f8df 8064 	ldr.w	r8, [pc, #100]	@ 8007c5c <prvAddNewTaskToReadyList+0x10c>
	vListInitialise( &xDelayedTaskList1 );
 8007bfa:	4648      	mov	r0, r9
 8007bfc:	4c0d      	ldr	r4, [pc, #52]	@ (8007c34 <prvAddNewTaskToReadyList+0xe4>)
 8007bfe:	f7ff f96b 	bl	8006ed8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007c02:	4640      	mov	r0, r8
 8007c04:	f7ff f968 	bl	8006ed8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007c08:	480e      	ldr	r0, [pc, #56]	@ (8007c44 <prvAddNewTaskToReadyList+0xf4>)
 8007c0a:	f7ff f965 	bl	8006ed8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007c0e:	480e      	ldr	r0, [pc, #56]	@ (8007c48 <prvAddNewTaskToReadyList+0xf8>)
 8007c10:	f7ff f962 	bl	8006ed8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007c14:	480d      	ldr	r0, [pc, #52]	@ (8007c4c <prvAddNewTaskToReadyList+0xfc>)
 8007c16:	f7ff f95f 	bl	8006ed8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8007c50 <prvAddNewTaskToReadyList+0x100>)
		prvAddTaskToReadyList( pxNewTCB );
 8007c1c:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
 8007c1e:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007c22:	4b0c      	ldr	r3, [pc, #48]	@ (8007c54 <prvAddNewTaskToReadyList+0x104>)
 8007c24:	f8c3 8000 	str.w	r8, [r3]
}
 8007c28:	e7a4      	b.n	8007b74 <prvAddNewTaskToReadyList+0x24>
 8007c2a:	bf00      	nop
 8007c2c:	24000b0c 	.word	0x24000b0c
 8007c30:	24000fe0 	.word	0x24000fe0
 8007c34:	24000b00 	.word	0x24000b00
 8007c38:	24000b80 	.word	0x24000b80
 8007c3c:	24000af0 	.word	0x24000af0
 8007c40:	24000b04 	.word	0x24000b04
 8007c44:	24000b3c 	.word	0x24000b3c
 8007c48:	24000b28 	.word	0x24000b28
 8007c4c:	24000b10 	.word	0x24000b10
 8007c50:	24000b54 	.word	0x24000b54
 8007c54:	24000b50 	.word	0x24000b50
 8007c58:	24000b6c 	.word	0x24000b6c
 8007c5c:	24000b58 	.word	0x24000b58

08007c60 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007c62:	4b15      	ldr	r3, [pc, #84]	@ (8007cb8 <prvAddCurrentTaskToDelayedList+0x58>)
{
 8007c64:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c66:	4e15      	ldr	r6, [pc, #84]	@ (8007cbc <prvAddCurrentTaskToDelayedList+0x5c>)
{
 8007c68:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8007c6a:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c6c:	6833      	ldr	r3, [r6, #0]
 8007c6e:	1d18      	adds	r0, r3, #4
 8007c70:	f7ff f968 	bl	8006f44 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007c74:	1c63      	adds	r3, r4, #1
 8007c76:	d100      	bne.n	8007c7a <prvAddCurrentTaskToDelayedList+0x1a>
 8007c78:	b9bf      	cbnz	r7, 8007caa <prvAddCurrentTaskToDelayedList+0x4a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007c7a:	192d      	adds	r5, r5, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007c7c:	6833      	ldr	r3, [r6, #0]
 8007c7e:	605d      	str	r5, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8007c80:	d307      	bcc.n	8007c92 <prvAddCurrentTaskToDelayedList+0x32>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c82:	4b0f      	ldr	r3, [pc, #60]	@ (8007cc0 <prvAddCurrentTaskToDelayedList+0x60>)
 8007c84:	6818      	ldr	r0, [r3, #0]
 8007c86:	6831      	ldr	r1, [r6, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007c88:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c8c:	3104      	adds	r1, #4
 8007c8e:	f7ff b941 	b.w	8006f14 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c92:	4b0c      	ldr	r3, [pc, #48]	@ (8007cc4 <prvAddCurrentTaskToDelayedList+0x64>)
 8007c94:	6818      	ldr	r0, [r3, #0]
 8007c96:	6831      	ldr	r1, [r6, #0]
 8007c98:	3104      	adds	r1, #4
 8007c9a:	f7ff f93b 	bl	8006f14 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8007cc8 <prvAddCurrentTaskToDelayedList+0x68>)
 8007ca0:	681a      	ldr	r2, [r3, #0]
 8007ca2:	42aa      	cmp	r2, r5
 8007ca4:	d900      	bls.n	8007ca8 <prvAddCurrentTaskToDelayedList+0x48>
					xNextTaskUnblockTime = xTimeToWake;
 8007ca6:	601d      	str	r5, [r3, #0]
}
 8007ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007caa:	6831      	ldr	r1, [r6, #0]
 8007cac:	4807      	ldr	r0, [pc, #28]	@ (8007ccc <prvAddCurrentTaskToDelayedList+0x6c>)
 8007cae:	3104      	adds	r1, #4
}
 8007cb0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007cb4:	f7ff b920 	b.w	8006ef8 <vListInsertEnd>
 8007cb8:	24000b08 	.word	0x24000b08
 8007cbc:	24000fe0 	.word	0x24000fe0
 8007cc0:	24000b50 	.word	0x24000b50
 8007cc4:	24000b54 	.word	0x24000b54
 8007cc8:	24000aec 	.word	0x24000aec
 8007ccc:	24000b10 	.word	0x24000b10

08007cd0 <prvDeleteTCB>:
	{
 8007cd0:	b510      	push	{r4, lr}
 8007cd2:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007cd4:	3054      	adds	r0, #84	@ 0x54
 8007cd6:	f009 f88d 	bl	8010df4 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007cda:	f894 30a5 	ldrb.w	r3, [r4, #165]	@ 0xa5
 8007cde:	b163      	cbz	r3, 8007cfa <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d013      	beq.n	8007d0c <prvDeleteTCB+0x3c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007ce4:	2b02      	cmp	r3, #2
 8007ce6:	d010      	beq.n	8007d0a <prvDeleteTCB+0x3a>
 8007ce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cec:	f383 8811 	msr	BASEPRI, r3
 8007cf0:	f3bf 8f6f 	isb	sy
 8007cf4:	f3bf 8f4f 	dsb	sy
 8007cf8:	e7fe      	b.n	8007cf8 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 8007cfa:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8007cfc:	f001 f98c 	bl	8009018 <vPortFree>
				vPortFree( pxTCB );
 8007d00:	4620      	mov	r0, r4
	}
 8007d02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8007d06:	f001 b987 	b.w	8009018 <vPortFree>
	}
 8007d0a:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8007d0c:	4620      	mov	r0, r4
	}
 8007d0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8007d12:	f001 b981 	b.w	8009018 <vPortFree>
 8007d16:	bf00      	nop

08007d18 <prvIdleTask>:
{
 8007d18:	4c15      	ldr	r4, [pc, #84]	@ (8007d70 <prvIdleTask+0x58>)
				taskYIELD();
 8007d1a:	f04f 29e0 	mov.w	r9, #3758153728	@ 0xe000e000
 8007d1e:	4e15      	ldr	r6, [pc, #84]	@ (8007d74 <prvIdleTask+0x5c>)
 8007d20:	f04f 5880 	mov.w	r8, #268435456	@ 0x10000000
 8007d24:	4d14      	ldr	r5, [pc, #80]	@ (8007d78 <prvIdleTask+0x60>)
 8007d26:	f8df a054 	ldr.w	sl, [pc, #84]	@ 8007d7c <prvIdleTask+0x64>
{
 8007d2a:	b580      	push	{r7, lr}
 8007d2c:	e011      	b.n	8007d52 <prvIdleTask+0x3a>
			taskENTER_CRITICAL();
 8007d2e:	f000 ff69 	bl	8008c04 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d32:	68f3      	ldr	r3, [r6, #12]
 8007d34:	68df      	ldr	r7, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d36:	1d38      	adds	r0, r7, #4
 8007d38:	f7ff f904 	bl	8006f44 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007d3c:	682b      	ldr	r3, [r5, #0]
 8007d3e:	3b01      	subs	r3, #1
 8007d40:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007d42:	6823      	ldr	r3, [r4, #0]
 8007d44:	3b01      	subs	r3, #1
 8007d46:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8007d48:	f000 ff7e 	bl	8008c48 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8007d4c:	4638      	mov	r0, r7
 8007d4e:	f7ff ffbf 	bl	8007cd0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d52:	6823      	ldr	r3, [r4, #0]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d1ea      	bne.n	8007d2e <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007d58:	f8da 3000 	ldr.w	r3, [sl]
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d9f8      	bls.n	8007d52 <prvIdleTask+0x3a>
				taskYIELD();
 8007d60:	f8c9 8d04 	str.w	r8, [r9, #3332]	@ 0xd04
 8007d64:	f3bf 8f4f 	dsb	sy
 8007d68:	f3bf 8f6f 	isb	sy
 8007d6c:	e7f1      	b.n	8007d52 <prvIdleTask+0x3a>
 8007d6e:	bf00      	nop
 8007d70:	24000b24 	.word	0x24000b24
 8007d74:	24000b28 	.word	0x24000b28
 8007d78:	24000b0c 	.word	0x24000b0c
 8007d7c:	24000b80 	.word	0x24000b80

08007d80 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8007d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d84:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007d86:	0095      	lsls	r5, r2, #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8007d88:	4606      	mov	r6, r0
 8007d8a:	4689      	mov	r9, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007d8c:	462a      	mov	r2, r5
 8007d8e:	21a5      	movs	r1, #165	@ 0xa5
 8007d90:	6b20      	ldr	r0, [r4, #48]	@ 0x30
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8007d92:	461f      	mov	r7, r3
 8007d94:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007d98:	3d04      	subs	r5, #4
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007d9a:	f009 f812 	bl	8010dc2 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007d9e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007da0:	441d      	add	r5, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007da2:	f025 0507 	bic.w	r5, r5, #7
	if( pcName != NULL )
 8007da6:	f1b9 0f00 	cmp.w	r9, #0
 8007daa:	d044      	beq.n	8007e36 <prvInitialiseNewTask.constprop.0+0xb6>
 8007dac:	f109 3cff 	add.w	ip, r9, #4294967295
 8007db0:	f104 0333 	add.w	r3, r4, #51	@ 0x33
 8007db4:	f109 090f 	add.w	r9, r9, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007db8:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 8007dbc:	f803 2f01 	strb.w	r2, [r3, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8007dc0:	b10a      	cbz	r2, 8007dc6 <prvInitialiseNewTask.constprop.0+0x46>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007dc2:	45cc      	cmp	ip, r9
 8007dc4:	d1f8      	bne.n	8007db8 <prvInitialiseNewTask.constprop.0+0x38>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007dcc:	9b08      	ldr	r3, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 8007dce:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007dd2:	1d20      	adds	r0, r4, #4
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007dd4:	2b37      	cmp	r3, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8007dd6:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007dda:	bf28      	it	cs
 8007ddc:	2337      	movcs	r3, #55	@ 0x37
 8007dde:	4699      	mov	r9, r3
	pxNewTCB->uxPriority = uxPriority;
 8007de0:	62e3      	str	r3, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8007de2:	64e3      	str	r3, [r4, #76]	@ 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007de4:	f7ff f884 	bl	8006ef0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007de8:	f104 0018 	add.w	r0, r4, #24
 8007dec:	f7ff f880 	bl	8006ef0 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007df0:	f1c9 0338 	rsb	r3, r9, #56	@ 0x38
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007df4:	4651      	mov	r1, sl
 8007df6:	224c      	movs	r2, #76	@ 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007df8:	61a3      	str	r3, [r4, #24]
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007dfa:	f104 0054 	add.w	r0, r4, #84	@ 0x54
		pxNewTCB->ulNotifiedValue = 0;
 8007dfe:	f8c4 a0a0 	str.w	sl, [r4, #160]	@ 0xa0
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007e02:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007e04:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007e06:	f884 a0a4 	strb.w	sl, [r4, #164]	@ 0xa4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007e0a:	f008 ffda 	bl	8010dc2 <memset>
 8007e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8007e3c <prvInitialiseNewTask.constprop.0+0xbc>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007e10:	4628      	mov	r0, r5
 8007e12:	463a      	mov	r2, r7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007e14:	f103 0568 	add.w	r5, r3, #104	@ 0x68
 8007e18:	65a3      	str	r3, [r4, #88]	@ 0x58
 8007e1a:	33d0      	adds	r3, #208	@ 0xd0
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007e1c:	4631      	mov	r1, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007e1e:	65e5      	str	r5, [r4, #92]	@ 0x5c
 8007e20:	6623      	str	r3, [r4, #96]	@ 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007e22:	f000 fec1 	bl	8008ba8 <pxPortInitialiseStack>
 8007e26:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8007e28:	f1b8 0f00 	cmp.w	r8, #0
 8007e2c:	d001      	beq.n	8007e32 <prvInitialiseNewTask.constprop.0+0xb2>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007e2e:	f8c8 4000 	str.w	r4, [r8]
}
 8007e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007e36:	f884 9034 	strb.w	r9, [r4, #52]	@ 0x34
 8007e3a:	e7c7      	b.n	8007dcc <prvInitialiseNewTask.constprop.0+0x4c>
 8007e3c:	2400b964 	.word	0x2400b964

08007e40 <xTaskCreateStatic>:
	{
 8007e40:	b530      	push	{r4, r5, lr}
 8007e42:	b087      	sub	sp, #28
 8007e44:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8007e46:	b1c4      	cbz	r4, 8007e7a <xTaskCreateStatic+0x3a>
		configASSERT( pxTaskBuffer != NULL );
 8007e48:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8007e4a:	b16d      	cbz	r5, 8007e68 <xTaskCreateStatic+0x28>
			volatile size_t xSize = sizeof( StaticTask_t );
 8007e4c:	25a8      	movs	r5, #168	@ 0xa8
 8007e4e:	9505      	str	r5, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007e50:	9d05      	ldr	r5, [sp, #20]
 8007e52:	2da8      	cmp	r5, #168	@ 0xa8
 8007e54:	d01a      	beq.n	8007e8c <xTaskCreateStatic+0x4c>
 8007e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e5a:	f383 8811 	msr	BASEPRI, r3
 8007e5e:	f3bf 8f6f 	isb	sy
 8007e62:	f3bf 8f4f 	dsb	sy
 8007e66:	e7fe      	b.n	8007e66 <xTaskCreateStatic+0x26>
 8007e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e6c:	f383 8811 	msr	BASEPRI, r3
 8007e70:	f3bf 8f6f 	isb	sy
 8007e74:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8007e78:	e7fe      	b.n	8007e78 <xTaskCreateStatic+0x38>
 8007e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e7e:	f383 8811 	msr	BASEPRI, r3
 8007e82:	f3bf 8f6f 	isb	sy
 8007e86:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8007e8a:	e7fe      	b.n	8007e8a <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007e8c:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8007e8e:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007e90:	2402      	movs	r4, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007e92:	9502      	str	r5, [sp, #8]
 8007e94:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8007e96:	9500      	str	r5, [sp, #0]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007e98:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8007e9a:	f885 40a5 	strb.w	r4, [r5, #165]	@ 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007e9e:	ac04      	add	r4, sp, #16
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007ea0:	9d05      	ldr	r5, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007ea2:	9401      	str	r4, [sp, #4]
 8007ea4:	f7ff ff6c 	bl	8007d80 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007ea8:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8007eaa:	f7ff fe51 	bl	8007b50 <prvAddNewTaskToReadyList>
	}
 8007eae:	9804      	ldr	r0, [sp, #16]
 8007eb0:	b007      	add	sp, #28
 8007eb2:	bd30      	pop	{r4, r5, pc}

08007eb4 <xTaskCreate>:
	{
 8007eb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007eb8:	4607      	mov	r7, r0
 8007eba:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007ebc:	0090      	lsls	r0, r2, #2
	{
 8007ebe:	4615      	mov	r5, r2
 8007ec0:	4688      	mov	r8, r1
 8007ec2:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007ec4:	f001 f812 	bl	8008eec <pvPortMalloc>
			if( pxStack != NULL )
 8007ec8:	b1f0      	cbz	r0, 8007f08 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007eca:	4604      	mov	r4, r0
 8007ecc:	20a8      	movs	r0, #168	@ 0xa8
 8007ece:	f001 f80d 	bl	8008eec <pvPortMalloc>
				if( pxNewTCB != NULL )
 8007ed2:	4606      	mov	r6, r0
 8007ed4:	b1a8      	cbz	r0, 8007f02 <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 8007ed6:	6304      	str	r4, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007ed8:	2400      	movs	r4, #0
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007eda:	464b      	mov	r3, r9
 8007edc:	462a      	mov	r2, r5
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007ede:	f886 40a5 	strb.w	r4, [r6, #165]	@ 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007ee2:	4641      	mov	r1, r8
 8007ee4:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8007ee6:	4638      	mov	r0, r7
 8007ee8:	9602      	str	r6, [sp, #8]
 8007eea:	9401      	str	r4, [sp, #4]
 8007eec:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8007eee:	9400      	str	r4, [sp, #0]
 8007ef0:	f7ff ff46 	bl	8007d80 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007ef4:	4630      	mov	r0, r6
 8007ef6:	f7ff fe2b 	bl	8007b50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007efa:	2001      	movs	r0, #1
	}
 8007efc:	b005      	add	sp, #20
 8007efe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8007f02:	4620      	mov	r0, r4
 8007f04:	f001 f888 	bl	8009018 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007f08:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8007f0c:	b005      	add	sp, #20
 8007f0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f12:	bf00      	nop

08007f14 <vTaskStartScheduler>:
{
 8007f14:	b510      	push	{r4, lr}
 8007f16:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007f18:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007f1a:	aa07      	add	r2, sp, #28
 8007f1c:	a906      	add	r1, sp, #24
 8007f1e:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007f20:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007f24:	f7fe ffba 	bl	8006e9c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007f28:	4623      	mov	r3, r4
 8007f2a:	9a07      	ldr	r2, [sp, #28]
 8007f2c:	9400      	str	r4, [sp, #0]
 8007f2e:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 8007f32:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8007f36:	4918      	ldr	r1, [pc, #96]	@ (8007f98 <vTaskStartScheduler+0x84>)
 8007f38:	4818      	ldr	r0, [pc, #96]	@ (8007f9c <vTaskStartScheduler+0x88>)
 8007f3a:	f7ff ff81 	bl	8007e40 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8007f3e:	b170      	cbz	r0, 8007f5e <vTaskStartScheduler+0x4a>
			xReturn = xTimerCreateTimerTask();
 8007f40:	f000 fc16 	bl	8008770 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8007f44:	2801      	cmp	r0, #1
 8007f46:	d00c      	beq.n	8007f62 <vTaskStartScheduler+0x4e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007f48:	3001      	adds	r0, #1
 8007f4a:	d108      	bne.n	8007f5e <vTaskStartScheduler+0x4a>
 8007f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f50:	f383 8811 	msr	BASEPRI, r3
 8007f54:	f3bf 8f6f 	isb	sy
 8007f58:	f3bf 8f4f 	dsb	sy
 8007f5c:	e7fe      	b.n	8007f5c <vTaskStartScheduler+0x48>
}
 8007f5e:	b008      	add	sp, #32
 8007f60:	bd10      	pop	{r4, pc}
 8007f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f66:	f383 8811 	msr	BASEPRI, r3
 8007f6a:	f3bf 8f6f 	isb	sy
 8007f6e:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007f72:	4b0b      	ldr	r3, [pc, #44]	@ (8007fa0 <vTaskStartScheduler+0x8c>)
 8007f74:	4a0b      	ldr	r2, [pc, #44]	@ (8007fa4 <vTaskStartScheduler+0x90>)
 8007f76:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8007f78:	490b      	ldr	r1, [pc, #44]	@ (8007fa8 <vTaskStartScheduler+0x94>)
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007f7a:	3354      	adds	r3, #84	@ 0x54
 8007f7c:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8007f7e:	f04f 33ff 	mov.w	r3, #4294967295
		xSchedulerRunning = pdTRUE;
 8007f82:	4a0a      	ldr	r2, [pc, #40]	@ (8007fac <vTaskStartScheduler+0x98>)
		xNextTaskUnblockTime = portMAX_DELAY;
 8007f84:	600b      	str	r3, [r1, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007f86:	4b0a      	ldr	r3, [pc, #40]	@ (8007fb0 <vTaskStartScheduler+0x9c>)
		xSchedulerRunning = pdTRUE;
 8007f88:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007f8a:	601c      	str	r4, [r3, #0]
}
 8007f8c:	b008      	add	sp, #32
 8007f8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8007f92:	f000 bec9 	b.w	8008d28 <xPortStartScheduler>
 8007f96:	bf00      	nop
 8007f98:	08012888 	.word	0x08012888
 8007f9c:	08007d19 	.word	0x08007d19
 8007fa0:	24000fe0 	.word	0x24000fe0
 8007fa4:	2400003c 	.word	0x2400003c
 8007fa8:	24000aec 	.word	0x24000aec
 8007fac:	24000b00 	.word	0x24000b00
 8007fb0:	24000b08 	.word	0x24000b08

08007fb4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8007fb4:	4a02      	ldr	r2, [pc, #8]	@ (8007fc0 <vTaskSuspendAll+0xc>)
 8007fb6:	6813      	ldr	r3, [r2, #0]
 8007fb8:	3301      	adds	r3, #1
 8007fba:	6013      	str	r3, [r2, #0]
}
 8007fbc:	4770      	bx	lr
 8007fbe:	bf00      	nop
 8007fc0:	24000ae8 	.word	0x24000ae8

08007fc4 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8007fc4:	4b01      	ldr	r3, [pc, #4]	@ (8007fcc <xTaskGetTickCount+0x8>)
 8007fc6:	6818      	ldr	r0, [r3, #0]
}
 8007fc8:	4770      	bx	lr
 8007fca:	bf00      	nop
 8007fcc:	24000b08 	.word	0x24000b08

08007fd0 <xTaskGetTickCountFromISR>:
{
 8007fd0:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007fd2:	f000 ff33 	bl	8008e3c <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8007fd6:	4b01      	ldr	r3, [pc, #4]	@ (8007fdc <xTaskGetTickCountFromISR+0xc>)
 8007fd8:	6818      	ldr	r0, [r3, #0]
}
 8007fda:	bd08      	pop	{r3, pc}
 8007fdc:	24000b08 	.word	0x24000b08

08007fe0 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fe0:	4b4f      	ldr	r3, [pc, #316]	@ (8008120 <xTaskIncrementTick+0x140>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
{
 8007fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fe8:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d145      	bne.n	800807a <xTaskIncrementTick+0x9a>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007fee:	4b4d      	ldr	r3, [pc, #308]	@ (8008124 <xTaskIncrementTick+0x144>)
 8007ff0:	681e      	ldr	r6, [r3, #0]
 8007ff2:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8007ff4:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007ff6:	2e00      	cmp	r6, #0
 8007ff8:	d048      	beq.n	800808c <xTaskIncrementTick+0xac>
 8007ffa:	4b4b      	ldr	r3, [pc, #300]	@ (8008128 <xTaskIncrementTick+0x148>)
 8007ffc:	9301      	str	r3, [sp, #4]
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007ffe:	9b01      	ldr	r3, [sp, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	429e      	cmp	r6, r3
 8008004:	d34f      	bcc.n	80080a6 <xTaskIncrementTick+0xc6>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008006:	4f49      	ldr	r7, [pc, #292]	@ (800812c <xTaskIncrementTick+0x14c>)
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	681d      	ldr	r5, [r3, #0]
 800800c:	2d00      	cmp	r5, #0
 800800e:	d076      	beq.n	80080fe <xTaskIncrementTick+0x11e>
BaseType_t xSwitchRequired = pdFALSE;
 8008010:	2500      	movs	r5, #0
 8008012:	f8df 912c 	ldr.w	r9, [pc, #300]	@ 8008140 <xTaskIncrementTick+0x160>
 8008016:	f8df a12c 	ldr.w	sl, [pc, #300]	@ 8008144 <xTaskIncrementTick+0x164>
					prvAddTaskToReadyList( pxTCB );
 800801a:	f8df 812c 	ldr.w	r8, [pc, #300]	@ 8008148 <xTaskIncrementTick+0x168>
 800801e:	e020      	b.n	8008062 <xTaskIncrementTick+0x82>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008020:	f7fe ff90 	bl	8006f44 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008024:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008026:	f104 0018 	add.w	r0, r4, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800802a:	b10b      	cbz	r3, 8008030 <xTaskIncrementTick+0x50>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800802c:	f7fe ff8a 	bl	8006f44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008030:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8008032:	4659      	mov	r1, fp
 8008034:	f8d8 3000 	ldr.w	r3, [r8]
 8008038:	4298      	cmp	r0, r3
 800803a:	d901      	bls.n	8008040 <xTaskIncrementTick+0x60>
 800803c:	f8c8 0000 	str.w	r0, [r8]
 8008040:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008044:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8008048:	f7fe ff56 	bl	8006ef8 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800804c:	f8da 3000 	ldr.w	r3, [sl]
 8008050:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8008052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 8008054:	429a      	cmp	r2, r3
 8008056:	bf28      	it	cs
 8008058:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d051      	beq.n	8008106 <xTaskIncrementTick+0x126>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008068:	6863      	ldr	r3, [r4, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800806a:	f104 0b04 	add.w	fp, r4, #4
					if( xConstTickCount < xItemValue )
 800806e:	429e      	cmp	r6, r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008070:	4658      	mov	r0, fp
					if( xConstTickCount < xItemValue )
 8008072:	d2d5      	bcs.n	8008020 <xTaskIncrementTick+0x40>
						xNextTaskUnblockTime = xItemValue;
 8008074:	9a01      	ldr	r2, [sp, #4]
 8008076:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008078:	e01a      	b.n	80080b0 <xTaskIncrementTick+0xd0>
		++xPendedTicks;
 800807a:	4a2d      	ldr	r2, [pc, #180]	@ (8008130 <xTaskIncrementTick+0x150>)
BaseType_t xSwitchRequired = pdFALSE;
 800807c:	2500      	movs	r5, #0
		++xPendedTicks;
 800807e:	6813      	ldr	r3, [r2, #0]
}
 8008080:	4628      	mov	r0, r5
		++xPendedTicks;
 8008082:	3301      	adds	r3, #1
 8008084:	6013      	str	r3, [r2, #0]
}
 8008086:	b003      	add	sp, #12
 8008088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 800808c:	4b27      	ldr	r3, [pc, #156]	@ (800812c <xTaskIncrementTick+0x14c>)
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	6812      	ldr	r2, [r2, #0]
 8008092:	b30a      	cbz	r2, 80080d8 <xTaskIncrementTick+0xf8>
 8008094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008098:	f383 8811 	msr	BASEPRI, r3
 800809c:	f3bf 8f6f 	isb	sy
 80080a0:	f3bf 8f4f 	dsb	sy
 80080a4:	e7fe      	b.n	80080a4 <xTaskIncrementTick+0xc4>
BaseType_t xSwitchRequired = pdFALSE;
 80080a6:	2500      	movs	r5, #0
 80080a8:	f8df 9094 	ldr.w	r9, [pc, #148]	@ 8008140 <xTaskIncrementTick+0x160>
 80080ac:	f8df a094 	ldr.w	sl, [pc, #148]	@ 8008144 <xTaskIncrementTick+0x164>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80080b0:	f8da 3000 	ldr.w	r3, [sl]
			if( xYieldPending != pdFALSE )
 80080b4:	491f      	ldr	r1, [pc, #124]	@ (8008134 <xTaskIncrementTick+0x154>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80080b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080b8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80080bc:	009b      	lsls	r3, r3, #2
 80080be:	f859 2003 	ldr.w	r2, [r9, r3]
			if( xYieldPending != pdFALSE )
 80080c2:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
 80080c4:	2a02      	cmp	r2, #2
 80080c6:	bf28      	it	cs
 80080c8:	2501      	movcs	r5, #1
				xSwitchRequired = pdTRUE;
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	bf18      	it	ne
 80080ce:	2501      	movne	r5, #1
}
 80080d0:	4628      	mov	r0, r5
 80080d2:	b003      	add	sp, #12
 80080d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 80080d8:	4a17      	ldr	r2, [pc, #92]	@ (8008138 <xTaskIncrementTick+0x158>)
 80080da:	6818      	ldr	r0, [r3, #0]
 80080dc:	6811      	ldr	r1, [r2, #0]
 80080de:	6019      	str	r1, [r3, #0]
 80080e0:	4916      	ldr	r1, [pc, #88]	@ (800813c <xTaskIncrementTick+0x15c>)
 80080e2:	6010      	str	r0, [r2, #0]
 80080e4:	680a      	ldr	r2, [r1, #0]
 80080e6:	3201      	adds	r2, #1
 80080e8:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	6812      	ldr	r2, [r2, #0]
 80080ee:	b97a      	cbnz	r2, 8008110 <xTaskIncrementTick+0x130>
		xNextTaskUnblockTime = portMAX_DELAY;
 80080f0:	4b0d      	ldr	r3, [pc, #52]	@ (8008128 <xTaskIncrementTick+0x148>)
 80080f2:	461a      	mov	r2, r3
 80080f4:	9301      	str	r3, [sp, #4]
 80080f6:	f04f 33ff 	mov.w	r3, #4294967295
 80080fa:	6013      	str	r3, [r2, #0]
 80080fc:	e77f      	b.n	8007ffe <xTaskIncrementTick+0x1e>
 80080fe:	f8df 9040 	ldr.w	r9, [pc, #64]	@ 8008140 <xTaskIncrementTick+0x160>
 8008102:	f8df a040 	ldr.w	sl, [pc, #64]	@ 8008144 <xTaskIncrementTick+0x164>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008106:	f04f 33ff 	mov.w	r3, #4294967295
 800810a:	9a01      	ldr	r2, [sp, #4]
 800810c:	6013      	str	r3, [r2, #0]
					break;
 800810e:	e7cf      	b.n	80080b0 <xTaskIncrementTick+0xd0>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008110:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008112:	4a05      	ldr	r2, [pc, #20]	@ (8008128 <xTaskIncrementTick+0x148>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008114:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008116:	9201      	str	r2, [sp, #4]
 8008118:	68db      	ldr	r3, [r3, #12]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	6013      	str	r3, [r2, #0]
}
 800811e:	e76e      	b.n	8007ffe <xTaskIncrementTick+0x1e>
 8008120:	24000ae8 	.word	0x24000ae8
 8008124:	24000b08 	.word	0x24000b08
 8008128:	24000aec 	.word	0x24000aec
 800812c:	24000b54 	.word	0x24000b54
 8008130:	24000afc 	.word	0x24000afc
 8008134:	24000af8 	.word	0x24000af8
 8008138:	24000b50 	.word	0x24000b50
 800813c:	24000af4 	.word	0x24000af4
 8008140:	24000b80 	.word	0x24000b80
 8008144:	24000fe0 	.word	0x24000fe0
 8008148:	24000b04 	.word	0x24000b04

0800814c <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 800814c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	taskENTER_CRITICAL();
 8008150:	f000 fd58 	bl	8008c04 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8008154:	4b37      	ldr	r3, [pc, #220]	@ (8008234 <xTaskResumeAll.part.0+0xe8>)
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	3a01      	subs	r2, #1
 800815a:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d159      	bne.n	8008216 <xTaskResumeAll.part.0+0xca>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008162:	4b35      	ldr	r3, [pc, #212]	@ (8008238 <xTaskResumeAll.part.0+0xec>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d055      	beq.n	8008216 <xTaskResumeAll.part.0+0xca>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800816a:	4d34      	ldr	r5, [pc, #208]	@ (800823c <xTaskResumeAll.part.0+0xf0>)
 800816c:	682b      	ldr	r3, [r5, #0]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d05c      	beq.n	800822c <xTaskResumeAll.part.0+0xe0>
 8008172:	4e33      	ldr	r6, [pc, #204]	@ (8008240 <xTaskResumeAll.part.0+0xf4>)
						xYieldPending = pdTRUE;
 8008174:	f04f 0a01 	mov.w	sl, #1
 8008178:	f8df 80d8 	ldr.w	r8, [pc, #216]	@ 8008254 <xTaskResumeAll.part.0+0x108>
 800817c:	4f31      	ldr	r7, [pc, #196]	@ (8008244 <xTaskResumeAll.part.0+0xf8>)
 800817e:	f8df 90d8 	ldr.w	r9, [pc, #216]	@ 8008258 <xTaskResumeAll.part.0+0x10c>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008182:	68eb      	ldr	r3, [r5, #12]
 8008184:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008186:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800818a:	f104 0018 	add.w	r0, r4, #24
 800818e:	f7fe fed9 	bl	8006f44 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008192:	4658      	mov	r0, fp
 8008194:	f7fe fed6 	bl	8006f44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008198:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800819a:	6832      	ldr	r2, [r6, #0]
 800819c:	4659      	mov	r1, fp
 800819e:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 80081a2:	4293      	cmp	r3, r2
 80081a4:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 80081a8:	d900      	bls.n	80081ac <xTaskResumeAll.part.0+0x60>
 80081aa:	6033      	str	r3, [r6, #0]
 80081ac:	f7fe fea4 	bl	8006ef8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80081b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d301      	bcc.n	80081be <xTaskResumeAll.part.0+0x72>
						xYieldPending = pdTRUE;
 80081ba:	f8c9 a000 	str.w	sl, [r9]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80081be:	682b      	ldr	r3, [r5, #0]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d1de      	bne.n	8008182 <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80081c4:	4b20      	ldr	r3, [pc, #128]	@ (8008248 <xTaskResumeAll.part.0+0xfc>)
 80081c6:	681a      	ldr	r2, [r3, #0]
 80081c8:	6812      	ldr	r2, [r2, #0]
 80081ca:	b352      	cbz	r2, 8008222 <xTaskResumeAll.part.0+0xd6>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081cc:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80081ce:	4b1f      	ldr	r3, [pc, #124]	@ (800824c <xTaskResumeAll.part.0+0x100>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081d0:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80081d2:	68d2      	ldr	r2, [r2, #12]
 80081d4:	6852      	ldr	r2, [r2, #4]
 80081d6:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80081d8:	4e1d      	ldr	r6, [pc, #116]	@ (8008250 <xTaskResumeAll.part.0+0x104>)
 80081da:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 80081dc:	b144      	cbz	r4, 80081f0 <xTaskResumeAll.part.0+0xa4>
								xYieldPending = pdTRUE;
 80081de:	2501      	movs	r5, #1
							if( xTaskIncrementTick() != pdFALSE )
 80081e0:	f7ff fefe 	bl	8007fe0 <xTaskIncrementTick>
 80081e4:	b108      	cbz	r0, 80081ea <xTaskResumeAll.part.0+0x9e>
								xYieldPending = pdTRUE;
 80081e6:	f8c9 5000 	str.w	r5, [r9]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80081ea:	3c01      	subs	r4, #1
 80081ec:	d1f8      	bne.n	80081e0 <xTaskResumeAll.part.0+0x94>
						xPendedTicks = 0;
 80081ee:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 80081f0:	f8d9 3000 	ldr.w	r3, [r9]
 80081f4:	b17b      	cbz	r3, 8008216 <xTaskResumeAll.part.0+0xca>
					taskYIELD_IF_USING_PREEMPTION();
 80081f6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80081fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081fe:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008202:	f3bf 8f4f 	dsb	sy
 8008206:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800820a:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 800820c:	f000 fd1c 	bl	8008c48 <vPortExitCritical>
}
 8008210:	4620      	mov	r0, r4
 8008212:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
BaseType_t xAlreadyYielded = pdFALSE;
 8008216:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008218:	f000 fd16 	bl	8008c48 <vPortExitCritical>
}
 800821c:	4620      	mov	r0, r4
 800821e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xNextTaskUnblockTime = portMAX_DELAY;
 8008222:	4b0a      	ldr	r3, [pc, #40]	@ (800824c <xTaskResumeAll.part.0+0x100>)
 8008224:	f04f 32ff 	mov.w	r2, #4294967295
 8008228:	601a      	str	r2, [r3, #0]
 800822a:	e7d5      	b.n	80081d8 <xTaskResumeAll.part.0+0x8c>
 800822c:	f8df 9028 	ldr.w	r9, [pc, #40]	@ 8008258 <xTaskResumeAll.part.0+0x10c>
 8008230:	e7d2      	b.n	80081d8 <xTaskResumeAll.part.0+0x8c>
 8008232:	bf00      	nop
 8008234:	24000ae8 	.word	0x24000ae8
 8008238:	24000b0c 	.word	0x24000b0c
 800823c:	24000b3c 	.word	0x24000b3c
 8008240:	24000b04 	.word	0x24000b04
 8008244:	24000fe0 	.word	0x24000fe0
 8008248:	24000b54 	.word	0x24000b54
 800824c:	24000aec 	.word	0x24000aec
 8008250:	24000afc 	.word	0x24000afc
 8008254:	24000b80 	.word	0x24000b80
 8008258:	24000af8 	.word	0x24000af8

0800825c <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 800825c:	4b06      	ldr	r3, [pc, #24]	@ (8008278 <xTaskResumeAll+0x1c>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	b943      	cbnz	r3, 8008274 <xTaskResumeAll+0x18>
 8008262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008266:	f383 8811 	msr	BASEPRI, r3
 800826a:	f3bf 8f6f 	isb	sy
 800826e:	f3bf 8f4f 	dsb	sy
 8008272:	e7fe      	b.n	8008272 <xTaskResumeAll+0x16>
 8008274:	f7ff bf6a 	b.w	800814c <xTaskResumeAll.part.0>
 8008278:	24000ae8 	.word	0x24000ae8

0800827c <vTaskDelay>:
	{
 800827c:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800827e:	b950      	cbnz	r0, 8008296 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8008280:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008284:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008288:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800828c:	f3bf 8f4f 	dsb	sy
 8008290:	f3bf 8f6f 	isb	sy
	}
 8008294:	bd10      	pop	{r4, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8008296:	4c10      	ldr	r4, [pc, #64]	@ (80082d8 <vTaskDelay+0x5c>)
 8008298:	6821      	ldr	r1, [r4, #0]
 800829a:	b141      	cbz	r1, 80082ae <vTaskDelay+0x32>
 800829c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082a0:	f383 8811 	msr	BASEPRI, r3
 80082a4:	f3bf 8f6f 	isb	sy
 80082a8:	f3bf 8f4f 	dsb	sy
 80082ac:	e7fe      	b.n	80082ac <vTaskDelay+0x30>
	++uxSchedulerSuspended;
 80082ae:	6823      	ldr	r3, [r4, #0]
 80082b0:	3301      	adds	r3, #1
 80082b2:	6023      	str	r3, [r4, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80082b4:	f7ff fcd4 	bl	8007c60 <prvAddCurrentTaskToDelayedList>
	configASSERT( uxSchedulerSuspended );
 80082b8:	6823      	ldr	r3, [r4, #0]
 80082ba:	b943      	cbnz	r3, 80082ce <vTaskDelay+0x52>
 80082bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082c0:	f383 8811 	msr	BASEPRI, r3
 80082c4:	f3bf 8f6f 	isb	sy
 80082c8:	f3bf 8f4f 	dsb	sy
 80082cc:	e7fe      	b.n	80082cc <vTaskDelay+0x50>
 80082ce:	f7ff ff3d 	bl	800814c <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 80082d2:	2800      	cmp	r0, #0
 80082d4:	d0d4      	beq.n	8008280 <vTaskDelay+0x4>
	}
 80082d6:	bd10      	pop	{r4, pc}
 80082d8:	24000ae8 	.word	0x24000ae8

080082dc <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80082dc:	4b1f      	ldr	r3, [pc, #124]	@ (800835c <vTaskSwitchContext+0x80>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	b11b      	cbz	r3, 80082ea <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 80082e2:	4b1f      	ldr	r3, [pc, #124]	@ (8008360 <vTaskSwitchContext+0x84>)
 80082e4:	2201      	movs	r2, #1
 80082e6:	601a      	str	r2, [r3, #0]
 80082e8:	4770      	bx	lr
		xYieldPending = pdFALSE;
 80082ea:	4a1d      	ldr	r2, [pc, #116]	@ (8008360 <vTaskSwitchContext+0x84>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082ec:	491d      	ldr	r1, [pc, #116]	@ (8008364 <vTaskSwitchContext+0x88>)
{
 80082ee:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082f0:	4c1d      	ldr	r4, [pc, #116]	@ (8008368 <vTaskSwitchContext+0x8c>)
		xYieldPending = pdFALSE;
 80082f2:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082f4:	6823      	ldr	r3, [r4, #0]
 80082f6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80082fa:	0098      	lsls	r0, r3, #2
 80082fc:	0092      	lsls	r2, r2, #2
 80082fe:	588a      	ldr	r2, [r1, r2]
 8008300:	b942      	cbnz	r2, 8008314 <vTaskSwitchContext+0x38>
 8008302:	b1f3      	cbz	r3, 8008342 <vTaskSwitchContext+0x66>
 8008304:	3b01      	subs	r3, #1
 8008306:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800830a:	0098      	lsls	r0, r3, #2
 800830c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008310:	2a00      	cmp	r2, #0
 8008312:	d0f6      	beq.n	8008302 <vTaskSwitchContext+0x26>
 8008314:	4418      	add	r0, r3
 8008316:	eb01 0c80 	add.w	ip, r1, r0, lsl #2
 800831a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800831e:	4662      	mov	r2, ip
 8008320:	6849      	ldr	r1, [r1, #4]
 8008322:	3208      	adds	r2, #8
 8008324:	4291      	cmp	r1, r2
 8008326:	f8cc 1004 	str.w	r1, [ip, #4]
 800832a:	d013      	beq.n	8008354 <vTaskSwitchContext+0x78>
 800832c:	4a0f      	ldr	r2, [pc, #60]	@ (800836c <vTaskSwitchContext+0x90>)
 800832e:	68c8      	ldr	r0, [r1, #12]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008330:	490f      	ldr	r1, [pc, #60]	@ (8008370 <vTaskSwitchContext+0x94>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008332:	6010      	str	r0, [r2, #0]
 8008334:	6023      	str	r3, [r4, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008336:	6813      	ldr	r3, [r2, #0]
}
 8008338:	f85d 4b04 	ldr.w	r4, [sp], #4
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800833c:	3354      	adds	r3, #84	@ 0x54
 800833e:	600b      	str	r3, [r1, #0]
}
 8008340:	4770      	bx	lr
 8008342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008346:	f383 8811 	msr	BASEPRI, r3
 800834a:	f3bf 8f6f 	isb	sy
 800834e:	f3bf 8f4f 	dsb	sy
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008352:	e7fe      	b.n	8008352 <vTaskSwitchContext+0x76>
 8008354:	6849      	ldr	r1, [r1, #4]
 8008356:	f8cc 1004 	str.w	r1, [ip, #4]
 800835a:	e7e7      	b.n	800832c <vTaskSwitchContext+0x50>
 800835c:	24000ae8 	.word	0x24000ae8
 8008360:	24000af8 	.word	0x24000af8
 8008364:	24000b80 	.word	0x24000b80
 8008368:	24000b04 	.word	0x24000b04
 800836c:	24000fe0 	.word	0x24000fe0
 8008370:	2400003c 	.word	0x2400003c

08008374 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8008374:	b160      	cbz	r0, 8008390 <vTaskPlaceOnEventList+0x1c>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008376:	4b0b      	ldr	r3, [pc, #44]	@ (80083a4 <vTaskPlaceOnEventList+0x30>)
{
 8008378:	b510      	push	{r4, lr}
 800837a:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800837c:	6819      	ldr	r1, [r3, #0]
 800837e:	3118      	adds	r1, #24
 8008380:	f7fe fdc8 	bl	8006f14 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008384:	4620      	mov	r0, r4
 8008386:	2101      	movs	r1, #1
}
 8008388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800838c:	f7ff bc68 	b.w	8007c60 <prvAddCurrentTaskToDelayedList>
 8008390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008394:	f383 8811 	msr	BASEPRI, r3
 8008398:	f3bf 8f6f 	isb	sy
 800839c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 80083a0:	e7fe      	b.n	80083a0 <vTaskPlaceOnEventList+0x2c>
 80083a2:	bf00      	nop
 80083a4:	24000fe0 	.word	0x24000fe0

080083a8 <vTaskPlaceOnEventListRestricted>:
	{
 80083a8:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 80083aa:	b180      	cbz	r0, 80083ce <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80083ac:	4b0c      	ldr	r3, [pc, #48]	@ (80083e0 <vTaskPlaceOnEventListRestricted+0x38>)
 80083ae:	460d      	mov	r5, r1
 80083b0:	4614      	mov	r4, r2
 80083b2:	6819      	ldr	r1, [r3, #0]
 80083b4:	3118      	adds	r1, #24
 80083b6:	f7fe fd9f 	bl	8006ef8 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 80083ba:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80083bc:	4621      	mov	r1, r4
 80083be:	bf0c      	ite	eq
 80083c0:	4628      	moveq	r0, r5
 80083c2:	f04f 30ff 	movne.w	r0, #4294967295
	}
 80083c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80083ca:	f7ff bc49 	b.w	8007c60 <prvAddCurrentTaskToDelayedList>
 80083ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083d2:	f383 8811 	msr	BASEPRI, r3
 80083d6:	f3bf 8f6f 	isb	sy
 80083da:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 80083de:	e7fe      	b.n	80083de <vTaskPlaceOnEventListRestricted+0x36>
 80083e0:	24000fe0 	.word	0x24000fe0

080083e4 <xTaskRemoveFromEventList>:
{
 80083e4:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083e6:	68c3      	ldr	r3, [r0, #12]
 80083e8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80083ea:	b34c      	cbz	r4, 8008440 <xTaskRemoveFromEventList+0x5c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80083ec:	f104 0518 	add.w	r5, r4, #24
 80083f0:	4628      	mov	r0, r5
 80083f2:	f7fe fda7 	bl	8006f44 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083f6:	4b18      	ldr	r3, [pc, #96]	@ (8008458 <xTaskRemoveFromEventList+0x74>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	b173      	cbz	r3, 800841a <xTaskRemoveFromEventList+0x36>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80083fc:	4629      	mov	r1, r5
 80083fe:	4817      	ldr	r0, [pc, #92]	@ (800845c <xTaskRemoveFromEventList+0x78>)
 8008400:	f7fe fd7a 	bl	8006ef8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008404:	4b16      	ldr	r3, [pc, #88]	@ (8008460 <xTaskRemoveFromEventList+0x7c>)
 8008406:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800840c:	429a      	cmp	r2, r3
 800840e:	d920      	bls.n	8008452 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8008410:	2301      	movs	r3, #1
 8008412:	4a14      	ldr	r2, [pc, #80]	@ (8008464 <xTaskRemoveFromEventList+0x80>)
		xReturn = pdTRUE;
 8008414:	4618      	mov	r0, r3
		xYieldPending = pdTRUE;
 8008416:	6013      	str	r3, [r2, #0]
}
 8008418:	bd38      	pop	{r3, r4, r5, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800841a:	1d25      	adds	r5, r4, #4
 800841c:	4628      	mov	r0, r5
 800841e:	f7fe fd91 	bl	8006f44 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008422:	4b11      	ldr	r3, [pc, #68]	@ (8008468 <xTaskRemoveFromEventList+0x84>)
 8008424:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	4290      	cmp	r0, r2
 800842a:	d900      	bls.n	800842e <xTaskRemoveFromEventList+0x4a>
 800842c:	6018      	str	r0, [r3, #0]
 800842e:	4b0f      	ldr	r3, [pc, #60]	@ (800846c <xTaskRemoveFromEventList+0x88>)
 8008430:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008434:	4629      	mov	r1, r5
 8008436:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800843a:	f7fe fd5d 	bl	8006ef8 <vListInsertEnd>
 800843e:	e7e1      	b.n	8008404 <xTaskRemoveFromEventList+0x20>
 8008440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008444:	f383 8811 	msr	BASEPRI, r3
 8008448:	f3bf 8f6f 	isb	sy
 800844c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8008450:	e7fe      	b.n	8008450 <xTaskRemoveFromEventList+0x6c>
		xReturn = pdFALSE;
 8008452:	2000      	movs	r0, #0
}
 8008454:	bd38      	pop	{r3, r4, r5, pc}
 8008456:	bf00      	nop
 8008458:	24000ae8 	.word	0x24000ae8
 800845c:	24000b3c 	.word	0x24000b3c
 8008460:	24000fe0 	.word	0x24000fe0
 8008464:	24000af8 	.word	0x24000af8
 8008468:	24000b04 	.word	0x24000b04
 800846c:	24000b80 	.word	0x24000b80

08008470 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008470:	4a03      	ldr	r2, [pc, #12]	@ (8008480 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008472:	4b04      	ldr	r3, [pc, #16]	@ (8008484 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008474:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	e9c0 2300 	strd	r2, r3, [r0]
}
 800847c:	4770      	bx	lr
 800847e:	bf00      	nop
 8008480:	24000af4 	.word	0x24000af4
 8008484:	24000b08 	.word	0x24000b08

08008488 <xTaskCheckForTimeOut>:
{
 8008488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800848a:	b308      	cbz	r0, 80084d0 <xTaskCheckForTimeOut+0x48>
	configASSERT( pxTicksToWait );
 800848c:	460d      	mov	r5, r1
 800848e:	b1b1      	cbz	r1, 80084be <xTaskCheckForTimeOut+0x36>
 8008490:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8008492:	f000 fbb7 	bl	8008c04 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 8008496:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 8008498:	4a1a      	ldr	r2, [pc, #104]	@ (8008504 <xTaskCheckForTimeOut+0x7c>)
			if( *pxTicksToWait == portMAX_DELAY )
 800849a:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 800849c:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800849e:	d02c      	beq.n	80084fa <xTaskCheckForTimeOut+0x72>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80084a0:	f8df c064 	ldr.w	ip, [pc, #100]	@ 8008508 <xTaskCheckForTimeOut+0x80>
 80084a4:	6826      	ldr	r6, [r4, #0]
 80084a6:	f8dc 7000 	ldr.w	r7, [ip]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80084aa:	6860      	ldr	r0, [r4, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80084ac:	42be      	cmp	r6, r7
 80084ae:	d018      	beq.n	80084e2 <xTaskCheckForTimeOut+0x5a>
 80084b0:	4288      	cmp	r0, r1
 80084b2:	d816      	bhi.n	80084e2 <xTaskCheckForTimeOut+0x5a>
			xReturn = pdTRUE;
 80084b4:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 80084b6:	f000 fbc7 	bl	8008c48 <vPortExitCritical>
}
 80084ba:	4620      	mov	r0, r4
 80084bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084c2:	f383 8811 	msr	BASEPRI, r3
 80084c6:	f3bf 8f6f 	isb	sy
 80084ca:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 80084ce:	e7fe      	b.n	80084ce <xTaskCheckForTimeOut+0x46>
 80084d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084d4:	f383 8811 	msr	BASEPRI, r3
 80084d8:	f3bf 8f6f 	isb	sy
 80084dc:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 80084e0:	e7fe      	b.n	80084e0 <xTaskCheckForTimeOut+0x58>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80084e2:	eba1 0e00 	sub.w	lr, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80084e6:	4573      	cmp	r3, lr
 80084e8:	d909      	bls.n	80084fe <xTaskCheckForTimeOut+0x76>
			*pxTicksToWait -= xElapsedTime;
 80084ea:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80084ec:	f8dc 1000 	ldr.w	r1, [ip]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80084f0:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
 80084f2:	4403      	add	r3, r0
 80084f4:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80084f6:	e9c4 1200 	strd	r1, r2, [r4]
				xReturn = pdFALSE;
 80084fa:	2400      	movs	r4, #0
 80084fc:	e7db      	b.n	80084b6 <xTaskCheckForTimeOut+0x2e>
			*pxTicksToWait = 0;
 80084fe:	2300      	movs	r3, #0
 8008500:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 8008502:	e7d7      	b.n	80084b4 <xTaskCheckForTimeOut+0x2c>
 8008504:	24000b08 	.word	0x24000b08
 8008508:	24000af4 	.word	0x24000af4

0800850c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800850c:	4b01      	ldr	r3, [pc, #4]	@ (8008514 <vTaskMissedYield+0x8>)
 800850e:	2201      	movs	r2, #1
 8008510:	601a      	str	r2, [r3, #0]
}
 8008512:	4770      	bx	lr
 8008514:	24000af8 	.word	0x24000af8

08008518 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8008518:	4b01      	ldr	r3, [pc, #4]	@ (8008520 <xTaskGetCurrentTaskHandle+0x8>)
 800851a:	6818      	ldr	r0, [r3, #0]
	}
 800851c:	4770      	bx	lr
 800851e:	bf00      	nop
 8008520:	24000fe0 	.word	0x24000fe0

08008524 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8008524:	4b05      	ldr	r3, [pc, #20]	@ (800853c <xTaskGetSchedulerState+0x18>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	b133      	cbz	r3, 8008538 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800852a:	4b05      	ldr	r3, [pc, #20]	@ (8008540 <xTaskGetSchedulerState+0x1c>)
 800852c:	6818      	ldr	r0, [r3, #0]
 800852e:	fab0 f080 	clz	r0, r0
 8008532:	0940      	lsrs	r0, r0, #5
 8008534:	0040      	lsls	r0, r0, #1
 8008536:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008538:	2001      	movs	r0, #1
	}
 800853a:	4770      	bx	lr
 800853c:	24000b00 	.word	0x24000b00
 8008540:	24000ae8 	.word	0x24000ae8

08008544 <xTaskPriorityInherit>:
	{
 8008544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8008546:	4604      	mov	r4, r0
 8008548:	b1c8      	cbz	r0, 800857e <xTaskPriorityInherit+0x3a>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800854a:	4d1b      	ldr	r5, [pc, #108]	@ (80085b8 <xTaskPriorityInherit+0x74>)
 800854c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800854e:	682a      	ldr	r2, [r5, #0]
 8008550:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008552:	4293      	cmp	r3, r2
 8008554:	d214      	bcs.n	8008580 <xTaskPriorityInherit+0x3c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008556:	6982      	ldr	r2, [r0, #24]
 8008558:	2a00      	cmp	r2, #0
 800855a:	db04      	blt.n	8008566 <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800855c:	682a      	ldr	r2, [r5, #0]
 800855e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008560:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8008564:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008566:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800856a:	4e14      	ldr	r6, [pc, #80]	@ (80085bc <xTaskPriorityInherit+0x78>)
 800856c:	6962      	ldr	r2, [r4, #20]
 800856e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008572:	429a      	cmp	r2, r3
 8008574:	d00c      	beq.n	8008590 <xTaskPriorityInherit+0x4c>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008576:	682b      	ldr	r3, [r5, #0]
 8008578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800857a:	62e3      	str	r3, [r4, #44]	@ 0x2c
				xReturn = pdTRUE;
 800857c:	2001      	movs	r0, #1
	}
 800857e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008580:	682b      	ldr	r3, [r5, #0]
 8008582:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8008584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008586:	4298      	cmp	r0, r3
 8008588:	bf2c      	ite	cs
 800858a:	2000      	movcs	r0, #0
 800858c:	2001      	movcc	r0, #1
	}
 800858e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008590:	1d27      	adds	r7, r4, #4
 8008592:	4638      	mov	r0, r7
 8008594:	f7fe fcd6 	bl	8006f44 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008598:	682a      	ldr	r2, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800859a:	4b09      	ldr	r3, [pc, #36]	@ (80085c0 <xTaskPriorityInherit+0x7c>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800859c:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800859e:	681a      	ldr	r2, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80085a0:	62e0      	str	r0, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80085a2:	4290      	cmp	r0, r2
 80085a4:	d900      	bls.n	80085a8 <xTaskPriorityInherit+0x64>
 80085a6:	6018      	str	r0, [r3, #0]
 80085a8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80085ac:	4639      	mov	r1, r7
 80085ae:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 80085b2:	f7fe fca1 	bl	8006ef8 <vListInsertEnd>
 80085b6:	e7e1      	b.n	800857c <xTaskPriorityInherit+0x38>
 80085b8:	24000fe0 	.word	0x24000fe0
 80085bc:	24000b80 	.word	0x24000b80
 80085c0:	24000b04 	.word	0x24000b04

080085c4 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 80085c4:	b308      	cbz	r0, 800860a <xTaskPriorityDisinherit+0x46>
	{
 80085c6:	b538      	push	{r3, r4, r5, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 80085c8:	4b1d      	ldr	r3, [pc, #116]	@ (8008640 <xTaskPriorityDisinherit+0x7c>)
 80085ca:	681c      	ldr	r4, [r3, #0]
 80085cc:	4284      	cmp	r4, r0
 80085ce:	d008      	beq.n	80085e2 <xTaskPriorityDisinherit+0x1e>
 80085d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085d4:	f383 8811 	msr	BASEPRI, r3
 80085d8:	f3bf 8f6f 	isb	sy
 80085dc:	f3bf 8f4f 	dsb	sy
 80085e0:	e7fe      	b.n	80085e0 <xTaskPriorityDisinherit+0x1c>
			configASSERT( pxTCB->uxMutexesHeld );
 80085e2:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80085e4:	b143      	cbz	r3, 80085f8 <xTaskPriorityDisinherit+0x34>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80085e6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
			( pxTCB->uxMutexesHeld )--;
 80085e8:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80085ea:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 80085ec:	6523      	str	r3, [r4, #80]	@ 0x50
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80085ee:	4291      	cmp	r1, r2
 80085f0:	d000      	beq.n	80085f4 <xTaskPriorityDisinherit+0x30>
 80085f2:	b163      	cbz	r3, 800860e <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 80085f4:	2000      	movs	r0, #0
	}
 80085f6:	bd38      	pop	{r3, r4, r5, pc}
 80085f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085fc:	f383 8811 	msr	BASEPRI, r3
 8008600:	f3bf 8f6f 	isb	sy
 8008604:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 8008608:	e7fe      	b.n	8008608 <xTaskPriorityDisinherit+0x44>
	BaseType_t xReturn = pdFALSE;
 800860a:	2000      	movs	r0, #0
	}
 800860c:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800860e:	1d25      	adds	r5, r4, #4
 8008610:	4628      	mov	r0, r5
 8008612:	f7fe fc97 	bl	8006f44 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008616:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
					prvAddTaskToReadyList( pxTCB );
 8008618:	4b0a      	ldr	r3, [pc, #40]	@ (8008644 <xTaskPriorityDisinherit+0x80>)
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800861a:	f1c0 0238 	rsb	r2, r0, #56	@ 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800861e:	62e0      	str	r0, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008620:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	4290      	cmp	r0, r2
 8008626:	d900      	bls.n	800862a <xTaskPriorityDisinherit+0x66>
 8008628:	6018      	str	r0, [r3, #0]
 800862a:	4b07      	ldr	r3, [pc, #28]	@ (8008648 <xTaskPriorityDisinherit+0x84>)
 800862c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008630:	4629      	mov	r1, r5
 8008632:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008636:	f7fe fc5f 	bl	8006ef8 <vListInsertEnd>
					xReturn = pdTRUE;
 800863a:	2001      	movs	r0, #1
	}
 800863c:	bd38      	pop	{r3, r4, r5, pc}
 800863e:	bf00      	nop
 8008640:	24000fe0 	.word	0x24000fe0
 8008644:	24000b04 	.word	0x24000b04
 8008648:	24000b80 	.word	0x24000b80

0800864c <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 800864c:	2800      	cmp	r0, #0
 800864e:	d03c      	beq.n	80086ca <vTaskPriorityDisinheritAfterTimeout+0x7e>
			configASSERT( pxTCB->uxMutexesHeld );
 8008650:	6d03      	ldr	r3, [r0, #80]	@ 0x50
	{
 8008652:	b570      	push	{r4, r5, r6, lr}
 8008654:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 8008656:	b14b      	cbz	r3, 800866c <vTaskPriorityDisinheritAfterTimeout+0x20>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008658:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
			if( pxTCB->uxPriority != uxPriorityToUse )
 800865a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800865c:	4281      	cmp	r1, r0
 800865e:	bf38      	it	cc
 8008660:	4601      	movcc	r1, r0
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008662:	2b01      	cmp	r3, #1
 8008664:	d101      	bne.n	800866a <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8008666:	428a      	cmp	r2, r1
 8008668:	d109      	bne.n	800867e <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 800866a:	bd70      	pop	{r4, r5, r6, pc}
 800866c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008670:	f383 8811 	msr	BASEPRI, r3
 8008674:	f3bf 8f6f 	isb	sy
 8008678:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 800867c:	e7fe      	b.n	800867c <vTaskPriorityDisinheritAfterTimeout+0x30>
					configASSERT( pxTCB != pxCurrentTCB );
 800867e:	4b18      	ldr	r3, [pc, #96]	@ (80086e0 <vTaskPriorityDisinheritAfterTimeout+0x94>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	42a3      	cmp	r3, r4
 8008684:	d022      	beq.n	80086cc <vTaskPriorityDisinheritAfterTimeout+0x80>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008686:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
 8008688:	62e1      	str	r1, [r4, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800868a:	2b00      	cmp	r3, #0
 800868c:	db02      	blt.n	8008694 <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800868e:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
 8008692:	61a1      	str	r1, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008694:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008698:	4d12      	ldr	r5, [pc, #72]	@ (80086e4 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800869a:	6961      	ldr	r1, [r4, #20]
 800869c:	eb05 0382 	add.w	r3, r5, r2, lsl #2
 80086a0:	4299      	cmp	r1, r3
 80086a2:	d1e2      	bne.n	800866a <vTaskPriorityDisinheritAfterTimeout+0x1e>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80086a4:	1d26      	adds	r6, r4, #4
 80086a6:	4630      	mov	r0, r6
 80086a8:	f7fe fc4c 	bl	8006f44 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 80086ac:	4b0e      	ldr	r3, [pc, #56]	@ (80086e8 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 80086ae:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	4290      	cmp	r0, r2
 80086b4:	d900      	bls.n	80086b8 <vTaskPriorityDisinheritAfterTimeout+0x6c>
 80086b6:	6018      	str	r0, [r3, #0]
 80086b8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80086bc:	4631      	mov	r1, r6
 80086be:	eb05 0080 	add.w	r0, r5, r0, lsl #2
	}
 80086c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 80086c6:	f7fe bc17 	b.w	8006ef8 <vListInsertEnd>
 80086ca:	4770      	bx	lr
 80086cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086d0:	f383 8811 	msr	BASEPRI, r3
 80086d4:	f3bf 8f6f 	isb	sy
 80086d8:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 80086dc:	e7fe      	b.n	80086dc <vTaskPriorityDisinheritAfterTimeout+0x90>
 80086de:	bf00      	nop
 80086e0:	24000fe0 	.word	0x24000fe0
 80086e4:	24000b80 	.word	0x24000b80
 80086e8:	24000b04 	.word	0x24000b04

080086ec <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80086ec:	4b04      	ldr	r3, [pc, #16]	@ (8008700 <pvTaskIncrementMutexHeldCount+0x14>)
 80086ee:	681a      	ldr	r2, [r3, #0]
 80086f0:	b11a      	cbz	r2, 80086fa <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 80086f2:	6819      	ldr	r1, [r3, #0]
 80086f4:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 80086f6:	3201      	adds	r2, #1
 80086f8:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 80086fa:	6818      	ldr	r0, [r3, #0]
	}
 80086fc:	4770      	bx	lr
 80086fe:	bf00      	nop
 8008700:	24000fe0 	.word	0x24000fe0

08008704 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008704:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8008706:	4c12      	ldr	r4, [pc, #72]	@ (8008750 <prvCheckForValidListAndQueue+0x4c>)
{
 8008708:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 800870a:	f000 fa7b 	bl	8008c04 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800870e:	6825      	ldr	r5, [r4, #0]
 8008710:	b125      	cbz	r5, 800871c <prvCheckForValidListAndQueue+0x18>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8008712:	b003      	add	sp, #12
 8008714:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8008718:	f000 ba96 	b.w	8008c48 <vPortExitCritical>
			vListInitialise( &xActiveTimerList1 );
 800871c:	4f0d      	ldr	r7, [pc, #52]	@ (8008754 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList2 );
 800871e:	4e0e      	ldr	r6, [pc, #56]	@ (8008758 <prvCheckForValidListAndQueue+0x54>)
			vListInitialise( &xActiveTimerList1 );
 8008720:	4638      	mov	r0, r7
 8008722:	f7fe fbd9 	bl	8006ed8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008726:	4630      	mov	r0, r6
 8008728:	f7fe fbd6 	bl	8006ed8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800872c:	4a0b      	ldr	r2, [pc, #44]	@ (800875c <prvCheckForValidListAndQueue+0x58>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800872e:	9500      	str	r5, [sp, #0]
 8008730:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 8008732:	6017      	str	r7, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008734:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8008736:	4a0a      	ldr	r2, [pc, #40]	@ (8008760 <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008738:	4b0a      	ldr	r3, [pc, #40]	@ (8008764 <prvCheckForValidListAndQueue+0x60>)
			pxOverflowTimerList = &xActiveTimerList2;
 800873a:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800873c:	4a0a      	ldr	r2, [pc, #40]	@ (8008768 <prvCheckForValidListAndQueue+0x64>)
 800873e:	f7fe fcd9 	bl	80070f4 <xQueueGenericCreateStatic>
 8008742:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 8008744:	2800      	cmp	r0, #0
 8008746:	d0e4      	beq.n	8008712 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008748:	4908      	ldr	r1, [pc, #32]	@ (800876c <prvCheckForValidListAndQueue+0x68>)
 800874a:	f7ff f9c1 	bl	8007ad0 <vQueueAddToRegistry>
 800874e:	e7e0      	b.n	8008712 <prvCheckForValidListAndQueue+0xe>
 8008750:	240010dc 	.word	0x240010dc
 8008754:	240010fc 	.word	0x240010fc
 8008758:	240010e8 	.word	0x240010e8
 800875c:	240010e4 	.word	0x240010e4
 8008760:	240010e0 	.word	0x240010e0
 8008764:	24000fe4 	.word	0x24000fe4
 8008768:	24001034 	.word	0x24001034
 800876c:	08012890 	.word	0x08012890

08008770 <xTimerCreateTimerTask>:
{
 8008770:	b530      	push	{r4, r5, lr}
 8008772:	b089      	sub	sp, #36	@ 0x24
	prvCheckForValidListAndQueue();
 8008774:	f7ff ffc6 	bl	8008704 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8008778:	4b12      	ldr	r3, [pc, #72]	@ (80087c4 <xTimerCreateTimerTask+0x54>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	b1cb      	cbz	r3, 80087b2 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800877e:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008780:	aa07      	add	r2, sp, #28
 8008782:	a906      	add	r1, sp, #24
 8008784:	a805      	add	r0, sp, #20
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008786:	2502      	movs	r5, #2
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008788:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800878c:	f7fe fb94 	bl	8006eb8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008790:	4623      	mov	r3, r4
 8008792:	9a07      	ldr	r2, [sp, #28]
 8008794:	9500      	str	r5, [sp, #0]
 8008796:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 800879a:	e9cd 1001 	strd	r1, r0, [sp, #4]
 800879e:	490a      	ldr	r1, [pc, #40]	@ (80087c8 <xTimerCreateTimerTask+0x58>)
 80087a0:	480a      	ldr	r0, [pc, #40]	@ (80087cc <xTimerCreateTimerTask+0x5c>)
 80087a2:	f7ff fb4d 	bl	8007e40 <xTaskCreateStatic>
 80087a6:	4b0a      	ldr	r3, [pc, #40]	@ (80087d0 <xTimerCreateTimerTask+0x60>)
 80087a8:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 80087aa:	b110      	cbz	r0, 80087b2 <xTimerCreateTimerTask+0x42>
}
 80087ac:	2001      	movs	r0, #1
 80087ae:	b009      	add	sp, #36	@ 0x24
 80087b0:	bd30      	pop	{r4, r5, pc}
 80087b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087b6:	f383 8811 	msr	BASEPRI, r3
 80087ba:	f3bf 8f6f 	isb	sy
 80087be:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 80087c2:	e7fe      	b.n	80087c2 <xTimerCreateTimerTask+0x52>
 80087c4:	240010dc 	.word	0x240010dc
 80087c8:	08012898 	.word	0x08012898
 80087cc:	080088bd 	.word	0x080088bd
 80087d0:	240010d8 	.word	0x240010d8

080087d4 <xTimerGenericCommand>:
	configASSERT( xTimer );
 80087d4:	b1c8      	cbz	r0, 800880a <xTimerGenericCommand+0x36>
{
 80087d6:	b530      	push	{r4, r5, lr}
	if( xTimerQueue != NULL )
 80087d8:	4d18      	ldr	r5, [pc, #96]	@ (800883c <xTimerGenericCommand+0x68>)
{
 80087da:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
 80087dc:	682c      	ldr	r4, [r5, #0]
 80087de:	b18c      	cbz	r4, 8008804 <xTimerGenericCommand+0x30>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80087e0:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80087e2:	9002      	str	r0, [sp, #8]
		xMessage.xMessageID = xCommandID;
 80087e4:	e9cd 1200 	strd	r1, r2, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80087e8:	dc18      	bgt.n	800881c <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80087ea:	f7ff fe9b 	bl	8008524 <xTaskGetSchedulerState>
 80087ee:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80087f0:	f04f 0300 	mov.w	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80087f4:	d01b      	beq.n	800882e <xTimerGenericCommand+0x5a>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80087f6:	4669      	mov	r1, sp
 80087f8:	461a      	mov	r2, r3
 80087fa:	6828      	ldr	r0, [r5, #0]
 80087fc:	f7fe fd36 	bl	800726c <xQueueGenericSend>
}
 8008800:	b005      	add	sp, #20
 8008802:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 8008804:	4620      	mov	r0, r4
}
 8008806:	b005      	add	sp, #20
 8008808:	bd30      	pop	{r4, r5, pc}
 800880a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800880e:	f383 8811 	msr	BASEPRI, r3
 8008812:	f3bf 8f6f 	isb	sy
 8008816:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 800881a:	e7fe      	b.n	800881a <xTimerGenericCommand+0x46>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800881c:	469c      	mov	ip, r3
 800881e:	4669      	mov	r1, sp
 8008820:	2300      	movs	r3, #0
 8008822:	4620      	mov	r0, r4
 8008824:	4662      	mov	r2, ip
 8008826:	f7fe fe59 	bl	80074dc <xQueueGenericSendFromISR>
}
 800882a:	b005      	add	sp, #20
 800882c:	bd30      	pop	{r4, r5, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800882e:	9a08      	ldr	r2, [sp, #32]
 8008830:	4669      	mov	r1, sp
 8008832:	6828      	ldr	r0, [r5, #0]
 8008834:	f7fe fd1a 	bl	800726c <xQueueGenericSend>
 8008838:	e7e5      	b.n	8008806 <xTimerGenericCommand+0x32>
 800883a:	bf00      	nop
 800883c:	240010dc 	.word	0x240010dc

08008840 <prvSwitchTimerLists>:
{
 8008840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008842:	4e1c      	ldr	r6, [pc, #112]	@ (80088b4 <prvSwitchTimerLists+0x74>)
 8008844:	b083      	sub	sp, #12
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008846:	e00d      	b.n	8008864 <prvSwitchTimerLists+0x24>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008848:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800884a:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800884c:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800884e:	1d25      	adds	r5, r4, #4
 8008850:	4628      	mov	r0, r5
 8008852:	f7fe fb77 	bl	8006f44 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008856:	6a23      	ldr	r3, [r4, #32]
 8008858:	4620      	mov	r0, r4
 800885a:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800885c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8008860:	075b      	lsls	r3, r3, #29
 8008862:	d409      	bmi.n	8008878 <prvSwitchTimerLists+0x38>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008864:	6833      	ldr	r3, [r6, #0]
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	2a00      	cmp	r2, #0
 800886a:	d1ed      	bne.n	8008848 <prvSwitchTimerLists+0x8>
	pxCurrentTimerList = pxOverflowTimerList;
 800886c:	4a12      	ldr	r2, [pc, #72]	@ (80088b8 <prvSwitchTimerLists+0x78>)
 800886e:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008870:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 8008872:	6031      	str	r1, [r6, #0]
}
 8008874:	b003      	add	sp, #12
 8008876:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008878:	69a2      	ldr	r2, [r4, #24]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800887a:	4629      	mov	r1, r5
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800887c:	2300      	movs	r3, #0
 800887e:	4620      	mov	r0, r4
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008880:	18bd      	adds	r5, r7, r2
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008882:	463a      	mov	r2, r7
			if( xReloadTime > xNextExpireTime )
 8008884:	42af      	cmp	r7, r5
 8008886:	d205      	bcs.n	8008894 <prvSwitchTimerLists+0x54>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008888:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800888a:	6065      	str	r5, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800888c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800888e:	f7fe fb41 	bl	8006f14 <vListInsert>
 8008892:	e7e7      	b.n	8008864 <prvSwitchTimerLists+0x24>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008894:	4619      	mov	r1, r3
 8008896:	9300      	str	r3, [sp, #0]
 8008898:	f7ff ff9c 	bl	80087d4 <xTimerGenericCommand>
				configASSERT( xResult );
 800889c:	2800      	cmp	r0, #0
 800889e:	d1e1      	bne.n	8008864 <prvSwitchTimerLists+0x24>
 80088a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088a4:	f383 8811 	msr	BASEPRI, r3
 80088a8:	f3bf 8f6f 	isb	sy
 80088ac:	f3bf 8f4f 	dsb	sy
 80088b0:	e7fe      	b.n	80088b0 <prvSwitchTimerLists+0x70>
 80088b2:	bf00      	nop
 80088b4:	240010e4 	.word	0x240010e4
 80088b8:	240010e0 	.word	0x240010e0

080088bc <prvTimerTask>:
{
 80088bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088c0:	4e96      	ldr	r6, [pc, #600]	@ (8008b1c <prvTimerTask+0x260>)
 80088c2:	b087      	sub	sp, #28
 80088c4:	4d96      	ldr	r5, [pc, #600]	@ (8008b20 <prvTimerTask+0x264>)
					portYIELD_WITHIN_API();
 80088c6:	f04f 29e0 	mov.w	r9, #3758153728	@ 0xe000e000
 80088ca:	4c96      	ldr	r4, [pc, #600]	@ (8008b24 <prvTimerTask+0x268>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80088cc:	6833      	ldr	r3, [r6, #0]
 80088ce:	681f      	ldr	r7, [r3, #0]
 80088d0:	2f00      	cmp	r7, #0
 80088d2:	f000 80a9 	beq.w	8008a28 <prvTimerTask+0x16c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80088d6:	68db      	ldr	r3, [r3, #12]
 80088d8:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
 80088da:	f7ff fb6b 	bl	8007fb4 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 80088de:	f7ff fb71 	bl	8007fc4 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80088e2:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 80088e4:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 80088e6:	4290      	cmp	r0, r2
 80088e8:	f0c0 80a6 	bcc.w	8008a38 <prvTimerTask+0x17c>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80088ec:	4287      	cmp	r7, r0
	xLastTime = xTimeNow;
 80088ee:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80088f0:	f200 80c7 	bhi.w	8008a82 <prvTimerTask+0x1c6>
				( void ) xTaskResumeAll();
 80088f4:	f7ff fcb2 	bl	800825c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088f8:	6832      	ldr	r2, [r6, #0]
 80088fa:	68d2      	ldr	r2, [r2, #12]
 80088fc:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008900:	f10b 0804 	add.w	r8, fp, #4
 8008904:	4640      	mov	r0, r8
 8008906:	f7fe fb1d 	bl	8006f44 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800890a:	f89b 0028 	ldrb.w	r0, [fp, #40]	@ 0x28
 800890e:	0743      	lsls	r3, r0, #29
 8008910:	f100 80c6 	bmi.w	8008aa0 <prvTimerTask+0x1e4>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008914:	f020 0001 	bic.w	r0, r0, #1
 8008918:	f88b 0028 	strb.w	r0, [fp, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800891c:	f8db 3020 	ldr.w	r3, [fp, #32]
 8008920:	4658      	mov	r0, fp
 8008922:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008924:	2200      	movs	r2, #0
 8008926:	a902      	add	r1, sp, #8
 8008928:	6820      	ldr	r0, [r4, #0]
 800892a:	f7fe fe93 	bl	8007654 <xQueueReceive>
 800892e:	2800      	cmp	r0, #0
 8008930:	d0cc      	beq.n	80088cc <prvTimerTask+0x10>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008932:	9b02      	ldr	r3, [sp, #8]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008934:	9804      	ldr	r0, [sp, #16]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008936:	2b00      	cmp	r3, #0
 8008938:	db6e      	blt.n	8008a18 <prvTimerTask+0x15c>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800893a:	9f04      	ldr	r7, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	b113      	cbz	r3, 8008946 <prvTimerTask+0x8a>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008940:	1d38      	adds	r0, r7, #4
 8008942:	f7fe faff 	bl	8006f44 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8008946:	f7ff fb3d 	bl	8007fc4 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800894a:	682b      	ldr	r3, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 800894c:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
 800894e:	4298      	cmp	r0, r3
 8008950:	d379      	bcc.n	8008a46 <prvTimerTask+0x18a>
			switch( xMessage.xMessageID )
 8008952:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 8008954:	f8c5 8000 	str.w	r8, [r5]
			switch( xMessage.xMessageID )
 8008958:	2b09      	cmp	r3, #9
 800895a:	d8e3      	bhi.n	8008924 <prvTimerTask+0x68>
 800895c:	e8df f003 	tbb	[pc, r3]
 8008960:	4c050505 	.word	0x4c050505
 8008964:	05055336 	.word	0x05055336
 8008968:	364c      	.short	0x364c
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800896a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800896e:	9b03      	ldr	r3, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008970:	f042 0201 	orr.w	r2, r2, #1
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008974:	69b9      	ldr	r1, [r7, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008976:	613f      	str	r7, [r7, #16]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008978:	f887 2028 	strb.w	r2, [r7, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800897c:	185a      	adds	r2, r3, r1
 800897e:	bf2c      	ite	cs
 8008980:	2001      	movcs	r0, #1
 8008982:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
 8008984:	4542      	cmp	r2, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008986:	607a      	str	r2, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 8008988:	d87d      	bhi.n	8008a86 <prvTimerTask+0x1ca>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800898a:	eba8 0303 	sub.w	r3, r8, r3
 800898e:	4299      	cmp	r1, r3
 8008990:	f200 80af 	bhi.w	8008af2 <prvTimerTask+0x236>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008994:	6a3b      	ldr	r3, [r7, #32]
 8008996:	4638      	mov	r0, r7
 8008998:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800899a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800899e:	0759      	lsls	r1, r3, #29
 80089a0:	d5c0      	bpl.n	8008924 <prvTimerTask+0x68>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80089a2:	2200      	movs	r2, #0
 80089a4:	69bb      	ldr	r3, [r7, #24]
 80089a6:	4638      	mov	r0, r7
 80089a8:	9200      	str	r2, [sp, #0]
 80089aa:	9a03      	ldr	r2, [sp, #12]
 80089ac:	441a      	add	r2, r3
 80089ae:	2300      	movs	r3, #0
 80089b0:	4619      	mov	r1, r3
 80089b2:	f7ff ff0f 	bl	80087d4 <xTimerGenericCommand>
							configASSERT( xResult );
 80089b6:	2800      	cmp	r0, #0
 80089b8:	d1b4      	bne.n	8008924 <prvTimerTask+0x68>
 80089ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089be:	f383 8811 	msr	BASEPRI, r3
 80089c2:	f3bf 8f6f 	isb	sy
 80089c6:	f3bf 8f4f 	dsb	sy
 80089ca:	e7fe      	b.n	80089ca <prvTimerTask+0x10e>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80089cc:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80089d0:	9b03      	ldr	r3, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80089d2:	f042 0201 	orr.w	r2, r2, #1
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80089d6:	61bb      	str	r3, [r7, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80089d8:	f887 2028 	strb.w	r2, [r7, #40]	@ 0x28
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80089dc:	2b00      	cmp	r3, #0
 80089de:	f000 8094 	beq.w	8008b0a <prvTimerTask+0x24e>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80089e2:	4443      	add	r3, r8
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80089e4:	1d39      	adds	r1, r7, #4
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80089e6:	613f      	str	r7, [r7, #16]
	if( xNextExpiryTime <= xTimeNow )
 80089e8:	4543      	cmp	r3, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80089ea:	607b      	str	r3, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 80089ec:	d854      	bhi.n	8008a98 <prvTimerTask+0x1dc>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80089ee:	4b4e      	ldr	r3, [pc, #312]	@ (8008b28 <prvTimerTask+0x26c>)
 80089f0:	6818      	ldr	r0, [r3, #0]
 80089f2:	f7fe fa8f 	bl	8006f14 <vListInsert>
 80089f6:	e795      	b.n	8008924 <prvTimerTask+0x68>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80089f8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80089fc:	f023 0301 	bic.w	r3, r3, #1
 8008a00:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
					break;
 8008a04:	e78e      	b.n	8008924 <prvTimerTask+0x68>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008a06:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008a0a:	079a      	lsls	r2, r3, #30
 8008a0c:	d568      	bpl.n	8008ae0 <prvTimerTask+0x224>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008a0e:	f023 0301 	bic.w	r3, r3, #1
 8008a12:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8008a16:	e785      	b.n	8008924 <prvTimerTask+0x68>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008a18:	9b03      	ldr	r3, [sp, #12]
 8008a1a:	9905      	ldr	r1, [sp, #20]
 8008a1c:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008a1e:	9b02      	ldr	r3, [sp, #8]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	f6ff af7f 	blt.w	8008924 <prvTimerTask+0x68>
 8008a26:	e788      	b.n	800893a <prvTimerTask+0x7e>
	vTaskSuspendAll();
 8008a28:	f7ff fac4 	bl	8007fb4 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8008a2c:	f7ff faca 	bl	8007fc4 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8008a30:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 8008a32:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8008a34:	4290      	cmp	r0, r2
 8008a36:	d209      	bcs.n	8008a4c <prvTimerTask+0x190>
		prvSwitchTimerLists();
 8008a38:	f7ff ff02 	bl	8008840 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8008a3c:	f8c5 a000 	str.w	sl, [r5]
			( void ) xTaskResumeAll();
 8008a40:	f7ff fc0c 	bl	800825c <xTaskResumeAll>
 8008a44:	e76e      	b.n	8008924 <prvTimerTask+0x68>
		prvSwitchTimerLists();
 8008a46:	f7ff fefb 	bl	8008840 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008a4a:	e782      	b.n	8008952 <prvTimerTask+0x96>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008a4c:	4b36      	ldr	r3, [pc, #216]	@ (8008b28 <prvTimerTask+0x26c>)
	xLastTime = xTimeNow;
 8008a4e:	f8c5 a000 	str.w	sl, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008a52:	681a      	ldr	r2, [r3, #0]
 8008a54:	6812      	ldr	r2, [r2, #0]
 8008a56:	fab2 f282 	clz	r2, r2
 8008a5a:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008a5c:	eba7 010a 	sub.w	r1, r7, sl
 8008a60:	6820      	ldr	r0, [r4, #0]
 8008a62:	f7ff f84d 	bl	8007b00 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008a66:	f7ff fbf9 	bl	800825c <xTaskResumeAll>
 8008a6a:	2800      	cmp	r0, #0
 8008a6c:	f47f af5a 	bne.w	8008924 <prvTimerTask+0x68>
					portYIELD_WITHIN_API();
 8008a70:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008a74:	f8c9 3d04 	str.w	r3, [r9, #3332]	@ 0xd04
 8008a78:	f3bf 8f4f 	dsb	sy
 8008a7c:	f3bf 8f6f 	isb	sy
 8008a80:	e750      	b.n	8008924 <prvTimerTask+0x68>
 8008a82:	2200      	movs	r2, #0
 8008a84:	e7ea      	b.n	8008a5c <prvTimerTask+0x1a0>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008a86:	4543      	cmp	r3, r8
 8008a88:	d901      	bls.n	8008a8e <prvTimerTask+0x1d2>
 8008a8a:	2800      	cmp	r0, #0
 8008a8c:	d082      	beq.n	8008994 <prvTimerTask+0xd8>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008a8e:	1d39      	adds	r1, r7, #4
 8008a90:	6830      	ldr	r0, [r6, #0]
 8008a92:	f7fe fa3f 	bl	8006f14 <vListInsert>
	return xProcessTimerNow;
 8008a96:	e745      	b.n	8008924 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008a98:	6830      	ldr	r0, [r6, #0]
 8008a9a:	f7fe fa3b 	bl	8006f14 <vListInsert>
 8008a9e:	e741      	b.n	8008924 <prvTimerTask+0x68>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008aa0:	f8db 2018 	ldr.w	r2, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008aa4:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008aa8:	18b8      	adds	r0, r7, r2
	if( xNextExpiryTime <= xTimeNow )
 8008aaa:	4582      	cmp	sl, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008aac:	f8cb 0004 	str.w	r0, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
 8008ab0:	d31a      	bcc.n	8008ae8 <prvTimerTask+0x22c>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ab2:	ebaa 0307 	sub.w	r3, sl, r7
 8008ab6:	429a      	cmp	r2, r3
 8008ab8:	d821      	bhi.n	8008afe <prvTimerTask+0x242>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008aba:	2300      	movs	r3, #0
 8008abc:	463a      	mov	r2, r7
 8008abe:	4658      	mov	r0, fp
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	9300      	str	r3, [sp, #0]
 8008ac4:	f7ff fe86 	bl	80087d4 <xTimerGenericCommand>
			configASSERT( xResult );
 8008ac8:	2800      	cmp	r0, #0
 8008aca:	f47f af27 	bne.w	800891c <prvTimerTask+0x60>
 8008ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ad2:	f383 8811 	msr	BASEPRI, r3
 8008ad6:	f3bf 8f6f 	isb	sy
 8008ada:	f3bf 8f4f 	dsb	sy
 8008ade:	e7fe      	b.n	8008ade <prvTimerTask+0x222>
							vPortFree( pxTimer );
 8008ae0:	4638      	mov	r0, r7
 8008ae2:	f000 fa99 	bl	8009018 <vPortFree>
 8008ae6:	e71d      	b.n	8008924 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008ae8:	4641      	mov	r1, r8
 8008aea:	6830      	ldr	r0, [r6, #0]
 8008aec:	f7fe fa12 	bl	8006f14 <vListInsert>
	return xProcessTimerNow;
 8008af0:	e714      	b.n	800891c <prvTimerTask+0x60>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008af2:	4b0d      	ldr	r3, [pc, #52]	@ (8008b28 <prvTimerTask+0x26c>)
 8008af4:	1d39      	adds	r1, r7, #4
 8008af6:	6818      	ldr	r0, [r3, #0]
 8008af8:	f7fe fa0c 	bl	8006f14 <vListInsert>
	return xProcessTimerNow;
 8008afc:	e712      	b.n	8008924 <prvTimerTask+0x68>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008afe:	4b0a      	ldr	r3, [pc, #40]	@ (8008b28 <prvTimerTask+0x26c>)
 8008b00:	4641      	mov	r1, r8
 8008b02:	6818      	ldr	r0, [r3, #0]
 8008b04:	f7fe fa06 	bl	8006f14 <vListInsert>
	return xProcessTimerNow;
 8008b08:	e708      	b.n	800891c <prvTimerTask+0x60>
 8008b0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b0e:	f383 8811 	msr	BASEPRI, r3
 8008b12:	f3bf 8f6f 	isb	sy
 8008b16:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008b1a:	e7fe      	b.n	8008b1a <prvTimerTask+0x25e>
 8008b1c:	240010e4 	.word	0x240010e4
 8008b20:	240010d4 	.word	0x240010d4
 8008b24:	240010dc 	.word	0x240010dc
 8008b28:	240010e0 	.word	0x240010e0

08008b2c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008b2c:	4808      	ldr	r0, [pc, #32]	@ (8008b50 <prvPortStartFirstTask+0x24>)
 8008b2e:	6800      	ldr	r0, [r0, #0]
 8008b30:	6800      	ldr	r0, [r0, #0]
 8008b32:	f380 8808 	msr	MSP, r0
 8008b36:	f04f 0000 	mov.w	r0, #0
 8008b3a:	f380 8814 	msr	CONTROL, r0
 8008b3e:	b662      	cpsie	i
 8008b40:	b661      	cpsie	f
 8008b42:	f3bf 8f4f 	dsb	sy
 8008b46:	f3bf 8f6f 	isb	sy
 8008b4a:	df00      	svc	0
 8008b4c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008b4e:	0000      	.short	0x0000
 8008b50:	e000ed08 	.word	0xe000ed08

08008b54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008b54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008b64 <vPortEnableVFP+0x10>
 8008b58:	6801      	ldr	r1, [r0, #0]
 8008b5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008b5e:	6001      	str	r1, [r0, #0]
 8008b60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008b62:	0000      	.short	0x0000
 8008b64:	e000ed88 	.word	0xe000ed88

08008b68 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 8008b68:	4b0e      	ldr	r3, [pc, #56]	@ (8008ba4 <prvTaskExitError+0x3c>)
{
 8008b6a:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8008b6c:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 8008b6e:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0;
 8008b70:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8008b72:	3301      	adds	r3, #1
 8008b74:	d008      	beq.n	8008b88 <prvTaskExitError+0x20>
 8008b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b7a:	f383 8811 	msr	BASEPRI, r3
 8008b7e:	f3bf 8f6f 	isb	sy
 8008b82:	f3bf 8f4f 	dsb	sy
 8008b86:	e7fe      	b.n	8008b86 <prvTaskExitError+0x1e>
 8008b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b8c:	f383 8811 	msr	BASEPRI, r3
 8008b90:	f3bf 8f6f 	isb	sy
 8008b94:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8008b98:	9b01      	ldr	r3, [sp, #4]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d0fc      	beq.n	8008b98 <prvTaskExitError+0x30>
}
 8008b9e:	b002      	add	sp, #8
 8008ba0:	4770      	bx	lr
 8008ba2:	bf00      	nop
 8008ba4:	24000024 	.word	0x24000024

08008ba8 <pxPortInitialiseStack>:
{
 8008ba8:	4603      	mov	r3, r0
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008baa:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008bae:	4809      	ldr	r0, [pc, #36]	@ (8008bd4 <pxPortInitialiseStack+0x2c>)
{
 8008bb0:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008bb2:	f04f 7480 	mov.w	r4, #16777216	@ 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008bb6:	f843 0c0c 	str.w	r0, [r3, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008bba:	f843 2c20 	str.w	r2, [r3, #-32]
}
 8008bbe:	f1a3 0044 	sub.w	r0, r3, #68	@ 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008bc2:	e943 1402 	strd	r1, r4, [r3, #-8]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008bc6:	f06f 0102 	mvn.w	r1, #2
}
 8008bca:	f85d 4b04 	ldr.w	r4, [sp], #4
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008bce:	f843 1c24 	str.w	r1, [r3, #-36]
}
 8008bd2:	4770      	bx	lr
 8008bd4:	08008b69 	.word	0x08008b69
	...

08008be0 <SVC_Handler>:
	__asm volatile (
 8008be0:	4b07      	ldr	r3, [pc, #28]	@ (8008c00 <pxCurrentTCBConst2>)
 8008be2:	6819      	ldr	r1, [r3, #0]
 8008be4:	6808      	ldr	r0, [r1, #0]
 8008be6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bea:	f380 8809 	msr	PSP, r0
 8008bee:	f3bf 8f6f 	isb	sy
 8008bf2:	f04f 0000 	mov.w	r0, #0
 8008bf6:	f380 8811 	msr	BASEPRI, r0
 8008bfa:	4770      	bx	lr
 8008bfc:	f3af 8000 	nop.w

08008c00 <pxCurrentTCBConst2>:
 8008c00:	24000fe0 	.word	0x24000fe0

08008c04 <vPortEnterCritical>:
 8008c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c08:	f383 8811 	msr	BASEPRI, r3
 8008c0c:	f3bf 8f6f 	isb	sy
 8008c10:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8008c14:	4a0b      	ldr	r2, [pc, #44]	@ (8008c44 <vPortEnterCritical+0x40>)
 8008c16:	6813      	ldr	r3, [r2, #0]
 8008c18:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8008c1a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8008c1c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8008c1e:	d000      	beq.n	8008c22 <vPortEnterCritical+0x1e>
}
 8008c20:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008c22:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008c26:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 8008c2a:	b2db      	uxtb	r3, r3
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d0f7      	beq.n	8008c20 <vPortEnterCritical+0x1c>
 8008c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c34:	f383 8811 	msr	BASEPRI, r3
 8008c38:	f3bf 8f6f 	isb	sy
 8008c3c:	f3bf 8f4f 	dsb	sy
 8008c40:	e7fe      	b.n	8008c40 <vPortEnterCritical+0x3c>
 8008c42:	bf00      	nop
 8008c44:	24000024 	.word	0x24000024

08008c48 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8008c48:	4a08      	ldr	r2, [pc, #32]	@ (8008c6c <vPortExitCritical+0x24>)
 8008c4a:	6813      	ldr	r3, [r2, #0]
 8008c4c:	b943      	cbnz	r3, 8008c60 <vPortExitCritical+0x18>
 8008c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c52:	f383 8811 	msr	BASEPRI, r3
 8008c56:	f3bf 8f6f 	isb	sy
 8008c5a:	f3bf 8f4f 	dsb	sy
 8008c5e:	e7fe      	b.n	8008c5e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8008c60:	3b01      	subs	r3, #1
 8008c62:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008c64:	b90b      	cbnz	r3, 8008c6a <vPortExitCritical+0x22>
	__asm volatile
 8008c66:	f383 8811 	msr	BASEPRI, r3
}
 8008c6a:	4770      	bx	lr
 8008c6c:	24000024 	.word	0x24000024

08008c70 <PendSV_Handler>:
	__asm volatile
 8008c70:	f3ef 8009 	mrs	r0, PSP
 8008c74:	f3bf 8f6f 	isb	sy
 8008c78:	4b15      	ldr	r3, [pc, #84]	@ (8008cd0 <pxCurrentTCBConst>)
 8008c7a:	681a      	ldr	r2, [r3, #0]
 8008c7c:	f01e 0f10 	tst.w	lr, #16
 8008c80:	bf08      	it	eq
 8008c82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008c86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c8a:	6010      	str	r0, [r2, #0]
 8008c8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008c90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008c94:	f380 8811 	msr	BASEPRI, r0
 8008c98:	f3bf 8f4f 	dsb	sy
 8008c9c:	f3bf 8f6f 	isb	sy
 8008ca0:	f7ff fb1c 	bl	80082dc <vTaskSwitchContext>
 8008ca4:	f04f 0000 	mov.w	r0, #0
 8008ca8:	f380 8811 	msr	BASEPRI, r0
 8008cac:	bc09      	pop	{r0, r3}
 8008cae:	6819      	ldr	r1, [r3, #0]
 8008cb0:	6808      	ldr	r0, [r1, #0]
 8008cb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cb6:	f01e 0f10 	tst.w	lr, #16
 8008cba:	bf08      	it	eq
 8008cbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008cc0:	f380 8809 	msr	PSP, r0
 8008cc4:	f3bf 8f6f 	isb	sy
 8008cc8:	4770      	bx	lr
 8008cca:	bf00      	nop
 8008ccc:	f3af 8000 	nop.w

08008cd0 <pxCurrentTCBConst>:
 8008cd0:	24000fe0 	.word	0x24000fe0

08008cd4 <xPortSysTickHandler>:
{
 8008cd4:	b508      	push	{r3, lr}
	__asm volatile
 8008cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cda:	f383 8811 	msr	BASEPRI, r3
 8008cde:	f3bf 8f6f 	isb	sy
 8008ce2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8008ce6:	f7ff f97b 	bl	8007fe0 <xTaskIncrementTick>
 8008cea:	b128      	cbz	r0, 8008cf8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008cec:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008cf0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008cf4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	f383 8811 	msr	BASEPRI, r3
}
 8008cfe:	bd08      	pop	{r3, pc}

08008d00 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008d00:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8008d04:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008d06:	4806      	ldr	r0, [pc, #24]	@ (8008d20 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008d08:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008d0a:	4906      	ldr	r1, [pc, #24]	@ (8008d24 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008d0c:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008d0e:	6803      	ldr	r3, [r0, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008d10:	2007      	movs	r0, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008d12:	fba1 1303 	umull	r1, r3, r1, r3
 8008d16:	099b      	lsrs	r3, r3, #6
 8008d18:	3b01      	subs	r3, #1
 8008d1a:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008d1c:	6110      	str	r0, [r2, #16]
}
 8008d1e:	4770      	bx	lr
 8008d20:	24000004 	.word	0x24000004
 8008d24:	10624dd3 	.word	0x10624dd3

08008d28 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008d28:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008d2c:	4a3d      	ldr	r2, [pc, #244]	@ (8008e24 <xPortStartScheduler+0xfc>)
 8008d2e:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 8008d32:	4291      	cmp	r1, r2
 8008d34:	d041      	beq.n	8008dba <xPortStartScheduler+0x92>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008d36:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8008d3a:	4b3b      	ldr	r3, [pc, #236]	@ (8008e28 <xPortStartScheduler+0x100>)
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	d033      	beq.n	8008da8 <xPortStartScheduler+0x80>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008d40:	4b3a      	ldr	r3, [pc, #232]	@ (8008e2c <xPortStartScheduler+0x104>)
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008d42:	f04f 0cff 	mov.w	ip, #255	@ 0xff
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008d46:	483a      	ldr	r0, [pc, #232]	@ (8008e30 <xPortStartScheduler+0x108>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008d48:	493a      	ldr	r1, [pc, #232]	@ (8008e34 <xPortStartScheduler+0x10c>)
{
 8008d4a:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008d4c:	781a      	ldrb	r2, [r3, #0]
{
 8008d4e:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008d50:	b2d2      	uxtb	r2, r2
 8008d52:	9201      	str	r2, [sp, #4]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008d54:	2207      	movs	r2, #7
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008d56:	f883 c000 	strb.w	ip, [r3]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008d5a:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008d5c:	6002      	str	r2, [r0, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008d5e:	b2db      	uxtb	r3, r3
 8008d60:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008d64:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d68:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008d6c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d70:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008d72:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d74:	d50f      	bpl.n	8008d96 <xPortStartScheduler+0x6e>
 8008d76:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008d78:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008d7c:	4611      	mov	r1, r2
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d7e:	3a01      	subs	r2, #1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008d80:	005b      	lsls	r3, r3, #1
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d88:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008d8c:	061b      	lsls	r3, r3, #24
 8008d8e:	d4f3      	bmi.n	8008d78 <xPortStartScheduler+0x50>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008d90:	2903      	cmp	r1, #3
 8008d92:	d01b      	beq.n	8008dcc <xPortStartScheduler+0xa4>
 8008d94:	6001      	str	r1, [r0, #0]
	__asm volatile
 8008d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d9a:	f383 8811 	msr	BASEPRI, r3
 8008d9e:	f3bf 8f6f 	isb	sy
 8008da2:	f3bf 8f4f 	dsb	sy
 8008da6:	e7fe      	b.n	8008da6 <xPortStartScheduler+0x7e>
 8008da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dac:	f383 8811 	msr	BASEPRI, r3
 8008db0:	f3bf 8f6f 	isb	sy
 8008db4:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008db8:	e7fe      	b.n	8008db8 <xPortStartScheduler+0x90>
 8008dba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dbe:	f383 8811 	msr	BASEPRI, r3
 8008dc2:	f3bf 8f6f 	isb	sy
 8008dc6:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008dca:	e7fe      	b.n	8008dca <xPortStartScheduler+0xa2>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008dcc:	9b01      	ldr	r3, [sp, #4]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008dce:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008dd2:	4a16      	ldr	r2, [pc, #88]	@ (8008e2c <xPortStartScheduler+0x104>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008dd4:	f44f 7140 	mov.w	r1, #768	@ 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008dd8:	b2db      	uxtb	r3, r3
	uxCriticalNesting = 0;
 8008dda:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008ddc:	6001      	str	r1, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008dde:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008de0:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8008de4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008de8:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008dec:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8008df0:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008df4:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 8008df8:	f7ff ff82 	bl	8008d00 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8008dfc:	4b0e      	ldr	r3, [pc, #56]	@ (8008e38 <xPortStartScheduler+0x110>)
 8008dfe:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8008e00:	f7ff fea8 	bl	8008b54 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008e04:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8008e08:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008e0c:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 8008e10:	f7ff fe8c 	bl	8008b2c <prvPortStartFirstTask>
	vTaskSwitchContext();
 8008e14:	f7ff fa62 	bl	80082dc <vTaskSwitchContext>
}
 8008e18:	4628      	mov	r0, r5
	prvTaskExitError();
 8008e1a:	f7ff fea5 	bl	8008b68 <prvTaskExitError>
}
 8008e1e:	b003      	add	sp, #12
 8008e20:	bd30      	pop	{r4, r5, pc}
 8008e22:	bf00      	nop
 8008e24:	410fc271 	.word	0x410fc271
 8008e28:	410fc270 	.word	0x410fc270
 8008e2c:	e000e400 	.word	0xe000e400
 8008e30:	24001110 	.word	0x24001110
 8008e34:	24001114 	.word	0x24001114
 8008e38:	24000024 	.word	0x24000024

08008e3c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008e3c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008e40:	2b0f      	cmp	r3, #15
 8008e42:	d90e      	bls.n	8008e62 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008e44:	4911      	ldr	r1, [pc, #68]	@ (8008e8c <vPortValidateInterruptPriority+0x50>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008e46:	4a12      	ldr	r2, [pc, #72]	@ (8008e90 <vPortValidateInterruptPriority+0x54>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008e48:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008e4a:	7812      	ldrb	r2, [r2, #0]
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d908      	bls.n	8008e62 <vPortValidateInterruptPriority+0x26>
 8008e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e54:	f383 8811 	msr	BASEPRI, r3
 8008e58:	f3bf 8f6f 	isb	sy
 8008e5c:	f3bf 8f4f 	dsb	sy
 8008e60:	e7fe      	b.n	8008e60 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008e62:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008e66:	4a0b      	ldr	r2, [pc, #44]	@ (8008e94 <vPortValidateInterruptPriority+0x58>)
 8008e68:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8008e6c:	6812      	ldr	r2, [r2, #0]
 8008e6e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d908      	bls.n	8008e88 <vPortValidateInterruptPriority+0x4c>
 8008e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e7a:	f383 8811 	msr	BASEPRI, r3
 8008e7e:	f3bf 8f6f 	isb	sy
 8008e82:	f3bf 8f4f 	dsb	sy
 8008e86:	e7fe      	b.n	8008e86 <vPortValidateInterruptPriority+0x4a>
	}
 8008e88:	4770      	bx	lr
 8008e8a:	bf00      	nop
 8008e8c:	e000e3f0 	.word	0xe000e3f0
 8008e90:	24001114 	.word	0x24001114
 8008e94:	24001110 	.word	0x24001110

08008e98 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008e98:	4b12      	ldr	r3, [pc, #72]	@ (8008ee4 <prvInsertBlockIntoFreeList+0x4c>)
{
 8008e9a:	b430      	push	{r4, r5}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4283      	cmp	r3, r0
 8008ea2:	d3fb      	bcc.n	8008e9c <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008ea4:	6854      	ldr	r4, [r2, #4]
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008ea6:	6841      	ldr	r1, [r0, #4]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008ea8:	eb02 0c04 	add.w	ip, r2, r4
 8008eac:	4560      	cmp	r0, ip
 8008eae:	d008      	beq.n	8008ec2 <prvInsertBlockIntoFreeList+0x2a>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008eb0:	1844      	adds	r4, r0, r1
 8008eb2:	42a3      	cmp	r3, r4
 8008eb4:	d00b      	beq.n	8008ece <prvInsertBlockIntoFreeList+0x36>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008eb6:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008eb8:	4282      	cmp	r2, r0
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008eba:	bf18      	it	ne
 8008ebc:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ebe:	bc30      	pop	{r4, r5}
 8008ec0:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008ec2:	4421      	add	r1, r4
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008ec4:	1850      	adds	r0, r2, r1
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008ec6:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008ec8:	4283      	cmp	r3, r0
 8008eca:	d1f8      	bne.n	8008ebe <prvInsertBlockIntoFreeList+0x26>
 8008ecc:	4610      	mov	r0, r2
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008ece:	4c06      	ldr	r4, [pc, #24]	@ (8008ee8 <prvInsertBlockIntoFreeList+0x50>)
 8008ed0:	6824      	ldr	r4, [r4, #0]
 8008ed2:	42a3      	cmp	r3, r4
 8008ed4:	d003      	beq.n	8008ede <prvInsertBlockIntoFreeList+0x46>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008ed6:	e9d3 4500 	ldrd	r4, r5, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008eda:	4429      	add	r1, r5
 8008edc:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008ede:	6004      	str	r4, [r0, #0]
 8008ee0:	e7ea      	b.n	8008eb8 <prvInsertBlockIntoFreeList+0x20>
 8008ee2:	bf00      	nop
 8008ee4:	24001130 	.word	0x24001130
 8008ee8:	2400112c 	.word	0x2400112c

08008eec <pvPortMalloc>:
{
 8008eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		if( pxEnd == NULL )
 8008ef0:	4d41      	ldr	r5, [pc, #260]	@ (8008ff8 <pvPortMalloc+0x10c>)
{
 8008ef2:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8008ef4:	f7ff f85e 	bl	8007fb4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8008ef8:	682b      	ldr	r3, [r5, #0]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d05c      	beq.n	8008fb8 <pvPortMalloc+0xcc>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008efe:	4b3f      	ldr	r3, [pc, #252]	@ (8008ffc <pvPortMalloc+0x110>)
 8008f00:	681e      	ldr	r6, [r3, #0]
 8008f02:	4234      	tst	r4, r6
 8008f04:	d12e      	bne.n	8008f64 <pvPortMalloc+0x78>
			if( xWantedSize > 0 )
 8008f06:	b36c      	cbz	r4, 8008f64 <pvPortMalloc+0x78>
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008f08:	0760      	lsls	r0, r4, #29
				xWantedSize += xHeapStructSize;
 8008f0a:	f104 0108 	add.w	r1, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008f0e:	d002      	beq.n	8008f16 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008f10:	f021 0107 	bic.w	r1, r1, #7
 8008f14:	3108      	adds	r1, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008f16:	b329      	cbz	r1, 8008f64 <pvPortMalloc+0x78>
 8008f18:	f8df 80f8 	ldr.w	r8, [pc, #248]	@ 8009014 <pvPortMalloc+0x128>
 8008f1c:	f8d8 7000 	ldr.w	r7, [r8]
 8008f20:	428f      	cmp	r7, r1
 8008f22:	d31f      	bcc.n	8008f64 <pvPortMalloc+0x78>
				pxBlock = xStart.pxNextFreeBlock;
 8008f24:	4836      	ldr	r0, [pc, #216]	@ (8009000 <pvPortMalloc+0x114>)
 8008f26:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008f28:	e003      	b.n	8008f32 <pvPortMalloc+0x46>
 8008f2a:	6823      	ldr	r3, [r4, #0]
 8008f2c:	b123      	cbz	r3, 8008f38 <pvPortMalloc+0x4c>
 8008f2e:	4620      	mov	r0, r4
 8008f30:	461c      	mov	r4, r3
 8008f32:	6862      	ldr	r2, [r4, #4]
 8008f34:	428a      	cmp	r2, r1
 8008f36:	d3f8      	bcc.n	8008f2a <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 8008f38:	682b      	ldr	r3, [r5, #0]
 8008f3a:	42a3      	cmp	r3, r4
 8008f3c:	d012      	beq.n	8008f64 <pvPortMalloc+0x78>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008f3e:	1a53      	subs	r3, r2, r1
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008f40:	6825      	ldr	r5, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008f42:	f8d0 9000 	ldr.w	r9, [r0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008f46:	2b10      	cmp	r3, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008f48:	6005      	str	r5, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008f4a:	d916      	bls.n	8008f7a <pvPortMalloc+0x8e>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008f4c:	1860      	adds	r0, r4, r1
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f4e:	0742      	lsls	r2, r0, #29
 8008f50:	d00e      	beq.n	8008f70 <pvPortMalloc+0x84>
 8008f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f56:	f383 8811 	msr	BASEPRI, r3
 8008f5a:	f3bf 8f6f 	isb	sy
 8008f5e:	f3bf 8f4f 	dsb	sy
 8008f62:	e7fe      	b.n	8008f62 <pvPortMalloc+0x76>
void *pvReturn = NULL;
 8008f64:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 8008f66:	f7ff f979 	bl	800825c <xTaskResumeAll>
}
 8008f6a:	4628      	mov	r0, r5
 8008f6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008f70:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008f72:	6061      	str	r1, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008f74:	f7ff ff90 	bl	8008e98 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008f78:	6862      	ldr	r2, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008f7a:	4b22      	ldr	r3, [pc, #136]	@ (8009004 <pvPortMalloc+0x118>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008f7c:	1abf      	subs	r7, r7, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008f7e:	4332      	orrs	r2, r6
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008f80:	f109 0508 	add.w	r5, r9, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008f84:	6819      	ldr	r1, [r3, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008f86:	f8c8 7000 	str.w	r7, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008f8a:	428f      	cmp	r7, r1
					xNumberOfSuccessfulAllocations++;
 8008f8c:	491e      	ldr	r1, [pc, #120]	@ (8009008 <pvPortMalloc+0x11c>)
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008f8e:	bf38      	it	cc
 8008f90:	601f      	strcc	r7, [r3, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8008f92:	2300      	movs	r3, #0
 8008f94:	e9c4 3200 	strd	r3, r2, [r4]
					xNumberOfSuccessfulAllocations++;
 8008f98:	680b      	ldr	r3, [r1, #0]
 8008f9a:	3301      	adds	r3, #1
 8008f9c:	600b      	str	r3, [r1, #0]
	( void ) xTaskResumeAll();
 8008f9e:	f7ff f95d 	bl	800825c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008fa2:	076b      	lsls	r3, r5, #29
 8008fa4:	d0e1      	beq.n	8008f6a <pvPortMalloc+0x7e>
 8008fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008faa:	f383 8811 	msr	BASEPRI, r3
 8008fae:	f3bf 8f6f 	isb	sy
 8008fb2:	f3bf 8f4f 	dsb	sy
 8008fb6:	e7fe      	b.n	8008fb6 <pvPortMalloc+0xca>
	uxAddress = ( size_t ) ucHeap;
 8008fb8:	4b14      	ldr	r3, [pc, #80]	@ (800900c <pvPortMalloc+0x120>)
	xStart.xBlockSize = ( size_t ) 0;
 8008fba:	2100      	movs	r1, #0
	uxAddress -= xHeapStructSize;
 8008fbc:	4a14      	ldr	r2, [pc, #80]	@ (8009010 <pvPortMalloc+0x124>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008fbe:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008fc2:	075e      	lsls	r6, r3, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008fc4:	4e0e      	ldr	r6, [pc, #56]	@ (8009000 <pvPortMalloc+0x114>)
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008fc6:	f022 0207 	bic.w	r2, r2, #7
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008fca:	bf18      	it	ne
 8008fcc:	3307      	addne	r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8008fce:	6071      	str	r1, [r6, #4]
	pxEnd = ( void * ) uxAddress;
 8008fd0:	602a      	str	r2, [r5, #0]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008fd2:	bf18      	it	ne
 8008fd4:	f023 0307 	bicne.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008fd8:	6033      	str	r3, [r6, #0]
 8008fda:	4618      	mov	r0, r3
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008fdc:	1ad3      	subs	r3, r2, r3
}
 8008fde:	463e      	mov	r6, r7
	pxEnd->pxNextFreeBlock = NULL;
 8008fe0:	e9c2 1100 	strd	r1, r1, [r2]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008fe4:	e9c0 2300 	strd	r2, r3, [r0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008fe8:	4a06      	ldr	r2, [pc, #24]	@ (8009004 <pvPortMalloc+0x118>)
 8008fea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008fec:	4a09      	ldr	r2, [pc, #36]	@ (8009014 <pvPortMalloc+0x128>)
 8008fee:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008ff0:	4b02      	ldr	r3, [pc, #8]	@ (8008ffc <pvPortMalloc+0x110>)
 8008ff2:	601f      	str	r7, [r3, #0]
}
 8008ff4:	e785      	b.n	8008f02 <pvPortMalloc+0x16>
 8008ff6:	bf00      	nop
 8008ff8:	2400112c 	.word	0x2400112c
 8008ffc:	24001118 	.word	0x24001118
 8009000:	24001130 	.word	0x24001130
 8009004:	24001124 	.word	0x24001124
 8009008:	24001120 	.word	0x24001120
 800900c:	24001138 	.word	0x24001138
 8009010:	24004d30 	.word	0x24004d30
 8009014:	24001128 	.word	0x24001128

08009018 <vPortFree>:
	if( pv != NULL )
 8009018:	b1d0      	cbz	r0, 8009050 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800901a:	4a1c      	ldr	r2, [pc, #112]	@ (800908c <vPortFree+0x74>)
 800901c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8009020:	6812      	ldr	r2, [r2, #0]
 8009022:	4213      	tst	r3, r2
 8009024:	d00b      	beq.n	800903e <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009026:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800902a:	b191      	cbz	r1, 8009052 <vPortFree+0x3a>
 800902c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009030:	f383 8811 	msr	BASEPRI, r3
 8009034:	f3bf 8f6f 	isb	sy
 8009038:	f3bf 8f4f 	dsb	sy
 800903c:	e7fe      	b.n	800903c <vPortFree+0x24>
 800903e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009042:	f383 8811 	msr	BASEPRI, r3
 8009046:	f3bf 8f6f 	isb	sy
 800904a:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800904e:	e7fe      	b.n	800904e <vPortFree+0x36>
 8009050:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009052:	ea23 0302 	bic.w	r3, r3, r2
{
 8009056:	b500      	push	{lr}
 8009058:	b083      	sub	sp, #12
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800905a:	f840 3c04 	str.w	r3, [r0, #-4]
 800905e:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 8009060:	f7fe ffa8 	bl	8007fb4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009064:	4a0a      	ldr	r2, [pc, #40]	@ (8009090 <vPortFree+0x78>)
 8009066:	9801      	ldr	r0, [sp, #4]
 8009068:	6811      	ldr	r1, [r2, #0]
 800906a:	f850 3c04 	ldr.w	r3, [r0, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800906e:	3808      	subs	r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009070:	440b      	add	r3, r1
 8009072:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009074:	f7ff ff10 	bl	8008e98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009078:	4a06      	ldr	r2, [pc, #24]	@ (8009094 <vPortFree+0x7c>)
 800907a:	6813      	ldr	r3, [r2, #0]
 800907c:	3301      	adds	r3, #1
 800907e:	6013      	str	r3, [r2, #0]
}
 8009080:	b003      	add	sp, #12
 8009082:	f85d eb04 	ldr.w	lr, [sp], #4
				( void ) xTaskResumeAll();
 8009086:	f7ff b8e9 	b.w	800825c <xTaskResumeAll>
 800908a:	bf00      	nop
 800908c:	24001118 	.word	0x24001118
 8009090:	24001128 	.word	0x24001128
 8009094:	2400111c 	.word	0x2400111c

08009098 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b082      	sub	sp, #8
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();
 800909c:	f7fd fc80 	bl	80069a0 <sys_mark_tcpip_thread>

  LOCK_TCPIP_CORE();
 80090a0:	f7fd fbc6 	bl	8006830 <sys_lock_tcpip_core>
  if (tcpip_init_done != NULL) {
 80090a4:	4b2c      	ldr	r3, [pc, #176]	@ (8009158 <tcpip_thread+0xc0>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	b113      	cbz	r3, 80090b0 <tcpip_thread+0x18>
    tcpip_init_done(tcpip_init_done_arg);
 80090aa:	4a2c      	ldr	r2, [pc, #176]	@ (800915c <tcpip_thread+0xc4>)
 80090ac:	6810      	ldr	r0, [r2, #0]
 80090ae:	4798      	blx	r3
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80090b0:	4d2b      	ldr	r5, [pc, #172]	@ (8009160 <tcpip_thread+0xc8>)
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80090b2:	4f2c      	ldr	r7, [pc, #176]	@ (8009164 <tcpip_thread+0xcc>)
 80090b4:	4e2c      	ldr	r6, [pc, #176]	@ (8009168 <tcpip_thread+0xd0>)
 80090b6:	e00e      	b.n	80090d6 <tcpip_thread+0x3e>
  } else if (sleeptime == 0) {
 80090b8:	b158      	cbz	r0, 80090d2 <tcpip_thread+0x3a>
  UNLOCK_TCPIP_CORE();
 80090ba:	f7fd fc37 	bl	800692c <sys_unlock_tcpip_core>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80090be:	4622      	mov	r2, r4
 80090c0:	a901      	add	r1, sp, #4
 80090c2:	4628      	mov	r0, r5
 80090c4:	f007 fc5e 	bl	8010984 <sys_arch_mbox_fetch>
 80090c8:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 80090ca:	f7fd fbb1 	bl	8006830 <sys_lock_tcpip_core>
  if (res == SYS_ARCH_TIMEOUT) {
 80090ce:	3401      	adds	r4, #1
 80090d0:	d111      	bne.n	80090f6 <tcpip_thread+0x5e>
    sys_check_timeouts();
 80090d2:	f005 fceb 	bl	800eaac <sys_check_timeouts>
  LWIP_ASSERT_CORE_LOCKED();
 80090d6:	f7fd fc33 	bl	8006940 <sys_check_core_locking>
  sleeptime = sys_timeouts_sleeptime();
 80090da:	f005 fd11 	bl	800eb00 <sys_timeouts_sleeptime>
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80090de:	1c43      	adds	r3, r0, #1
  sleeptime = sys_timeouts_sleeptime();
 80090e0:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80090e2:	d1e9      	bne.n	80090b8 <tcpip_thread+0x20>
    UNLOCK_TCPIP_CORE();
 80090e4:	f7fd fc22 	bl	800692c <sys_unlock_tcpip_core>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80090e8:	2200      	movs	r2, #0
 80090ea:	a901      	add	r1, sp, #4
 80090ec:	4628      	mov	r0, r5
 80090ee:	f007 fc49 	bl	8010984 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80090f2:	f7fd fb9d 	bl	8006830 <sys_lock_tcpip_core>
    if (msg == NULL) {
 80090f6:	9c01      	ldr	r4, [sp, #4]
 80090f8:	b164      	cbz	r4, 8009114 <tcpip_thread+0x7c>
  switch (msg->type) {
 80090fa:	7823      	ldrb	r3, [r4, #0]
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d01e      	beq.n	800913e <tcpip_thread+0xa6>
 8009100:	2b02      	cmp	r3, #2
 8009102:	d018      	beq.n	8009136 <tcpip_thread+0x9e>
 8009104:	b16b      	cbz	r3, 8009122 <tcpip_thread+0x8a>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009106:	463b      	mov	r3, r7
 8009108:	22cf      	movs	r2, #207	@ 0xcf
 800910a:	4631      	mov	r1, r6
 800910c:	4817      	ldr	r0, [pc, #92]	@ (800916c <tcpip_thread+0xd4>)
 800910e:	f007 fda5 	bl	8010c5c <iprintf>
      break;
 8009112:	e7e0      	b.n	80090d6 <tcpip_thread+0x3e>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009114:	463b      	mov	r3, r7
 8009116:	2291      	movs	r2, #145	@ 0x91
 8009118:	4631      	mov	r1, r6
 800911a:	4814      	ldr	r0, [pc, #80]	@ (800916c <tcpip_thread+0xd4>)
 800911c:	f007 fd9e 	bl	8010c5c <iprintf>
      continue;
 8009120:	e7d9      	b.n	80090d6 <tcpip_thread+0x3e>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8009122:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8009126:	6860      	ldr	r0, [r4, #4]
 8009128:	4798      	blx	r3
 800912a:	b980      	cbnz	r0, 800914e <tcpip_thread+0xb6>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800912c:	4621      	mov	r1, r4
 800912e:	2009      	movs	r0, #9
 8009130:	f000 fc98 	bl	8009a64 <memp_free>
      break;
 8009134:	e7cf      	b.n	80090d6 <tcpip_thread+0x3e>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009136:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 800913a:	4798      	blx	r3
      break;
 800913c:	e7cb      	b.n	80090d6 <tcpip_thread+0x3e>
      msg->msg.cb.function(msg->msg.cb.ctx);
 800913e:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8009142:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8009144:	4621      	mov	r1, r4
 8009146:	2008      	movs	r0, #8
 8009148:	f000 fc8c 	bl	8009a64 <memp_free>
      break;
 800914c:	e7c3      	b.n	80090d6 <tcpip_thread+0x3e>
        pbuf_free(msg->msg.inp.p);
 800914e:	6860      	ldr	r0, [r4, #4]
 8009150:	f000 ff94 	bl	800a07c <pbuf_free>
 8009154:	e7ea      	b.n	800912c <tcpip_thread+0x94>
 8009156:	bf00      	nop
 8009158:	24004d44 	.word	0x24004d44
 800915c:	24004d40 	.word	0x24004d40
 8009160:	24004d3c 	.word	0x24004d3c
 8009164:	080128a0 	.word	0x080128a0
 8009168:	080128d0 	.word	0x080128d0
 800916c:	08011f14 	.word	0x08011f14

08009170 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8009170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009172:	4607      	mov	r7, r0
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009174:	4811      	ldr	r0, [pc, #68]	@ (80091bc <tcpip_inpkt+0x4c>)
{
 8009176:	460e      	mov	r6, r1
 8009178:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800917a:	f007 fc21 	bl	80109c0 <sys_mbox_valid>
 800917e:	b178      	cbz	r0, 80091a0 <tcpip_inpkt+0x30>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8009180:	2009      	movs	r0, #9
 8009182:	f000 fc29 	bl	80099d8 <memp_malloc>
  if (msg == NULL) {
 8009186:	4604      	mov	r4, r0
 8009188:	b1a8      	cbz	r0, 80091b6 <tcpip_inpkt+0x46>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 800918a:	2300      	movs	r3, #0
  msg->msg.inp.p = p;
 800918c:	6047      	str	r7, [r0, #4]
  msg->msg.inp.netif = inp;
 800918e:	6086      	str	r6, [r0, #8]
  msg->msg.inp.input_fn = input_fn;
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009190:	4601      	mov	r1, r0
  msg->type = TCPIP_MSG_INPKT;
 8009192:	7003      	strb	r3, [r0, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009194:	4809      	ldr	r0, [pc, #36]	@ (80091bc <tcpip_inpkt+0x4c>)
  msg->msg.inp.input_fn = input_fn;
 8009196:	60e5      	str	r5, [r4, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009198:	f007 fbe4 	bl	8010964 <sys_mbox_trypost>
 800919c:	b938      	cbnz	r0, 80091ae <tcpip_inpkt+0x3e>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800919e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80091a0:	4b07      	ldr	r3, [pc, #28]	@ (80091c0 <tcpip_inpkt+0x50>)
 80091a2:	22fc      	movs	r2, #252	@ 0xfc
 80091a4:	4907      	ldr	r1, [pc, #28]	@ (80091c4 <tcpip_inpkt+0x54>)
 80091a6:	4808      	ldr	r0, [pc, #32]	@ (80091c8 <tcpip_inpkt+0x58>)
 80091a8:	f007 fd58 	bl	8010c5c <iprintf>
 80091ac:	e7e8      	b.n	8009180 <tcpip_inpkt+0x10>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80091ae:	4621      	mov	r1, r4
 80091b0:	2009      	movs	r0, #9
 80091b2:	f000 fc57 	bl	8009a64 <memp_free>
    return ERR_MEM;
 80091b6:	f04f 30ff 	mov.w	r0, #4294967295
}
 80091ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091bc:	24004d3c 	.word	0x24004d3c
 80091c0:	080128a0 	.word	0x080128a0
 80091c4:	080128f0 	.word	0x080128f0
 80091c8:	08011f14 	.word	0x08011f14

080091cc <tcpip_input>:
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80091cc:	f891 302d 	ldrb.w	r3, [r1, #45]	@ 0x2d
 80091d0:	f013 0f18 	tst.w	r3, #24
 80091d4:	d002      	beq.n	80091dc <tcpip_input+0x10>
    return tcpip_inpkt(p, inp, ethernet_input);
 80091d6:	4a03      	ldr	r2, [pc, #12]	@ (80091e4 <tcpip_input+0x18>)
 80091d8:	f7ff bfca 	b.w	8009170 <tcpip_inpkt>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 80091dc:	4a02      	ldr	r2, [pc, #8]	@ (80091e8 <tcpip_input+0x1c>)
 80091de:	f7ff bfc7 	b.w	8009170 <tcpip_inpkt>
 80091e2:	bf00      	nop
 80091e4:	0801082d 	.word	0x0801082d
 80091e8:	0800fc61 	.word	0x0800fc61

080091ec <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 80091ec:	b570      	push	{r4, r5, r6, lr}
 80091ee:	4606      	mov	r6, r0
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80091f0:	4811      	ldr	r0, [pc, #68]	@ (8009238 <tcpip_try_callback+0x4c>)
{
 80091f2:	460d      	mov	r5, r1
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80091f4:	f007 fbe4 	bl	80109c0 <sys_mbox_valid>
 80091f8:	b170      	cbz	r0, 8009218 <tcpip_try_callback+0x2c>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80091fa:	2008      	movs	r0, #8
 80091fc:	f000 fbec 	bl	80099d8 <memp_malloc>
  if (msg == NULL) {
 8009200:	4604      	mov	r4, r0
 8009202:	b1a8      	cbz	r0, 8009230 <tcpip_try_callback+0x44>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8009204:	2301      	movs	r3, #1
  msg->msg.cb.function = function;
  msg->msg.cb.ctx = ctx;

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009206:	4601      	mov	r1, r0
  msg->msg.cb.ctx = ctx;
 8009208:	e9c0 6501 	strd	r6, r5, [r0, #4]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800920c:	480a      	ldr	r0, [pc, #40]	@ (8009238 <tcpip_try_callback+0x4c>)
  msg->type = TCPIP_MSG_CALLBACK;
 800920e:	7023      	strb	r3, [r4, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009210:	f007 fba8 	bl	8010964 <sys_mbox_trypost>
 8009214:	b940      	cbnz	r0, 8009228 <tcpip_try_callback+0x3c>
    memp_free(MEMP_TCPIP_MSG_API, msg);
    return ERR_MEM;
  }
  return ERR_OK;
}
 8009216:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009218:	4b08      	ldr	r3, [pc, #32]	@ (800923c <tcpip_try_callback+0x50>)
 800921a:	f240 125d 	movw	r2, #349	@ 0x15d
 800921e:	4908      	ldr	r1, [pc, #32]	@ (8009240 <tcpip_try_callback+0x54>)
 8009220:	4808      	ldr	r0, [pc, #32]	@ (8009244 <tcpip_try_callback+0x58>)
 8009222:	f007 fd1b 	bl	8010c5c <iprintf>
 8009226:	e7e8      	b.n	80091fa <tcpip_try_callback+0xe>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8009228:	4621      	mov	r1, r4
 800922a:	2008      	movs	r0, #8
 800922c:	f000 fc1a 	bl	8009a64 <memp_free>
    return ERR_MEM;
 8009230:	f04f 30ff 	mov.w	r0, #4294967295
}
 8009234:	bd70      	pop	{r4, r5, r6, pc}
 8009236:	bf00      	nop
 8009238:	24004d3c 	.word	0x24004d3c
 800923c:	080128a0 	.word	0x080128a0
 8009240:	080128f0 	.word	0x080128f0
 8009244:	08011f14 	.word	0x08011f14

08009248 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8009248:	b530      	push	{r4, r5, lr}
 800924a:	b083      	sub	sp, #12
 800924c:	4605      	mov	r5, r0
 800924e:	460c      	mov	r4, r1
  lwip_init();
 8009250:	f000 f8b2 	bl	80093b8 <lwip_init>

  tcpip_init_done = initfunc;
 8009254:	4a15      	ldr	r2, [pc, #84]	@ (80092ac <tcpip_init+0x64>)
  tcpip_init_done_arg = arg;
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8009256:	2106      	movs	r1, #6
  tcpip_init_done_arg = arg;
 8009258:	4b15      	ldr	r3, [pc, #84]	@ (80092b0 <tcpip_init+0x68>)
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800925a:	4816      	ldr	r0, [pc, #88]	@ (80092b4 <tcpip_init+0x6c>)
  tcpip_init_done = initfunc;
 800925c:	6015      	str	r5, [r2, #0]
  tcpip_init_done_arg = arg;
 800925e:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8009260:	f007 fb72 	bl	8010948 <sys_mbox_new>
 8009264:	b970      	cbnz	r0, 8009284 <tcpip_init+0x3c>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8009266:	4814      	ldr	r0, [pc, #80]	@ (80092b8 <tcpip_init+0x70>)
 8009268:	f007 fbba 	bl	80109e0 <sys_mutex_new>
 800926c:	b9b0      	cbnz	r0, 800929c <tcpip_init+0x54>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800926e:	2418      	movs	r4, #24
 8009270:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009274:	2200      	movs	r2, #0
 8009276:	4911      	ldr	r1, [pc, #68]	@ (80092bc <tcpip_init+0x74>)
 8009278:	9400      	str	r4, [sp, #0]
 800927a:	4811      	ldr	r0, [pc, #68]	@ (80092c0 <tcpip_init+0x78>)
 800927c:	f007 fbc6 	bl	8010a0c <sys_thread_new>
}
 8009280:	b003      	add	sp, #12
 8009282:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8009284:	4b0f      	ldr	r3, [pc, #60]	@ (80092c4 <tcpip_init+0x7c>)
 8009286:	f240 2261 	movw	r2, #609	@ 0x261
 800928a:	490f      	ldr	r1, [pc, #60]	@ (80092c8 <tcpip_init+0x80>)
 800928c:	480f      	ldr	r0, [pc, #60]	@ (80092cc <tcpip_init+0x84>)
 800928e:	f007 fce5 	bl	8010c5c <iprintf>
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8009292:	4809      	ldr	r0, [pc, #36]	@ (80092b8 <tcpip_init+0x70>)
 8009294:	f007 fba4 	bl	80109e0 <sys_mutex_new>
 8009298:	2800      	cmp	r0, #0
 800929a:	d0e8      	beq.n	800926e <tcpip_init+0x26>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800929c:	4b09      	ldr	r3, [pc, #36]	@ (80092c4 <tcpip_init+0x7c>)
 800929e:	f240 2265 	movw	r2, #613	@ 0x265
 80092a2:	490b      	ldr	r1, [pc, #44]	@ (80092d0 <tcpip_init+0x88>)
 80092a4:	4809      	ldr	r0, [pc, #36]	@ (80092cc <tcpip_init+0x84>)
 80092a6:	f007 fcd9 	bl	8010c5c <iprintf>
 80092aa:	e7e0      	b.n	800926e <tcpip_init+0x26>
 80092ac:	24004d44 	.word	0x24004d44
 80092b0:	24004d40 	.word	0x24004d40
 80092b4:	24004d3c 	.word	0x24004d3c
 80092b8:	24004d38 	.word	0x24004d38
 80092bc:	08009099 	.word	0x08009099
 80092c0:	08012948 	.word	0x08012948
 80092c4:	080128a0 	.word	0x080128a0
 80092c8:	08012900 	.word	0x08012900
 80092cc:	08011f14 	.word	0x08011f14
 80092d0:	08012924 	.word	0x08012924

080092d4 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 80092d4:	ba40      	rev16	r0, r0
}
 80092d6:	b280      	uxth	r0, r0
 80092d8:	4770      	bx	lr
 80092da:	bf00      	nop

080092dc <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
}
 80092dc:	ba00      	rev	r0, r0
 80092de:	4770      	bx	lr

080092e0 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 80092e0:	b530      	push	{r4, r5, lr}
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 80092e2:	f04f 0e00 	mov.w	lr, #0
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);
 80092e6:	f000 0501 	and.w	r5, r0, #1

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 80092ea:	4571      	cmp	r1, lr
 80092ec:	dd05      	ble.n	80092fa <lwip_standard_chksum+0x1a>
 80092ee:	b125      	cbz	r5, 80092fa <lwip_standard_chksum+0x1a>
    ((u8_t *)&t)[1] = *pb++;
 80092f0:	f810 3b01 	ldrb.w	r3, [r0], #1
    len--;
 80092f4:	3901      	subs	r1, #1
    ((u8_t *)&t)[1] = *pb++;
 80092f6:	f363 2e1f 	bfi	lr, r3, #8, #24
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 80092fa:	2901      	cmp	r1, #1
 80092fc:	dd27      	ble.n	800934e <lwip_standard_chksum+0x6e>
 80092fe:	3902      	subs	r1, #2
  u32_t sum = 0;
 8009300:	2300      	movs	r3, #0
 8009302:	084c      	lsrs	r4, r1, #1
 8009304:	f104 0c01 	add.w	ip, r4, #1
 8009308:	eb00 0c4c 	add.w	ip, r0, ip, lsl #1
    sum += *ps++;
 800930c:	f830 2b02 	ldrh.w	r2, [r0], #2
  while (len > 1) {
 8009310:	4584      	cmp	ip, r0
    sum += *ps++;
 8009312:	4413      	add	r3, r2
  while (len > 1) {
 8009314:	d1fa      	bne.n	800930c <lwip_standard_chksum+0x2c>
    len -= 2;
 8009316:	ebc4 74c4 	rsb	r4, r4, r4, lsl #31
 800931a:	eb01 0144 	add.w	r1, r1, r4, lsl #1
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800931e:	2901      	cmp	r1, #1
 8009320:	d105      	bne.n	800932e <lwip_standard_chksum+0x4e>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8009322:	f89c 2000 	ldrb.w	r2, [ip]
 8009326:	f362 0e07 	bfi	lr, r2, #0, #8
 800932a:	fa1f fe8e 	uxth.w	lr, lr
  }

  /* Add end bytes */
  sum += t;
 800932e:	449e      	add	lr, r3

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8009330:	fa1f f38e 	uxth.w	r3, lr
 8009334:	eb03 431e 	add.w	r3, r3, lr, lsr #16
  sum = FOLD_U32T(sum);
 8009338:	b298      	uxth	r0, r3
 800933a:	eb00 4013 	add.w	r0, r0, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 800933e:	b125      	cbz	r5, 800934a <lwip_standard_chksum+0x6a>
    sum = SWAP_BYTES_IN_WORD(sum);
 8009340:	0203      	lsls	r3, r0, #8
 8009342:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8009346:	b29b      	uxth	r3, r3
 8009348:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 800934a:	b280      	uxth	r0, r0
 800934c:	bd30      	pop	{r4, r5, pc}
  ps = (const u16_t *)(const void *)pb;
 800934e:	4684      	mov	ip, r0
  u32_t sum = 0;
 8009350:	2300      	movs	r3, #0
 8009352:	e7e4      	b.n	800931e <lwip_standard_chksum+0x3e>

08009354 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8009354:	b508      	push	{r3, lr}
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8009356:	f7ff ffc3 	bl	80092e0 <lwip_standard_chksum>
 800935a:	43c0      	mvns	r0, r0
}
 800935c:	b280      	uxth	r0, r0
 800935e:	bd08      	pop	{r3, pc}

08009360 <inet_chksum_pbuf>:
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;

  acc = 0;
  for (q = p; q != NULL; q = q->next) {
 8009360:	b338      	cbz	r0, 80093b2 <inet_chksum_pbuf+0x52>
{
 8009362:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int swapped = 0;
 8009364:	2700      	movs	r7, #0
 8009366:	4605      	mov	r5, r0
  acc = 0;
 8009368:	463c      	mov	r4, r7
    acc += LWIP_CHKSUM(q->payload, q->len);
 800936a:	896e      	ldrh	r6, [r5, #10]
 800936c:	6868      	ldr	r0, [r5, #4]
 800936e:	4631      	mov	r1, r6
 8009370:	f7ff ffb6 	bl	80092e0 <lwip_standard_chksum>
 8009374:	4404      	add	r4, r0
    acc = FOLD_U32T(acc);
    if (q->len % 2 != 0) {
 8009376:	f016 0f01 	tst.w	r6, #1
    acc = FOLD_U32T(acc);
 800937a:	b2a3      	uxth	r3, r4
 800937c:	eb03 4414 	add.w	r4, r3, r4, lsr #16
      swapped = !swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
 8009380:	ea4f 2304 	mov.w	r3, r4, lsl #8
 8009384:	f3c4 2207 	ubfx	r2, r4, #8, #8
    if (q->len % 2 != 0) {
 8009388:	d004      	beq.n	8009394 <inet_chksum_pbuf+0x34>
      acc = SWAP_BYTES_IN_WORD(acc);
 800938a:	b29b      	uxth	r3, r3
 800938c:	f087 0701 	eor.w	r7, r7, #1
 8009390:	ea43 0402 	orr.w	r4, r3, r2
  for (q = p; q != NULL; q = q->next) {
 8009394:	682d      	ldr	r5, [r5, #0]
 8009396:	2d00      	cmp	r5, #0
 8009398:	d1e7      	bne.n	800936a <inet_chksum_pbuf+0xa>
    }
  }

  if (swapped) {
 800939a:	b13f      	cbz	r7, 80093ac <inet_chksum_pbuf+0x4c>
    acc = SWAP_BYTES_IN_WORD(acc);
 800939c:	0220      	lsls	r0, r4, #8
 800939e:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80093a2:	b280      	uxth	r0, r0
 80093a4:	4320      	orrs	r0, r4
  }
  return (u16_t)~(acc & 0xffffUL);
 80093a6:	43c0      	mvns	r0, r0
 80093a8:	b280      	uxth	r0, r0
}
 80093aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return (u16_t)~(acc & 0xffffUL);
 80093ac:	43e4      	mvns	r4, r4
 80093ae:	b2a0      	uxth	r0, r4
}
 80093b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  for (q = p; q != NULL; q = q->next) {
 80093b2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
}
 80093b6:	4770      	bx	lr

080093b8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80093b8:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80093ba:	f007 fb07 	bl	80109cc <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80093be:	f000 f80d 	bl	80093dc <mem_init>
  memp_init();
 80093c2:	f000 fac7 	bl	8009954 <memp_init>
  pbuf_init();
  netif_init();
 80093c6:	f000 fba1 	bl	8009b0c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80093ca:	f005 fbad 	bl	800eb28 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80093ce:	f001 fa11 	bl	800a7f4 <tcp_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 80093d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 80093d6:	f005 bb4b 	b.w	800ea70 <sys_timeouts_init>
 80093da:	bf00      	nop

080093dc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80093dc:	b510      	push	{r4, lr}

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80093de:	4b11      	ldr	r3, [pc, #68]	@ (8009424 <mem_init+0x48>)
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
  mem->prev = 0;
 80093e0:	2200      	movs	r2, #0
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80093e2:	4c11      	ldr	r4, [pc, #68]	@ (8009428 <mem_init+0x4c>)
  mem->next = MEM_SIZE_ALIGNED;
 80093e4:	4911      	ldr	r1, [pc, #68]	@ (800942c <mem_init+0x50>)
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80093e6:	6023      	str	r3, [r4, #0]
  mem->used = 0;
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80093e8:	4811      	ldr	r0, [pc, #68]	@ (8009430 <mem_init+0x54>)
 80093ea:	4c12      	ldr	r4, [pc, #72]	@ (8009434 <mem_init+0x58>)
  mem->used = 0;
 80093ec:	721a      	strb	r2, [r3, #8]
  mem->prev = 0;
 80093ee:	e9c3 1200 	strd	r1, r2, [r3]
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80093f2:	6004      	str	r4, [r0, #0]
  ram_end->used = 1;
 80093f4:	2001      	movs	r0, #1
 80093f6:	4a10      	ldr	r2, [pc, #64]	@ (8009438 <mem_init+0x5c>)
  ram_end->next = MEM_SIZE_ALIGNED;
  ram_end->prev = MEM_SIZE_ALIGNED;
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80093f8:	4c10      	ldr	r4, [pc, #64]	@ (800943c <mem_init+0x60>)
  ram_end->used = 1;
 80093fa:	f882 00f0 	strb.w	r0, [r2, #240]	@ 0xf0
  ram_end->next = MEM_SIZE_ALIGNED;
 80093fe:	f8c2 10e8 	str.w	r1, [r2, #232]	@ 0xe8
  ram_end->prev = MEM_SIZE_ALIGNED;
 8009402:	f8c2 10ec 	str.w	r1, [r2, #236]	@ 0xec

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8009406:	480e      	ldr	r0, [pc, #56]	@ (8009440 <mem_init+0x64>)
  lfree = (struct mem *)(void *)ram;
 8009408:	6023      	str	r3, [r4, #0]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800940a:	f007 fae9 	bl	80109e0 <sys_mutex_new>
 800940e:	b900      	cbnz	r0, 8009412 <mem_init+0x36>
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8009410:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8009412:	4b0c      	ldr	r3, [pc, #48]	@ (8009444 <mem_init+0x68>)
 8009414:	f240 221f 	movw	r2, #543	@ 0x21f
 8009418:	490b      	ldr	r1, [pc, #44]	@ (8009448 <mem_init+0x6c>)
 800941a:	480c      	ldr	r0, [pc, #48]	@ (800944c <mem_init+0x70>)
}
 800941c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8009420:	f007 bc1c 	b.w	8010c5c <iprintf>
 8009424:	30020000 	.word	0x30020000
 8009428:	24004d6c 	.word	0x24004d6c
 800942c:	0001ffe8 	.word	0x0001ffe8
 8009430:	24004d68 	.word	0x24004d68
 8009434:	3003ffe8 	.word	0x3003ffe8
 8009438:	3003ff00 	.word	0x3003ff00
 800943c:	24004d60 	.word	0x24004d60
 8009440:	24004d64 	.word	0x24004d64
 8009444:	08012958 	.word	0x08012958
 8009448:	08012988 	.word	0x08012988
 800944c:	08011f14 	.word	0x08011f14

08009450 <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8009450:	2800      	cmp	r0, #0
 8009452:	f000 8095 	beq.w	8009580 <mem_free+0x130>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8009456:	0783      	lsls	r3, r0, #30
{
 8009458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800945c:	4604      	mov	r4, r0
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800945e:	f040 808a 	bne.w	8009576 <mem_free+0x126>

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8009462:	4e5f      	ldr	r6, [pc, #380]	@ (80095e0 <mem_free+0x190>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009464:	f1a0 050c 	sub.w	r5, r0, #12
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8009468:	6833      	ldr	r3, [r6, #0]
 800946a:	42ab      	cmp	r3, r5
 800946c:	d805      	bhi.n	800947a <mem_free+0x2a>
 800946e:	4f5d      	ldr	r7, [pc, #372]	@ (80095e4 <mem_free+0x194>)
 8009470:	f100 030c 	add.w	r3, r0, #12
 8009474:	683a      	ldr	r2, [r7, #0]
 8009476:	429a      	cmp	r2, r3
 8009478:	d20c      	bcs.n	8009494 <mem_free+0x44>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800947a:	4b5b      	ldr	r3, [pc, #364]	@ (80095e8 <mem_free+0x198>)
 800947c:	f240 227f 	movw	r2, #639	@ 0x27f
 8009480:	495a      	ldr	r1, [pc, #360]	@ (80095ec <mem_free+0x19c>)
 8009482:	485b      	ldr	r0, [pc, #364]	@ (80095f0 <mem_free+0x1a0>)
 8009484:	f007 fbea 	bl	8010c5c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009488:	f007 fad6 	bl	8010a38 <sys_arch_protect>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800948c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    MEM_STATS_INC_LOCKED(illegal);
 8009490:	f007 bade 	b.w	8010a50 <sys_arch_unprotect>
  LWIP_MEM_FREE_PROTECT();
 8009494:	4857      	ldr	r0, [pc, #348]	@ (80095f4 <mem_free+0x1a4>)
 8009496:	f007 faaf 	bl	80109f8 <sys_mutex_lock>
  if (!mem->used) {
 800949a:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	f000 8099 	beq.w	80095d6 <mem_free+0x186>
  pmem = ptr_to_mem(mem->prev);
 80094a4:	f854 1c08 	ldr.w	r1, [r4, #-8]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80094a8:	4853      	ldr	r0, [pc, #332]	@ (80095f8 <mem_free+0x1a8>)
  return (mem_size_t)((u8_t *)mem - ram);
 80094aa:	6832      	ldr	r2, [r6, #0]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80094ac:	4281      	cmp	r1, r0
  nmem = ptr_to_mem(mem->next);
 80094ae:	f854 3c0c 	ldr.w	r3, [r4, #-12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80094b2:	d807      	bhi.n	80094c4 <mem_free+0x74>
 80094b4:	4283      	cmp	r3, r0
 80094b6:	d805      	bhi.n	80094c4 <mem_free+0x74>
  return (mem_size_t)((u8_t *)mem - ram);
 80094b8:	1aa8      	subs	r0, r5, r2
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80094ba:	4288      	cmp	r0, r1
 80094bc:	d012      	beq.n	80094e4 <mem_free+0x94>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80094be:	5851      	ldr	r1, [r2, r1]
 80094c0:	4288      	cmp	r0, r1
 80094c2:	d00f      	beq.n	80094e4 <mem_free+0x94>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80094c4:	4b48      	ldr	r3, [pc, #288]	@ (80095e8 <mem_free+0x198>)
 80094c6:	f240 2295 	movw	r2, #661	@ 0x295
 80094ca:	494c      	ldr	r1, [pc, #304]	@ (80095fc <mem_free+0x1ac>)
 80094cc:	4848      	ldr	r0, [pc, #288]	@ (80095f0 <mem_free+0x1a0>)
 80094ce:	f007 fbc5 	bl	8010c5c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80094d2:	4848      	ldr	r0, [pc, #288]	@ (80095f4 <mem_free+0x1a4>)
 80094d4:	f007 fa96 	bl	8010a04 <sys_mutex_unlock>
    MEM_STATS_INC_LOCKED(illegal);
 80094d8:	f007 faae 	bl	8010a38 <sys_arch_protect>
}
 80094dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    MEM_STATS_INC_LOCKED(illegal);
 80094e0:	f007 bab6 	b.w	8010a50 <sys_arch_unprotect>
  return (struct mem *)(void *)&ram[ptr];
 80094e4:	18d1      	adds	r1, r2, r3
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80094e6:	f8d7 c000 	ldr.w	ip, [r7]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80094ea:	4561      	cmp	r1, ip
 80094ec:	d002      	beq.n	80094f4 <mem_free+0xa4>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80094ee:	6849      	ldr	r1, [r1, #4]
 80094f0:	4288      	cmp	r0, r1
 80094f2:	d1e7      	bne.n	80094c4 <mem_free+0x74>
  if (mem < lfree) {
 80094f4:	f8df 8120 	ldr.w	r8, [pc, #288]	@ 8009618 <mem_free+0x1c8>
  mem->used = 0;
 80094f8:	2100      	movs	r1, #0
 80094fa:	f804 1c04 	strb.w	r1, [r4, #-4]
  if (mem < lfree) {
 80094fe:	f8d8 1000 	ldr.w	r1, [r8]
 8009502:	42a9      	cmp	r1, r5
    lfree = mem;
 8009504:	bf88      	it	hi
 8009506:	f8c8 5000 	strhi.w	r5, [r8]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800950a:	4295      	cmp	r5, r2
 800950c:	d339      	bcc.n	8009582 <mem_free+0x132>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800950e:	4565      	cmp	r5, ip
 8009510:	d241      	bcs.n	8009596 <mem_free+0x146>
  return (struct mem *)(void *)&ram[ptr];
 8009512:	6832      	ldr	r2, [r6, #0]
 8009514:	4413      	add	r3, r2
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8009516:	429d      	cmp	r5, r3
 8009518:	d013      	beq.n	8009542 <mem_free+0xf2>
 800951a:	7a19      	ldrb	r1, [r3, #8]
 800951c:	b989      	cbnz	r1, 8009542 <mem_free+0xf2>
 800951e:	6839      	ldr	r1, [r7, #0]
 8009520:	428b      	cmp	r3, r1
 8009522:	d00e      	beq.n	8009542 <mem_free+0xf2>
    if (lfree == nmem) {
 8009524:	f8d8 1000 	ldr.w	r1, [r8]
 8009528:	428b      	cmp	r3, r1
    mem->next = nmem->next;
 800952a:	681b      	ldr	r3, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800952c:	4932      	ldr	r1, [pc, #200]	@ (80095f8 <mem_free+0x1a8>)
      lfree = mem;
 800952e:	bf08      	it	eq
 8009530:	f8c8 5000 	streq.w	r5, [r8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8009534:	428b      	cmp	r3, r1
    mem->next = nmem->next;
 8009536:	f844 3c0c 	str.w	r3, [r4, #-12]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800953a:	d002      	beq.n	8009542 <mem_free+0xf2>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800953c:	4413      	add	r3, r2
  return (mem_size_t)((u8_t *)mem - ram);
 800953e:	1aa9      	subs	r1, r5, r2
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8009540:	6059      	str	r1, [r3, #4]
  pmem = ptr_to_mem(mem->prev);
 8009542:	f854 1c08 	ldr.w	r1, [r4, #-8]
  return (struct mem *)(void *)&ram[ptr];
 8009546:	1853      	adds	r3, r2, r1
  if (pmem != mem && pmem->used == 0) {
 8009548:	429d      	cmp	r5, r3
 800954a:	d00f      	beq.n	800956c <mem_free+0x11c>
 800954c:	7a18      	ldrb	r0, [r3, #8]
 800954e:	b968      	cbnz	r0, 800956c <mem_free+0x11c>
    if (lfree == mem) {
 8009550:	f8d8 0000 	ldr.w	r0, [r8]
 8009554:	4285      	cmp	r5, r0
    if (mem->next != MEM_SIZE_ALIGNED) {
 8009556:	4828      	ldr	r0, [pc, #160]	@ (80095f8 <mem_free+0x1a8>)
      lfree = pmem;
 8009558:	bf08      	it	eq
 800955a:	f8c8 3000 	streq.w	r3, [r8]
    pmem->next = mem->next;
 800955e:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8009562:	4283      	cmp	r3, r0
    pmem->next = mem->next;
 8009564:	5053      	str	r3, [r2, r1]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8009566:	d001      	beq.n	800956c <mem_free+0x11c>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8009568:	441a      	add	r2, r3
 800956a:	6051      	str	r1, [r2, #4]
  LWIP_MEM_FREE_UNPROTECT();
 800956c:	4821      	ldr	r0, [pc, #132]	@ (80095f4 <mem_free+0x1a4>)
}
 800956e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_MEM_FREE_UNPROTECT();
 8009572:	f007 ba47 	b.w	8010a04 <sys_mutex_unlock>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8009576:	4b1c      	ldr	r3, [pc, #112]	@ (80095e8 <mem_free+0x198>)
 8009578:	f240 2273 	movw	r2, #627	@ 0x273
 800957c:	4920      	ldr	r1, [pc, #128]	@ (8009600 <mem_free+0x1b0>)
 800957e:	e780      	b.n	8009482 <mem_free+0x32>
 8009580:	4770      	bx	lr
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8009582:	4b19      	ldr	r3, [pc, #100]	@ (80095e8 <mem_free+0x198>)
 8009584:	f240 12df 	movw	r2, #479	@ 0x1df
 8009588:	491e      	ldr	r1, [pc, #120]	@ (8009604 <mem_free+0x1b4>)
 800958a:	4819      	ldr	r0, [pc, #100]	@ (80095f0 <mem_free+0x1a0>)
 800958c:	f007 fb66 	bl	8010c5c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	429d      	cmp	r5, r3
 8009594:	d306      	bcc.n	80095a4 <mem_free+0x154>
 8009596:	4b14      	ldr	r3, [pc, #80]	@ (80095e8 <mem_free+0x198>)
 8009598:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800959c:	491a      	ldr	r1, [pc, #104]	@ (8009608 <mem_free+0x1b8>)
 800959e:	4814      	ldr	r0, [pc, #80]	@ (80095f0 <mem_free+0x1a0>)
 80095a0:	f007 fb5c 	bl	8010c5c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80095a4:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 80095a8:	b133      	cbz	r3, 80095b8 <mem_free+0x168>
 80095aa:	4b0f      	ldr	r3, [pc, #60]	@ (80095e8 <mem_free+0x198>)
 80095ac:	f240 12e1 	movw	r2, #481	@ 0x1e1
 80095b0:	4916      	ldr	r1, [pc, #88]	@ (800960c <mem_free+0x1bc>)
 80095b2:	480f      	ldr	r0, [pc, #60]	@ (80095f0 <mem_free+0x1a0>)
 80095b4:	f007 fb52 	bl	8010c5c <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80095b8:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 80095bc:	4a0e      	ldr	r2, [pc, #56]	@ (80095f8 <mem_free+0x1a8>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d9a7      	bls.n	8009512 <mem_free+0xc2>
 80095c2:	4b09      	ldr	r3, [pc, #36]	@ (80095e8 <mem_free+0x198>)
 80095c4:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 80095c8:	4911      	ldr	r1, [pc, #68]	@ (8009610 <mem_free+0x1c0>)
 80095ca:	4809      	ldr	r0, [pc, #36]	@ (80095f0 <mem_free+0x1a0>)
 80095cc:	f007 fb46 	bl	8010c5c <iprintf>
  nmem = ptr_to_mem(mem->next);
 80095d0:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 80095d4:	e79d      	b.n	8009512 <mem_free+0xc2>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80095d6:	4b04      	ldr	r3, [pc, #16]	@ (80095e8 <mem_free+0x198>)
 80095d8:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 80095dc:	490d      	ldr	r1, [pc, #52]	@ (8009614 <mem_free+0x1c4>)
 80095de:	e775      	b.n	80094cc <mem_free+0x7c>
 80095e0:	24004d6c 	.word	0x24004d6c
 80095e4:	24004d68 	.word	0x24004d68
 80095e8:	08012958 	.word	0x08012958
 80095ec:	080129c8 	.word	0x080129c8
 80095f0:	08011f14 	.word	0x08011f14
 80095f4:	24004d64 	.word	0x24004d64
 80095f8:	0001ffe8 	.word	0x0001ffe8
 80095fc:	08012a0c 	.word	0x08012a0c
 8009600:	080129a4 	.word	0x080129a4
 8009604:	08012a40 	.word	0x08012a40
 8009608:	08012a58 	.word	0x08012a58
 800960c:	08012a74 	.word	0x08012a74
 8009610:	08012a90 	.word	0x08012a90
 8009614:	080129e4 	.word	0x080129e4
 8009618:	24004d60 	.word	0x24004d60

0800961c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800961c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8009620:	1ccb      	adds	r3, r1, #3
 8009622:	f023 0303 	bic.w	r3, r3, #3
  if (newsize < MIN_SIZE_ALIGNED) {
 8009626:	2b0c      	cmp	r3, #12
 8009628:	461d      	mov	r5, r3
 800962a:	bf38      	it	cc
 800962c:	250c      	movcc	r5, #12
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800962e:	428d      	cmp	r5, r1
 8009630:	d37a      	bcc.n	8009728 <mem_trim+0x10c>
 8009632:	4a49      	ldr	r2, [pc, #292]	@ (8009758 <mem_trim+0x13c>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d877      	bhi.n	8009728 <mem_trim+0x10c>
    return NULL;
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8009638:	4f48      	ldr	r7, [pc, #288]	@ (800975c <mem_trim+0x140>)
 800963a:	4604      	mov	r4, r0
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	4283      	cmp	r3, r0
 8009640:	d83a      	bhi.n	80096b8 <mem_trim+0x9c>
 8009642:	4a47      	ldr	r2, [pc, #284]	@ (8009760 <mem_trim+0x144>)
 8009644:	6812      	ldr	r2, [r2, #0]
 8009646:	4282      	cmp	r2, r0
 8009648:	d936      	bls.n	80096b8 <mem_trim+0x9c>
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800964a:	f1a4 080c 	sub.w	r8, r4, #12
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800964e:	f854 6c0c 	ldr.w	r6, [r4, #-12]
  return (mem_size_t)((u8_t *)mem - ram);
 8009652:	eba8 0803 	sub.w	r8, r8, r3
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8009656:	3e0c      	subs	r6, #12
 8009658:	eba6 0608 	sub.w	r6, r6, r8
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800965c:	42b5      	cmp	r5, r6
 800965e:	d85c      	bhi.n	800971a <mem_trim+0xfe>
  if (newsize > size) {
    /* not supported */
    return NULL;
  }
  if (newsize == size) {
 8009660:	d028      	beq.n	80096b4 <mem_trim+0x98>
    /* No change in size, simply return */
    return rmem;
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8009662:	4840      	ldr	r0, [pc, #256]	@ (8009764 <mem_trim+0x148>)
 8009664:	f007 f9c8 	bl	80109f8 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8009668:	f854 2c0c 	ldr.w	r2, [r4, #-12]
  return (struct mem *)(void *)&ram[ptr];
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	eb03 0902 	add.w	r9, r3, r2
  if (mem2->used == 0) {
 8009672:	f899 1008 	ldrb.w	r1, [r9, #8]
 8009676:	2900      	cmp	r1, #0
 8009678:	d132      	bne.n	80096e0 <mem_trim+0xc4>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800967a:	4937      	ldr	r1, [pc, #220]	@ (8009758 <mem_trim+0x13c>)
 800967c:	428a      	cmp	r2, r1
 800967e:	d061      	beq.n	8009744 <mem_trim+0x128>
    /* remember the old next pointer */
    next = mem2->next;
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
    if (lfree == mem2) {
 8009680:	4939      	ldr	r1, [pc, #228]	@ (8009768 <mem_trim+0x14c>)
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009682:	350c      	adds	r5, #12
    next = mem2->next;
 8009684:	f8d9 6000 	ldr.w	r6, [r9]
    if (lfree == mem2) {
 8009688:	6808      	ldr	r0, [r1, #0]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800968a:	4445      	add	r5, r8
    if (lfree == mem2) {
 800968c:	4548      	cmp	r0, r9
  return (struct mem *)(void *)&ram[ptr];
 800968e:	eb03 0205 	add.w	r2, r3, r5
      lfree = ptr_to_mem(ptr2);
 8009692:	bf08      	it	eq
 8009694:	600a      	streq	r2, [r1, #0]
    }
    mem2 = ptr_to_mem(ptr2);
    mem2->used = 0;
 8009696:	2100      	movs	r1, #0
    /* restore the next pointer */
    mem2->next = next;
    /* link it back to mem */
    mem2->prev = ptr;
 8009698:	e9c2 6800 	strd	r6, r8, [r2]
    mem2->used = 0;
 800969c:	7211      	strb	r1, [r2, #8]
    /* link mem to it */
    mem->next = ptr2;
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800969e:	492e      	ldr	r1, [pc, #184]	@ (8009758 <mem_trim+0x13c>)
    mem->next = ptr2;
 80096a0:	f844 5c0c 	str.w	r5, [r4, #-12]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80096a4:	6812      	ldr	r2, [r2, #0]
 80096a6:	428a      	cmp	r2, r1
 80096a8:	d001      	beq.n	80096ae <mem_trim+0x92>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80096aa:	441a      	add	r2, r3
 80096ac:	6055      	str	r5, [r2, #4]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80096ae:	482d      	ldr	r0, [pc, #180]	@ (8009764 <mem_trim+0x148>)
 80096b0:	f007 f9a8 	bl	8010a04 <sys_mutex_unlock>
    return NULL;
 80096b4:	4620      	mov	r0, r4
 80096b6:	e038      	b.n	800972a <mem_trim+0x10e>
  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80096b8:	4b2c      	ldr	r3, [pc, #176]	@ (800976c <mem_trim+0x150>)
 80096ba:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80096be:	492c      	ldr	r1, [pc, #176]	@ (8009770 <mem_trim+0x154>)
 80096c0:	482c      	ldr	r0, [pc, #176]	@ (8009774 <mem_trim+0x158>)
 80096c2:	f007 facb 	bl	8010c5c <iprintf>
  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	42a3      	cmp	r3, r4
 80096ca:	d803      	bhi.n	80096d4 <mem_trim+0xb8>
 80096cc:	4a24      	ldr	r2, [pc, #144]	@ (8009760 <mem_trim+0x144>)
 80096ce:	6812      	ldr	r2, [r2, #0]
 80096d0:	42a2      	cmp	r2, r4
 80096d2:	d8ba      	bhi.n	800964a <mem_trim+0x2e>
    MEM_STATS_INC_LOCKED(illegal);
 80096d4:	f007 f9b0 	bl	8010a38 <sys_arch_protect>
 80096d8:	f007 f9ba 	bl	8010a50 <sys_arch_unprotect>
    return NULL;
 80096dc:	4620      	mov	r0, r4
 80096de:	e024      	b.n	800972a <mem_trim+0x10e>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80096e0:	f105 0118 	add.w	r1, r5, #24
 80096e4:	42b1      	cmp	r1, r6
 80096e6:	d8e2      	bhi.n	80096ae <mem_trim+0x92>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80096e8:	491b      	ldr	r1, [pc, #108]	@ (8009758 <mem_trim+0x13c>)
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80096ea:	350c      	adds	r5, #12
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80096ec:	428a      	cmp	r2, r1
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80096ee:	4445      	add	r5, r8
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80096f0:	d01d      	beq.n	800972e <mem_trim+0x112>
    if (mem2 < lfree) {
 80096f2:	481d      	ldr	r0, [pc, #116]	@ (8009768 <mem_trim+0x14c>)
  return (struct mem *)(void *)&ram[ptr];
 80096f4:	1959      	adds	r1, r3, r5
    if (mem2 < lfree) {
 80096f6:	6806      	ldr	r6, [r0, #0]
    mem2->prev = ptr;
 80096f8:	e9c1 2800 	strd	r2, r8, [r1]
    if (mem2 < lfree) {
 80096fc:	428e      	cmp	r6, r1
    mem2->used = 0;
 80096fe:	f04f 0200 	mov.w	r2, #0
      lfree = mem2;
 8009702:	bf88      	it	hi
 8009704:	6001      	strhi	r1, [r0, #0]
    mem2->used = 0;
 8009706:	720a      	strb	r2, [r1, #8]
    mem->next = ptr2;
 8009708:	f844 5c0c 	str.w	r5, [r4, #-12]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800970c:	680a      	ldr	r2, [r1, #0]
 800970e:	4912      	ldr	r1, [pc, #72]	@ (8009758 <mem_trim+0x13c>)
 8009710:	428a      	cmp	r2, r1
 8009712:	d0cc      	beq.n	80096ae <mem_trim+0x92>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009714:	4413      	add	r3, r2
 8009716:	605d      	str	r5, [r3, #4]
 8009718:	e7c9      	b.n	80096ae <mem_trim+0x92>
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800971a:	4b14      	ldr	r3, [pc, #80]	@ (800976c <mem_trim+0x150>)
 800971c:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8009720:	4915      	ldr	r1, [pc, #84]	@ (8009778 <mem_trim+0x15c>)
 8009722:	4814      	ldr	r0, [pc, #80]	@ (8009774 <mem_trim+0x158>)
 8009724:	f007 fa9a 	bl	8010c5c <iprintf>
    return NULL;
 8009728:	2000      	movs	r0, #0
  return rmem;
}
 800972a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800972e:	4b0f      	ldr	r3, [pc, #60]	@ (800976c <mem_trim+0x150>)
 8009730:	f240 3216 	movw	r2, #790	@ 0x316
 8009734:	4911      	ldr	r1, [pc, #68]	@ (800977c <mem_trim+0x160>)
 8009736:	480f      	ldr	r0, [pc, #60]	@ (8009774 <mem_trim+0x158>)
 8009738:	f007 fa90 	bl	8010c5c <iprintf>
    mem2->next = mem->next;
 800973c:	f854 2c0c 	ldr.w	r2, [r4, #-12]
  return (struct mem *)(void *)&ram[ptr];
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	e7d6      	b.n	80096f2 <mem_trim+0xd6>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009744:	4b09      	ldr	r3, [pc, #36]	@ (800976c <mem_trim+0x150>)
 8009746:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800974a:	490c      	ldr	r1, [pc, #48]	@ (800977c <mem_trim+0x160>)
 800974c:	4809      	ldr	r0, [pc, #36]	@ (8009774 <mem_trim+0x158>)
 800974e:	f007 fa85 	bl	8010c5c <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	e794      	b.n	8009680 <mem_trim+0x64>
 8009756:	bf00      	nop
 8009758:	0001ffe8 	.word	0x0001ffe8
 800975c:	24004d6c 	.word	0x24004d6c
 8009760:	24004d68 	.word	0x24004d68
 8009764:	24004d64 	.word	0x24004d64
 8009768:	24004d60 	.word	0x24004d60
 800976c:	08012958 	.word	0x08012958
 8009770:	08012abc 	.word	0x08012abc
 8009774:	08011f14 	.word	0x08011f14
 8009778:	08012ad4 	.word	0x08012ad4
 800977c:	08012af4 	.word	0x08012af4

08009780 <mem_malloc>:
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8009780:	2800      	cmp	r0, #0
 8009782:	d061      	beq.n	8009848 <mem_malloc+0xc8>
{
 8009784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8009788:	1cc3      	adds	r3, r0, #3
 800978a:	f023 0303 	bic.w	r3, r3, #3
  if (size < MIN_SIZE_ALIGNED) {
 800978e:	2b0c      	cmp	r3, #12
 8009790:	4698      	mov	r8, r3
 8009792:	bf38      	it	cc
 8009794:	f04f 080c 	movcc.w	r8, #12
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8009798:	4540      	cmp	r0, r8
 800979a:	d821      	bhi.n	80097e0 <mem_malloc+0x60>
 800979c:	4c43      	ldr	r4, [pc, #268]	@ (80098ac <mem_malloc+0x12c>)
 800979e:	42a3      	cmp	r3, r4
 80097a0:	d81e      	bhi.n	80097e0 <mem_malloc+0x60>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80097a2:	4f43      	ldr	r7, [pc, #268]	@ (80098b0 <mem_malloc+0x130>)
  return (mem_size_t)((u8_t *)mem - ram);
 80097a4:	4e43      	ldr	r6, [pc, #268]	@ (80098b4 <mem_malloc+0x134>)
  sys_mutex_lock(&mem_mutex);
 80097a6:	4844      	ldr	r0, [pc, #272]	@ (80098b8 <mem_malloc+0x138>)
 80097a8:	f007 f926 	bl	80109f8 <sys_mutex_lock>
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80097ac:	f8d7 c000 	ldr.w	ip, [r7]
  return (mem_size_t)((u8_t *)mem - ram);
 80097b0:	6831      	ldr	r1, [r6, #0]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80097b2:	eba4 0e08 	sub.w	lr, r4, r8
  return (mem_size_t)((u8_t *)mem - ram);
 80097b6:	ebac 0301 	sub.w	r3, ip, r1
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80097ba:	4573      	cmp	r3, lr
 80097bc:	d20d      	bcs.n	80097da <mem_malloc+0x5a>
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80097be:	f06f 090b 	mvn.w	r9, #11
  return (struct mem *)(void *)&ram[ptr];
 80097c2:	18cc      	adds	r4, r1, r3
      if ((!mem->used) &&
 80097c4:	461d      	mov	r5, r3
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80097c6:	58cb      	ldr	r3, [r1, r3]
 80097c8:	eba9 0205 	sub.w	r2, r9, r5
      if ((!mem->used) &&
 80097cc:	7a20      	ldrb	r0, [r4, #8]
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80097ce:	441a      	add	r2, r3
      if ((!mem->used) &&
 80097d0:	b908      	cbnz	r0, 80097d6 <mem_malloc+0x56>
 80097d2:	4542      	cmp	r2, r8
 80097d4:	d207      	bcs.n	80097e6 <mem_malloc+0x66>
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80097d6:	459e      	cmp	lr, r3
 80097d8:	d8f3      	bhi.n	80097c2 <mem_malloc+0x42>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 80097da:	4837      	ldr	r0, [pc, #220]	@ (80098b8 <mem_malloc+0x138>)
 80097dc:	f007 f912 	bl	8010a04 <sys_mutex_unlock>
    return NULL;
 80097e0:	2000      	movs	r0, #0
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
}
 80097e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80097e6:	f108 0018 	add.w	r0, r8, #24
 80097ea:	f108 080c 	add.w	r8, r8, #12
 80097ee:	4282      	cmp	r2, r0
 80097f0:	d327      	bcc.n	8009842 <mem_malloc+0xc2>
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80097f2:	eb05 0908 	add.w	r9, r5, r8
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80097f6:	4a2d      	ldr	r2, [pc, #180]	@ (80098ac <mem_malloc+0x12c>)
 80097f8:	4591      	cmp	r9, r2
 80097fa:	d04a      	beq.n	8009892 <mem_malloc+0x112>
  return (struct mem *)(void *)&ram[ptr];
 80097fc:	eb01 0209 	add.w	r2, r1, r9
          mem2->used = 0;
 8009800:	2000      	movs	r0, #0
 8009802:	7210      	strb	r0, [r2, #8]
          mem2->next = mem->next;
 8009804:	f841 3009 	str.w	r3, [r1, r9]
          mem->used = 1;
 8009808:	2301      	movs	r3, #1
          mem2->prev = ptr;
 800980a:	6055      	str	r5, [r2, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 800980c:	4a27      	ldr	r2, [pc, #156]	@ (80098ac <mem_malloc+0x12c>)
          mem->next = ptr2;
 800980e:	f8c4 9000 	str.w	r9, [r4]
          mem->used = 1;
 8009812:	7223      	strb	r3, [r4, #8]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8009814:	f851 3009 	ldr.w	r3, [r1, r9]
 8009818:	4293      	cmp	r3, r2
 800981a:	d002      	beq.n	8009822 <mem_malloc+0xa2>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800981c:	4419      	add	r1, r3
 800981e:	f8c1 9004 	str.w	r9, [r1, #4]
        if (mem == lfree) {
 8009822:	4564      	cmp	r4, ip
          while (cur->used && cur != ram_end) {
 8009824:	4d25      	ldr	r5, [pc, #148]	@ (80098bc <mem_malloc+0x13c>)
        if (mem == lfree) {
 8009826:	d028      	beq.n	800987a <mem_malloc+0xfa>
        sys_mutex_unlock(&mem_mutex);
 8009828:	4823      	ldr	r0, [pc, #140]	@ (80098b8 <mem_malloc+0x138>)
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800982a:	44a0      	add	r8, r4
        sys_mutex_unlock(&mem_mutex);
 800982c:	f007 f8ea 	bl	8010a04 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8009830:	682b      	ldr	r3, [r5, #0]
 8009832:	4543      	cmp	r3, r8
 8009834:	d319      	bcc.n	800986a <mem_malloc+0xea>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8009836:	07a3      	lsls	r3, r4, #30
 8009838:	d108      	bne.n	800984c <mem_malloc+0xcc>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800983a:	f104 000c 	add.w	r0, r4, #12
}
 800983e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          mem->used = 1;
 8009842:	2301      	movs	r3, #1
 8009844:	7223      	strb	r3, [r4, #8]
 8009846:	e7ec      	b.n	8009822 <mem_malloc+0xa2>
    return NULL;
 8009848:	2000      	movs	r0, #0
}
 800984a:	4770      	bx	lr
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800984c:	4b1c      	ldr	r3, [pc, #112]	@ (80098c0 <mem_malloc+0x140>)
 800984e:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8009852:	491c      	ldr	r1, [pc, #112]	@ (80098c4 <mem_malloc+0x144>)
 8009854:	481c      	ldr	r0, [pc, #112]	@ (80098c8 <mem_malloc+0x148>)
 8009856:	f007 fa01 	bl	8010c5c <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800985a:	4b19      	ldr	r3, [pc, #100]	@ (80098c0 <mem_malloc+0x140>)
 800985c:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8009860:	491a      	ldr	r1, [pc, #104]	@ (80098cc <mem_malloc+0x14c>)
 8009862:	4819      	ldr	r0, [pc, #100]	@ (80098c8 <mem_malloc+0x148>)
 8009864:	f007 f9fa 	bl	8010c5c <iprintf>
 8009868:	e7e7      	b.n	800983a <mem_malloc+0xba>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800986a:	4b15      	ldr	r3, [pc, #84]	@ (80098c0 <mem_malloc+0x140>)
 800986c:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8009870:	4917      	ldr	r1, [pc, #92]	@ (80098d0 <mem_malloc+0x150>)
 8009872:	4815      	ldr	r0, [pc, #84]	@ (80098c8 <mem_malloc+0x148>)
 8009874:	f007 f9f2 	bl	8010c5c <iprintf>
 8009878:	e7dd      	b.n	8009836 <mem_malloc+0xb6>
  return (struct mem *)(void *)&ram[ptr];
 800987a:	6830      	ldr	r0, [r6, #0]
 800987c:	4623      	mov	r3, r4
          while (cur->used && cur != ram_end) {
 800987e:	6829      	ldr	r1, [r5, #0]
 8009880:	e003      	b.n	800988a <mem_malloc+0x10a>
  return (struct mem *)(void *)&ram[ptr];
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	4403      	add	r3, r0
          while (cur->used && cur != ram_end) {
 8009886:	7a1a      	ldrb	r2, [r3, #8]
 8009888:	b10a      	cbz	r2, 800988e <mem_malloc+0x10e>
 800988a:	4299      	cmp	r1, r3
 800988c:	d1f9      	bne.n	8009882 <mem_malloc+0x102>
          lfree = cur;
 800988e:	603b      	str	r3, [r7, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8009890:	e7ca      	b.n	8009828 <mem_malloc+0xa8>
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8009892:	4b0b      	ldr	r3, [pc, #44]	@ (80098c0 <mem_malloc+0x140>)
 8009894:	f240 3287 	movw	r2, #903	@ 0x387
 8009898:	490e      	ldr	r1, [pc, #56]	@ (80098d4 <mem_malloc+0x154>)
 800989a:	480b      	ldr	r0, [pc, #44]	@ (80098c8 <mem_malloc+0x148>)
 800989c:	f007 f9de 	bl	8010c5c <iprintf>
          mem2->next = mem->next;
 80098a0:	6823      	ldr	r3, [r4, #0]
  return (struct mem *)(void *)&ram[ptr];
 80098a2:	6831      	ldr	r1, [r6, #0]
        if (mem == lfree) {
 80098a4:	f8d7 c000 	ldr.w	ip, [r7]
 80098a8:	e7a8      	b.n	80097fc <mem_malloc+0x7c>
 80098aa:	bf00      	nop
 80098ac:	0001ffe8 	.word	0x0001ffe8
 80098b0:	24004d60 	.word	0x24004d60
 80098b4:	24004d6c 	.word	0x24004d6c
 80098b8:	24004d64 	.word	0x24004d64
 80098bc:	24004d68 	.word	0x24004d68
 80098c0:	08012958 	.word	0x08012958
 80098c4:	08012b38 	.word	0x08012b38
 80098c8:	08011f14 	.word	0x08011f14
 80098cc:	08012b68 	.word	0x08012b68
 80098d0:	08012b08 	.word	0x08012b08
 80098d4:	08012af4 	.word	0x08012af4

080098d8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80098d8:	b538      	push	{r3, r4, r5, lr}
 80098da:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80098dc:	f007 f8ac 	bl	8010a38 <sys_arch_protect>

  memp = *desc->tab;
 80098e0:	68a3      	ldr	r3, [r4, #8]
 80098e2:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80098e4:	b18c      	cbz	r4, 800990a <do_memp_malloc_pool+0x32>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80098e6:	6822      	ldr	r2, [r4, #0]
 80098e8:	4605      	mov	r5, r0
 80098ea:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80098ec:	07a3      	lsls	r3, r4, #30
 80098ee:	d104      	bne.n	80098fa <do_memp_malloc_pool+0x22>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80098f0:	4628      	mov	r0, r5
 80098f2:	f007 f8ad 	bl	8010a50 <sys_arch_unprotect>
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 80098f6:	4620      	mov	r0, r4
 80098f8:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80098fa:	4b06      	ldr	r3, [pc, #24]	@ (8009914 <do_memp_malloc_pool+0x3c>)
 80098fc:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8009900:	4905      	ldr	r1, [pc, #20]	@ (8009918 <do_memp_malloc_pool+0x40>)
 8009902:	4806      	ldr	r0, [pc, #24]	@ (800991c <do_memp_malloc_pool+0x44>)
 8009904:	f007 f9aa 	bl	8010c5c <iprintf>
 8009908:	e7f2      	b.n	80098f0 <do_memp_malloc_pool+0x18>
    SYS_ARCH_UNPROTECT(old_level);
 800990a:	f007 f8a1 	bl	8010a50 <sys_arch_unprotect>
}
 800990e:	4620      	mov	r0, r4
 8009910:	bd38      	pop	{r3, r4, r5, pc}
 8009912:	bf00      	nop
 8009914:	08012b8c 	.word	0x08012b8c
 8009918:	08012bbc 	.word	0x08012bbc
 800991c:	08011f14 	.word	0x08011f14

08009920 <memp_init_pool>:
{
 8009920:	b430      	push	{r4, r5}
  *desc->tab = NULL;
 8009922:	2100      	movs	r1, #0
  for (i = 0; i < desc->num; ++i) {
 8009924:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 8009926:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
 800992a:	6029      	str	r1, [r5, #0]
  for (i = 0; i < desc->num; ++i) {
 800992c:	b17c      	cbz	r4, 800994e <memp_init_pool+0x2e>
 800992e:	3303      	adds	r3, #3
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009930:	f8b0 c000 	ldrh.w	ip, [r0]
  for (i = 0; i < desc->num; ++i) {
 8009934:	460a      	mov	r2, r1
 8009936:	f023 0303 	bic.w	r3, r3, #3
 800993a:	e000      	b.n	800993e <memp_init_pool+0x1e>
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800993c:	4603      	mov	r3, r0
  for (i = 0; i < desc->num; ++i) {
 800993e:	3201      	adds	r2, #1
    memp->next = *desc->tab;
 8009940:	6019      	str	r1, [r3, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009942:	eb03 000c 	add.w	r0, r3, ip
  for (i = 0; i < desc->num; ++i) {
 8009946:	4619      	mov	r1, r3
 8009948:	42a2      	cmp	r2, r4
 800994a:	d1f7      	bne.n	800993c <memp_init_pool+0x1c>
 800994c:	602b      	str	r3, [r5, #0]
}
 800994e:	bc30      	pop	{r4, r5}
 8009950:	4770      	bx	lr
 8009952:	bf00      	nop

08009954 <memp_init>:
{
 8009954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009956:	f8df e054 	ldr.w	lr, [pc, #84]	@ 80099ac <memp_init+0x58>
 800995a:	2404      	movs	r4, #4
 800995c:	4b11      	ldr	r3, [pc, #68]	@ (80099a4 <memp_init+0x50>)
  *desc->tab = NULL;
 800995e:	2600      	movs	r6, #0
{
 8009960:	4d11      	ldr	r5, [pc, #68]	@ (80099a8 <memp_init+0x54>)
 8009962:	f10e 0734 	add.w	r7, lr, #52	@ 0x34
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8009966:	3303      	adds	r3, #3
    memp_init_pool(memp_pools[i]);
 8009968:	f85e 2b04 	ldr.w	r2, [lr], #4
  *desc->tab = NULL;
 800996c:	602e      	str	r6, [r5, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800996e:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 8009972:	b16c      	cbz	r4, 8009990 <memp_init+0x3c>
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009974:	2100      	movs	r1, #0
 8009976:	f8b2 c000 	ldrh.w	ip, [r2]
  for (i = 0; i < desc->num; ++i) {
 800997a:	460a      	mov	r2, r1
 800997c:	e000      	b.n	8009980 <memp_init+0x2c>
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800997e:	4603      	mov	r3, r0
  for (i = 0; i < desc->num; ++i) {
 8009980:	3201      	adds	r2, #1
    memp->next = *desc->tab;
 8009982:	6019      	str	r1, [r3, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009984:	eb03 000c 	add.w	r0, r3, ip
  for (i = 0; i < desc->num; ++i) {
 8009988:	4619      	mov	r1, r3
 800998a:	42a2      	cmp	r2, r4
 800998c:	d1f7      	bne.n	800997e <memp_init+0x2a>
 800998e:	602b      	str	r3, [r5, #0]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009990:	4577      	cmp	r7, lr
 8009992:	d005      	beq.n	80099a0 <memp_init+0x4c>
    memp_init_pool(memp_pools[i]);
 8009994:	f8de 2000 	ldr.w	r2, [lr]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8009998:	e9d2 3501 	ldrd	r3, r5, [r2, #4]
  for (i = 0; i < desc->num; ++i) {
 800999c:	8854      	ldrh	r4, [r2, #2]
 800999e:	e7e2      	b.n	8009966 <memp_init+0x12>
}
 80099a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099a2:	bf00      	nop
 80099a4:	2400b778 	.word	0x2400b778
 80099a8:	2400b774 	.word	0x2400b774
 80099ac:	08012c50 	.word	0x08012c50

080099b0 <memp_malloc_pool>:
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80099b0:	b108      	cbz	r0, 80099b6 <memp_malloc_pool+0x6>
  if (desc == NULL) {
    return NULL;
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80099b2:	f7ff bf91 	b.w	80098d8 <do_memp_malloc_pool>
{
 80099b6:	b510      	push	{r4, lr}
 80099b8:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80099ba:	4b04      	ldr	r3, [pc, #16]	@ (80099cc <memp_malloc_pool+0x1c>)
 80099bc:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 80099c0:	4903      	ldr	r1, [pc, #12]	@ (80099d0 <memp_malloc_pool+0x20>)
 80099c2:	4804      	ldr	r0, [pc, #16]	@ (80099d4 <memp_malloc_pool+0x24>)
 80099c4:	f007 f94a 	bl	8010c5c <iprintf>
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80099c8:	4620      	mov	r0, r4
 80099ca:	bd10      	pop	{r4, pc}
 80099cc:	08012b8c 	.word	0x08012b8c
 80099d0:	08012be0 	.word	0x08012be0
 80099d4:	08011f14 	.word	0x08011f14

080099d8 <memp_malloc>:
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80099d8:	280c      	cmp	r0, #12
{
 80099da:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80099dc:	d806      	bhi.n	80099ec <memp_malloc+0x14>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80099de:	4b08      	ldr	r3, [pc, #32]	@ (8009a00 <memp_malloc+0x28>)
 80099e0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
}
 80099e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
 80099e8:	f7ff bf76 	b.w	80098d8 <do_memp_malloc_pool>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80099ec:	4b05      	ldr	r3, [pc, #20]	@ (8009a04 <memp_malloc+0x2c>)
 80099ee:	f240 1257 	movw	r2, #343	@ 0x157
 80099f2:	4905      	ldr	r1, [pc, #20]	@ (8009a08 <memp_malloc+0x30>)
 80099f4:	4805      	ldr	r0, [pc, #20]	@ (8009a0c <memp_malloc+0x34>)
 80099f6:	f007 f931 	bl	8010c5c <iprintf>
}
 80099fa:	2000      	movs	r0, #0
 80099fc:	bd08      	pop	{r3, pc}
 80099fe:	bf00      	nop
 8009a00:	08012c50 	.word	0x08012c50
 8009a04:	08012b8c 	.word	0x08012b8c
 8009a08:	08012bf4 	.word	0x08012bf4
 8009a0c:	08011f14 	.word	0x08011f14

08009a10 <memp_free_pool>:
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8009a10:	b1c0      	cbz	r0, 8009a44 <memp_free_pool+0x34>
{
 8009a12:	b570      	push	{r4, r5, r6, lr}
 8009a14:	460c      	mov	r4, r1
  if ((desc == NULL) || (mem == NULL)) {
 8009a16:	b161      	cbz	r1, 8009a32 <memp_free_pool+0x22>
  LWIP_ASSERT("memp_free: mem properly aligned",
 8009a18:	078b      	lsls	r3, r1, #30
 8009a1a:	4605      	mov	r5, r0
 8009a1c:	d10a      	bne.n	8009a34 <memp_free_pool+0x24>
  SYS_ARCH_PROTECT(old_level);
 8009a1e:	f007 f80b 	bl	8010a38 <sys_arch_protect>
  memp->next = *desc->tab;
 8009a22:	68ab      	ldr	r3, [r5, #8]
 8009a24:	681a      	ldr	r2, [r3, #0]
 8009a26:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 8009a28:	601c      	str	r4, [r3, #0]
    return;
  }

  do_memp_free_pool(desc, mem);
}
 8009a2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  SYS_ARCH_UNPROTECT(old_level);
 8009a2e:	f007 b80f 	b.w	8010a50 <sys_arch_unprotect>
}
 8009a32:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("memp_free: mem properly aligned",
 8009a34:	4b07      	ldr	r3, [pc, #28]	@ (8009a54 <memp_free_pool+0x44>)
 8009a36:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8009a3a:	4907      	ldr	r1, [pc, #28]	@ (8009a58 <memp_free_pool+0x48>)
 8009a3c:	4807      	ldr	r0, [pc, #28]	@ (8009a5c <memp_free_pool+0x4c>)
 8009a3e:	f007 f90d 	bl	8010c5c <iprintf>
 8009a42:	e7ec      	b.n	8009a1e <memp_free_pool+0xe>
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8009a44:	4b03      	ldr	r3, [pc, #12]	@ (8009a54 <memp_free_pool+0x44>)
 8009a46:	f240 1295 	movw	r2, #405	@ 0x195
 8009a4a:	4905      	ldr	r1, [pc, #20]	@ (8009a60 <memp_free_pool+0x50>)
 8009a4c:	4803      	ldr	r0, [pc, #12]	@ (8009a5c <memp_free_pool+0x4c>)
 8009a4e:	f007 b905 	b.w	8010c5c <iprintf>
 8009a52:	bf00      	nop
 8009a54:	08012b8c 	.word	0x08012b8c
 8009a58:	08012c14 	.word	0x08012c14
 8009a5c:	08011f14 	.word	0x08011f14
 8009a60:	08012be0 	.word	0x08012be0

08009a64 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8009a64:	280c      	cmp	r0, #12
 8009a66:	d812      	bhi.n	8009a8e <memp_free+0x2a>
{
 8009a68:	b570      	push	{r4, r5, r6, lr}
 8009a6a:	460c      	mov	r4, r1

  if (mem == NULL) {
 8009a6c:	b171      	cbz	r1, 8009a8c <memp_free+0x28>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8009a6e:	4b0f      	ldr	r3, [pc, #60]	@ (8009aac <memp_free+0x48>)
 8009a70:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
  LWIP_ASSERT("memp_free: mem properly aligned",
 8009a74:	078b      	lsls	r3, r1, #30
 8009a76:	d111      	bne.n	8009a9c <memp_free+0x38>
  SYS_ARCH_PROTECT(old_level);
 8009a78:	f006 ffde 	bl	8010a38 <sys_arch_protect>
  memp->next = *desc->tab;
 8009a7c:	68ab      	ldr	r3, [r5, #8]
 8009a7e:	681a      	ldr	r2, [r3, #0]
 8009a80:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 8009a82:	601c      	str	r4, [r3, #0]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8009a84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  SYS_ARCH_UNPROTECT(old_level);
 8009a88:	f006 bfe2 	b.w	8010a50 <sys_arch_unprotect>
}
 8009a8c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8009a8e:	4b08      	ldr	r3, [pc, #32]	@ (8009ab0 <memp_free+0x4c>)
 8009a90:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8009a94:	4907      	ldr	r1, [pc, #28]	@ (8009ab4 <memp_free+0x50>)
 8009a96:	4808      	ldr	r0, [pc, #32]	@ (8009ab8 <memp_free+0x54>)
 8009a98:	f007 b8e0 	b.w	8010c5c <iprintf>
  LWIP_ASSERT("memp_free: mem properly aligned",
 8009a9c:	4b04      	ldr	r3, [pc, #16]	@ (8009ab0 <memp_free+0x4c>)
 8009a9e:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8009aa2:	4906      	ldr	r1, [pc, #24]	@ (8009abc <memp_free+0x58>)
 8009aa4:	4804      	ldr	r0, [pc, #16]	@ (8009ab8 <memp_free+0x54>)
 8009aa6:	f007 f8d9 	bl	8010c5c <iprintf>
 8009aaa:	e7e5      	b.n	8009a78 <memp_free+0x14>
 8009aac:	08012c50 	.word	0x08012c50
 8009ab0:	08012b8c 	.word	0x08012b8c
 8009ab4:	08012c34 	.word	0x08012c34
 8009ab8:	08011f14 	.word	0x08011f14
 8009abc:	08012c14 	.word	0x08012c14

08009ac0 <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 8009ac0:	f06f 000b 	mvn.w	r0, #11
 8009ac4:	4770      	bx	lr
 8009ac6:	bf00      	nop

08009ac8 <netif_issue_reports>:
{
 8009ac8:	b510      	push	{r4, lr}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8009aca:	4604      	mov	r4, r0
 8009acc:	b150      	cbz	r0, 8009ae4 <netif_issue_reports+0x1c>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009ace:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8009ad2:	f003 0205 	and.w	r2, r3, #5
 8009ad6:	2a05      	cmp	r2, #5
 8009ad8:	d103      	bne.n	8009ae2 <netif_issue_reports+0x1a>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009ada:	6862      	ldr	r2, [r4, #4]
 8009adc:	b10a      	cbz	r2, 8009ae2 <netif_issue_reports+0x1a>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8009ade:	071b      	lsls	r3, r3, #28
 8009ae0:	d408      	bmi.n	8009af4 <netif_issue_reports+0x2c>
}
 8009ae2:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8009ae4:	4b06      	ldr	r3, [pc, #24]	@ (8009b00 <netif_issue_reports+0x38>)
 8009ae6:	f240 326d 	movw	r2, #877	@ 0x36d
 8009aea:	4906      	ldr	r1, [pc, #24]	@ (8009b04 <netif_issue_reports+0x3c>)
 8009aec:	4806      	ldr	r0, [pc, #24]	@ (8009b08 <netif_issue_reports+0x40>)
 8009aee:	f007 f8b5 	bl	8010c5c <iprintf>
 8009af2:	e7ec      	b.n	8009ace <netif_issue_reports+0x6>
      etharp_gratuitous(netif);
 8009af4:	1d21      	adds	r1, r4, #4
 8009af6:	4620      	mov	r0, r4
}
 8009af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      etharp_gratuitous(netif);
 8009afc:	f005 bf66 	b.w	800f9cc <etharp_request>
 8009b00:	08012d20 	.word	0x08012d20
 8009b04:	08012d54 	.word	0x08012d54
 8009b08:	08011f14 	.word	0x08011f14

08009b0c <netif_init>:
}
 8009b0c:	4770      	bx	lr
 8009b0e:	bf00      	nop

08009b10 <netif_set_addr>:
{
 8009b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b12:	460d      	mov	r5, r1
 8009b14:	b083      	sub	sp, #12
 8009b16:	4604      	mov	r4, r0
 8009b18:	4617      	mov	r7, r2
 8009b1a:	461e      	mov	r6, r3
  LWIP_ASSERT_CORE_LOCKED();
 8009b1c:	f7fc ff10 	bl	8006940 <sys_check_core_locking>
  if (ipaddr == NULL) {
 8009b20:	b1e5      	cbz	r5, 8009b5c <netif_set_addr+0x4c>
  if (netmask == NULL) {
 8009b22:	b187      	cbz	r7, 8009b46 <netif_set_addr+0x36>
  if (gw == NULL) {
 8009b24:	b196      	cbz	r6, 8009b4c <netif_set_addr+0x3c>
  remove = ip4_addr_isany(ipaddr);
 8009b26:	682b      	ldr	r3, [r5, #0]
 8009b28:	b1a3      	cbz	r3, 8009b54 <netif_set_addr+0x44>
 8009b2a:	2100      	movs	r1, #0
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	68a2      	ldr	r2, [r4, #8]
 8009b30:	4293      	cmp	r3, r2
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8009b32:	68e2      	ldr	r2, [r4, #12]
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8009b34:	bf18      	it	ne
 8009b36:	60a3      	strne	r3, [r4, #8]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8009b38:	6833      	ldr	r3, [r6, #0]
 8009b3a:	4293      	cmp	r3, r2
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8009b3c:	bf18      	it	ne
 8009b3e:	60e3      	strne	r3, [r4, #12]
  if (!remove) {
 8009b40:	b181      	cbz	r1, 8009b64 <netif_set_addr+0x54>
}
 8009b42:	b003      	add	sp, #12
 8009b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    netmask = IP4_ADDR_ANY4;
 8009b46:	4f1b      	ldr	r7, [pc, #108]	@ (8009bb4 <netif_set_addr+0xa4>)
  if (gw == NULL) {
 8009b48:	2e00      	cmp	r6, #0
 8009b4a:	d1ec      	bne.n	8009b26 <netif_set_addr+0x16>
  remove = ip4_addr_isany(ipaddr);
 8009b4c:	682b      	ldr	r3, [r5, #0]
    gw = IP4_ADDR_ANY4;
 8009b4e:	4e19      	ldr	r6, [pc, #100]	@ (8009bb4 <netif_set_addr+0xa4>)
  remove = ip4_addr_isany(ipaddr);
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d1ea      	bne.n	8009b2a <netif_set_addr+0x1a>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8009b54:	6862      	ldr	r2, [r4, #4]
 8009b56:	b9da      	cbnz	r2, 8009b90 <netif_set_addr+0x80>
  remove = ip4_addr_isany(ipaddr);
 8009b58:	2101      	movs	r1, #1
 8009b5a:	e7e7      	b.n	8009b2c <netif_set_addr+0x1c>
    ipaddr = IP4_ADDR_ANY4;
 8009b5c:	4d15      	ldr	r5, [pc, #84]	@ (8009bb4 <netif_set_addr+0xa4>)
  if (netmask == NULL) {
 8009b5e:	2f00      	cmp	r7, #0
 8009b60:	d1e0      	bne.n	8009b24 <netif_set_addr+0x14>
 8009b62:	e7f0      	b.n	8009b46 <netif_set_addr+0x36>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8009b64:	6863      	ldr	r3, [r4, #4]
 8009b66:	682a      	ldr	r2, [r5, #0]
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	d0ea      	beq.n	8009b42 <netif_set_addr+0x32>
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8009b6c:	a901      	add	r1, sp, #4
 8009b6e:	4668      	mov	r0, sp
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8009b70:	e9cd 3200 	strd	r3, r2, [sp]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8009b74:	f002 f89c 	bl	800bcb0 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8009b78:	a901      	add	r1, sp, #4
 8009b7a:	4668      	mov	r0, sp
 8009b7c:	f005 fafe 	bl	800f17c <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8009b80:	682b      	ldr	r3, [r5, #0]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8009b82:	2101      	movs	r1, #1
 8009b84:	4620      	mov	r0, r4
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8009b86:	6063      	str	r3, [r4, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8009b88:	f7ff ff9e 	bl	8009ac8 <netif_issue_reports>
}
 8009b8c:	b003      	add	sp, #12
 8009b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8009b90:	a901      	add	r1, sp, #4
 8009b92:	4668      	mov	r0, sp
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8009b94:	e9cd 2300 	strd	r2, r3, [sp]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8009b98:	f002 f88a 	bl	800bcb0 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8009b9c:	a901      	add	r1, sp, #4
 8009b9e:	4668      	mov	r0, sp
 8009ba0:	f005 faec 	bl	800f17c <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8009ba4:	682b      	ldr	r3, [r5, #0]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8009ba6:	2101      	movs	r1, #1
 8009ba8:	4620      	mov	r0, r4
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8009baa:	6063      	str	r3, [r4, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8009bac:	f7ff ff8c 	bl	8009ac8 <netif_issue_reports>
    return 1; /* address changed */
 8009bb0:	e7d2      	b.n	8009b58 <netif_set_addr+0x48>
 8009bb2:	bf00      	nop
 8009bb4:	08014898 	.word	0x08014898

08009bb8 <netif_add>:
{
 8009bb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bbc:	4606      	mov	r6, r0
 8009bbe:	460c      	mov	r4, r1
 8009bc0:	4615      	mov	r5, r2
 8009bc2:	461f      	mov	r7, r3
 8009bc4:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
  LWIP_ASSERT_CORE_LOCKED();
 8009bc8:	f7fc feba 	bl	8006940 <sys_check_core_locking>
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8009bcc:	2e00      	cmp	r6, #0
 8009bce:	d07f      	beq.n	8009cd0 <netif_add+0x118>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8009bd0:	f1b8 0f00 	cmp.w	r8, #0
 8009bd4:	f000 8085 	beq.w	8009ce2 <netif_add+0x12a>
  if (ipaddr == NULL) {
 8009bd8:	2c00      	cmp	r4, #0
 8009bda:	d070      	beq.n	8009cbe <netif_add+0x106>
  if (netmask == NULL) {
 8009bdc:	2d00      	cmp	r5, #0
 8009bde:	d069      	beq.n	8009cb4 <netif_add+0xfc>
  if (gw == NULL) {
 8009be0:	2f00      	cmp	r7, #0
 8009be2:	d06a      	beq.n	8009cba <netif_add+0x102>
  netif->state = state;
 8009be4:	980a      	ldr	r0, [sp, #40]	@ 0x28
  netif_set_addr(netif, ipaddr, netmask, gw);
 8009be6:	463b      	mov	r3, r7
  netif->num = netif_num;
 8009be8:	f8df b124 	ldr.w	fp, [pc, #292]	@ 8009d10 <netif_add+0x158>
  netif_set_addr(netif, ipaddr, netmask, gw);
 8009bec:	462a      	mov	r2, r5
  netif->state = state;
 8009bee:	6230      	str	r0, [r6, #32]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8009bf0:	4621      	mov	r1, r4
  netif->input = input;
 8009bf2:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8009bf4:	6130      	str	r0, [r6, #16]
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8009bf6:	2000      	movs	r0, #0
 8009bf8:	e9c6 0001 	strd	r0, r0, [r6, #4]
  ip_addr_set_zero_ip4(&netif->gw);
 8009bfc:	60f0      	str	r0, [r6, #12]
  netif->mtu = 0;
 8009bfe:	84b0      	strh	r0, [r6, #36]	@ 0x24
  netif->flags = 0;
 8009c00:	f886 002d 	strb.w	r0, [r6, #45]	@ 0x2d
  netif->link_callback = NULL;
 8009c04:	61f0      	str	r0, [r6, #28]
  netif->num = netif_num;
 8009c06:	f89b 0000 	ldrb.w	r0, [fp]
 8009c0a:	f886 0030 	strb.w	r0, [r6, #48]	@ 0x30
  netif->output = netif_null_output_ip4;
 8009c0e:	4839      	ldr	r0, [pc, #228]	@ (8009cf4 <netif_add+0x13c>)
 8009c10:	6170      	str	r0, [r6, #20]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8009c12:	4630      	mov	r0, r6
 8009c14:	f7ff ff7c 	bl	8009b10 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 8009c18:	4630      	mov	r0, r6
 8009c1a:	47c0      	blx	r8
 8009c1c:	2800      	cmp	r0, #0
 8009c1e:	d15e      	bne.n	8009cde <netif_add+0x126>
      if (netif->num == 255) {
 8009c20:	f896 3030 	ldrb.w	r3, [r6, #48]	@ 0x30
 8009c24:	f8df 90ec 	ldr.w	r9, [pc, #236]	@ 8009d14 <netif_add+0x15c>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8009c28:	f8df 80d8 	ldr.w	r8, [pc, #216]	@ 8009d04 <netif_add+0x14c>
 8009c2c:	f8df a0e8 	ldr.w	sl, [pc, #232]	@ 8009d18 <netif_add+0x160>
 8009c30:	4f31      	ldr	r7, [pc, #196]	@ (8009cf8 <netif_add+0x140>)
      if (netif->num == 255) {
 8009c32:	2bff      	cmp	r3, #255	@ 0xff
 8009c34:	d102      	bne.n	8009c3c <netif_add+0x84>
        netif->num = 0;
 8009c36:	2300      	movs	r3, #0
 8009c38:	f886 3030 	strb.w	r3, [r6, #48]	@ 0x30
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009c3c:	f8d9 4000 	ldr.w	r4, [r9]
 8009c40:	2c00      	cmp	r4, #0
 8009c42:	d042      	beq.n	8009cca <netif_add+0x112>
      num_netifs = 0;
 8009c44:	2500      	movs	r5, #0
 8009c46:	e007      	b.n	8009c58 <netif_add+0xa0>
        if (netif2->num == netif->num) {
 8009c48:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8009c4c:	f896 2030 	ldrb.w	r2, [r6, #48]	@ 0x30
 8009c50:	4293      	cmp	r3, r2
 8009c52:	d014      	beq.n	8009c7e <netif_add+0xc6>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009c54:	6824      	ldr	r4, [r4, #0]
 8009c56:	b1fc      	cbz	r4, 8009c98 <netif_add+0xe0>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8009c58:	42a6      	cmp	r6, r4
        num_netifs++;
 8009c5a:	f105 0501 	add.w	r5, r5, #1
        LWIP_ASSERT("netif already added", netif2 != netif);
 8009c5e:	d013      	beq.n	8009c88 <netif_add+0xd0>
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8009c60:	2dff      	cmp	r5, #255	@ 0xff
 8009c62:	ddf1      	ble.n	8009c48 <netif_add+0x90>
 8009c64:	4643      	mov	r3, r8
 8009c66:	f240 128d 	movw	r2, #397	@ 0x18d
 8009c6a:	4924      	ldr	r1, [pc, #144]	@ (8009cfc <netif_add+0x144>)
 8009c6c:	4638      	mov	r0, r7
 8009c6e:	f006 fff5 	bl	8010c5c <iprintf>
        if (netif2->num == netif->num) {
 8009c72:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8009c76:	f896 2030 	ldrb.w	r2, [r6, #48]	@ 0x30
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d1ea      	bne.n	8009c54 <netif_add+0x9c>
          netif->num++;
 8009c7e:	3301      	adds	r3, #1
 8009c80:	b2db      	uxtb	r3, r3
 8009c82:	f886 3030 	strb.w	r3, [r6, #48]	@ 0x30
    } while (netif2 != NULL);
 8009c86:	e7d4      	b.n	8009c32 <netif_add+0x7a>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8009c88:	4643      	mov	r3, r8
 8009c8a:	f240 128b 	movw	r2, #395	@ 0x18b
 8009c8e:	4651      	mov	r1, sl
 8009c90:	4638      	mov	r0, r7
 8009c92:	f006 ffe3 	bl	8010c5c <iprintf>
 8009c96:	e7e3      	b.n	8009c60 <netif_add+0xa8>
  netif->next = netif_list;
 8009c98:	f8d9 4000 	ldr.w	r4, [r9]
  if (netif->num == 254) {
 8009c9c:	2afe      	cmp	r2, #254	@ 0xfe
 8009c9e:	d012      	beq.n	8009cc6 <netif_add+0x10e>
    netif_num = (u8_t)(netif->num + 1);
 8009ca0:	1c53      	adds	r3, r2, #1
 8009ca2:	b2db      	uxtb	r3, r3
  return netif;
 8009ca4:	4630      	mov	r0, r6
  netif->next = netif_list;
 8009ca6:	6034      	str	r4, [r6, #0]
 8009ca8:	f88b 3000 	strb.w	r3, [fp]
  netif_list = netif;
 8009cac:	f8c9 6000 	str.w	r6, [r9]
}
 8009cb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8009cb4:	4d12      	ldr	r5, [pc, #72]	@ (8009d00 <netif_add+0x148>)
  if (gw == NULL) {
 8009cb6:	2f00      	cmp	r7, #0
 8009cb8:	d194      	bne.n	8009be4 <netif_add+0x2c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8009cba:	4f11      	ldr	r7, [pc, #68]	@ (8009d00 <netif_add+0x148>)
 8009cbc:	e792      	b.n	8009be4 <netif_add+0x2c>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8009cbe:	4c10      	ldr	r4, [pc, #64]	@ (8009d00 <netif_add+0x148>)
  if (netmask == NULL) {
 8009cc0:	2d00      	cmp	r5, #0
 8009cc2:	d18d      	bne.n	8009be0 <netif_add+0x28>
 8009cc4:	e7f6      	b.n	8009cb4 <netif_add+0xfc>
    netif_num = 0;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	e7ec      	b.n	8009ca4 <netif_add+0xec>
  if (netif->num == 254) {
 8009cca:	f896 2030 	ldrb.w	r2, [r6, #48]	@ 0x30
 8009cce:	e7e5      	b.n	8009c9c <netif_add+0xe4>
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8009cd0:	4b0c      	ldr	r3, [pc, #48]	@ (8009d04 <netif_add+0x14c>)
 8009cd2:	f240 1227 	movw	r2, #295	@ 0x127
 8009cd6:	490c      	ldr	r1, [pc, #48]	@ (8009d08 <netif_add+0x150>)
 8009cd8:	4807      	ldr	r0, [pc, #28]	@ (8009cf8 <netif_add+0x140>)
 8009cda:	f006 ffbf 	bl	8010c5c <iprintf>
 8009cde:	2000      	movs	r0, #0
 8009ce0:	e7e6      	b.n	8009cb0 <netif_add+0xf8>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8009ce2:	4b08      	ldr	r3, [pc, #32]	@ (8009d04 <netif_add+0x14c>)
 8009ce4:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8009ce8:	4908      	ldr	r1, [pc, #32]	@ (8009d0c <netif_add+0x154>)
 8009cea:	4803      	ldr	r0, [pc, #12]	@ (8009cf8 <netif_add+0x140>)
 8009cec:	f006 ffb6 	bl	8010c5c <iprintf>
 8009cf0:	e7f5      	b.n	8009cde <netif_add+0x126>
 8009cf2:	bf00      	nop
 8009cf4:	08009ac1 	.word	0x08009ac1
 8009cf8:	08011f14 	.word	0x08011f14
 8009cfc:	08012dcc 	.word	0x08012dcc
 8009d00:	08014898 	.word	0x08014898
 8009d04:	08012d20 	.word	0x08012d20
 8009d08:	08012d78 	.word	0x08012d78
 8009d0c:	08012d94 	.word	0x08012d94
 8009d10:	2400b7fb 	.word	0x2400b7fb
 8009d14:	2400b800 	.word	0x2400b800
 8009d18:	08012db8 	.word	0x08012db8

08009d1c <netif_set_default>:
{
 8009d1c:	b510      	push	{r4, lr}
 8009d1e:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 8009d20:	f7fc fe0e 	bl	8006940 <sys_check_core_locking>
  netif_default = netif;
 8009d24:	4b01      	ldr	r3, [pc, #4]	@ (8009d2c <netif_set_default+0x10>)
 8009d26:	601c      	str	r4, [r3, #0]
}
 8009d28:	bd10      	pop	{r4, pc}
 8009d2a:	bf00      	nop
 8009d2c:	2400b7fc 	.word	0x2400b7fc

08009d30 <netif_set_up>:
{
 8009d30:	b510      	push	{r4, lr}
 8009d32:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 8009d34:	f7fc fe04 	bl	8006940 <sys_check_core_locking>
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8009d38:	b174      	cbz	r4, 8009d58 <netif_set_up+0x28>
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8009d3a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8009d3e:	07da      	lsls	r2, r3, #31
 8009d40:	d500      	bpl.n	8009d44 <netif_set_up+0x14>
}
 8009d42:	bd10      	pop	{r4, pc}
    netif_set_flags(netif, NETIF_FLAG_UP);
 8009d44:	f043 0301 	orr.w	r3, r3, #1
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009d48:	4620      	mov	r0, r4
 8009d4a:	2103      	movs	r1, #3
    netif_set_flags(netif, NETIF_FLAG_UP);
 8009d4c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
}
 8009d50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009d54:	f7ff beb8 	b.w	8009ac8 <netif_issue_reports>
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8009d58:	4b04      	ldr	r3, [pc, #16]	@ (8009d6c <netif_set_up+0x3c>)
 8009d5a:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8009d5e:	4904      	ldr	r1, [pc, #16]	@ (8009d70 <netif_set_up+0x40>)
 8009d60:	4804      	ldr	r0, [pc, #16]	@ (8009d74 <netif_set_up+0x44>)
}
 8009d62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8009d66:	f006 bf79 	b.w	8010c5c <iprintf>
 8009d6a:	bf00      	nop
 8009d6c:	08012d20 	.word	0x08012d20
 8009d70:	08012dfc 	.word	0x08012dfc
 8009d74:	08011f14 	.word	0x08011f14

08009d78 <netif_set_down>:
{
 8009d78:	b510      	push	{r4, lr}
 8009d7a:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 8009d7c:	f7fc fde0 	bl	8006940 <sys_check_core_locking>
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8009d80:	b17c      	cbz	r4, 8009da2 <netif_set_down+0x2a>
  if (netif->flags & NETIF_FLAG_UP) {
 8009d82:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8009d86:	07da      	lsls	r2, r3, #31
 8009d88:	d505      	bpl.n	8009d96 <netif_set_down+0x1e>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 8009d8a:	f023 0201 	bic.w	r2, r3, #1
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8009d8e:	071b      	lsls	r3, r3, #28
    netif_clear_flags(netif, NETIF_FLAG_UP);
 8009d90:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8009d94:	d400      	bmi.n	8009d98 <netif_set_down+0x20>
}
 8009d96:	bd10      	pop	{r4, pc}
      etharp_cleanup_netif(netif);
 8009d98:	4620      	mov	r0, r4
}
 8009d9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      etharp_cleanup_netif(netif);
 8009d9e:	f005 bbdd 	b.w	800f55c <etharp_cleanup_netif>
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8009da2:	4b04      	ldr	r3, [pc, #16]	@ (8009db4 <netif_set_down+0x3c>)
 8009da4:	f240 329b 	movw	r2, #923	@ 0x39b
 8009da8:	4903      	ldr	r1, [pc, #12]	@ (8009db8 <netif_set_down+0x40>)
 8009daa:	4804      	ldr	r0, [pc, #16]	@ (8009dbc <netif_set_down+0x44>)
}
 8009dac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8009db0:	f006 bf54 	b.w	8010c5c <iprintf>
 8009db4:	08012d20 	.word	0x08012d20
 8009db8:	08012e18 	.word	0x08012e18
 8009dbc:	08011f14 	.word	0x08011f14

08009dc0 <netif_set_link_up>:
{
 8009dc0:	b510      	push	{r4, lr}
 8009dc2:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 8009dc4:	f7fc fdbc 	bl	8006940 <sys_check_core_locking>
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8009dc8:	b19c      	cbz	r4, 8009df2 <netif_set_link_up+0x32>
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8009dca:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8009dce:	075a      	lsls	r2, r3, #29
 8009dd0:	d500      	bpl.n	8009dd4 <netif_set_link_up+0x14>
}
 8009dd2:	bd10      	pop	{r4, pc}
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8009dd4:	f043 0304 	orr.w	r3, r3, #4
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009dd8:	2103      	movs	r1, #3
 8009dda:	4620      	mov	r0, r4
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8009ddc:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009de0:	f7ff fe72 	bl	8009ac8 <netif_issue_reports>
    NETIF_LINK_CALLBACK(netif);
 8009de4:	69e3      	ldr	r3, [r4, #28]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d0f3      	beq.n	8009dd2 <netif_set_link_up+0x12>
 8009dea:	4620      	mov	r0, r4
}
 8009dec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 8009df0:	4718      	bx	r3
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8009df2:	4b04      	ldr	r3, [pc, #16]	@ (8009e04 <netif_set_link_up+0x44>)
 8009df4:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8009df8:	4903      	ldr	r1, [pc, #12]	@ (8009e08 <netif_set_link_up+0x48>)
 8009dfa:	4804      	ldr	r0, [pc, #16]	@ (8009e0c <netif_set_link_up+0x4c>)
}
 8009dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8009e00:	f006 bf2c 	b.w	8010c5c <iprintf>
 8009e04:	08012d20 	.word	0x08012d20
 8009e08:	08012e38 	.word	0x08012e38
 8009e0c:	08011f14 	.word	0x08011f14

08009e10 <netif_set_link_down>:
{
 8009e10:	b510      	push	{r4, lr}
 8009e12:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 8009e14:	f7fc fd94 	bl	8006940 <sys_check_core_locking>
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8009e18:	b174      	cbz	r4, 8009e38 <netif_set_link_down+0x28>
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8009e1a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8009e1e:	075a      	lsls	r2, r3, #29
 8009e20:	d509      	bpl.n	8009e36 <netif_set_link_down+0x26>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8009e22:	f023 0304 	bic.w	r3, r3, #4
    NETIF_LINK_CALLBACK(netif);
 8009e26:	69e2      	ldr	r2, [r4, #28]
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8009e28:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 8009e2c:	b11a      	cbz	r2, 8009e36 <netif_set_link_down+0x26>
 8009e2e:	4620      	mov	r0, r4
}
 8009e30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 8009e34:	4710      	bx	r2
}
 8009e36:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8009e38:	4b04      	ldr	r3, [pc, #16]	@ (8009e4c <netif_set_link_down+0x3c>)
 8009e3a:	f240 4206 	movw	r2, #1030	@ 0x406
 8009e3e:	4904      	ldr	r1, [pc, #16]	@ (8009e50 <netif_set_link_down+0x40>)
 8009e40:	4804      	ldr	r0, [pc, #16]	@ (8009e54 <netif_set_link_down+0x44>)
}
 8009e42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8009e46:	f006 bf09 	b.w	8010c5c <iprintf>
 8009e4a:	bf00      	nop
 8009e4c:	08012d20 	.word	0x08012d20
 8009e50:	08012e5c 	.word	0x08012e5c
 8009e54:	08011f14 	.word	0x08011f14

08009e58 <netif_set_link_callback>:
{
 8009e58:	b538      	push	{r3, r4, r5, lr}
 8009e5a:	4604      	mov	r4, r0
 8009e5c:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 8009e5e:	f7fc fd6f 	bl	8006940 <sys_check_core_locking>
  if (netif) {
 8009e62:	b104      	cbz	r4, 8009e66 <netif_set_link_callback+0xe>
    netif->link_callback = link_callback;
 8009e64:	61e5      	str	r5, [r4, #28]
}
 8009e66:	bd38      	pop	{r3, r4, r5, pc}

08009e68 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8009e68:	b510      	push	{r4, lr}
 8009e6a:	4604      	mov	r4, r0
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();
 8009e6c:	f7fc fd68 	bl	8006940 <sys_check_core_locking>

  if (idx != NETIF_NO_INDEX) {
 8009e70:	b164      	cbz	r4, 8009e8c <netif_get_by_index+0x24>
    NETIF_FOREACH(netif) {
 8009e72:	4b07      	ldr	r3, [pc, #28]	@ (8009e90 <netif_get_by_index+0x28>)
 8009e74:	6818      	ldr	r0, [r3, #0]
 8009e76:	b910      	cbnz	r0, 8009e7e <netif_get_by_index+0x16>
 8009e78:	e007      	b.n	8009e8a <netif_get_by_index+0x22>
 8009e7a:	6800      	ldr	r0, [r0, #0]
 8009e7c:	b128      	cbz	r0, 8009e8a <netif_get_by_index+0x22>
      if (idx == netif_get_index(netif)) {
 8009e7e:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8009e82:	3301      	adds	r3, #1
 8009e84:	b2db      	uxtb	r3, r3
 8009e86:	42a3      	cmp	r3, r4
 8009e88:	d1f7      	bne.n	8009e7a <netif_get_by_index+0x12>
      }
    }
  }

  return NULL;
}
 8009e8a:	bd10      	pop	{r4, pc}
  return NULL;
 8009e8c:	4620      	mov	r0, r4
}
 8009e8e:	bd10      	pop	{r4, pc}
 8009e90:	2400b800 	.word	0x2400b800

08009e94 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8009e94:	b508      	push	{r3, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8009e96:	f006 fdcf 	bl	8010a38 <sys_arch_protect>
 8009e9a:	4b09      	ldr	r3, [pc, #36]	@ (8009ec0 <pbuf_free_ooseq_callback+0x2c>)
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	701a      	strb	r2, [r3, #0]
 8009ea0:	f006 fdd6 	bl	8010a50 <sys_arch_unprotect>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009ea4:	4b07      	ldr	r3, [pc, #28]	@ (8009ec4 <pbuf_free_ooseq_callback+0x30>)
 8009ea6:	6818      	ldr	r0, [r3, #0]
 8009ea8:	b910      	cbnz	r0, 8009eb0 <pbuf_free_ooseq_callback+0x1c>
 8009eaa:	e008      	b.n	8009ebe <pbuf_free_ooseq_callback+0x2a>
 8009eac:	68c0      	ldr	r0, [r0, #12]
 8009eae:	b130      	cbz	r0, 8009ebe <pbuf_free_ooseq_callback+0x2a>
    if (pcb->ooseq != NULL) {
 8009eb0:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d0fa      	beq.n	8009eac <pbuf_free_ooseq_callback+0x18>
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
}
 8009eb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      tcp_free_ooseq(pcb);
 8009eba:	f001 bf23 	b.w	800bd04 <tcp_free_ooseq>
}
 8009ebe:	bd08      	pop	{r3, pc}
 8009ec0:	2400b804 	.word	0x2400b804
 8009ec4:	2400b80c 	.word	0x2400b80c

08009ec8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8009ec8:	b570      	push	{r4, r5, r6, lr}
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8009eca:	f022 0340 	bic.w	r3, r2, #64	@ 0x40
 8009ece:	2500      	movs	r5, #0
{
 8009ed0:	4614      	mov	r4, r2
 8009ed2:	4606      	mov	r6, r0
 8009ed4:	f361 050f 	bfi	r5, r1, #0, #16
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8009ed8:	2b01      	cmp	r3, #1
 8009eda:	f361 451f 	bfi	r5, r1, #16, #16
 8009ede:	d10c      	bne.n	8009efa <pbuf_alloc_reference+0x32>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8009ee0:	200b      	movs	r0, #11
 8009ee2:	f7ff fd79 	bl	80099d8 <memp_malloc>
  if (p == NULL) {
 8009ee6:	b138      	cbz	r0, 8009ef8 <pbuf_alloc_reference+0x30>
  p->next = NULL;
 8009ee8:	2300      	movs	r3, #0
  p->ref = 1;
 8009eea:	2201      	movs	r2, #1
  p->payload = payload;
 8009eec:	6046      	str	r6, [r0, #4]
  p->tot_len = tot_len;
 8009eee:	6085      	str	r5, [r0, #8]
  p->next = NULL;
 8009ef0:	6003      	str	r3, [r0, #0]
  p->type_internal = (u8_t)type;
 8009ef2:	7304      	strb	r4, [r0, #12]
  p->flags = flags;
 8009ef4:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 8009ef6:	81c2      	strh	r2, [r0, #14]
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
  return p;
}
 8009ef8:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8009efa:	4b04      	ldr	r3, [pc, #16]	@ (8009f0c <pbuf_alloc_reference+0x44>)
 8009efc:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8009f00:	4903      	ldr	r1, [pc, #12]	@ (8009f10 <pbuf_alloc_reference+0x48>)
 8009f02:	4804      	ldr	r0, [pc, #16]	@ (8009f14 <pbuf_alloc_reference+0x4c>)
 8009f04:	f006 feaa 	bl	8010c5c <iprintf>
 8009f08:	e7ea      	b.n	8009ee0 <pbuf_alloc_reference+0x18>
 8009f0a:	bf00      	nop
 8009f0c:	08012e80 	.word	0x08012e80
 8009f10:	08012eb0 	.word	0x08012eb0
 8009f14:	08011f14 	.word	0x08011f14

08009f18 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8009f18:	b430      	push	{r4, r5}
  u16_t offset = (u16_t)l;
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8009f1a:	3003      	adds	r0, #3
 8009f1c:	2400      	movs	r4, #0
{
 8009f1e:	f8bd c00c 	ldrh.w	ip, [sp, #12]
 8009f22:	f361 040f 	bfi	r4, r1, #0, #16
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8009f26:	f020 0003 	bic.w	r0, r0, #3
{
 8009f2a:	9d02      	ldr	r5, [sp, #8]
 8009f2c:	f361 441f 	bfi	r4, r1, #16, #16
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8009f30:	4401      	add	r1, r0
 8009f32:	4561      	cmp	r1, ip
 8009f34:	d80d      	bhi.n	8009f52 <pbuf_alloced_custom+0x3a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
  }

  if (payload_mem != NULL) {
 8009f36:	b105      	cbz	r5, 8009f3a <pbuf_alloced_custom+0x22>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8009f38:	4405      	add	r5, r0
  } else {
    payload = NULL;
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8009f3a:	4618      	mov	r0, r3
  p->next = NULL;
 8009f3c:	2300      	movs	r3, #0
  p->flags = flags;
 8009f3e:	2102      	movs	r1, #2
  p->next = NULL;
 8009f40:	6003      	str	r3, [r0, #0]
  p->ref = 1;
 8009f42:	2301      	movs	r3, #1
  p->payload = payload;
 8009f44:	6045      	str	r5, [r0, #4]
  p->tot_len = tot_len;
 8009f46:	6084      	str	r4, [r0, #8]
  p->type_internal = (u8_t)type;
 8009f48:	7302      	strb	r2, [r0, #12]
  p->flags = flags;
 8009f4a:	7341      	strb	r1, [r0, #13]
  p->ref = 1;
 8009f4c:	81c3      	strh	r3, [r0, #14]
  return &p->pbuf;
}
 8009f4e:	bc30      	pop	{r4, r5}
 8009f50:	4770      	bx	lr
    return NULL;
 8009f52:	2000      	movs	r0, #0
}
 8009f54:	bc30      	pop	{r4, r5}
 8009f56:	4770      	bx	lr

08009f58 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8009f58:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 8009f5a:	b1f0      	cbz	r0, 8009f9a <pbuf_add_header+0x42>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8009f5c:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8009f60:	d20b      	bcs.n	8009f7a <pbuf_add_header+0x22>
  if (header_size_increment == 0) {
 8009f62:	b1c1      	cbz	r1, 8009f96 <pbuf_add_header+0x3e>
  increment_magnitude = (u16_t)header_size_increment;
 8009f64:	b28a      	uxth	r2, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8009f66:	8903      	ldrh	r3, [r0, #8]
 8009f68:	4413      	add	r3, r2
 8009f6a:	b29b      	uxth	r3, r3
 8009f6c:	429a      	cmp	r2, r3
 8009f6e:	d804      	bhi.n	8009f7a <pbuf_add_header+0x22>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8009f70:	f990 c00c 	ldrsb.w	ip, [r0, #12]
 8009f74:	f1bc 0f00 	cmp.w	ip, #0
 8009f78:	db01      	blt.n	8009f7e <pbuf_add_header+0x26>
    return 1;
 8009f7a:	2001      	movs	r0, #1
  return pbuf_add_header_impl(p, header_size_increment, 0);
}
 8009f7c:	bd10      	pop	{r4, pc}
    payload = (u8_t *)p->payload - header_size_increment;
 8009f7e:	6844      	ldr	r4, [r0, #4]
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8009f80:	f100 0c10 	add.w	ip, r0, #16
    payload = (u8_t *)p->payload - header_size_increment;
 8009f84:	1a61      	subs	r1, r4, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8009f86:	4561      	cmp	r1, ip
 8009f88:	d3f7      	bcc.n	8009f7a <pbuf_add_header+0x22>
  p->len = (u16_t)(p->len + increment_magnitude);
 8009f8a:	f8b0 c00a 	ldrh.w	ip, [r0, #10]
  p->payload = payload;
 8009f8e:	6041      	str	r1, [r0, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8009f90:	4462      	add	r2, ip
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8009f92:	8103      	strh	r3, [r0, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 8009f94:	8142      	strh	r2, [r0, #10]
    return 0;
 8009f96:	2000      	movs	r0, #0
}
 8009f98:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 8009f9a:	4b04      	ldr	r3, [pc, #16]	@ (8009fac <pbuf_add_header+0x54>)
 8009f9c:	f240 12df 	movw	r2, #479	@ 0x1df
 8009fa0:	4903      	ldr	r1, [pc, #12]	@ (8009fb0 <pbuf_add_header+0x58>)
 8009fa2:	4804      	ldr	r0, [pc, #16]	@ (8009fb4 <pbuf_add_header+0x5c>)
 8009fa4:	f006 fe5a 	bl	8010c5c <iprintf>
    return 1;
 8009fa8:	2001      	movs	r0, #1
 8009faa:	e7e7      	b.n	8009f7c <pbuf_add_header+0x24>
 8009fac:	08012e80 	.word	0x08012e80
 8009fb0:	08012004 	.word	0x08012004
 8009fb4:	08011f14 	.word	0x08011f14

08009fb8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8009fb8:	b510      	push	{r4, lr}
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8009fba:	b188      	cbz	r0, 8009fe0 <pbuf_remove_header+0x28>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8009fbc:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8009fc0:	d215      	bcs.n	8009fee <pbuf_remove_header+0x36>
    return 1;
  }
  if (header_size_decrement == 0) {
 8009fc2:	b159      	cbz	r1, 8009fdc <pbuf_remove_header+0x24>
    return 0;
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8009fc4:	b28a      	uxth	r2, r1
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8009fc6:	8943      	ldrh	r3, [r0, #10]
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d312      	bcc.n	8009ff2 <pbuf_remove_header+0x3a>
  /* remember current payload pointer */
  payload = p->payload;
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8009fcc:	6844      	ldr	r4, [r0, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8009fce:	1a9b      	subs	r3, r3, r2
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8009fd0:	440c      	add	r4, r1
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8009fd2:	8901      	ldrh	r1, [r0, #8]
  p->len = (u16_t)(p->len - increment_magnitude);
 8009fd4:	8143      	strh	r3, [r0, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8009fd6:	1a8b      	subs	r3, r1, r2
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8009fd8:	6044      	str	r4, [r0, #4]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8009fda:	8103      	strh	r3, [r0, #8]
    return 0;
 8009fdc:	2000      	movs	r0, #0

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
}
 8009fde:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 8009fe0:	4b08      	ldr	r3, [pc, #32]	@ (800a004 <pbuf_remove_header+0x4c>)
 8009fe2:	f240 224b 	movw	r2, #587	@ 0x24b
 8009fe6:	4908      	ldr	r1, [pc, #32]	@ (800a008 <pbuf_remove_header+0x50>)
 8009fe8:	4808      	ldr	r0, [pc, #32]	@ (800a00c <pbuf_remove_header+0x54>)
 8009fea:	f006 fe37 	bl	8010c5c <iprintf>
    return 1;
 8009fee:	2001      	movs	r0, #1
}
 8009ff0:	bd10      	pop	{r4, pc}
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8009ff2:	4b04      	ldr	r3, [pc, #16]	@ (800a004 <pbuf_remove_header+0x4c>)
 8009ff4:	f240 2255 	movw	r2, #597	@ 0x255
 8009ff8:	4905      	ldr	r1, [pc, #20]	@ (800a010 <pbuf_remove_header+0x58>)
 8009ffa:	4804      	ldr	r0, [pc, #16]	@ (800a00c <pbuf_remove_header+0x54>)
 8009ffc:	f006 fe2e 	bl	8010c5c <iprintf>
 800a000:	e7f5      	b.n	8009fee <pbuf_remove_header+0x36>
 800a002:	bf00      	nop
 800a004:	08012e80 	.word	0x08012e80
 800a008:	08012004 	.word	0x08012004
 800a00c:	08011f14 	.word	0x08011f14
 800a010:	08012ec4 	.word	0x08012ec4

0800a014 <pbuf_header_force>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
  if (header_size_increment < 0) {
 800a014:	2900      	cmp	r1, #0
 800a016:	db19      	blt.n	800a04c <pbuf_header_force+0x38>
  LWIP_ASSERT("p != NULL", p != NULL);
 800a018:	4603      	mov	r3, r0
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800a01a:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 800a01c:	b1c8      	cbz	r0, 800a052 <pbuf_header_force+0x3e>
  if (header_size_increment == 0) {
 800a01e:	b199      	cbz	r1, 800a048 <pbuf_header_force+0x34>
  increment_magnitude = (u16_t)header_size_increment;
 800a020:	b288      	uxth	r0, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800a022:	891a      	ldrh	r2, [r3, #8]
 800a024:	4402      	add	r2, r0
 800a026:	b292      	uxth	r2, r2
 800a028:	4290      	cmp	r0, r2
 800a02a:	d819      	bhi.n	800a060 <pbuf_header_force+0x4c>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800a02c:	f993 c00c 	ldrsb.w	ip, [r3, #12]
    payload = (u8_t *)p->payload - header_size_increment;
 800a030:	685c      	ldr	r4, [r3, #4]
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800a032:	f1bc 0f00 	cmp.w	ip, #0
    payload = (u8_t *)p->payload - header_size_increment;
 800a036:	eba4 0101 	sub.w	r1, r4, r1
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800a03a:	db13      	blt.n	800a064 <pbuf_header_force+0x50>
  p->len = (u16_t)(p->len + increment_magnitude);
 800a03c:	f8b3 c00a 	ldrh.w	ip, [r3, #10]
  p->payload = payload;
 800a040:	6059      	str	r1, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800a042:	4460      	add	r0, ip
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800a044:	811a      	strh	r2, [r3, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 800a046:	8158      	strh	r0, [r3, #10]
    return 0;
 800a048:	2000      	movs	r0, #0
  return pbuf_header_impl(p, header_size_increment, 1);
}
 800a04a:	bd10      	pop	{r4, pc}
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800a04c:	4249      	negs	r1, r1
 800a04e:	f7ff bfb3 	b.w	8009fb8 <pbuf_remove_header>
  LWIP_ASSERT("p != NULL", p != NULL);
 800a052:	4b07      	ldr	r3, [pc, #28]	@ (800a070 <pbuf_header_force+0x5c>)
 800a054:	f240 12df 	movw	r2, #479	@ 0x1df
 800a058:	4906      	ldr	r1, [pc, #24]	@ (800a074 <pbuf_header_force+0x60>)
 800a05a:	4807      	ldr	r0, [pc, #28]	@ (800a078 <pbuf_header_force+0x64>)
 800a05c:	f006 fdfe 	bl	8010c5c <iprintf>
    return 1;
 800a060:	2001      	movs	r0, #1
}
 800a062:	bd10      	pop	{r4, pc}
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800a064:	f103 0c10 	add.w	ip, r3, #16
 800a068:	4561      	cmp	r1, ip
 800a06a:	d2e7      	bcs.n	800a03c <pbuf_header_force+0x28>
 800a06c:	e7f8      	b.n	800a060 <pbuf_header_force+0x4c>
 800a06e:	bf00      	nop
 800a070:	08012e80 	.word	0x08012e80
 800a074:	08012004 	.word	0x08012004
 800a078:	08011f14 	.word	0x08011f14

0800a07c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800a07c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800a080:	4605      	mov	r5, r0
 800a082:	2800      	cmp	r0, #0
 800a084:	d055      	beq.n	800a132 <pbuf_free+0xb6>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800a086:	2600      	movs	r6, #0
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a088:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 800a14c <pbuf_free+0xd0>
 800a08c:	f8df 90c8 	ldr.w	r9, [pc, #200]	@ 800a158 <pbuf_free+0xdc>
 800a090:	4f2c      	ldr	r7, [pc, #176]	@ (800a144 <pbuf_free+0xc8>)
 800a092:	e008      	b.n	800a0a6 <pbuf_free+0x2a>
      alloc_src = pbuf_get_allocsrc(p);
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800a094:	692b      	ldr	r3, [r5, #16]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d03d      	beq.n	800a116 <pbuf_free+0x9a>
        pc->custom_free_function(p);
 800a09a:	4628      	mov	r0, r5
 800a09c:	4798      	blx	r3
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
        }
      }
      count++;
 800a09e:	3601      	adds	r6, #1
 800a0a0:	b2f6      	uxtb	r6, r6
  while (p != NULL) {
 800a0a2:	b1fc      	cbz	r4, 800a0e4 <pbuf_free+0x68>
      /* proceed to next pbuf */
      p = q;
 800a0a4:	4625      	mov	r5, r4
    SYS_ARCH_PROTECT(old_level);
 800a0a6:	f006 fcc7 	bl	8010a38 <sys_arch_protect>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a0aa:	7bab      	ldrb	r3, [r5, #14]
    SYS_ARCH_PROTECT(old_level);
 800a0ac:	4604      	mov	r4, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a0ae:	b1e3      	cbz	r3, 800a0ea <pbuf_free+0x6e>
    ref = --(p->ref);
 800a0b0:	3b01      	subs	r3, #1
    SYS_ARCH_UNPROTECT(old_level);
 800a0b2:	4620      	mov	r0, r4
    ref = --(p->ref);
 800a0b4:	b2dc      	uxtb	r4, r3
 800a0b6:	73ac      	strb	r4, [r5, #14]
    SYS_ARCH_UNPROTECT(old_level);
 800a0b8:	f006 fcca 	bl	8010a50 <sys_arch_unprotect>
    if (ref == 0) {
 800a0bc:	b994      	cbnz	r4, 800a0e4 <pbuf_free+0x68>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800a0be:	7b6a      	ldrb	r2, [r5, #13]
      q = p->next;
 800a0c0:	682c      	ldr	r4, [r5, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800a0c2:	0792      	lsls	r2, r2, #30
      alloc_src = pbuf_get_allocsrc(p);
 800a0c4:	7b2b      	ldrb	r3, [r5, #12]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800a0c6:	d4e5      	bmi.n	800a094 <pbuf_free+0x18>
      alloc_src = pbuf_get_allocsrc(p);
 800a0c8:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800a0cc:	2b02      	cmp	r3, #2
 800a0ce:	d01d      	beq.n	800a10c <pbuf_free+0x90>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	d029      	beq.n	800a128 <pbuf_free+0xac>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800a0d4:	b993      	cbnz	r3, 800a0fc <pbuf_free+0x80>
      count++;
 800a0d6:	3601      	adds	r6, #1
          mem_free(p);
 800a0d8:	4628      	mov	r0, r5
 800a0da:	f7ff f9b9 	bl	8009450 <mem_free>
      count++;
 800a0de:	b2f6      	uxtb	r6, r6
  while (p != NULL) {
 800a0e0:	2c00      	cmp	r4, #0
 800a0e2:	d1df      	bne.n	800a0a4 <pbuf_free+0x28>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 800a0e4:	4630      	mov	r0, r6
 800a0e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a0ea:	4643      	mov	r3, r8
 800a0ec:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800a0f0:	4649      	mov	r1, r9
 800a0f2:	4638      	mov	r0, r7
 800a0f4:	f006 fdb2 	bl	8010c5c <iprintf>
    ref = --(p->ref);
 800a0f8:	7bab      	ldrb	r3, [r5, #14]
 800a0fa:	e7d9      	b.n	800a0b0 <pbuf_free+0x34>
          LWIP_ASSERT("invalid pbuf type", 0);
 800a0fc:	4643      	mov	r3, r8
 800a0fe:	f240 320f 	movw	r2, #783	@ 0x30f
 800a102:	4911      	ldr	r1, [pc, #68]	@ (800a148 <pbuf_free+0xcc>)
 800a104:	4638      	mov	r0, r7
 800a106:	f006 fda9 	bl	8010c5c <iprintf>
 800a10a:	e7c8      	b.n	800a09e <pbuf_free+0x22>
          memp_free(MEMP_PBUF_POOL, p);
 800a10c:	4629      	mov	r1, r5
 800a10e:	200c      	movs	r0, #12
 800a110:	f7ff fca8 	bl	8009a64 <memp_free>
 800a114:	e7c3      	b.n	800a09e <pbuf_free+0x22>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800a116:	4b0d      	ldr	r3, [pc, #52]	@ (800a14c <pbuf_free+0xd0>)
 800a118:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800a11c:	490c      	ldr	r1, [pc, #48]	@ (800a150 <pbuf_free+0xd4>)
 800a11e:	4809      	ldr	r0, [pc, #36]	@ (800a144 <pbuf_free+0xc8>)
 800a120:	f006 fd9c 	bl	8010c5c <iprintf>
        pc->custom_free_function(p);
 800a124:	692b      	ldr	r3, [r5, #16]
 800a126:	e7b8      	b.n	800a09a <pbuf_free+0x1e>
          memp_free(MEMP_PBUF, p);
 800a128:	4629      	mov	r1, r5
 800a12a:	200b      	movs	r0, #11
 800a12c:	f7ff fc9a 	bl	8009a64 <memp_free>
 800a130:	e7b5      	b.n	800a09e <pbuf_free+0x22>
    LWIP_ASSERT("p != NULL", p != NULL);
 800a132:	4b06      	ldr	r3, [pc, #24]	@ (800a14c <pbuf_free+0xd0>)
 800a134:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800a138:	4906      	ldr	r1, [pc, #24]	@ (800a154 <pbuf_free+0xd8>)
    return 0;
 800a13a:	462e      	mov	r6, r5
    LWIP_ASSERT("p != NULL", p != NULL);
 800a13c:	4801      	ldr	r0, [pc, #4]	@ (800a144 <pbuf_free+0xc8>)
 800a13e:	f006 fd8d 	bl	8010c5c <iprintf>
    return 0;
 800a142:	e7cf      	b.n	800a0e4 <pbuf_free+0x68>
 800a144:	08011f14 	.word	0x08011f14
 800a148:	08012f20 	.word	0x08012f20
 800a14c:	08012e80 	.word	0x08012e80
 800a150:	08012efc 	.word	0x08012efc
 800a154:	08012004 	.word	0x08012004
 800a158:	08012ee4 	.word	0x08012ee4

0800a15c <pbuf_alloc>:
  switch (type) {
 800a15c:	f5b2 7fc1 	cmp.w	r2, #386	@ 0x182
{
 800a160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a164:	460c      	mov	r4, r1
 800a166:	b083      	sub	sp, #12
  switch (type) {
 800a168:	d03e      	beq.n	800a1e8 <pbuf_alloc+0x8c>
 800a16a:	d810      	bhi.n	800a18e <pbuf_alloc+0x32>
 800a16c:	f022 0340 	bic.w	r3, r2, #64	@ 0x40
 800a170:	2b01      	cmp	r3, #1
 800a172:	d033      	beq.n	800a1dc <pbuf_alloc+0x80>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800a174:	4b43      	ldr	r3, [pc, #268]	@ (800a284 <pbuf_alloc+0x128>)
 800a176:	f240 1227 	movw	r2, #295	@ 0x127
 800a17a:	4943      	ldr	r1, [pc, #268]	@ (800a288 <pbuf_alloc+0x12c>)
 800a17c:	4843      	ldr	r0, [pc, #268]	@ (800a28c <pbuf_alloc+0x130>)
 800a17e:	f006 fd6d 	bl	8010c5c <iprintf>
          return NULL;
 800a182:	f04f 0800 	mov.w	r8, #0
}
 800a186:	4640      	mov	r0, r8
 800a188:	b003      	add	sp, #12
 800a18a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  switch (type) {
 800a18e:	f5b2 7f20 	cmp.w	r2, #640	@ 0x280
 800a192:	d1ef      	bne.n	800a174 <pbuf_alloc+0x18>
 800a194:	4605      	mov	r5, r0
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800a196:	1ccb      	adds	r3, r1, #3
 800a198:	3003      	adds	r0, #3
 800a19a:	f023 0303 	bic.w	r3, r3, #3
 800a19e:	f020 0003 	bic.w	r0, r0, #3
 800a1a2:	4418      	add	r0, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800a1a4:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a1a6:	4298      	cmp	r0, r3
 800a1a8:	d3eb      	bcc.n	800a182 <pbuf_alloc+0x26>
      p = (struct pbuf *)mem_malloc(alloc_len);
 800a1aa:	3010      	adds	r0, #16
 800a1ac:	f7ff fae8 	bl	8009780 <mem_malloc>
      if (p == NULL) {
 800a1b0:	4680      	mov	r8, r0
 800a1b2:	2800      	cmp	r0, #0
 800a1b4:	d0e7      	beq.n	800a186 <pbuf_alloc+0x2a>
  p->next = NULL;
 800a1b6:	2200      	movs	r2, #0
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800a1b8:	4405      	add	r5, r0
  p->type_internal = (u8_t)type;
 800a1ba:	4935      	ldr	r1, [pc, #212]	@ (800a290 <pbuf_alloc+0x134>)
  p->tot_len = tot_len;
 800a1bc:	4613      	mov	r3, r2
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800a1be:	3513      	adds	r5, #19
  p->type_internal = (u8_t)type;
 800a1c0:	60c1      	str	r1, [r0, #12]
  p->tot_len = tot_len;
 800a1c2:	f364 030f 	bfi	r3, r4, #0, #16
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800a1c6:	f025 0503 	bic.w	r5, r5, #3
  p->tot_len = tot_len;
 800a1ca:	f364 431f 	bfi	r3, r4, #16, #16
  p->payload = payload;
 800a1ce:	e9c0 2500 	strd	r2, r5, [r0]
  p->tot_len = tot_len;
 800a1d2:	6083      	str	r3, [r0, #8]
}
 800a1d4:	4640      	mov	r0, r8
 800a1d6:	b003      	add	sp, #12
 800a1d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      p = pbuf_alloc_reference(NULL, length, type);
 800a1dc:	2000      	movs	r0, #0
}
 800a1de:	b003      	add	sp, #12
 800a1e0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
      p = pbuf_alloc_reference(NULL, length, type);
 800a1e4:	f7ff be70 	b.w	8009ec8 <pbuf_alloc_reference>
  switch (type) {
 800a1e8:	2100      	movs	r1, #0
 800a1ea:	4681      	mov	r9, r0
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a1ec:	f240 56ec 	movw	r6, #1516	@ 0x5ec
  p->type_internal = (u8_t)type;
 800a1f0:	4d28      	ldr	r5, [pc, #160]	@ (800a294 <pbuf_alloc+0x138>)
  switch (type) {
 800a1f2:	4688      	mov	r8, r1
 800a1f4:	e006      	b.n	800a204 <pbuf_alloc+0xa8>
          last->next = q;
 800a1f6:	6038      	str	r0, [r7, #0]
        rem_len = (u16_t)(rem_len - qlen);
 800a1f8:	1ae3      	subs	r3, r4, r3
        offset = 0;
 800a1fa:	f04f 0900 	mov.w	r9, #0
        rem_len = (u16_t)(rem_len - qlen);
 800a1fe:	b29c      	uxth	r4, r3
      } while (rem_len > 0);
 800a200:	2c00      	cmp	r4, #0
 800a202:	d0c0      	beq.n	800a186 <pbuf_alloc+0x2a>
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800a204:	200c      	movs	r0, #12
 800a206:	460f      	mov	r7, r1
 800a208:	f7ff fbe6 	bl	80099d8 <memp_malloc>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a20c:	f109 0203 	add.w	r2, r9, #3
  p->next = NULL;
 800a210:	f04f 0c00 	mov.w	ip, #0
        if (q == NULL) {
 800a214:	4601      	mov	r1, r0
 800a216:	b1b0      	cbz	r0, 800a246 <pbuf_alloc+0xea>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a218:	f022 0303 	bic.w	r3, r2, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800a21c:	eb00 0209 	add.w	r2, r0, r9
  p->tot_len = tot_len;
 800a220:	8104      	strh	r4, [r0, #8]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a222:	1af3      	subs	r3, r6, r3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800a224:	3213      	adds	r2, #19
  p->next = NULL;
 800a226:	f8c0 c000 	str.w	ip, [r0]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a22a:	b29b      	uxth	r3, r3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800a22c:	f022 0203 	bic.w	r2, r2, #3
  p->type_internal = (u8_t)type;
 800a230:	60c5      	str	r5, [r0, #12]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a232:	42a3      	cmp	r3, r4
  p->payload = payload;
 800a234:	6042      	str	r2, [r0, #4]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a236:	bf28      	it	cs
 800a238:	4623      	movcs	r3, r4
  p->len = len;
 800a23a:	8143      	strh	r3, [r0, #10]
        if (p == NULL) {
 800a23c:	f1b8 0f00 	cmp.w	r8, #0
 800a240:	d1d9      	bne.n	800a1f6 <pbuf_alloc+0x9a>
 800a242:	4680      	mov	r8, r0
 800a244:	e7d8      	b.n	800a1f8 <pbuf_alloc+0x9c>
  queued = pbuf_free_ooseq_pending;
 800a246:	4d14      	ldr	r5, [pc, #80]	@ (800a298 <pbuf_alloc+0x13c>)
 800a248:	9001      	str	r0, [sp, #4]
  SYS_ARCH_PROTECT(old_level);
 800a24a:	f006 fbf5 	bl	8010a38 <sys_arch_protect>
  queued = pbuf_free_ooseq_pending;
 800a24e:	782c      	ldrb	r4, [r5, #0]
  pbuf_free_ooseq_pending = 1;
 800a250:	2301      	movs	r3, #1
  queued = pbuf_free_ooseq_pending;
 800a252:	b2e4      	uxtb	r4, r4
  pbuf_free_ooseq_pending = 1;
 800a254:	702b      	strb	r3, [r5, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800a256:	f006 fbfb 	bl	8010a50 <sys_arch_unprotect>
  if (!queued) {
 800a25a:	9901      	ldr	r1, [sp, #4]
 800a25c:	b134      	cbz	r4, 800a26c <pbuf_alloc+0x110>
          if (p) {
 800a25e:	f1b8 0f00 	cmp.w	r8, #0
 800a262:	d08e      	beq.n	800a182 <pbuf_alloc+0x26>
            pbuf_free(p);
 800a264:	4640      	mov	r0, r8
 800a266:	f7ff ff09 	bl	800a07c <pbuf_free>
 800a26a:	e78a      	b.n	800a182 <pbuf_alloc+0x26>
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800a26c:	480b      	ldr	r0, [pc, #44]	@ (800a29c <pbuf_alloc+0x140>)
 800a26e:	f7fe ffbd 	bl	80091ec <tcpip_try_callback>
 800a272:	2800      	cmp	r0, #0
 800a274:	d0f3      	beq.n	800a25e <pbuf_alloc+0x102>
 800a276:	f006 fbdf 	bl	8010a38 <sys_arch_protect>
 800a27a:	9901      	ldr	r1, [sp, #4]
 800a27c:	7029      	strb	r1, [r5, #0]
 800a27e:	f006 fbe7 	bl	8010a50 <sys_arch_unprotect>
 800a282:	e7ec      	b.n	800a25e <pbuf_alloc+0x102>
 800a284:	08012e80 	.word	0x08012e80
 800a288:	08012f34 	.word	0x08012f34
 800a28c:	08011f14 	.word	0x08011f14
 800a290:	00010080 	.word	0x00010080
 800a294:	00010082 	.word	0x00010082
 800a298:	2400b804 	.word	0x2400b804
 800a29c:	08009e95 	.word	0x08009e95

0800a2a0 <pbuf_realloc>:
{
 800a2a0:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800a2a2:	4604      	mov	r4, r0
{
 800a2a4:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800a2a6:	2800      	cmp	r0, #0
 800a2a8:	d03a      	beq.n	800a320 <pbuf_realloc+0x80>
  if (new_len >= p->tot_len) {
 800a2aa:	8922      	ldrh	r2, [r4, #8]
 800a2ac:	42aa      	cmp	r2, r5
 800a2ae:	d91f      	bls.n	800a2f0 <pbuf_realloc+0x50>
  while (rem_len > q->len) {
 800a2b0:	8963      	ldrh	r3, [r4, #10]
 800a2b2:	429d      	cmp	r5, r3
 800a2b4:	d90d      	bls.n	800a2d2 <pbuf_realloc+0x32>
 800a2b6:	1aa9      	subs	r1, r5, r2
 800a2b8:	b289      	uxth	r1, r1
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800a2ba:	440a      	add	r2, r1
    rem_len = (u16_t)(rem_len - q->len);
 800a2bc:	1aeb      	subs	r3, r5, r3
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800a2be:	8122      	strh	r2, [r4, #8]
    rem_len = (u16_t)(rem_len - q->len);
 800a2c0:	b29d      	uxth	r5, r3
    q = q->next;
 800a2c2:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800a2c4:	2c00      	cmp	r4, #0
 800a2c6:	d033      	beq.n	800a330 <pbuf_realloc+0x90>
  while (rem_len > q->len) {
 800a2c8:	8963      	ldrh	r3, [r4, #10]
 800a2ca:	42ab      	cmp	r3, r5
 800a2cc:	d201      	bcs.n	800a2d2 <pbuf_realloc+0x32>
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800a2ce:	8922      	ldrh	r2, [r4, #8]
 800a2d0:	e7f3      	b.n	800a2ba <pbuf_realloc+0x1a>
 800a2d2:	2600      	movs	r6, #0
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800a2d4:	7b22      	ldrb	r2, [r4, #12]
 800a2d6:	f365 060f 	bfi	r6, r5, #0, #16
 800a2da:	0712      	lsls	r2, r2, #28
 800a2dc:	f365 461f 	bfi	r6, r5, #16, #16
 800a2e0:	d007      	beq.n	800a2f2 <pbuf_realloc+0x52>
  if (q->next != NULL) {
 800a2e2:	6820      	ldr	r0, [r4, #0]
  q->tot_len = q->len;
 800a2e4:	60a6      	str	r6, [r4, #8]
  if (q->next != NULL) {
 800a2e6:	b108      	cbz	r0, 800a2ec <pbuf_realloc+0x4c>
    pbuf_free(q->next);
 800a2e8:	f7ff fec8 	bl	800a07c <pbuf_free>
  q->next = NULL;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	6023      	str	r3, [r4, #0]
}
 800a2f0:	bd70      	pop	{r4, r5, r6, pc}
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800a2f2:	42ab      	cmp	r3, r5
 800a2f4:	d0f5      	beq.n	800a2e2 <pbuf_realloc+0x42>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800a2f6:	7b63      	ldrb	r3, [r4, #13]
 800a2f8:	079b      	lsls	r3, r3, #30
 800a2fa:	d4f2      	bmi.n	800a2e2 <pbuf_realloc+0x42>
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800a2fc:	6863      	ldr	r3, [r4, #4]
 800a2fe:	4620      	mov	r0, r4
 800a300:	1b1b      	subs	r3, r3, r4
 800a302:	1959      	adds	r1, r3, r5
 800a304:	f7ff f98a 	bl	800961c <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800a308:	4604      	mov	r4, r0
 800a30a:	2800      	cmp	r0, #0
 800a30c:	d1e9      	bne.n	800a2e2 <pbuf_realloc+0x42>
 800a30e:	4b0d      	ldr	r3, [pc, #52]	@ (800a344 <pbuf_realloc+0xa4>)
 800a310:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800a314:	490c      	ldr	r1, [pc, #48]	@ (800a348 <pbuf_realloc+0xa8>)
 800a316:	480d      	ldr	r0, [pc, #52]	@ (800a34c <pbuf_realloc+0xac>)
 800a318:	f006 fca0 	bl	8010c5c <iprintf>
  q->len = rem_len;
 800a31c:	8164      	strh	r4, [r4, #10]
 800a31e:	deff      	udf	#255	@ 0xff
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800a320:	4b08      	ldr	r3, [pc, #32]	@ (800a344 <pbuf_realloc+0xa4>)
 800a322:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800a326:	490a      	ldr	r1, [pc, #40]	@ (800a350 <pbuf_realloc+0xb0>)
 800a328:	4808      	ldr	r0, [pc, #32]	@ (800a34c <pbuf_realloc+0xac>)
 800a32a:	f006 fc97 	bl	8010c5c <iprintf>
 800a32e:	e7bc      	b.n	800a2aa <pbuf_realloc+0xa>
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800a330:	4b04      	ldr	r3, [pc, #16]	@ (800a344 <pbuf_realloc+0xa4>)
 800a332:	f240 12af 	movw	r2, #431	@ 0x1af
 800a336:	4907      	ldr	r1, [pc, #28]	@ (800a354 <pbuf_realloc+0xb4>)
 800a338:	4804      	ldr	r0, [pc, #16]	@ (800a34c <pbuf_realloc+0xac>)
 800a33a:	f006 fc8f 	bl	8010c5c <iprintf>
  while (rem_len > q->len) {
 800a33e:	8963      	ldrh	r3, [r4, #10]
 800a340:	deff      	udf	#255	@ 0xff
 800a342:	bf00      	nop
 800a344:	08012e80 	.word	0x08012e80
 800a348:	08012f80 	.word	0x08012f80
 800a34c:	08011f14 	.word	0x08011f14
 800a350:	08012f50 	.word	0x08012f50
 800a354:	08012f68 	.word	0x08012f68

0800a358 <pbuf_clen>:
pbuf_clen(const struct pbuf *p)
{
  u16_t len;

  len = 0;
  while (p != NULL) {
 800a358:	4603      	mov	r3, r0
 800a35a:	b130      	cbz	r0, 800a36a <pbuf_clen+0x12>
  len = 0;
 800a35c:	2000      	movs	r0, #0
    ++len;
 800a35e:	3001      	adds	r0, #1
    p = p->next;
 800a360:	681b      	ldr	r3, [r3, #0]
    ++len;
 800a362:	b280      	uxth	r0, r0
  while (p != NULL) {
 800a364:	2b00      	cmp	r3, #0
 800a366:	d1fa      	bne.n	800a35e <pbuf_clen+0x6>
 800a368:	4770      	bx	lr
  }
  return len;
}
 800a36a:	4770      	bx	lr

0800a36c <pbuf_ref>:
 */
void
pbuf_ref(struct pbuf *p)
{
  /* pbuf given? */
  if (p != NULL) {
 800a36c:	b158      	cbz	r0, 800a386 <pbuf_ref+0x1a>
{
 800a36e:	b510      	push	{r4, lr}
 800a370:	4604      	mov	r4, r0
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800a372:	f006 fb61 	bl	8010a38 <sys_arch_protect>
 800a376:	7ba3      	ldrb	r3, [r4, #14]
 800a378:	3301      	adds	r3, #1
 800a37a:	73a3      	strb	r3, [r4, #14]
 800a37c:	f006 fb68 	bl	8010a50 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800a380:	7ba3      	ldrb	r3, [r4, #14]
 800a382:	b10b      	cbz	r3, 800a388 <pbuf_ref+0x1c>
  }
}
 800a384:	bd10      	pop	{r4, pc}
 800a386:	4770      	bx	lr
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800a388:	4b04      	ldr	r3, [pc, #16]	@ (800a39c <pbuf_ref+0x30>)
 800a38a:	f240 3242 	movw	r2, #834	@ 0x342
 800a38e:	4904      	ldr	r1, [pc, #16]	@ (800a3a0 <pbuf_ref+0x34>)
 800a390:	4804      	ldr	r0, [pc, #16]	@ (800a3a4 <pbuf_ref+0x38>)
}
 800a392:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800a396:	f006 bc61 	b.w	8010c5c <iprintf>
 800a39a:	bf00      	nop
 800a39c:	08012e80 	.word	0x08012e80
 800a3a0:	08012f9c 	.word	0x08012f9c
 800a3a4:	08011f14 	.word	0x08011f14

0800a3a8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800a3a8:	b570      	push	{r4, r5, r6, lr}
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800a3aa:	2800      	cmp	r0, #0
 800a3ac:	d02d      	beq.n	800a40a <pbuf_cat+0x62>
 800a3ae:	460d      	mov	r5, r1
 800a3b0:	2900      	cmp	r1, #0
 800a3b2:	d02a      	beq.n	800a40a <pbuf_cat+0x62>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800a3b4:	6803      	ldr	r3, [r0, #0]
 800a3b6:	4604      	mov	r4, r0
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800a3b8:	8902      	ldrh	r2, [r0, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800a3ba:	b18b      	cbz	r3, 800a3e0 <pbuf_cat+0x38>
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a3bc:	8922      	ldrh	r2, [r4, #8]
 800a3be:	8928      	ldrh	r0, [r5, #8]
 800a3c0:	4402      	add	r2, r0
 800a3c2:	8122      	strh	r2, [r4, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800a3c4:	461c      	mov	r4, r3
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d1f7      	bne.n	800a3bc <pbuf_cat+0x14>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800a3cc:	8922      	ldrh	r2, [r4, #8]
 800a3ce:	8963      	ldrh	r3, [r4, #10]
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d108      	bne.n	800a3e6 <pbuf_cat+0x3e>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a3d4:	8922      	ldrh	r2, [r4, #8]
 800a3d6:	892b      	ldrh	r3, [r5, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800a3d8:	6025      	str	r5, [r4, #0]
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a3da:	441a      	add	r2, r3
 800a3dc:	8122      	strh	r2, [r4, #8]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800a3de:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800a3e0:	8943      	ldrh	r3, [r0, #10]
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d0f7      	beq.n	800a3d6 <pbuf_cat+0x2e>
 800a3e6:	4b0d      	ldr	r3, [pc, #52]	@ (800a41c <pbuf_cat+0x74>)
 800a3e8:	f240 3262 	movw	r2, #866	@ 0x362
 800a3ec:	490c      	ldr	r1, [pc, #48]	@ (800a420 <pbuf_cat+0x78>)
 800a3ee:	480d      	ldr	r0, [pc, #52]	@ (800a424 <pbuf_cat+0x7c>)
 800a3f0:	f006 fc34 	bl	8010c5c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800a3f4:	6823      	ldr	r3, [r4, #0]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d0ec      	beq.n	800a3d4 <pbuf_cat+0x2c>
 800a3fa:	4b08      	ldr	r3, [pc, #32]	@ (800a41c <pbuf_cat+0x74>)
 800a3fc:	f240 3263 	movw	r2, #867	@ 0x363
 800a400:	4909      	ldr	r1, [pc, #36]	@ (800a428 <pbuf_cat+0x80>)
 800a402:	4808      	ldr	r0, [pc, #32]	@ (800a424 <pbuf_cat+0x7c>)
 800a404:	f006 fc2a 	bl	8010c5c <iprintf>
 800a408:	e7e4      	b.n	800a3d4 <pbuf_cat+0x2c>
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800a40a:	4b04      	ldr	r3, [pc, #16]	@ (800a41c <pbuf_cat+0x74>)
 800a40c:	f240 3259 	movw	r2, #857	@ 0x359
 800a410:	4906      	ldr	r1, [pc, #24]	@ (800a42c <pbuf_cat+0x84>)
 800a412:	4804      	ldr	r0, [pc, #16]	@ (800a424 <pbuf_cat+0x7c>)
}
 800a414:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800a418:	f006 bc20 	b.w	8010c5c <iprintf>
 800a41c:	08012e80 	.word	0x08012e80
 800a420:	08012fe8 	.word	0x08012fe8
 800a424:	08011f14 	.word	0x08011f14
 800a428:	08013018 	.word	0x08013018
 800a42c:	08012fb0 	.word	0x08012fb0

0800a430 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800a430:	b510      	push	{r4, lr}
 800a432:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 800a434:	f7ff ffb8 	bl	800a3a8 <pbuf_cat>
  if (p != NULL) {
 800a438:	b144      	cbz	r4, 800a44c <pbuf_chain+0x1c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800a43a:	f006 fafd 	bl	8010a38 <sys_arch_protect>
 800a43e:	7ba3      	ldrb	r3, [r4, #14]
 800a440:	3301      	adds	r3, #1
 800a442:	73a3      	strb	r3, [r4, #14]
 800a444:	f006 fb04 	bl	8010a50 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800a448:	7ba3      	ldrb	r3, [r4, #14]
 800a44a:	b103      	cbz	r3, 800a44e <pbuf_chain+0x1e>
  /* t is now referenced by h */
  pbuf_ref(t);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800a44c:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800a44e:	4b04      	ldr	r3, [pc, #16]	@ (800a460 <pbuf_chain+0x30>)
 800a450:	f240 3242 	movw	r2, #834	@ 0x342
 800a454:	4903      	ldr	r1, [pc, #12]	@ (800a464 <pbuf_chain+0x34>)
 800a456:	4804      	ldr	r0, [pc, #16]	@ (800a468 <pbuf_chain+0x38>)
}
 800a458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800a45c:	f006 bbfe 	b.w	8010c5c <iprintf>
 800a460:	08012e80 	.word	0x08012e80
 800a464:	08012f9c 	.word	0x08012f9c
 800a468:	08011f14 	.word	0x08011f14

0800a46c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800a46c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800a470:	2800      	cmp	r0, #0
 800a472:	f000 80ad 	beq.w	800a5d0 <pbuf_copy+0x164>
 800a476:	fab1 f581 	clz	r5, r1
 800a47a:	460e      	mov	r6, r1
 800a47c:	096d      	lsrs	r5, r5, #5
 800a47e:	2900      	cmp	r1, #0
 800a480:	f000 80a6 	beq.w	800a5d0 <pbuf_copy+0x164>
 800a484:	8902      	ldrh	r2, [r0, #8]
 800a486:	4604      	mov	r4, r0
 800a488:	890b      	ldrh	r3, [r1, #8]
 800a48a:	429a      	cmp	r2, r3
 800a48c:	f0c0 80a0 	bcc.w	800a5d0 <pbuf_copy+0x164>
 800a490:	8942      	ldrh	r2, [r0, #10]
  size_t offset_to = 0, offset_from = 0, len;
 800a492:	462f      	mov	r7, r5
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800a494:	f8df 914c 	ldr.w	r9, [pc, #332]	@ 800a5e4 <pbuf_copy+0x178>
 800a498:	f8df a15c 	ldr.w	sl, [pc, #348]	@ 800a5f8 <pbuf_copy+0x18c>
 800a49c:	f8df 814c 	ldr.w	r8, [pc, #332]	@ 800a5ec <pbuf_copy+0x180>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800a4a0:	8973      	ldrh	r3, [r6, #10]
 800a4a2:	eba2 0b07 	sub.w	fp, r2, r7
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800a4a6:	6860      	ldr	r0, [r4, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800a4a8:	1b5b      	subs	r3, r3, r5
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800a4aa:	6871      	ldr	r1, [r6, #4]
 800a4ac:	4438      	add	r0, r7
 800a4ae:	459b      	cmp	fp, r3
 800a4b0:	4429      	add	r1, r5
 800a4b2:	bf28      	it	cs
 800a4b4:	469b      	movcs	fp, r3
 800a4b6:	465a      	mov	r2, fp
    offset_to += len;
 800a4b8:	445f      	add	r7, fp
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800a4ba:	f006 fd4e 	bl	8010f5a <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800a4be:	8963      	ldrh	r3, [r4, #10]
    offset_from += len;
 800a4c0:	445d      	add	r5, fp
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800a4c2:	42bb      	cmp	r3, r7
 800a4c4:	d328      	bcc.n	800a518 <pbuf_copy+0xac>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800a4c6:	8973      	ldrh	r3, [r6, #10]
 800a4c8:	42ab      	cmp	r3, r5
 800a4ca:	d31c      	bcc.n	800a506 <pbuf_copy+0x9a>
    if (offset_from >= p_from->len) {
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
 800a4cc:	8962      	ldrh	r2, [r4, #10]
    if (offset_from >= p_from->len) {
 800a4ce:	42ab      	cmp	r3, r5
    if (offset_to == p_to->len) {
 800a4d0:	4611      	mov	r1, r2
    if (offset_from >= p_from->len) {
 800a4d2:	d90c      	bls.n	800a4ee <pbuf_copy+0x82>
    if (offset_to == p_to->len) {
 800a4d4:	4297      	cmp	r7, r2
 800a4d6:	d027      	beq.n	800a528 <pbuf_copy+0xbc>
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800a4d8:	8931      	ldrh	r1, [r6, #8]
 800a4da:	4299      	cmp	r1, r3
 800a4dc:	d053      	beq.n	800a586 <pbuf_copy+0x11a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800a4de:	8923      	ldrh	r3, [r4, #8]
 800a4e0:	4293      	cmp	r3, r2
 800a4e2:	d1dd      	bne.n	800a4a0 <pbuf_copy+0x34>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a4e4:	6823      	ldr	r3, [r4, #0]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d137      	bne.n	800a55a <pbuf_copy+0xee>
 800a4ea:	8962      	ldrh	r2, [r4, #10]
 800a4ec:	e7d8      	b.n	800a4a0 <pbuf_copy+0x34>
    if (offset_to == p_to->len) {
 800a4ee:	4297      	cmp	r7, r2
      p_from = p_from->next;
 800a4f0:	6836      	ldr	r6, [r6, #0]
    if (offset_to == p_to->len) {
 800a4f2:	d025      	beq.n	800a540 <pbuf_copy+0xd4>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800a4f4:	2e00      	cmp	r6, #0
 800a4f6:	d138      	bne.n	800a56a <pbuf_copy+0xfe>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800a4f8:	8923      	ldrh	r3, [r4, #8]
 800a4fa:	428b      	cmp	r3, r1
 800a4fc:	d02a      	beq.n	800a554 <pbuf_copy+0xe8>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800a4fe:	2400      	movs	r4, #0
}
 800a500:	4620      	mov	r0, r4
 800a502:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800a506:	464b      	mov	r3, r9
 800a508:	f240 32da 	movw	r2, #986	@ 0x3da
 800a50c:	4934      	ldr	r1, [pc, #208]	@ (800a5e0 <pbuf_copy+0x174>)
 800a50e:	4640      	mov	r0, r8
 800a510:	f006 fba4 	bl	8010c5c <iprintf>
    if (offset_from >= p_from->len) {
 800a514:	8973      	ldrh	r3, [r6, #10]
 800a516:	e7d9      	b.n	800a4cc <pbuf_copy+0x60>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800a518:	464b      	mov	r3, r9
 800a51a:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800a51e:	4651      	mov	r1, sl
 800a520:	4640      	mov	r0, r8
 800a522:	f006 fb9b 	bl	8010c5c <iprintf>
 800a526:	e7ce      	b.n	800a4c6 <pbuf_copy+0x5a>
      p_to = p_to->next;
 800a528:	6824      	ldr	r4, [r4, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800a52a:	2c00      	cmp	r4, #0
 800a52c:	d044      	beq.n	800a5b8 <pbuf_copy+0x14c>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800a52e:	8932      	ldrh	r2, [r6, #8]
 800a530:	429a      	cmp	r2, r3
 800a532:	d136      	bne.n	800a5a2 <pbuf_copy+0x136>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a534:	6833      	ldr	r3, [r6, #0]
 800a536:	bb43      	cbnz	r3, 800a58a <pbuf_copy+0x11e>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800a538:	2c00      	cmp	r4, #0
 800a53a:	d132      	bne.n	800a5a2 <pbuf_copy+0x136>
 800a53c:	4627      	mov	r7, r4
 800a53e:	e7d4      	b.n	800a4ea <pbuf_copy+0x7e>
      p_to = p_to->next;
 800a540:	6824      	ldr	r4, [r4, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800a542:	b9c4      	cbnz	r4, 800a576 <pbuf_copy+0x10a>
 800a544:	2e00      	cmp	r6, #0
 800a546:	d137      	bne.n	800a5b8 <pbuf_copy+0x14c>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800a548:	2c00      	cmp	r4, #0
 800a54a:	d0d9      	beq.n	800a500 <pbuf_copy+0x94>
 800a54c:	8961      	ldrh	r1, [r4, #10]
 800a54e:	8923      	ldrh	r3, [r4, #8]
 800a550:	428b      	cmp	r3, r1
 800a552:	d1d4      	bne.n	800a4fe <pbuf_copy+0x92>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a554:	6824      	ldr	r4, [r4, #0]
 800a556:	2c00      	cmp	r4, #0
 800a558:	d0d2      	beq.n	800a500 <pbuf_copy+0x94>
 800a55a:	4b22      	ldr	r3, [pc, #136]	@ (800a5e4 <pbuf_copy+0x178>)
 800a55c:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800a560:	4921      	ldr	r1, [pc, #132]	@ (800a5e8 <pbuf_copy+0x17c>)
 800a562:	4822      	ldr	r0, [pc, #136]	@ (800a5ec <pbuf_copy+0x180>)
 800a564:	f006 fb7a 	bl	8010c5c <iprintf>
 800a568:	e016      	b.n	800a598 <pbuf_copy+0x12c>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800a56a:	8971      	ldrh	r1, [r6, #10]
 800a56c:	8933      	ldrh	r3, [r6, #8]
 800a56e:	4299      	cmp	r1, r3
 800a570:	d01e      	beq.n	800a5b0 <pbuf_copy+0x144>
      offset_from = 0;
 800a572:	2500      	movs	r5, #0
 800a574:	e7b3      	b.n	800a4de <pbuf_copy+0x72>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800a576:	2e00      	cmp	r6, #0
 800a578:	d0e6      	beq.n	800a548 <pbuf_copy+0xdc>
 800a57a:	8932      	ldrh	r2, [r6, #8]
      offset_from = 0;
 800a57c:	2500      	movs	r5, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800a57e:	8973      	ldrh	r3, [r6, #10]
 800a580:	429a      	cmp	r2, r3
 800a582:	d1d9      	bne.n	800a538 <pbuf_copy+0xcc>
 800a584:	e7d6      	b.n	800a534 <pbuf_copy+0xc8>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a586:	6833      	ldr	r3, [r6, #0]
 800a588:	b163      	cbz	r3, 800a5a4 <pbuf_copy+0x138>
 800a58a:	4b16      	ldr	r3, [pc, #88]	@ (800a5e4 <pbuf_copy+0x178>)
 800a58c:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800a590:	4915      	ldr	r1, [pc, #84]	@ (800a5e8 <pbuf_copy+0x17c>)
 800a592:	4816      	ldr	r0, [pc, #88]	@ (800a5ec <pbuf_copy+0x180>)
 800a594:	f006 fb62 	bl	8010c5c <iprintf>
 800a598:	f06f 0405 	mvn.w	r4, #5
}
 800a59c:	4620      	mov	r0, r4
 800a59e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5a2:	2700      	movs	r7, #0
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800a5a4:	8923      	ldrh	r3, [r4, #8]
 800a5a6:	8962      	ldrh	r2, [r4, #10]
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	f47f af79 	bne.w	800a4a0 <pbuf_copy+0x34>
 800a5ae:	e799      	b.n	800a4e4 <pbuf_copy+0x78>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a5b0:	6835      	ldr	r5, [r6, #0]
 800a5b2:	2d00      	cmp	r5, #0
 800a5b4:	d093      	beq.n	800a4de <pbuf_copy+0x72>
 800a5b6:	e7e8      	b.n	800a58a <pbuf_copy+0x11e>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800a5b8:	4b0a      	ldr	r3, [pc, #40]	@ (800a5e4 <pbuf_copy+0x178>)
 800a5ba:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800a5be:	490c      	ldr	r1, [pc, #48]	@ (800a5f0 <pbuf_copy+0x184>)
 800a5c0:	480a      	ldr	r0, [pc, #40]	@ (800a5ec <pbuf_copy+0x180>)
 800a5c2:	f006 fb4b 	bl	8010c5c <iprintf>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800a5c6:	f06f 040f 	mvn.w	r4, #15
}
 800a5ca:	4620      	mov	r0, r4
 800a5cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800a5d0:	4b04      	ldr	r3, [pc, #16]	@ (800a5e4 <pbuf_copy+0x178>)
 800a5d2:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800a5d6:	4907      	ldr	r1, [pc, #28]	@ (800a5f4 <pbuf_copy+0x188>)
 800a5d8:	4804      	ldr	r0, [pc, #16]	@ (800a5ec <pbuf_copy+0x180>)
 800a5da:	f006 fb3f 	bl	8010c5c <iprintf>
 800a5de:	e7f2      	b.n	800a5c6 <pbuf_copy+0x15a>
 800a5e0:	08013070 	.word	0x08013070
 800a5e4:	08012e80 	.word	0x08012e80
 800a5e8:	0801309c 	.word	0x0801309c
 800a5ec:	08011f14 	.word	0x08011f14
 800a5f0:	0801308c 	.word	0x0801308c
 800a5f4:	08013028 	.word	0x08013028
 800a5f8:	08013058 	.word	0x08013058

0800a5fc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800a5fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800a600:	b378      	cbz	r0, 800a662 <pbuf_copy_partial+0x66>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800a602:	460f      	mov	r7, r1
 800a604:	2900      	cmp	r1, #0
 800a606:	d035      	beq.n	800a674 <pbuf_copy_partial+0x78>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a608:	4690      	mov	r8, r2
 800a60a:	b38a      	cbz	r2, 800a670 <pbuf_copy_partial+0x74>
 800a60c:	4605      	mov	r5, r0
 800a60e:	4619      	mov	r1, r3
  u16_t left = 0;
 800a610:	2600      	movs	r6, #0
 800a612:	e005      	b.n	800a620 <pbuf_copy_partial+0x24>
    if ((offset != 0) && (offset >= p->len)) {
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800a614:	b299      	uxth	r1, r3
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a616:	682d      	ldr	r5, [r5, #0]
 800a618:	f1b8 0f00 	cmp.w	r8, #0
 800a61c:	d01e      	beq.n	800a65c <pbuf_copy_partial+0x60>
 800a61e:	b1ed      	cbz	r5, 800a65c <pbuf_copy_partial+0x60>
      buf_copy_len = (u16_t)(p->len - offset);
      if (buf_copy_len > len) {
        buf_copy_len = len;
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800a620:	19b8      	adds	r0, r7, r6
    if ((offset != 0) && (offset >= p->len)) {
 800a622:	f8b5 c00a 	ldrh.w	ip, [r5, #10]
 800a626:	b119      	cbz	r1, 800a630 <pbuf_copy_partial+0x34>
 800a628:	4561      	cmp	r1, ip
      offset = (u16_t)(offset - p->len);
 800a62a:	eba1 030c 	sub.w	r3, r1, ip
    if ((offset != 0) && (offset >= p->len)) {
 800a62e:	d2f1      	bcs.n	800a614 <pbuf_copy_partial+0x18>
      buf_copy_len = (u16_t)(p->len - offset);
 800a630:	ebac 0401 	sub.w	r4, ip, r1
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800a634:	686a      	ldr	r2, [r5, #4]
 800a636:	b2a4      	uxth	r4, r4
 800a638:	4411      	add	r1, r2
 800a63a:	4544      	cmp	r4, r8
 800a63c:	bf28      	it	cs
 800a63e:	4644      	movcs	r4, r8
 800a640:	4622      	mov	r2, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800a642:	4426      	add	r6, r4
      left = (u16_t)(left + buf_copy_len);
      len = (u16_t)(len - buf_copy_len);
 800a644:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800a648:	f006 fc87 	bl	8010f5a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800a64c:	b2b6      	uxth	r6, r6
      offset = 0;
 800a64e:	2100      	movs	r1, #0
      len = (u16_t)(len - buf_copy_len);
 800a650:	fa1f f884 	uxth.w	r8, r4
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a654:	682d      	ldr	r5, [r5, #0]
 800a656:	f1b8 0f00 	cmp.w	r8, #0
 800a65a:	d1e0      	bne.n	800a61e <pbuf_copy_partial+0x22>
    }
  }
  return copied_total;
}
 800a65c:	4630      	mov	r0, r6
 800a65e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800a662:	4b08      	ldr	r3, [pc, #32]	@ (800a684 <pbuf_copy_partial+0x88>)
 800a664:	f240 420a 	movw	r2, #1034	@ 0x40a
 800a668:	4907      	ldr	r1, [pc, #28]	@ (800a688 <pbuf_copy_partial+0x8c>)
 800a66a:	4808      	ldr	r0, [pc, #32]	@ (800a68c <pbuf_copy_partial+0x90>)
 800a66c:	f006 faf6 	bl	8010c5c <iprintf>
 800a670:	2600      	movs	r6, #0
 800a672:	e7f3      	b.n	800a65c <pbuf_copy_partial+0x60>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800a674:	4b03      	ldr	r3, [pc, #12]	@ (800a684 <pbuf_copy_partial+0x88>)
 800a676:	f240 420b 	movw	r2, #1035	@ 0x40b
 800a67a:	4905      	ldr	r1, [pc, #20]	@ (800a690 <pbuf_copy_partial+0x94>)
 800a67c:	4803      	ldr	r0, [pc, #12]	@ (800a68c <pbuf_copy_partial+0x90>)
 800a67e:	f006 faed 	bl	8010c5c <iprintf>
 800a682:	e7f5      	b.n	800a670 <pbuf_copy_partial+0x74>
 800a684:	08012e80 	.word	0x08012e80
 800a688:	080130c8 	.word	0x080130c8
 800a68c:	08011f14 	.word	0x08011f14
 800a690:	080130e8 	.word	0x080130e8

0800a694 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800a694:	b538      	push	{r3, r4, r5, lr}
 800a696:	4615      	mov	r5, r2
 800a698:	460a      	mov	r2, r1
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800a69a:	8929      	ldrh	r1, [r5, #8]
 800a69c:	f7ff fd5e 	bl	800a15c <pbuf_alloc>
  if (q == NULL) {
 800a6a0:	4604      	mov	r4, r0
 800a6a2:	b118      	cbz	r0, 800a6ac <pbuf_clone+0x18>
    return NULL;
  }
  err = pbuf_copy(q, p);
 800a6a4:	4629      	mov	r1, r5
 800a6a6:	f7ff fee1 	bl	800a46c <pbuf_copy>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800a6aa:	b908      	cbnz	r0, 800a6b0 <pbuf_clone+0x1c>
  return q;
}
 800a6ac:	4620      	mov	r0, r4
 800a6ae:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800a6b0:	4b04      	ldr	r3, [pc, #16]	@ (800a6c4 <pbuf_clone+0x30>)
 800a6b2:	f240 5224 	movw	r2, #1316	@ 0x524
 800a6b6:	4904      	ldr	r1, [pc, #16]	@ (800a6c8 <pbuf_clone+0x34>)
 800a6b8:	4804      	ldr	r0, [pc, #16]	@ (800a6cc <pbuf_clone+0x38>)
 800a6ba:	f006 facf 	bl	8010c5c <iprintf>
}
 800a6be:	4620      	mov	r0, r4
 800a6c0:	bd38      	pop	{r3, r4, r5, pc}
 800a6c2:	bf00      	nop
 800a6c4:	08012e80 	.word	0x08012e80
 800a6c8:	0801310c 	.word	0x0801310c
 800a6cc:	08011f14 	.word	0x08011f14

0800a6d0 <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(const struct pbuf *p, u16_t offset, const void *s2, u16_t n)
{
 800a6d0:	b530      	push	{r4, r5, lr}
 800a6d2:	4604      	mov	r4, r0
 800a6d4:	461d      	mov	r5, r3
  u16_t start = offset;
  const struct pbuf *q = p;
  u16_t i;

  /* pbuf long enough to perform check? */
  if (p->tot_len < (offset + n)) {
 800a6d6:	8900      	ldrh	r0, [r0, #8]
 800a6d8:	18cb      	adds	r3, r1, r3
 800a6da:	4298      	cmp	r0, r3
 800a6dc:	da03      	bge.n	800a6e6 <pbuf_memcmp+0x16>
 800a6de:	e028      	b.n	800a732 <pbuf_memcmp+0x62>
  }

  /* get the correct pbuf from chain. We know it succeeds because of p->tot_len check above. */
  while ((q != NULL) && (q->len <= start)) {
    start = (u16_t)(start - q->len);
    q = q->next;
 800a6e0:	6824      	ldr	r4, [r4, #0]
    start = (u16_t)(start - q->len);
 800a6e2:	b281      	uxth	r1, r0
  while ((q != NULL) && (q->len <= start)) {
 800a6e4:	b124      	cbz	r4, 800a6f0 <pbuf_memcmp+0x20>
 800a6e6:	8960      	ldrh	r0, [r4, #10]
 800a6e8:	4288      	cmp	r0, r1
    start = (u16_t)(start - q->len);
 800a6ea:	eba1 0000 	sub.w	r0, r1, r0
  while ((q != NULL) && (q->len <= start)) {
 800a6ee:	d9f7      	bls.n	800a6e0 <pbuf_memcmp+0x10>
  }

  /* return requested data if pbuf is OK */
  for (i = 0; i < n; i++) {
 800a6f0:	b1ed      	cbz	r5, 800a72e <pbuf_memcmp+0x5e>
 800a6f2:	f102 3eff 	add.w	lr, r2, #4294967295
 800a6f6:	2000      	movs	r0, #0
    /* We know pbuf_get_at() succeeds because of p->tot_len check above. */
    u8_t a = pbuf_get_at(q, (u16_t)(start + i));
 800a6f8:	eb01 0c00 	add.w	ip, r1, r0
  const struct pbuf *q = in;
 800a6fc:	4623      	mov	r3, r4
    u8_t a = pbuf_get_at(q, (u16_t)(start + i));
 800a6fe:	fa1f fc8c 	uxth.w	ip, ip
  while ((q != NULL) && (q->len <= offset_left)) {
 800a702:	b924      	cbnz	r4, 800a70e <pbuf_memcmp+0x3e>
 800a704:	e00b      	b.n	800a71e <pbuf_memcmp+0x4e>
    q = q->next;
 800a706:	681b      	ldr	r3, [r3, #0]
    offset_left = (u16_t)(offset_left - q->len);
 800a708:	fa1f fc82 	uxth.w	ip, r2
  while ((q != NULL) && (q->len <= offset_left)) {
 800a70c:	b13b      	cbz	r3, 800a71e <pbuf_memcmp+0x4e>
 800a70e:	895a      	ldrh	r2, [r3, #10]
 800a710:	4562      	cmp	r2, ip
    offset_left = (u16_t)(offset_left - q->len);
 800a712:	ebac 0202 	sub.w	r2, ip, r2
  while ((q != NULL) && (q->len <= offset_left)) {
 800a716:	d9f6      	bls.n	800a706 <pbuf_memcmp+0x36>
    return ((u8_t *)q->payload)[q_idx];
 800a718:	685b      	ldr	r3, [r3, #4]
 800a71a:	f813 300c 	ldrb.w	r3, [r3, ip]
    u8_t b = ((const u8_t *)s2)[i];
    if (a != b) {
 800a71e:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
 800a722:	3001      	adds	r0, #1
    if (a != b) {
 800a724:	429a      	cmp	r2, r3
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
 800a726:	b280      	uxth	r0, r0
    if (a != b) {
 800a728:	d102      	bne.n	800a730 <pbuf_memcmp+0x60>
  for (i = 0; i < n; i++) {
 800a72a:	42a8      	cmp	r0, r5
 800a72c:	d1e4      	bne.n	800a6f8 <pbuf_memcmp+0x28>
    }
  }
  return 0;
 800a72e:	2000      	movs	r0, #0
}
 800a730:	bd30      	pop	{r4, r5, pc}
    return 0xffff;
 800a732:	f64f 70ff 	movw	r0, #65535	@ 0xffff
}
 800a736:	bd30      	pop	{r4, r5, pc}

0800a738 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800a738:	b470      	push	{r4, r5, r6}
 800a73a:	4e12      	ldr	r6, [pc, #72]	@ (800a784 <tcp_new_port+0x4c>)
 800a73c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800a740:	4d11      	ldr	r5, [pc, #68]	@ (800a788 <tcp_new_port+0x50>)
  u16_t n = 0;
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800a742:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 800a746:	8831      	ldrh	r1, [r6, #0]
  tcp_port++;
 800a748:	3101      	adds	r1, #1
 800a74a:	4c10      	ldr	r4, [pc, #64]	@ (800a78c <tcp_new_port+0x54>)
 800a74c:	b289      	uxth	r1, r1
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800a74e:	4561      	cmp	r1, ip
 800a750:	bf08      	it	eq
 800a752:	f44f 4140 	moveq.w	r1, #49152	@ 0xc000
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800a756:	6823      	ldr	r3, [r4, #0]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	b913      	cbnz	r3, 800a762 <tcp_new_port+0x2a>
 800a75c:	e00b      	b.n	800a776 <tcp_new_port+0x3e>
 800a75e:	68db      	ldr	r3, [r3, #12]
 800a760:	b14b      	cbz	r3, 800a776 <tcp_new_port+0x3e>
      if (pcb->local_port == tcp_port) {
 800a762:	8ada      	ldrh	r2, [r3, #22]
 800a764:	428a      	cmp	r2, r1
 800a766:	d1fa      	bne.n	800a75e <tcp_new_port+0x26>
        n++;
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800a768:	3801      	subs	r0, #1
 800a76a:	b280      	uxth	r0, r0
 800a76c:	2800      	cmp	r0, #0
 800a76e:	d1eb      	bne.n	800a748 <tcp_new_port+0x10>
 800a770:	8031      	strh	r1, [r6, #0]
        goto again;
      }
    }
  }
  return tcp_port;
}
 800a772:	bc70      	pop	{r4, r5, r6}
 800a774:	4770      	bx	lr
 800a776:	3404      	adds	r4, #4
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800a778:	42ac      	cmp	r4, r5
 800a77a:	d1ec      	bne.n	800a756 <tcp_new_port+0x1e>
 800a77c:	4608      	mov	r0, r1
 800a77e:	8031      	strh	r1, [r6, #0]
}
 800a780:	bc70      	pop	{r4, r5, r6}
 800a782:	4770      	bx	lr
 800a784:	2400002c 	.word	0x2400002c
 800a788:	080137e8 	.word	0x080137e8
 800a78c:	080137d8 	.word	0x080137d8

0800a790 <tcp_close_shutdown_fin>:
{
 800a790:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a792:	4604      	mov	r4, r0
 800a794:	b1f8      	cbz	r0, 800a7d6 <tcp_close_shutdown_fin+0x46>
  switch (pcb->state) {
 800a796:	7d23      	ldrb	r3, [r4, #20]
 800a798:	2b04      	cmp	r3, #4
 800a79a:	d005      	beq.n	800a7a8 <tcp_close_shutdown_fin+0x18>
 800a79c:	2b07      	cmp	r3, #7
 800a79e:	d00d      	beq.n	800a7bc <tcp_close_shutdown_fin+0x2c>
 800a7a0:	2b03      	cmp	r3, #3
 800a7a2:	d001      	beq.n	800a7a8 <tcp_close_shutdown_fin+0x18>
      return ERR_OK;
 800a7a4:	2000      	movs	r0, #0
}
 800a7a6:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 800a7a8:	4620      	mov	r0, r4
 800a7aa:	f003 fcb1 	bl	800e110 <tcp_send_fin>
      if (err == ERR_OK) {
 800a7ae:	b948      	cbnz	r0, 800a7c4 <tcp_close_shutdown_fin+0x34>
  if (err == ERR_OK) {
 800a7b0:	2305      	movs	r3, #5
    tcp_output(pcb);
 800a7b2:	4620      	mov	r0, r4
        pcb->state = LAST_ACK;
 800a7b4:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 800a7b6:	f003 fe19 	bl	800e3ec <tcp_output>
 800a7ba:	e7f3      	b.n	800a7a4 <tcp_close_shutdown_fin+0x14>
      err = tcp_send_fin(pcb);
 800a7bc:	4620      	mov	r0, r4
 800a7be:	f003 fca7 	bl	800e110 <tcp_send_fin>
      if (err == ERR_OK) {
 800a7c2:	b130      	cbz	r0, 800a7d2 <tcp_close_shutdown_fin+0x42>
  } else if (err == ERR_MEM) {
 800a7c4:	1c43      	adds	r3, r0, #1
 800a7c6:	d1ee      	bne.n	800a7a6 <tcp_close_shutdown_fin+0x16>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800a7c8:	8b63      	ldrh	r3, [r4, #26]
 800a7ca:	f043 0308 	orr.w	r3, r3, #8
 800a7ce:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 800a7d0:	e7e8      	b.n	800a7a4 <tcp_close_shutdown_fin+0x14>
 800a7d2:	2309      	movs	r3, #9
 800a7d4:	e7ed      	b.n	800a7b2 <tcp_close_shutdown_fin+0x22>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a7d6:	4b04      	ldr	r3, [pc, #16]	@ (800a7e8 <tcp_close_shutdown_fin+0x58>)
 800a7d8:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800a7dc:	4903      	ldr	r1, [pc, #12]	@ (800a7ec <tcp_close_shutdown_fin+0x5c>)
 800a7de:	4804      	ldr	r0, [pc, #16]	@ (800a7f0 <tcp_close_shutdown_fin+0x60>)
 800a7e0:	f006 fa3c 	bl	8010c5c <iprintf>
 800a7e4:	e7d7      	b.n	800a796 <tcp_close_shutdown_fin+0x6>
 800a7e6:	bf00      	nop
 800a7e8:	08013120 	.word	0x08013120
 800a7ec:	08013150 	.word	0x08013150
 800a7f0:	08011f14 	.word	0x08011f14

0800a7f4 <tcp_init>:
{
 800a7f4:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800a7f6:	f006 f931 	bl	8010a5c <rand>
 800a7fa:	4b02      	ldr	r3, [pc, #8]	@ (800a804 <tcp_init+0x10>)
 800a7fc:	4a02      	ldr	r2, [pc, #8]	@ (800a808 <tcp_init+0x14>)
 800a7fe:	4303      	orrs	r3, r0
 800a800:	8013      	strh	r3, [r2, #0]
}
 800a802:	bd08      	pop	{r3, pc}
 800a804:	ffffc000 	.word	0xffffc000
 800a808:	2400002c 	.word	0x2400002c

0800a80c <tcp_free>:
{
 800a80c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a80e:	7d03      	ldrb	r3, [r0, #20]
{
 800a810:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a812:	2b01      	cmp	r3, #1
 800a814:	d005      	beq.n	800a822 <tcp_free+0x16>
  memp_free(MEMP_TCP_PCB, pcb);
 800a816:	4621      	mov	r1, r4
 800a818:	2001      	movs	r0, #1
}
 800a81a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 800a81e:	f7ff b921 	b.w	8009a64 <memp_free>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a822:	4906      	ldr	r1, [pc, #24]	@ (800a83c <tcp_free+0x30>)
 800a824:	22d4      	movs	r2, #212	@ 0xd4
 800a826:	4b06      	ldr	r3, [pc, #24]	@ (800a840 <tcp_free+0x34>)
 800a828:	4806      	ldr	r0, [pc, #24]	@ (800a844 <tcp_free+0x38>)
 800a82a:	f006 fa17 	bl	8010c5c <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 800a82e:	4621      	mov	r1, r4
 800a830:	2001      	movs	r0, #1
}
 800a832:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 800a836:	f7ff b915 	b.w	8009a64 <memp_free>
 800a83a:	bf00      	nop
 800a83c:	0801315c 	.word	0x0801315c
 800a840:	08013120 	.word	0x08013120
 800a844:	08011f14 	.word	0x08011f14

0800a848 <tcp_bind>:
{
 800a848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a84c:	460f      	mov	r7, r1
 800a84e:	4680      	mov	r8, r0
 800a850:	4614      	mov	r4, r2
  LWIP_ASSERT_CORE_LOCKED();
 800a852:	f7fc f875 	bl	8006940 <sys_check_core_locking>
  if (ipaddr == NULL) {
 800a856:	b1f7      	cbz	r7, 800a896 <tcp_bind+0x4e>
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800a858:	f1b8 0f00 	cmp.w	r8, #0
 800a85c:	d043      	beq.n	800a8e6 <tcp_bind+0x9e>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800a85e:	f898 3014 	ldrb.w	r3, [r8, #20]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d135      	bne.n	800a8d2 <tcp_bind+0x8a>
  if (port == 0) {
 800a866:	b364      	cbz	r4, 800a8c2 <tcp_bind+0x7a>
 800a868:	4e24      	ldr	r6, [pc, #144]	@ (800a8fc <tcp_bind+0xb4>)
 800a86a:	f106 0110 	add.w	r1, r6, #16
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800a86e:	6833      	ldr	r3, [r6, #0]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	b913      	cbnz	r3, 800a87a <tcp_bind+0x32>
 800a874:	e011      	b.n	800a89a <tcp_bind+0x52>
 800a876:	68db      	ldr	r3, [r3, #12]
 800a878:	b17b      	cbz	r3, 800a89a <tcp_bind+0x52>
        if (cpcb->local_port == port) {
 800a87a:	f8b3 c016 	ldrh.w	ip, [r3, #22]
 800a87e:	45a4      	cmp	ip, r4
 800a880:	d1f9      	bne.n	800a876 <tcp_bind+0x2e>
                (ip_addr_isany(&cpcb->local_ip) ||
 800a882:	681a      	ldr	r2, [r3, #0]
 800a884:	b11a      	cbz	r2, 800a88e <tcp_bind+0x46>
                 ip_addr_isany(ipaddr) ||
 800a886:	683d      	ldr	r5, [r7, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800a888:	b10d      	cbz	r5, 800a88e <tcp_bind+0x46>
 800a88a:	42aa      	cmp	r2, r5
 800a88c:	d1f3      	bne.n	800a876 <tcp_bind+0x2e>
              return ERR_USE;
 800a88e:	f06f 0007 	mvn.w	r0, #7
}
 800a892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ipaddr = IP4_ADDR_ANY;
 800a896:	4f1a      	ldr	r7, [pc, #104]	@ (800a900 <tcp_bind+0xb8>)
 800a898:	e7de      	b.n	800a858 <tcp_bind+0x10>
 800a89a:	3604      	adds	r6, #4
    for (i = 0; i < max_pcb_list; i++) {
 800a89c:	428e      	cmp	r6, r1
 800a89e:	d1e6      	bne.n	800a86e <tcp_bind+0x26>
  if (!ip_addr_isany(ipaddr)
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	b10b      	cbz	r3, 800a8a8 <tcp_bind+0x60>
    ip_addr_set(&pcb->local_ip, ipaddr);
 800a8a4:	f8c8 3000 	str.w	r3, [r8]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800a8a8:	4b16      	ldr	r3, [pc, #88]	@ (800a904 <tcp_bind+0xbc>)
  pcb->local_port = port;
 800a8aa:	f8a8 4016 	strh.w	r4, [r8, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800a8ae:	681a      	ldr	r2, [r3, #0]
 800a8b0:	f8c3 8000 	str.w	r8, [r3]
 800a8b4:	f8c8 200c 	str.w	r2, [r8, #12]
 800a8b8:	f004 f8b6 	bl	800ea28 <tcp_timer_needed>
  return ERR_OK;
 800a8bc:	2000      	movs	r0, #0
}
 800a8be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    port = tcp_new_port();
 800a8c2:	f7ff ff39 	bl	800a738 <tcp_new_port>
    if (port == 0) {
 800a8c6:	4604      	mov	r4, r0
 800a8c8:	2800      	cmp	r0, #0
 800a8ca:	d1e9      	bne.n	800a8a0 <tcp_bind+0x58>
      return ERR_BUF;
 800a8cc:	f06f 0001 	mvn.w	r0, #1
 800a8d0:	e7df      	b.n	800a892 <tcp_bind+0x4a>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800a8d2:	4b0d      	ldr	r3, [pc, #52]	@ (800a908 <tcp_bind+0xc0>)
 800a8d4:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800a8d8:	490c      	ldr	r1, [pc, #48]	@ (800a90c <tcp_bind+0xc4>)
 800a8da:	480d      	ldr	r0, [pc, #52]	@ (800a910 <tcp_bind+0xc8>)
 800a8dc:	f006 f9be 	bl	8010c5c <iprintf>
 800a8e0:	f06f 0005 	mvn.w	r0, #5
 800a8e4:	e7d5      	b.n	800a892 <tcp_bind+0x4a>
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800a8e6:	4b08      	ldr	r3, [pc, #32]	@ (800a908 <tcp_bind+0xc0>)
 800a8e8:	f240 22a9 	movw	r2, #681	@ 0x2a9
 800a8ec:	4909      	ldr	r1, [pc, #36]	@ (800a914 <tcp_bind+0xcc>)
 800a8ee:	4808      	ldr	r0, [pc, #32]	@ (800a910 <tcp_bind+0xc8>)
 800a8f0:	f006 f9b4 	bl	8010c5c <iprintf>
 800a8f4:	f06f 000f 	mvn.w	r0, #15
 800a8f8:	e7cb      	b.n	800a892 <tcp_bind+0x4a>
 800a8fa:	bf00      	nop
 800a8fc:	080137d8 	.word	0x080137d8
 800a900:	08014898 	.word	0x08014898
 800a904:	2400b814 	.word	0x2400b814
 800a908:	08013120 	.word	0x08013120
 800a90c:	08013188 	.word	0x08013188
 800a910:	08011f14 	.word	0x08011f14
 800a914:	08013170 	.word	0x08013170

0800a918 <tcp_listen_with_backlog_and_err>:
{
 800a918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a91a:	4604      	mov	r4, r0
 800a91c:	4617      	mov	r7, r2
  LWIP_ASSERT_CORE_LOCKED();
 800a91e:	f7fc f80f 	bl	8006940 <sys_check_core_locking>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800a922:	2c00      	cmp	r4, #0
 800a924:	d05d      	beq.n	800a9e2 <tcp_listen_with_backlog_and_err+0xca>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800a926:	7d25      	ldrb	r5, [r4, #20]
 800a928:	2d00      	cmp	r5, #0
 800a92a:	d147      	bne.n	800a9bc <tcp_listen_with_backlog_and_err+0xa4>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800a92c:	2002      	movs	r0, #2
 800a92e:	f7ff f853 	bl	80099d8 <memp_malloc>
  if (lpcb == NULL) {
 800a932:	4606      	mov	r6, r0
 800a934:	2800      	cmp	r0, #0
 800a936:	d051      	beq.n	800a9dc <tcp_listen_with_backlog_and_err+0xc4>
  lpcb->callback_arg = pcb->callback_arg;
 800a938:	6923      	ldr	r3, [r4, #16]
  lpcb->state = LISTEN;
 800a93a:	2201      	movs	r2, #1
  lpcb->callback_arg = pcb->callback_arg;
 800a93c:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 800a93e:	8ae3      	ldrh	r3, [r4, #22]
  lpcb->state = LISTEN;
 800a940:	7502      	strb	r2, [r0, #20]
  lpcb->local_port = pcb->local_port;
 800a942:	82c3      	strh	r3, [r0, #22]
  lpcb->prio = pcb->prio;
 800a944:	7d62      	ldrb	r2, [r4, #21]
 800a946:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 800a948:	7a62      	ldrb	r2, [r4, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800a94a:	7205      	strb	r5, [r0, #8]
  lpcb->so_options = pcb->so_options;
 800a94c:	7242      	strb	r2, [r0, #9]
  lpcb->ttl = pcb->ttl;
 800a94e:	7ae2      	ldrb	r2, [r4, #11]
 800a950:	72c2      	strb	r2, [r0, #11]
  lpcb->tos = pcb->tos;
 800a952:	7aa2      	ldrb	r2, [r4, #10]
 800a954:	7282      	strb	r2, [r0, #10]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800a956:	6822      	ldr	r2, [r4, #0]
 800a958:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 800a95a:	b99b      	cbnz	r3, 800a984 <tcp_listen_with_backlog_and_err+0x6c>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a95c:	7d23      	ldrb	r3, [r4, #20]
 800a95e:	2b01      	cmp	r3, #1
 800a960:	d020      	beq.n	800a9a4 <tcp_listen_with_backlog_and_err+0x8c>
  memp_free(MEMP_TCP_PCB, pcb);
 800a962:	4621      	mov	r1, r4
 800a964:	2001      	movs	r0, #1
 800a966:	f7ff f87d 	bl	8009a64 <memp_free>
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800a96a:	4b23      	ldr	r3, [pc, #140]	@ (800a9f8 <tcp_listen_with_backlog_and_err+0xe0>)
  lpcb->accept = tcp_accept_null;
 800a96c:	4923      	ldr	r1, [pc, #140]	@ (800a9fc <tcp_listen_with_backlog_and_err+0xe4>)
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800a96e:	681a      	ldr	r2, [r3, #0]
  lpcb->accept = tcp_accept_null;
 800a970:	61b1      	str	r1, [r6, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800a972:	60f2      	str	r2, [r6, #12]
 800a974:	601e      	str	r6, [r3, #0]
 800a976:	f004 f857 	bl	800ea28 <tcp_timer_needed>
  res = ERR_OK;
 800a97a:	2300      	movs	r3, #0
  if (err != NULL) {
 800a97c:	b107      	cbz	r7, 800a980 <tcp_listen_with_backlog_and_err+0x68>
    *err = res;
 800a97e:	703b      	strb	r3, [r7, #0]
}
 800a980:	4630      	mov	r0, r6
 800a982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800a984:	4a1e      	ldr	r2, [pc, #120]	@ (800aa00 <tcp_listen_with_backlog_and_err+0xe8>)
 800a986:	6813      	ldr	r3, [r2, #0]
 800a988:	42a3      	cmp	r3, r4
 800a98a:	d012      	beq.n	800a9b2 <tcp_listen_with_backlog_and_err+0x9a>
 800a98c:	b12b      	cbz	r3, 800a99a <tcp_listen_with_backlog_and_err+0x82>
 800a98e:	68d9      	ldr	r1, [r3, #12]
 800a990:	42a1      	cmp	r1, r4
 800a992:	d01e      	beq.n	800a9d2 <tcp_listen_with_backlog_and_err+0xba>
 800a994:	460b      	mov	r3, r1
 800a996:	2b00      	cmp	r3, #0
 800a998:	d1f9      	bne.n	800a98e <tcp_listen_with_backlog_and_err+0x76>
 800a99a:	2300      	movs	r3, #0
 800a99c:	60e3      	str	r3, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a99e:	7d23      	ldrb	r3, [r4, #20]
 800a9a0:	2b01      	cmp	r3, #1
 800a9a2:	d1de      	bne.n	800a962 <tcp_listen_with_backlog_and_err+0x4a>
 800a9a4:	4b17      	ldr	r3, [pc, #92]	@ (800aa04 <tcp_listen_with_backlog_and_err+0xec>)
 800a9a6:	22d4      	movs	r2, #212	@ 0xd4
 800a9a8:	4917      	ldr	r1, [pc, #92]	@ (800aa08 <tcp_listen_with_backlog_and_err+0xf0>)
 800a9aa:	4818      	ldr	r0, [pc, #96]	@ (800aa0c <tcp_listen_with_backlog_and_err+0xf4>)
 800a9ac:	f006 f956 	bl	8010c5c <iprintf>
 800a9b0:	e7d7      	b.n	800a962 <tcp_listen_with_backlog_and_err+0x4a>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800a9b2:	68e3      	ldr	r3, [r4, #12]
 800a9b4:	6013      	str	r3, [r2, #0]
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	60e3      	str	r3, [r4, #12]
 800a9ba:	e7f0      	b.n	800a99e <tcp_listen_with_backlog_and_err+0x86>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800a9bc:	4b11      	ldr	r3, [pc, #68]	@ (800aa04 <tcp_listen_with_backlog_and_err+0xec>)
 800a9be:	f240 325a 	movw	r2, #858	@ 0x35a
 800a9c2:	4913      	ldr	r1, [pc, #76]	@ (800aa10 <tcp_listen_with_backlog_and_err+0xf8>)
  struct tcp_pcb_listen *lpcb = NULL;
 800a9c4:	2600      	movs	r6, #0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800a9c6:	4811      	ldr	r0, [pc, #68]	@ (800aa0c <tcp_listen_with_backlog_and_err+0xf4>)
 800a9c8:	f006 f948 	bl	8010c5c <iprintf>
 800a9cc:	f06f 030e 	mvn.w	r3, #14
 800a9d0:	e7d4      	b.n	800a97c <tcp_listen_with_backlog_and_err+0x64>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800a9d2:	68e2      	ldr	r2, [r4, #12]
 800a9d4:	60da      	str	r2, [r3, #12]
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	60e3      	str	r3, [r4, #12]
 800a9da:	e7e0      	b.n	800a99e <tcp_listen_with_backlog_and_err+0x86>
    res = ERR_MEM;
 800a9dc:	f04f 33ff 	mov.w	r3, #4294967295
 800a9e0:	e7cc      	b.n	800a97c <tcp_listen_with_backlog_and_err+0x64>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800a9e2:	4b08      	ldr	r3, [pc, #32]	@ (800aa04 <tcp_listen_with_backlog_and_err+0xec>)
 800a9e4:	f240 3259 	movw	r2, #857	@ 0x359
 800a9e8:	490a      	ldr	r1, [pc, #40]	@ (800aa14 <tcp_listen_with_backlog_and_err+0xfc>)
  struct tcp_pcb_listen *lpcb = NULL;
 800a9ea:	4626      	mov	r6, r4
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800a9ec:	4807      	ldr	r0, [pc, #28]	@ (800aa0c <tcp_listen_with_backlog_and_err+0xf4>)
 800a9ee:	f006 f935 	bl	8010c5c <iprintf>
 800a9f2:	f06f 030f 	mvn.w	r3, #15
 800a9f6:	e7c1      	b.n	800a97c <tcp_listen_with_backlog_and_err+0x64>
 800a9f8:	2400b810 	.word	0x2400b810
 800a9fc:	0800b6a9 	.word	0x0800b6a9
 800aa00:	2400b814 	.word	0x2400b814
 800aa04:	08013120 	.word	0x08013120
 800aa08:	0801315c 	.word	0x0801315c
 800aa0c:	08011f14 	.word	0x08011f14
 800aa10:	080131e0 	.word	0x080131e0
 800aa14:	080131b0 	.word	0x080131b0

0800aa18 <tcp_listen_with_backlog>:
{
 800aa18:	b538      	push	{r3, r4, r5, lr}
 800aa1a:	4604      	mov	r4, r0
 800aa1c:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 800aa1e:	f7fb ff8f 	bl	8006940 <sys_check_core_locking>
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800aa22:	2200      	movs	r2, #0
 800aa24:	4629      	mov	r1, r5
 800aa26:	4620      	mov	r0, r4
}
 800aa28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800aa2c:	f7ff bf74 	b.w	800a918 <tcp_listen_with_backlog_and_err>

0800aa30 <tcp_update_rcv_ann_wnd>:
{
 800aa30:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800aa32:	4604      	mov	r4, r0
 800aa34:	b1c8      	cbz	r0, 800aa6a <tcp_update_rcv_ann_wnd+0x3a>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800aa36:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800aa38:	f640 3c68 	movw	ip, #2920	@ 0xb68
 800aa3c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800aa3e:	f8b4 e032 	ldrh.w	lr, [r4, #50]	@ 0x32
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800aa42:	6a62      	ldr	r2, [r4, #36]	@ 0x24
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800aa44:	1a58      	subs	r0, r3, r1
 800aa46:	45e6      	cmp	lr, ip
 800aa48:	4410      	add	r0, r2
 800aa4a:	bf94      	ite	ls
 800aa4c:	eba0 050e 	subls.w	r5, r0, lr
 800aa50:	eba0 050c 	subhi.w	r5, r0, ip
 800aa54:	2d00      	cmp	r5, #0
 800aa56:	db01      	blt.n	800aa5c <tcp_update_rcv_ann_wnd+0x2c>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800aa58:	8563      	strh	r3, [r4, #42]	@ 0x2a
}
 800aa5a:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800aa5c:	1a53      	subs	r3, r2, r1
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	dd0b      	ble.n	800aa7a <tcp_update_rcv_ann_wnd+0x4a>
 800aa62:	2300      	movs	r3, #0
    return 0;
 800aa64:	4618      	mov	r0, r3
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800aa66:	8563      	strh	r3, [r4, #42]	@ 0x2a
}
 800aa68:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800aa6a:	4b0c      	ldr	r3, [pc, #48]	@ (800aa9c <tcp_update_rcv_ann_wnd+0x6c>)
 800aa6c:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800aa70:	490b      	ldr	r1, [pc, #44]	@ (800aaa0 <tcp_update_rcv_ann_wnd+0x70>)
 800aa72:	480c      	ldr	r0, [pc, #48]	@ (800aaa4 <tcp_update_rcv_ann_wnd+0x74>)
 800aa74:	f006 f8f2 	bl	8010c5c <iprintf>
 800aa78:	e7dd      	b.n	800aa36 <tcp_update_rcv_ann_wnd+0x6>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800aa7a:	1a8d      	subs	r5, r1, r2
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800aa7c:	f5b5 3f80 	cmp.w	r5, #65536	@ 0x10000
 800aa80:	d203      	bcs.n	800aa8a <tcp_update_rcv_ann_wnd+0x5a>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800aa82:	b2ab      	uxth	r3, r5
    return 0;
 800aa84:	2000      	movs	r0, #0
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800aa86:	8563      	strh	r3, [r4, #42]	@ 0x2a
}
 800aa88:	bd38      	pop	{r3, r4, r5, pc}
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800aa8a:	4b04      	ldr	r3, [pc, #16]	@ (800aa9c <tcp_update_rcv_ann_wnd+0x6c>)
 800aa8c:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800aa90:	4905      	ldr	r1, [pc, #20]	@ (800aaa8 <tcp_update_rcv_ann_wnd+0x78>)
 800aa92:	4804      	ldr	r0, [pc, #16]	@ (800aaa4 <tcp_update_rcv_ann_wnd+0x74>)
 800aa94:	f006 f8e2 	bl	8010c5c <iprintf>
 800aa98:	e7f3      	b.n	800aa82 <tcp_update_rcv_ann_wnd+0x52>
 800aa9a:	bf00      	nop
 800aa9c:	08013120 	.word	0x08013120
 800aaa0:	08013218 	.word	0x08013218
 800aaa4:	08011f14 	.word	0x08011f14
 800aaa8:	0801323c 	.word	0x0801323c

0800aaac <tcp_recved>:
{
 800aaac:	b570      	push	{r4, r5, r6, lr}
 800aaae:	4605      	mov	r5, r0
 800aab0:	460c      	mov	r4, r1
  LWIP_ASSERT_CORE_LOCKED();
 800aab2:	f7fb ff45 	bl	8006940 <sys_check_core_locking>
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800aab6:	b33d      	cbz	r5, 800ab08 <tcp_recved+0x5c>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800aab8:	7d2b      	ldrb	r3, [r5, #20]
 800aaba:	2b01      	cmp	r3, #1
 800aabc:	d01c      	beq.n	800aaf8 <tcp_recved+0x4c>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800aabe:	8d2b      	ldrh	r3, [r5, #40]	@ 0x28
 800aac0:	1919      	adds	r1, r3, r4
 800aac2:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800aac4:	428b      	cmp	r3, r1
 800aac6:	d803      	bhi.n	800aad0 <tcp_recved+0x24>
 800aac8:	f241 63d0 	movw	r3, #5840	@ 0x16d0
 800aacc:	4299      	cmp	r1, r3
 800aace:	d901      	bls.n	800aad4 <tcp_recved+0x28>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800aad0:	f241 61d0 	movw	r1, #5840	@ 0x16d0
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800aad4:	4628      	mov	r0, r5
 800aad6:	8529      	strh	r1, [r5, #40]	@ 0x28
 800aad8:	f7ff ffaa 	bl	800aa30 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800aadc:	f240 53b3 	movw	r3, #1459	@ 0x5b3
 800aae0:	4298      	cmp	r0, r3
 800aae2:	d800      	bhi.n	800aae6 <tcp_recved+0x3a>
}
 800aae4:	bd70      	pop	{r4, r5, r6, pc}
    tcp_ack_now(pcb);
 800aae6:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 800aae8:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 800aaea:	f043 0302 	orr.w	r3, r3, #2
 800aaee:	836b      	strh	r3, [r5, #26]
}
 800aaf0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tcp_output(pcb);
 800aaf4:	f003 bc7a 	b.w	800e3ec <tcp_output>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800aaf8:	4b08      	ldr	r3, [pc, #32]	@ (800ab1c <tcp_recved+0x70>)
 800aafa:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800aafe:	4908      	ldr	r1, [pc, #32]	@ (800ab20 <tcp_recved+0x74>)
 800ab00:	4808      	ldr	r0, [pc, #32]	@ (800ab24 <tcp_recved+0x78>)
 800ab02:	f006 f8ab 	bl	8010c5c <iprintf>
 800ab06:	e7da      	b.n	800aabe <tcp_recved+0x12>
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800ab08:	4b04      	ldr	r3, [pc, #16]	@ (800ab1c <tcp_recved+0x70>)
 800ab0a:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800ab0e:	4906      	ldr	r1, [pc, #24]	@ (800ab28 <tcp_recved+0x7c>)
 800ab10:	4804      	ldr	r0, [pc, #16]	@ (800ab24 <tcp_recved+0x78>)
}
 800ab12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800ab16:	f006 b8a1 	b.w	8010c5c <iprintf>
 800ab1a:	bf00      	nop
 800ab1c:	08013120 	.word	0x08013120
 800ab20:	08013270 	.word	0x08013270
 800ab24:	08011f14 	.word	0x08011f14
 800ab28:	08013258 	.word	0x08013258

0800ab2c <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800ab2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab2e:	4604      	mov	r4, r0
 800ab30:	460e      	mov	r6, r1
 800ab32:	4617      	mov	r7, r2
 800ab34:	461d      	mov	r5, r3
  struct netif *netif = NULL;
  err_t ret;
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();
 800ab36:	f7fb ff03 	bl	8006940 <sys_check_core_locking>

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800ab3a:	2c00      	cmp	r4, #0
 800ab3c:	f000 808a 	beq.w	800ac54 <tcp_connect+0x128>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800ab40:	2e00      	cmp	r6, #0
 800ab42:	d07d      	beq.n	800ac40 <tcp_connect+0x114>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800ab44:	7d23      	ldrb	r3, [r4, #20]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d16a      	bne.n	800ac20 <tcp_connect+0xf4>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800ab4a:	6833      	ldr	r3, [r6, #0]
  pcb->remote_port = port;

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800ab4c:	7a20      	ldrb	r0, [r4, #8]
  pcb->remote_port = port;
 800ab4e:	8327      	strh	r7, [r4, #24]
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800ab50:	6063      	str	r3, [r4, #4]
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800ab52:	2800      	cmp	r0, #0
 800ab54:	d049      	beq.n	800abea <tcp_connect+0xbe>
    netif = netif_get_by_index(pcb->netif_idx);
 800ab56:	f7ff f987 	bl	8009e68 <netif_get_by_index>
 800ab5a:	4607      	mov	r7, r0
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  }
  if (netif == NULL) {
 800ab5c:	2f00      	cmp	r7, #0
 800ab5e:	d06c      	beq.n	800ac3a <tcp_connect+0x10e>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800ab60:	6823      	ldr	r3, [r4, #0]
 800ab62:	b90b      	cbnz	r3, 800ab68 <tcp_connect+0x3c>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
    if (local_ip == NULL) {
      return ERR_RTE;
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6023      	str	r3, [r4, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800ab68:	8ae6      	ldrh	r6, [r4, #22]
  if (pcb->local_port == 0) {
 800ab6a:	b926      	cbnz	r6, 800ab76 <tcp_connect+0x4a>
    pcb->local_port = tcp_new_port();
 800ab6c:	f7ff fde4 	bl	800a738 <tcp_new_port>
 800ab70:	82e0      	strh	r0, [r4, #22]
    if (pcb->local_port == 0) {
 800ab72:	2800      	cmp	r0, #0
 800ab74:	d05e      	beq.n	800ac34 <tcp_connect+0x108>
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800ab76:	4b3b      	ldr	r3, [pc, #236]	@ (800ac64 <tcp_connect+0x138>)
 800ab78:	4a3b      	ldr	r2, [pc, #236]	@ (800ac68 <tcp_connect+0x13c>)
 800ab7a:	6811      	ldr	r1, [r2, #0]
 800ab7c:	681a      	ldr	r2, [r3, #0]
 800ab7e:	440a      	add	r2, r1
 800ab80:	601a      	str	r2, [r3, #0]
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ab82:	4b3a      	ldr	r3, [pc, #232]	@ (800ac6c <tcp_connect+0x140>)
  pcb->snd_nxt = iss;
 800ab84:	6522      	str	r2, [r4, #80]	@ 0x50
  pcb->lastack = iss - 1;
 800ab86:	3a01      	subs	r2, #1
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ab88:	62a3      	str	r3, [r4, #40]	@ 0x28
  pcb->snd_wnd = TCP_WND;
 800ab8a:	f241 63d0 	movw	r3, #5840	@ 0x16d0
  pcb->lastack = iss - 1;
 800ab8e:	6462      	str	r2, [r4, #68]	@ 0x44
  pcb->snd_lbb = iss - 1;
 800ab90:	e9c4 2216 	strd	r2, r2, [r4, #88]	@ 0x58
#if LWIP_IPV4
  {
    if (outif == NULL) {
      return sendmss;
    }
    mtu = outif->mtu;
 800ab94:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
  pcb->snd_wnd = TCP_WND;
 800ab96:	f8a4 3060 	strh.w	r3, [r4, #96]	@ 0x60
  pcb->rcv_nxt = 0;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	6263      	str	r3, [r4, #36]	@ 0x24
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ab9e:	62e3      	str	r3, [r4, #44]	@ 0x2c
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800aba0:	2a00      	cmp	r2, #0
 800aba2:	d037      	beq.n	800ac14 <tcp_connect+0xe8>
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800aba4:	2a28      	cmp	r2, #40	@ 0x28
 800aba6:	bf38      	it	cc
 800aba8:	2228      	movcc	r2, #40	@ 0x28
 800abaa:	3a28      	subs	r2, #40	@ 0x28
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800abac:	b292      	uxth	r2, r2
 800abae:	f5b2 7f06 	cmp.w	r2, #536	@ 0x218
 800abb2:	bf28      	it	cs
 800abb4:	f44f 7206 	movcs.w	r2, #536	@ 0x218
  pcb->cwnd = 1;
 800abb8:	2301      	movs	r3, #1
  pcb->connected = connected;
 800abba:	f8c4 5088 	str.w	r5, [r4, #136]	@ 0x88
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800abbe:	2102      	movs	r1, #2
 800abc0:	4620      	mov	r0, r4
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800abc2:	8662      	strh	r2, [r4, #50]	@ 0x32
  pcb->cwnd = 1;
 800abc4:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800abc8:	f003 fa02 	bl	800dfd0 <tcp_enqueue_flags>
  if (ret == ERR_OK) {
 800abcc:	4605      	mov	r5, r0
 800abce:	b9f8      	cbnz	r0, 800ac10 <tcp_connect+0xe4>
    pcb->state = SYN_SENT;
 800abd0:	2302      	movs	r3, #2
 800abd2:	7523      	strb	r3, [r4, #20]
    if (old_local_port != 0) {
 800abd4:	b186      	cbz	r6, 800abf8 <tcp_connect+0xcc>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800abd6:	4a26      	ldr	r2, [pc, #152]	@ (800ac70 <tcp_connect+0x144>)
 800abd8:	6813      	ldr	r3, [r2, #0]
 800abda:	42a3      	cmp	r3, r4
 800abdc:	d01d      	beq.n	800ac1a <tcp_connect+0xee>
 800abde:	b15b      	cbz	r3, 800abf8 <tcp_connect+0xcc>
 800abe0:	68da      	ldr	r2, [r3, #12]
 800abe2:	42a2      	cmp	r2, r4
 800abe4:	d006      	beq.n	800abf4 <tcp_connect+0xc8>
 800abe6:	4613      	mov	r3, r2
 800abe8:	e7f9      	b.n	800abde <tcp_connect+0xb2>
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800abea:	1d20      	adds	r0, r4, #4
 800abec:	f005 f804 	bl	800fbf8 <ip4_route>
 800abf0:	4607      	mov	r7, r0
 800abf2:	e7b3      	b.n	800ab5c <tcp_connect+0x30>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800abf4:	68e2      	ldr	r2, [r4, #12]
 800abf6:	60da      	str	r2, [r3, #12]
    TCP_REG_ACTIVE(pcb);
 800abf8:	4b1e      	ldr	r3, [pc, #120]	@ (800ac74 <tcp_connect+0x148>)
 800abfa:	681a      	ldr	r2, [r3, #0]
 800abfc:	601c      	str	r4, [r3, #0]
 800abfe:	60e2      	str	r2, [r4, #12]
 800ac00:	f003 ff12 	bl	800ea28 <tcp_timer_needed>
 800ac04:	4b1c      	ldr	r3, [pc, #112]	@ (800ac78 <tcp_connect+0x14c>)
 800ac06:	2201      	movs	r2, #1
    tcp_output(pcb);
 800ac08:	4620      	mov	r0, r4
    TCP_REG_ACTIVE(pcb);
 800ac0a:	701a      	strb	r2, [r3, #0]
    tcp_output(pcb);
 800ac0c:	f003 fbee 	bl	800e3ec <tcp_output>
}
 800ac10:	4628      	mov	r0, r5
 800ac12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return sendmss;
 800ac14:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800ac18:	e7ce      	b.n	800abb8 <tcp_connect+0x8c>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800ac1a:	68e3      	ldr	r3, [r4, #12]
 800ac1c:	6013      	str	r3, [r2, #0]
 800ac1e:	e7eb      	b.n	800abf8 <tcp_connect+0xcc>
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800ac20:	4b16      	ldr	r3, [pc, #88]	@ (800ac7c <tcp_connect+0x150>)
 800ac22:	f44f 6287 	mov.w	r2, #1080	@ 0x438
 800ac26:	4916      	ldr	r1, [pc, #88]	@ (800ac80 <tcp_connect+0x154>)
 800ac28:	f06f 0509 	mvn.w	r5, #9
 800ac2c:	4815      	ldr	r0, [pc, #84]	@ (800ac84 <tcp_connect+0x158>)
 800ac2e:	f006 f815 	bl	8010c5c <iprintf>
 800ac32:	e7ed      	b.n	800ac10 <tcp_connect+0xe4>
      return ERR_BUF;
 800ac34:	f06f 0501 	mvn.w	r5, #1
 800ac38:	e7ea      	b.n	800ac10 <tcp_connect+0xe4>
    return ERR_RTE;
 800ac3a:	f06f 0503 	mvn.w	r5, #3
 800ac3e:	e7e7      	b.n	800ac10 <tcp_connect+0xe4>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800ac40:	4b0e      	ldr	r3, [pc, #56]	@ (800ac7c <tcp_connect+0x150>)
 800ac42:	f240 4236 	movw	r2, #1078	@ 0x436
 800ac46:	4910      	ldr	r1, [pc, #64]	@ (800ac88 <tcp_connect+0x15c>)
 800ac48:	480e      	ldr	r0, [pc, #56]	@ (800ac84 <tcp_connect+0x158>)
 800ac4a:	f006 f807 	bl	8010c5c <iprintf>
  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800ac4e:	f06f 050f 	mvn.w	r5, #15
 800ac52:	e7dd      	b.n	800ac10 <tcp_connect+0xe4>
 800ac54:	4b09      	ldr	r3, [pc, #36]	@ (800ac7c <tcp_connect+0x150>)
 800ac56:	f240 4235 	movw	r2, #1077	@ 0x435
 800ac5a:	490c      	ldr	r1, [pc, #48]	@ (800ac8c <tcp_connect+0x160>)
 800ac5c:	4809      	ldr	r0, [pc, #36]	@ (800ac84 <tcp_connect+0x158>)
 800ac5e:	f005 fffd 	bl	8010c5c <iprintf>
 800ac62:	e7f4      	b.n	800ac4e <tcp_connect+0x122>
 800ac64:	24000028 	.word	0x24000028
 800ac68:	2400b818 	.word	0x2400b818
 800ac6c:	16d016d0 	.word	0x16d016d0
 800ac70:	2400b814 	.word	0x2400b814
 800ac74:	2400b80c 	.word	0x2400b80c
 800ac78:	2400b807 	.word	0x2400b807
 800ac7c:	08013120 	.word	0x08013120
 800ac80:	080132d0 	.word	0x080132d0
 800ac84:	08011f14 	.word	0x08011f14
 800ac88:	080132b4 	.word	0x080132b4
 800ac8c:	08013298 	.word	0x08013298

0800ac90 <tcp_segs_free>:
  while (seg != NULL) {
 800ac90:	b170      	cbz	r0, 800acb0 <tcp_segs_free+0x20>
{
 800ac92:	b538      	push	{r3, r4, r5, lr}
 800ac94:	4604      	mov	r4, r0
      pbuf_free(seg->p);
 800ac96:	4625      	mov	r5, r4
    struct tcp_seg *next = seg->next;
 800ac98:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800ac9a:	6868      	ldr	r0, [r5, #4]
 800ac9c:	b108      	cbz	r0, 800aca2 <tcp_segs_free+0x12>
      pbuf_free(seg->p);
 800ac9e:	f7ff f9ed 	bl	800a07c <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800aca2:	4629      	mov	r1, r5
 800aca4:	2003      	movs	r0, #3
 800aca6:	f7fe fedd 	bl	8009a64 <memp_free>
  while (seg != NULL) {
 800acaa:	2c00      	cmp	r4, #0
 800acac:	d1f3      	bne.n	800ac96 <tcp_segs_free+0x6>
}
 800acae:	bd38      	pop	{r3, r4, r5, pc}
 800acb0:	4770      	bx	lr
 800acb2:	bf00      	nop

0800acb4 <tcp_seg_free>:
  if (seg != NULL) {
 800acb4:	b158      	cbz	r0, 800acce <tcp_seg_free+0x1a>
{
 800acb6:	b510      	push	{r4, lr}
 800acb8:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 800acba:	6840      	ldr	r0, [r0, #4]
 800acbc:	b108      	cbz	r0, 800acc2 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 800acbe:	f7ff f9dd 	bl	800a07c <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800acc2:	4621      	mov	r1, r4
 800acc4:	2003      	movs	r0, #3
}
 800acc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 800acca:	f7fe becb 	b.w	8009a64 <memp_free>
 800acce:	4770      	bx	lr

0800acd0 <tcp_seg_copy>:
{
 800acd0:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800acd2:	4605      	mov	r5, r0
 800acd4:	b188      	cbz	r0, 800acfa <tcp_seg_copy+0x2a>
  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800acd6:	2003      	movs	r0, #3
 800acd8:	f7fe fe7e 	bl	80099d8 <memp_malloc>
  if (cseg == NULL) {
 800acdc:	4604      	mov	r4, r0
 800acde:	b150      	cbz	r0, 800acf6 <tcp_seg_copy+0x26>
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800ace0:	6868      	ldr	r0, [r5, #4]
 800ace2:	6829      	ldr	r1, [r5, #0]
 800ace4:	68aa      	ldr	r2, [r5, #8]
 800ace6:	68eb      	ldr	r3, [r5, #12]
 800ace8:	6060      	str	r0, [r4, #4]
 800acea:	6021      	str	r1, [r4, #0]
  pbuf_ref(cseg->p);
 800acec:	6860      	ldr	r0, [r4, #4]
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800acee:	60a2      	str	r2, [r4, #8]
 800acf0:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
 800acf2:	f7ff fb3b 	bl	800a36c <pbuf_ref>
}
 800acf6:	4620      	mov	r0, r4
 800acf8:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800acfa:	4b04      	ldr	r3, [pc, #16]	@ (800ad0c <tcp_seg_copy+0x3c>)
 800acfc:	f240 6282 	movw	r2, #1666	@ 0x682
 800ad00:	4903      	ldr	r1, [pc, #12]	@ (800ad10 <tcp_seg_copy+0x40>)
 800ad02:	4804      	ldr	r0, [pc, #16]	@ (800ad14 <tcp_seg_copy+0x44>)
 800ad04:	f005 ffaa 	bl	8010c5c <iprintf>
 800ad08:	e7e5      	b.n	800acd6 <tcp_seg_copy+0x6>
 800ad0a:	bf00      	nop
 800ad0c:	08013120 	.word	0x08013120
 800ad10:	08013300 	.word	0x08013300
 800ad14:	08011f14 	.word	0x08011f14

0800ad18 <tcp_arg>:
{
 800ad18:	b538      	push	{r3, r4, r5, lr}
 800ad1a:	4604      	mov	r4, r0
 800ad1c:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 800ad1e:	f7fb fe0f 	bl	8006940 <sys_check_core_locking>
  if (pcb != NULL) {
 800ad22:	b104      	cbz	r4, 800ad26 <tcp_arg+0xe>
    pcb->callback_arg = arg;
 800ad24:	6125      	str	r5, [r4, #16]
}
 800ad26:	bd38      	pop	{r3, r4, r5, pc}

0800ad28 <tcp_recv>:
{
 800ad28:	b538      	push	{r3, r4, r5, lr}
 800ad2a:	4604      	mov	r4, r0
 800ad2c:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 800ad2e:	f7fb fe07 	bl	8006940 <sys_check_core_locking>
  if (pcb != NULL) {
 800ad32:	b124      	cbz	r4, 800ad3e <tcp_recv+0x16>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800ad34:	7d23      	ldrb	r3, [r4, #20]
 800ad36:	2b01      	cmp	r3, #1
 800ad38:	d002      	beq.n	800ad40 <tcp_recv+0x18>
    pcb->recv = recv;
 800ad3a:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
}
 800ad3e:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800ad40:	4b03      	ldr	r3, [pc, #12]	@ (800ad50 <tcp_recv+0x28>)
 800ad42:	f240 72df 	movw	r2, #2015	@ 0x7df
 800ad46:	4903      	ldr	r1, [pc, #12]	@ (800ad54 <tcp_recv+0x2c>)
 800ad48:	4803      	ldr	r0, [pc, #12]	@ (800ad58 <tcp_recv+0x30>)
 800ad4a:	f005 ff87 	bl	8010c5c <iprintf>
 800ad4e:	e7f4      	b.n	800ad3a <tcp_recv+0x12>
 800ad50:	08013120 	.word	0x08013120
 800ad54:	0801331c 	.word	0x0801331c
 800ad58:	08011f14 	.word	0x08011f14

0800ad5c <tcp_sent>:
{
 800ad5c:	b538      	push	{r3, r4, r5, lr}
 800ad5e:	4604      	mov	r4, r0
 800ad60:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 800ad62:	f7fb fded 	bl	8006940 <sys_check_core_locking>
  if (pcb != NULL) {
 800ad66:	b124      	cbz	r4, 800ad72 <tcp_sent+0x16>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800ad68:	7d23      	ldrb	r3, [r4, #20]
 800ad6a:	2b01      	cmp	r3, #1
 800ad6c:	d002      	beq.n	800ad74 <tcp_sent+0x18>
    pcb->sent = sent;
 800ad6e:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
}
 800ad72:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800ad74:	4b03      	ldr	r3, [pc, #12]	@ (800ad84 <tcp_sent+0x28>)
 800ad76:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 800ad7a:	4903      	ldr	r1, [pc, #12]	@ (800ad88 <tcp_sent+0x2c>)
 800ad7c:	4803      	ldr	r0, [pc, #12]	@ (800ad8c <tcp_sent+0x30>)
 800ad7e:	f005 ff6d 	bl	8010c5c <iprintf>
 800ad82:	e7f4      	b.n	800ad6e <tcp_sent+0x12>
 800ad84:	08013120 	.word	0x08013120
 800ad88:	08013344 	.word	0x08013344
 800ad8c:	08011f14 	.word	0x08011f14

0800ad90 <tcp_err>:
{
 800ad90:	b538      	push	{r3, r4, r5, lr}
 800ad92:	4604      	mov	r4, r0
 800ad94:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 800ad96:	f7fb fdd3 	bl	8006940 <sys_check_core_locking>
  if (pcb != NULL) {
 800ad9a:	b124      	cbz	r4, 800ada6 <tcp_err+0x16>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800ad9c:	7d23      	ldrb	r3, [r4, #20]
 800ad9e:	2b01      	cmp	r3, #1
 800ada0:	d002      	beq.n	800ada8 <tcp_err+0x18>
    pcb->errf = err;
 800ada2:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
}
 800ada6:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800ada8:	4b03      	ldr	r3, [pc, #12]	@ (800adb8 <tcp_err+0x28>)
 800adaa:	f640 020d 	movw	r2, #2061	@ 0x80d
 800adae:	4903      	ldr	r1, [pc, #12]	@ (800adbc <tcp_err+0x2c>)
 800adb0:	4803      	ldr	r0, [pc, #12]	@ (800adc0 <tcp_err+0x30>)
 800adb2:	f005 ff53 	bl	8010c5c <iprintf>
 800adb6:	e7f4      	b.n	800ada2 <tcp_err+0x12>
 800adb8:	08013120 	.word	0x08013120
 800adbc:	0801336c 	.word	0x0801336c
 800adc0:	08011f14 	.word	0x08011f14

0800adc4 <tcp_accept>:
{
 800adc4:	b538      	push	{r3, r4, r5, lr}
 800adc6:	4604      	mov	r4, r0
 800adc8:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 800adca:	f7fb fdb9 	bl	8006940 <sys_check_core_locking>
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800adce:	b11c      	cbz	r4, 800add8 <tcp_accept+0x14>
 800add0:	7d23      	ldrb	r3, [r4, #20]
 800add2:	2b01      	cmp	r3, #1
    lpcb->accept = accept;
 800add4:	bf08      	it	eq
 800add6:	61a5      	streq	r5, [r4, #24]
}
 800add8:	bd38      	pop	{r3, r4, r5, pc}
 800adda:	bf00      	nop

0800addc <tcp_poll>:
{
 800addc:	b570      	push	{r4, r5, r6, lr}
 800adde:	4604      	mov	r4, r0
 800ade0:	460e      	mov	r6, r1
 800ade2:	4615      	mov	r5, r2
  LWIP_ASSERT_CORE_LOCKED();
 800ade4:	f7fb fdac 	bl	8006940 <sys_check_core_locking>
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800ade8:	b18c      	cbz	r4, 800ae0e <tcp_poll+0x32>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800adea:	7d23      	ldrb	r3, [r4, #20]
 800adec:	2b01      	cmp	r3, #1
 800adee:	d003      	beq.n	800adf8 <tcp_poll+0x1c>
  pcb->poll = poll;
 800adf0:	f8c4 608c 	str.w	r6, [r4, #140]	@ 0x8c
  pcb->pollinterval = interval;
 800adf4:	7765      	strb	r5, [r4, #29]
}
 800adf6:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800adf8:	4b09      	ldr	r3, [pc, #36]	@ (800ae20 <tcp_poll+0x44>)
 800adfa:	f640 023e 	movw	r2, #2110	@ 0x83e
 800adfe:	4909      	ldr	r1, [pc, #36]	@ (800ae24 <tcp_poll+0x48>)
 800ae00:	4809      	ldr	r0, [pc, #36]	@ (800ae28 <tcp_poll+0x4c>)
 800ae02:	f005 ff2b 	bl	8010c5c <iprintf>
  pcb->poll = poll;
 800ae06:	f8c4 608c 	str.w	r6, [r4, #140]	@ 0x8c
  pcb->pollinterval = interval;
 800ae0a:	7765      	strb	r5, [r4, #29]
}
 800ae0c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800ae0e:	4b04      	ldr	r3, [pc, #16]	@ (800ae20 <tcp_poll+0x44>)
 800ae10:	f640 023d 	movw	r2, #2109	@ 0x83d
 800ae14:	4905      	ldr	r1, [pc, #20]	@ (800ae2c <tcp_poll+0x50>)
 800ae16:	4804      	ldr	r0, [pc, #16]	@ (800ae28 <tcp_poll+0x4c>)
}
 800ae18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800ae1c:	f005 bf1e 	b.w	8010c5c <iprintf>
 800ae20:	08013120 	.word	0x08013120
 800ae24:	080133ac 	.word	0x080133ac
 800ae28:	08011f14 	.word	0x08011f14
 800ae2c:	08013394 	.word	0x08013394

0800ae30 <tcp_pcb_purge>:
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800ae30:	2800      	cmp	r0, #0
 800ae32:	d041      	beq.n	800aeb8 <tcp_pcb_purge+0x88>
{
 800ae34:	b570      	push	{r4, r5, r6, lr}
  if (pcb->state != CLOSED &&
 800ae36:	7d03      	ldrb	r3, [r0, #20]
 800ae38:	4605      	mov	r5, r0
      pcb->state != TIME_WAIT &&
 800ae3a:	2b0a      	cmp	r3, #10
 800ae3c:	d001      	beq.n	800ae42 <tcp_pcb_purge+0x12>
 800ae3e:	2b01      	cmp	r3, #1
 800ae40:	d800      	bhi.n	800ae44 <tcp_pcb_purge+0x14>
}
 800ae42:	bd70      	pop	{r4, r5, r6, pc}
    if (pcb->refused_data != NULL) {
 800ae44:	6f80      	ldr	r0, [r0, #120]	@ 0x78
 800ae46:	b118      	cbz	r0, 800ae50 <tcp_pcb_purge+0x20>
      pbuf_free(pcb->refused_data);
 800ae48:	f7ff f918 	bl	800a07c <pbuf_free>
      pcb->refused_data = NULL;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	67ab      	str	r3, [r5, #120]	@ 0x78
    if (pcb->ooseq != NULL) {
 800ae50:	6f6c      	ldr	r4, [r5, #116]	@ 0x74
 800ae52:	b164      	cbz	r4, 800ae6e <tcp_pcb_purge+0x3e>
      pbuf_free(seg->p);
 800ae54:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 800ae56:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800ae58:	6870      	ldr	r0, [r6, #4]
 800ae5a:	b108      	cbz	r0, 800ae60 <tcp_pcb_purge+0x30>
      pbuf_free(seg->p);
 800ae5c:	f7ff f90e 	bl	800a07c <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800ae60:	4631      	mov	r1, r6
 800ae62:	2003      	movs	r0, #3
 800ae64:	f7fe fdfe 	bl	8009a64 <memp_free>
  while (seg != NULL) {
 800ae68:	2c00      	cmp	r4, #0
 800ae6a:	d1f3      	bne.n	800ae54 <tcp_pcb_purge+0x24>
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
  if (pcb->ooseq) {
    tcp_segs_free(pcb->ooseq);
    pcb->ooseq = NULL;
 800ae6c:	676c      	str	r4, [r5, #116]	@ 0x74
    pcb->rtime = -1;
 800ae6e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
    tcp_segs_free(pcb->unsent);
 800ae72:	6eec      	ldr	r4, [r5, #108]	@ 0x6c
    pcb->rtime = -1;
 800ae74:	862b      	strh	r3, [r5, #48]	@ 0x30
  while (seg != NULL) {
 800ae76:	b15c      	cbz	r4, 800ae90 <tcp_pcb_purge+0x60>
      pbuf_free(seg->p);
 800ae78:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 800ae7a:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800ae7c:	6870      	ldr	r0, [r6, #4]
 800ae7e:	b108      	cbz	r0, 800ae84 <tcp_pcb_purge+0x54>
      pbuf_free(seg->p);
 800ae80:	f7ff f8fc 	bl	800a07c <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800ae84:	4631      	mov	r1, r6
 800ae86:	2003      	movs	r0, #3
 800ae88:	f7fe fdec 	bl	8009a64 <memp_free>
  while (seg != NULL) {
 800ae8c:	2c00      	cmp	r4, #0
 800ae8e:	d1f3      	bne.n	800ae78 <tcp_pcb_purge+0x48>
    tcp_segs_free(pcb->unacked);
 800ae90:	6f2c      	ldr	r4, [r5, #112]	@ 0x70
  while (seg != NULL) {
 800ae92:	b15c      	cbz	r4, 800aeac <tcp_pcb_purge+0x7c>
      pbuf_free(seg->p);
 800ae94:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 800ae96:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800ae98:	6870      	ldr	r0, [r6, #4]
 800ae9a:	b108      	cbz	r0, 800aea0 <tcp_pcb_purge+0x70>
      pbuf_free(seg->p);
 800ae9c:	f7ff f8ee 	bl	800a07c <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800aea0:	4631      	mov	r1, r6
 800aea2:	2003      	movs	r0, #3
 800aea4:	f7fe fdde 	bl	8009a64 <memp_free>
  while (seg != NULL) {
 800aea8:	2c00      	cmp	r4, #0
 800aeaa:	d1f3      	bne.n	800ae94 <tcp_pcb_purge+0x64>
    pcb->unacked = pcb->unsent = NULL;
 800aeac:	2300      	movs	r3, #0
 800aeae:	e9c5 331b 	strd	r3, r3, [r5, #108]	@ 0x6c
    pcb->unsent_oversize = 0;
 800aeb2:	f8a5 3068 	strh.w	r3, [r5, #104]	@ 0x68
}
 800aeb6:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800aeb8:	4b03      	ldr	r3, [pc, #12]	@ (800aec8 <tcp_pcb_purge+0x98>)
 800aeba:	f640 0251 	movw	r2, #2129	@ 0x851
 800aebe:	4903      	ldr	r1, [pc, #12]	@ (800aecc <tcp_pcb_purge+0x9c>)
 800aec0:	4803      	ldr	r0, [pc, #12]	@ (800aed0 <tcp_pcb_purge+0xa0>)
 800aec2:	f005 becb 	b.w	8010c5c <iprintf>
 800aec6:	bf00      	nop
 800aec8:	08013120 	.word	0x08013120
 800aecc:	080133cc 	.word	0x080133cc
 800aed0:	08011f14 	.word	0x08011f14

0800aed4 <tcp_slowtmr>:
{
 800aed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 800aed8:	4da7      	ldr	r5, [pc, #668]	@ (800b178 <tcp_slowtmr+0x2a4>)
{
 800aeda:	b087      	sub	sp, #28
  ++tcp_timer_ctr;
 800aedc:	4ea7      	ldr	r6, [pc, #668]	@ (800b17c <tcp_slowtmr+0x2a8>)
  ++tcp_ticks;
 800aede:	682b      	ldr	r3, [r5, #0]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800aee0:	f8df b2c4 	ldr.w	fp, [pc, #708]	@ 800b1a8 <tcp_slowtmr+0x2d4>
  ++tcp_ticks;
 800aee4:	3301      	adds	r3, #1
 800aee6:	602b      	str	r3, [r5, #0]
  ++tcp_timer_ctr;
 800aee8:	7833      	ldrb	r3, [r6, #0]
 800aeea:	3301      	adds	r3, #1
 800aeec:	7033      	strb	r3, [r6, #0]
  pcb = tcp_active_pcbs;
 800aeee:	4ba4      	ldr	r3, [pc, #656]	@ (800b180 <tcp_slowtmr+0x2ac>)
 800aef0:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 800aef2:	2c00      	cmp	r4, #0
 800aef4:	d05f      	beq.n	800afb6 <tcp_slowtmr+0xe2>
  prev = NULL;
 800aef6:	2700      	movs	r7, #0
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800aef8:	46b9      	mov	r9, r7
 800aefa:	7d23      	ldrb	r3, [r4, #20]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	f000 80e4 	beq.w	800b0ca <tcp_slowtmr+0x1f6>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800af02:	2b01      	cmp	r3, #1
 800af04:	f000 80ec 	beq.w	800b0e0 <tcp_slowtmr+0x20c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800af08:	2b0a      	cmp	r3, #10
 800af0a:	f000 80f4 	beq.w	800b0f6 <tcp_slowtmr+0x222>
    if (pcb->last_timer == tcp_timer_ctr) {
 800af0e:	7833      	ldrb	r3, [r6, #0]
 800af10:	7fa2      	ldrb	r2, [r4, #30]
 800af12:	429a      	cmp	r2, r3
 800af14:	f000 80fb 	beq.w	800b10e <tcp_slowtmr+0x23a>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800af18:	7d22      	ldrb	r2, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 800af1a:	77a3      	strb	r3, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800af1c:	2a02      	cmp	r2, #2
 800af1e:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 800af22:	f000 809e 	beq.w	800b062 <tcp_slowtmr+0x18e>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800af26:	2b0b      	cmp	r3, #11
 800af28:	f240 80a2 	bls.w	800b070 <tcp_slowtmr+0x19c>
      ++pcb_remove;
 800af2c:	f04f 0801 	mov.w	r8, #1
    if (pcb->state == FIN_WAIT_2) {
 800af30:	2a06      	cmp	r2, #6
 800af32:	f000 80bb 	beq.w	800b0ac <tcp_slowtmr+0x1d8>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800af36:	7a63      	ldrb	r3, [r4, #9]
 800af38:	071b      	lsls	r3, r3, #28
 800af3a:	f140 8096 	bpl.w	800b06a <tcp_slowtmr+0x196>
 800af3e:	2a04      	cmp	r2, #4
 800af40:	d002      	beq.n	800af48 <tcp_slowtmr+0x74>
 800af42:	2a07      	cmp	r2, #7
 800af44:	f040 8091 	bne.w	800b06a <tcp_slowtmr+0x196>
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800af48:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 800af4c:	4b8d      	ldr	r3, [pc, #564]	@ (800b184 <tcp_slowtmr+0x2b0>)
 800af4e:	498e      	ldr	r1, [pc, #568]	@ (800b188 <tcp_slowtmr+0x2b4>)
 800af50:	4403      	add	r3, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800af52:	682a      	ldr	r2, [r5, #0]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800af54:	fba1 1303 	umull	r1, r3, r1, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800af58:	6a21      	ldr	r1, [r4, #32]
 800af5a:	1a52      	subs	r2, r2, r1
 800af5c:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 800af60:	f240 8189 	bls.w	800b276 <tcp_slowtmr+0x3a2>
        ++pcb_remove;
 800af64:	f108 0801 	add.w	r8, r8, #1
        ++pcb_reset;
 800af68:	f04f 0a01 	mov.w	sl, #1
        ++pcb_remove;
 800af6c:	fa5f f888 	uxtb.w	r8, r8
    if (pcb->ooseq != NULL &&
 800af70:	6f67      	ldr	r7, [r4, #116]	@ 0x74
 800af72:	b157      	cbz	r7, 800af8a <tcp_slowtmr+0xb6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800af74:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 800af78:	682a      	ldr	r2, [r5, #0]
 800af7a:	6a21      	ldr	r1, [r4, #32]
 800af7c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800af80:	1a52      	subs	r2, r2, r1
    if (pcb->ooseq != NULL &&
 800af82:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 800af86:	f080 80e7 	bcs.w	800b158 <tcp_slowtmr+0x284>
    if (pcb->state == SYN_RCVD) {
 800af8a:	7d23      	ldrb	r3, [r4, #20]
 800af8c:	2b03      	cmp	r3, #3
 800af8e:	f000 80c4 	beq.w	800b11a <tcp_slowtmr+0x246>
    if (pcb->state == LAST_ACK) {
 800af92:	2b09      	cmp	r3, #9
 800af94:	d030      	beq.n	800aff8 <tcp_slowtmr+0x124>
    if (pcb_remove) {
 800af96:	f1b8 0f00 	cmp.w	r8, #0
 800af9a:	d132      	bne.n	800b002 <tcp_slowtmr+0x12e>
      ++prev->polltmr;
 800af9c:	7f23      	ldrb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800af9e:	7f62      	ldrb	r2, [r4, #29]
      ++prev->polltmr;
 800afa0:	3301      	adds	r3, #1
      pcb = pcb->next;
 800afa2:	68e7      	ldr	r7, [r4, #12]
      ++prev->polltmr;
 800afa4:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 800afa6:	429a      	cmp	r2, r3
      ++prev->polltmr;
 800afa8:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800afaa:	f240 80bd 	bls.w	800b128 <tcp_slowtmr+0x254>
    pcb_reset = 0;
 800afae:	46a1      	mov	r9, r4
      pcb = pcb->next;
 800afb0:	463c      	mov	r4, r7
  while (pcb != NULL) {
 800afb2:	2c00      	cmp	r4, #0
 800afb4:	d1a1      	bne.n	800aefa <tcp_slowtmr+0x26>
  pcb = tcp_tw_pcbs;
 800afb6:	4f75      	ldr	r7, [pc, #468]	@ (800b18c <tcp_slowtmr+0x2b8>)
 800afb8:	683c      	ldr	r4, [r7, #0]
  while (pcb != NULL) {
 800afba:	b1d4      	cbz	r4, 800aff2 <tcp_slowtmr+0x11e>
  prev = NULL;
 800afbc:	2600      	movs	r6, #0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800afbe:	f8df a1e8 	ldr.w	sl, [pc, #488]	@ 800b1a8 <tcp_slowtmr+0x2d4>
 800afc2:	f8df 91e8 	ldr.w	r9, [pc, #488]	@ 800b1ac <tcp_slowtmr+0x2d8>
 800afc6:	f8df 81d0 	ldr.w	r8, [pc, #464]	@ 800b198 <tcp_slowtmr+0x2c4>
 800afca:	7d23      	ldrb	r3, [r4, #20]
 800afcc:	2b0a      	cmp	r3, #10
 800afce:	d006      	beq.n	800afde <tcp_slowtmr+0x10a>
 800afd0:	4653      	mov	r3, sl
 800afd2:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800afd6:	4649      	mov	r1, r9
 800afd8:	4640      	mov	r0, r8
 800afda:	f005 fe3f 	bl	8010c5c <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800afde:	682b      	ldr	r3, [r5, #0]
 800afe0:	6a22      	ldr	r2, [r4, #32]
 800afe2:	1a9b      	subs	r3, r3, r2
 800afe4:	2bf0      	cmp	r3, #240	@ 0xf0
 800afe6:	f200 812b 	bhi.w	800b240 <tcp_slowtmr+0x36c>
      pcb = pcb->next;
 800afea:	4626      	mov	r6, r4
 800afec:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 800afee:	2c00      	cmp	r4, #0
 800aff0:	d1eb      	bne.n	800afca <tcp_slowtmr+0xf6>
}
 800aff2:	b007      	add	sp, #28
 800aff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800aff8:	682b      	ldr	r3, [r5, #0]
 800affa:	6a22      	ldr	r2, [r4, #32]
 800affc:	1a9b      	subs	r3, r3, r2
 800affe:	2bf0      	cmp	r3, #240	@ 0xf0
 800b000:	d9c9      	bls.n	800af96 <tcp_slowtmr+0xc2>
      tcp_pcb_purge(pcb);
 800b002:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 800b004:	f8d4 7090 	ldr.w	r7, [r4, #144]	@ 0x90
      tcp_pcb_purge(pcb);
 800b008:	f7ff ff12 	bl	800ae30 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800b00c:	4b5c      	ldr	r3, [pc, #368]	@ (800b180 <tcp_slowtmr+0x2ac>)
 800b00e:	681b      	ldr	r3, [r3, #0]
      if (prev != NULL) {
 800b010:	f1b9 0f00 	cmp.w	r9, #0
 800b014:	f000 8176 	beq.w	800b304 <tcp_slowtmr+0x430>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800b018:	42a3      	cmp	r3, r4
 800b01a:	f000 819d 	beq.w	800b358 <tcp_slowtmr+0x484>
        prev->next = pcb->next;
 800b01e:	68e3      	ldr	r3, [r4, #12]
 800b020:	f8c9 300c 	str.w	r3, [r9, #12]
      if (pcb_reset) {
 800b024:	f1ba 0f00 	cmp.w	sl, #0
 800b028:	f040 813f 	bne.w	800b2aa <tcp_slowtmr+0x3d6>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b02c:	7d23      	ldrb	r3, [r4, #20]
 800b02e:	2b01      	cmp	r3, #1
      pcb = pcb->next;
 800b030:	e9d4 a803 	ldrd	sl, r8, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b034:	f000 814b 	beq.w	800b2ce <tcp_slowtmr+0x3fa>
  memp_free(MEMP_TCP_PCB, pcb);
 800b038:	4621      	mov	r1, r4
 800b03a:	2001      	movs	r0, #1
 800b03c:	f7fe fd12 	bl	8009a64 <memp_free>
      tcp_active_pcbs_changed = 0;
 800b040:	4c53      	ldr	r4, [pc, #332]	@ (800b190 <tcp_slowtmr+0x2bc>)
 800b042:	2300      	movs	r3, #0
 800b044:	7023      	strb	r3, [r4, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800b046:	b13f      	cbz	r7, 800b058 <tcp_slowtmr+0x184>
 800b048:	f06f 010c 	mvn.w	r1, #12
 800b04c:	4640      	mov	r0, r8
 800b04e:	47b8      	blx	r7
      if (tcp_active_pcbs_changed) {
 800b050:	7823      	ldrb	r3, [r4, #0]
 800b052:	2b00      	cmp	r3, #0
 800b054:	f47f af4b 	bne.w	800aeee <tcp_slowtmr+0x1a>
      pcb = pcb->next;
 800b058:	4654      	mov	r4, sl
  while (pcb != NULL) {
 800b05a:	2c00      	cmp	r4, #0
 800b05c:	f47f af4d 	bne.w	800aefa <tcp_slowtmr+0x26>
 800b060:	e7a9      	b.n	800afb6 <tcp_slowtmr+0xe2>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800b062:	2b05      	cmp	r3, #5
 800b064:	d904      	bls.n	800b070 <tcp_slowtmr+0x19c>
      ++pcb_remove;
 800b066:	f04f 0801 	mov.w	r8, #1
    pcb_reset = 0;
 800b06a:	f04f 0a00 	mov.w	sl, #0
 800b06e:	e77f      	b.n	800af70 <tcp_slowtmr+0x9c>
      if (pcb->persist_backoff > 0) {
 800b070:	f894 8099 	ldrb.w	r8, [r4, #153]	@ 0x99
 800b074:	f1b8 0f00 	cmp.w	r8, #0
 800b078:	f000 809a 	beq.w	800b1b0 <tcp_slowtmr+0x2dc>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800b07c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800b07e:	b133      	cbz	r3, 800b08e <tcp_slowtmr+0x1ba>
 800b080:	465b      	mov	r3, fp
 800b082:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800b086:	4943      	ldr	r1, [pc, #268]	@ (800b194 <tcp_slowtmr+0x2c0>)
 800b088:	4843      	ldr	r0, [pc, #268]	@ (800b198 <tcp_slowtmr+0x2c4>)
 800b08a:	f005 fde7 	bl	8010c5c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800b08e:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800b090:	2b00      	cmp	r3, #0
 800b092:	f000 8182 	beq.w	800b39a <tcp_slowtmr+0x4c6>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800b096:	f894 309a 	ldrb.w	r3, [r4, #154]	@ 0x9a
 800b09a:	2b0b      	cmp	r3, #11
 800b09c:	f240 811e 	bls.w	800b2dc <tcp_slowtmr+0x408>
    if (pcb->state == FIN_WAIT_2) {
 800b0a0:	7d22      	ldrb	r2, [r4, #20]
      ++pcb_remove;
 800b0a2:	f04f 0801 	mov.w	r8, #1
    if (pcb->state == FIN_WAIT_2) {
 800b0a6:	2a06      	cmp	r2, #6
 800b0a8:	f47f af45 	bne.w	800af36 <tcp_slowtmr+0x62>
      if (pcb->flags & TF_RXCLOSED) {
 800b0ac:	8b63      	ldrh	r3, [r4, #26]
 800b0ae:	06da      	lsls	r2, r3, #27
 800b0b0:	d5db      	bpl.n	800b06a <tcp_slowtmr+0x196>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b0b2:	682b      	ldr	r3, [r5, #0]
 800b0b4:	6a22      	ldr	r2, [r4, #32]
 800b0b6:	1a9b      	subs	r3, r3, r2
 800b0b8:	2b28      	cmp	r3, #40	@ 0x28
 800b0ba:	d9d6      	bls.n	800b06a <tcp_slowtmr+0x196>
          ++pcb_remove;
 800b0bc:	f108 0801 	add.w	r8, r8, #1
    pcb_reset = 0;
 800b0c0:	f04f 0a00 	mov.w	sl, #0
          ++pcb_remove;
 800b0c4:	fa5f f888 	uxtb.w	r8, r8
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b0c8:	e752      	b.n	800af70 <tcp_slowtmr+0x9c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800b0ca:	465b      	mov	r3, fp
 800b0cc:	f240 42be 	movw	r2, #1214	@ 0x4be
 800b0d0:	4932      	ldr	r1, [pc, #200]	@ (800b19c <tcp_slowtmr+0x2c8>)
 800b0d2:	4831      	ldr	r0, [pc, #196]	@ (800b198 <tcp_slowtmr+0x2c4>)
 800b0d4:	f005 fdc2 	bl	8010c5c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800b0d8:	7d23      	ldrb	r3, [r4, #20]
 800b0da:	2b01      	cmp	r3, #1
 800b0dc:	f47f af14 	bne.w	800af08 <tcp_slowtmr+0x34>
 800b0e0:	465b      	mov	r3, fp
 800b0e2:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800b0e6:	492e      	ldr	r1, [pc, #184]	@ (800b1a0 <tcp_slowtmr+0x2cc>)
 800b0e8:	482b      	ldr	r0, [pc, #172]	@ (800b198 <tcp_slowtmr+0x2c4>)
 800b0ea:	f005 fdb7 	bl	8010c5c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800b0ee:	7d23      	ldrb	r3, [r4, #20]
 800b0f0:	2b0a      	cmp	r3, #10
 800b0f2:	f47f af0c 	bne.w	800af0e <tcp_slowtmr+0x3a>
 800b0f6:	465b      	mov	r3, fp
 800b0f8:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800b0fc:	4929      	ldr	r1, [pc, #164]	@ (800b1a4 <tcp_slowtmr+0x2d0>)
 800b0fe:	4826      	ldr	r0, [pc, #152]	@ (800b198 <tcp_slowtmr+0x2c4>)
 800b100:	f005 fdac 	bl	8010c5c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800b104:	7833      	ldrb	r3, [r6, #0]
 800b106:	7fa2      	ldrb	r2, [r4, #30]
 800b108:	429a      	cmp	r2, r3
 800b10a:	f47f af05 	bne.w	800af18 <tcp_slowtmr+0x44>
      continue;
 800b10e:	46a1      	mov	r9, r4
      pcb = pcb->next;
 800b110:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 800b112:	2c00      	cmp	r4, #0
 800b114:	f47f aef1 	bne.w	800aefa <tcp_slowtmr+0x26>
 800b118:	e74d      	b.n	800afb6 <tcp_slowtmr+0xe2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b11a:	682b      	ldr	r3, [r5, #0]
 800b11c:	6a22      	ldr	r2, [r4, #32]
 800b11e:	1a9b      	subs	r3, r3, r2
 800b120:	2b28      	cmp	r3, #40	@ 0x28
 800b122:	f63f af6e 	bhi.w	800b002 <tcp_slowtmr+0x12e>
 800b126:	e736      	b.n	800af96 <tcp_slowtmr+0xc2>
        tcp_active_pcbs_changed = 0;
 800b128:	f8df 9064 	ldr.w	r9, [pc, #100]	@ 800b190 <tcp_slowtmr+0x2bc>
        TCP_EVENT_POLL(prev, err);
 800b12c:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
        prev->polltmr = 0;
 800b130:	f884 801c 	strb.w	r8, [r4, #28]
        tcp_active_pcbs_changed = 0;
 800b134:	f889 8000 	strb.w	r8, [r9]
        TCP_EVENT_POLL(prev, err);
 800b138:	b153      	cbz	r3, 800b150 <tcp_slowtmr+0x27c>
 800b13a:	4621      	mov	r1, r4
 800b13c:	6920      	ldr	r0, [r4, #16]
 800b13e:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 800b140:	f899 3000 	ldrb.w	r3, [r9]
 800b144:	2b00      	cmp	r3, #0
 800b146:	f47f aed2 	bne.w	800aeee <tcp_slowtmr+0x1a>
        if (err == ERR_OK) {
 800b14a:	2800      	cmp	r0, #0
 800b14c:	f47f af2f 	bne.w	800afae <tcp_slowtmr+0xda>
          tcp_output(prev);
 800b150:	4620      	mov	r0, r4
 800b152:	f003 f94b 	bl	800e3ec <tcp_output>
 800b156:	e72a      	b.n	800afae <tcp_slowtmr+0xda>
 800b158:	9405      	str	r4, [sp, #20]
      pbuf_free(seg->p);
 800b15a:	463c      	mov	r4, r7
    struct tcp_seg *next = seg->next;
 800b15c:	683f      	ldr	r7, [r7, #0]
    if (seg->p != NULL) {
 800b15e:	6860      	ldr	r0, [r4, #4]
 800b160:	b108      	cbz	r0, 800b166 <tcp_slowtmr+0x292>
      pbuf_free(seg->p);
 800b162:	f7fe ff8b 	bl	800a07c <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800b166:	4621      	mov	r1, r4
 800b168:	2003      	movs	r0, #3
 800b16a:	f7fe fc7b 	bl	8009a64 <memp_free>
  while (seg != NULL) {
 800b16e:	2f00      	cmp	r7, #0
 800b170:	d1f3      	bne.n	800b15a <tcp_slowtmr+0x286>
    pcb->ooseq = NULL;
 800b172:	9c05      	ldr	r4, [sp, #20]
 800b174:	6767      	str	r7, [r4, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800b176:	e708      	b.n	800af8a <tcp_slowtmr+0xb6>
 800b178:	2400b818 	.word	0x2400b818
 800b17c:	2400b805 	.word	0x2400b805
 800b180:	2400b80c 	.word	0x2400b80c
 800b184:	000a4cb8 	.word	0x000a4cb8
 800b188:	10624dd3 	.word	0x10624dd3
 800b18c:	2400b808 	.word	0x2400b808
 800b190:	2400b807 	.word	0x2400b807
 800b194:	08013470 	.word	0x08013470
 800b198:	08011f14 	.word	0x08011f14
 800b19c:	080133e8 	.word	0x080133e8
 800b1a0:	08013414 	.word	0x08013414
 800b1a4:	08013440 	.word	0x08013440
 800b1a8:	08013120 	.word	0x08013120
 800b1ac:	08013534 	.word	0x08013534
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800b1b0:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	@ 0x30
 800b1b4:	f647 70fe 	movw	r0, #32766	@ 0x7ffe
 800b1b8:	b299      	uxth	r1, r3
 800b1ba:	4281      	cmp	r1, r0
 800b1bc:	d802      	bhi.n	800b1c4 <tcp_slowtmr+0x2f0>
          ++pcb->rtime;
 800b1be:	3101      	adds	r1, #1
 800b1c0:	b20b      	sxth	r3, r1
 800b1c2:	8623      	strh	r3, [r4, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800b1c4:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	@ 0x40
 800b1c8:	4299      	cmp	r1, r3
 800b1ca:	f73f aeb1 	bgt.w	800af30 <tcp_slowtmr+0x5c>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800b1ce:	4620      	mov	r0, r4
 800b1d0:	f002 ffd0 	bl	800e174 <tcp_rexmit_rto_prepare>
 800b1d4:	2800      	cmp	r0, #0
 800b1d6:	f040 80e8 	bne.w	800b3aa <tcp_slowtmr+0x4d6>
 800b1da:	7d23      	ldrb	r3, [r4, #20]
            if (pcb->state != SYN_SENT) {
 800b1dc:	2b02      	cmp	r3, #2
 800b1de:	d014      	beq.n	800b20a <tcp_slowtmr+0x336>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800b1e0:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800b1e4:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	@ 0x3c
 800b1e8:	2a0c      	cmp	r2, #12
 800b1ea:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	@ 0x3e
 800b1ee:	bf28      	it	cs
 800b1f0:	220c      	movcs	r2, #12
 800b1f2:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 800b1f6:	497a      	ldr	r1, [pc, #488]	@ (800b3e0 <tcp_slowtmr+0x50c>)
 800b1f8:	5c8a      	ldrb	r2, [r1, r2]
 800b1fa:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800b1fc:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800b200:	4293      	cmp	r3, r2
 800b202:	bfa8      	it	ge
 800b204:	4613      	movge	r3, r2
 800b206:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800b20a:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
            tcp_rexmit_rto_commit(pcb);
 800b20c:	4620      	mov	r0, r4
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800b20e:	f8b4 1048 	ldrh.w	r1, [r4, #72]	@ 0x48
            pcb->cwnd = pcb->mss;
 800b212:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800b216:	005b      	lsls	r3, r3, #1
 800b218:	b29a      	uxth	r2, r3
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800b21a:	f8b4 3060 	ldrh.w	r3, [r4, #96]	@ 0x60
            pcb->ssthresh = eff_wnd >> 1;
 800b21e:	428b      	cmp	r3, r1
 800b220:	bf28      	it	cs
 800b222:	460b      	movcs	r3, r1
 800b224:	085b      	lsrs	r3, r3, #1
 800b226:	4293      	cmp	r3, r2
 800b228:	bf38      	it	cc
 800b22a:	4613      	movcc	r3, r2
 800b22c:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
            pcb->rtime = 0;
 800b230:	2300      	movs	r3, #0
 800b232:	8623      	strh	r3, [r4, #48]	@ 0x30
            pcb->bytes_acked = 0;
 800b234:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800b238:	f003 faac 	bl	800e794 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800b23c:	7d22      	ldrb	r2, [r4, #20]
 800b23e:	e677      	b.n	800af30 <tcp_slowtmr+0x5c>
      tcp_pcb_purge(pcb);
 800b240:	4620      	mov	r0, r4
 800b242:	f7ff fdf5 	bl	800ae30 <tcp_pcb_purge>
      if (prev != NULL) {
 800b246:	2e00      	cmp	r6, #0
 800b248:	f000 808e 	beq.w	800b368 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	42a3      	cmp	r3, r4
 800b250:	f000 80b6 	beq.w	800b3c0 <tcp_slowtmr+0x4ec>
        prev->next = pcb->next;
 800b254:	f8d4 b00c 	ldr.w	fp, [r4, #12]
 800b258:	f8c6 b00c 	str.w	fp, [r6, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b25c:	7d23      	ldrb	r3, [r4, #20]
 800b25e:	2b01      	cmp	r3, #1
 800b260:	f000 8094 	beq.w	800b38c <tcp_slowtmr+0x4b8>
  memp_free(MEMP_TCP_PCB, pcb);
 800b264:	4621      	mov	r1, r4
      pcb = pcb->next;
 800b266:	465c      	mov	r4, fp
  memp_free(MEMP_TCP_PCB, pcb);
 800b268:	2001      	movs	r0, #1
 800b26a:	f7fe fbfb 	bl	8009a64 <memp_free>
  while (pcb != NULL) {
 800b26e:	2c00      	cmp	r4, #0
 800b270:	f47f aeab 	bne.w	800afca <tcp_slowtmr+0xf6>
 800b274:	e6bd      	b.n	800aff2 <tcp_slowtmr+0x11e>
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800b276:	f894 309b 	ldrb.w	r3, [r4, #155]	@ 0x9b
 800b27a:	495a      	ldr	r1, [pc, #360]	@ (800b3e4 <tcp_slowtmr+0x510>)
 800b27c:	fb01 0003 	mla	r0, r1, r3, r0
                 / TCP_SLOW_INTERVAL) {
 800b280:	4b59      	ldr	r3, [pc, #356]	@ (800b3e8 <tcp_slowtmr+0x514>)
 800b282:	fba3 3000 	umull	r3, r0, r3, r0
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b286:	ebb2 1f50 	cmp.w	r2, r0, lsr #5
 800b28a:	f67f aeee 	bls.w	800b06a <tcp_slowtmr+0x196>
        err = tcp_keepalive(pcb);
 800b28e:	4620      	mov	r0, r4
 800b290:	f003 facc 	bl	800e82c <tcp_keepalive>
        if (err == ERR_OK) {
 800b294:	2800      	cmp	r0, #0
 800b296:	f47f aee8 	bne.w	800b06a <tcp_slowtmr+0x196>
          pcb->keep_cnt_sent++;
 800b29a:	f894 309b 	ldrb.w	r3, [r4, #155]	@ 0x9b
    pcb_reset = 0;
 800b29e:	f04f 0a00 	mov.w	sl, #0
          pcb->keep_cnt_sent++;
 800b2a2:	3301      	adds	r3, #1
 800b2a4:	f884 309b 	strb.w	r3, [r4, #155]	@ 0x9b
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b2a8:	e662      	b.n	800af70 <tcp_slowtmr+0x9c>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b2aa:	8b23      	ldrh	r3, [r4, #24]
 800b2ac:	4620      	mov	r0, r4
 800b2ae:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800b2b0:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800b2b2:	9302      	str	r3, [sp, #8]
 800b2b4:	8ae3      	ldrh	r3, [r4, #22]
 800b2b6:	9301      	str	r3, [sp, #4]
 800b2b8:	1d23      	adds	r3, r4, #4
 800b2ba:	9300      	str	r3, [sp, #0]
 800b2bc:	4623      	mov	r3, r4
 800b2be:	f003 f81b 	bl	800e2f8 <tcp_rst>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b2c2:	7d23      	ldrb	r3, [r4, #20]
 800b2c4:	2b01      	cmp	r3, #1
      pcb = pcb->next;
 800b2c6:	e9d4 a803 	ldrd	sl, r8, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b2ca:	f47f aeb5 	bne.w	800b038 <tcp_slowtmr+0x164>
 800b2ce:	465b      	mov	r3, fp
 800b2d0:	22d4      	movs	r2, #212	@ 0xd4
 800b2d2:	4946      	ldr	r1, [pc, #280]	@ (800b3ec <tcp_slowtmr+0x518>)
 800b2d4:	4846      	ldr	r0, [pc, #280]	@ (800b3f0 <tcp_slowtmr+0x51c>)
 800b2d6:	f005 fcc1 	bl	8010c5c <iprintf>
 800b2da:	e6ad      	b.n	800b038 <tcp_slowtmr+0x164>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800b2dc:	f894 3099 	ldrb.w	r3, [r4, #153]	@ 0x99
 800b2e0:	4a44      	ldr	r2, [pc, #272]	@ (800b3f4 <tcp_slowtmr+0x520>)
 800b2e2:	441a      	add	r2, r3
          if (pcb->persist_cnt < backoff_cnt) {
 800b2e4:	f894 3098 	ldrb.w	r3, [r4, #152]	@ 0x98
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800b2e8:	f812 2c01 	ldrb.w	r2, [r2, #-1]
          if (pcb->persist_cnt < backoff_cnt) {
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	d216      	bcs.n	800b31e <tcp_slowtmr+0x44a>
            pcb->persist_cnt++;
 800b2f0:	3301      	adds	r3, #1
 800b2f2:	b2db      	uxtb	r3, r3
          if (pcb->persist_cnt >= backoff_cnt) {
 800b2f4:	4293      	cmp	r3, r2
            pcb->persist_cnt++;
 800b2f6:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800b2fa:	d210      	bcs.n	800b31e <tcp_slowtmr+0x44a>
    if (pcb->state == FIN_WAIT_2) {
 800b2fc:	7d22      	ldrb	r2, [r4, #20]
    pcb_remove = 0;
 800b2fe:	f04f 0800 	mov.w	r8, #0
 800b302:	e615      	b.n	800af30 <tcp_slowtmr+0x5c>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800b304:	42a3      	cmp	r3, r4
 800b306:	d006      	beq.n	800b316 <tcp_slowtmr+0x442>
 800b308:	465b      	mov	r3, fp
 800b30a:	f240 5271 	movw	r2, #1393	@ 0x571
 800b30e:	493a      	ldr	r1, [pc, #232]	@ (800b3f8 <tcp_slowtmr+0x524>)
 800b310:	4837      	ldr	r0, [pc, #220]	@ (800b3f0 <tcp_slowtmr+0x51c>)
 800b312:	f005 fca3 	bl	8010c5c <iprintf>
        tcp_active_pcbs = pcb->next;
 800b316:	68e3      	ldr	r3, [r4, #12]
 800b318:	4a38      	ldr	r2, [pc, #224]	@ (800b3fc <tcp_slowtmr+0x528>)
 800b31a:	6013      	str	r3, [r2, #0]
 800b31c:	e682      	b.n	800b024 <tcp_slowtmr+0x150>
            if (pcb->snd_wnd == 0) {
 800b31e:	f8b4 7060 	ldrh.w	r7, [r4, #96]	@ 0x60
 800b322:	b937      	cbnz	r7, 800b332 <tcp_slowtmr+0x45e>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800b324:	4620      	mov	r0, r4
 800b326:	f003 faa7 	bl	800e878 <tcp_zero_window_probe>
 800b32a:	b140      	cbz	r0, 800b33e <tcp_slowtmr+0x46a>
    pcb_remove = 0;
 800b32c:	46b8      	mov	r8, r7
    if (pcb->state == FIN_WAIT_2) {
 800b32e:	7d22      	ldrb	r2, [r4, #20]
 800b330:	e5fe      	b.n	800af30 <tcp_slowtmr+0x5c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800b332:	4639      	mov	r1, r7
 800b334:	4620      	mov	r0, r4
 800b336:	f002 fd71 	bl	800de1c <tcp_split_unsent_seg>
 800b33a:	2800      	cmp	r0, #0
 800b33c:	d048      	beq.n	800b3d0 <tcp_slowtmr+0x4fc>
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800b33e:	f894 3099 	ldrb.w	r3, [r4, #153]	@ 0x99
              pcb->persist_cnt = 0;
 800b342:	f04f 0800 	mov.w	r8, #0
    if (pcb->state == FIN_WAIT_2) {
 800b346:	7d22      	ldrb	r2, [r4, #20]
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800b348:	2b06      	cmp	r3, #6
              pcb->persist_cnt = 0;
 800b34a:	f884 8098 	strb.w	r8, [r4, #152]	@ 0x98
                pcb->persist_backoff++;
 800b34e:	bf9c      	itt	ls
 800b350:	3301      	addls	r3, #1
 800b352:	f884 3099 	strbls.w	r3, [r4, #153]	@ 0x99
 800b356:	e5eb      	b.n	800af30 <tcp_slowtmr+0x5c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800b358:	4b29      	ldr	r3, [pc, #164]	@ (800b400 <tcp_slowtmr+0x52c>)
 800b35a:	f240 526d 	movw	r2, #1389	@ 0x56d
 800b35e:	4929      	ldr	r1, [pc, #164]	@ (800b404 <tcp_slowtmr+0x530>)
 800b360:	4823      	ldr	r0, [pc, #140]	@ (800b3f0 <tcp_slowtmr+0x51c>)
 800b362:	f005 fc7b 	bl	8010c5c <iprintf>
 800b366:	e65a      	b.n	800b01e <tcp_slowtmr+0x14a>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	42a3      	cmp	r3, r4
 800b36c:	d006      	beq.n	800b37c <tcp_slowtmr+0x4a8>
 800b36e:	4b24      	ldr	r3, [pc, #144]	@ (800b400 <tcp_slowtmr+0x52c>)
 800b370:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800b374:	4924      	ldr	r1, [pc, #144]	@ (800b408 <tcp_slowtmr+0x534>)
 800b376:	481e      	ldr	r0, [pc, #120]	@ (800b3f0 <tcp_slowtmr+0x51c>)
 800b378:	f005 fc70 	bl	8010c5c <iprintf>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b37c:	7d23      	ldrb	r3, [r4, #20]
        tcp_tw_pcbs = pcb->next;
 800b37e:	f8d4 b00c 	ldr.w	fp, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b382:	2b01      	cmp	r3, #1
        tcp_tw_pcbs = pcb->next;
 800b384:	f8c7 b000 	str.w	fp, [r7]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b388:	f47f af6c 	bne.w	800b264 <tcp_slowtmr+0x390>
 800b38c:	4b1c      	ldr	r3, [pc, #112]	@ (800b400 <tcp_slowtmr+0x52c>)
 800b38e:	22d4      	movs	r2, #212	@ 0xd4
 800b390:	4916      	ldr	r1, [pc, #88]	@ (800b3ec <tcp_slowtmr+0x518>)
 800b392:	4817      	ldr	r0, [pc, #92]	@ (800b3f0 <tcp_slowtmr+0x51c>)
 800b394:	f005 fc62 	bl	8010c5c <iprintf>
 800b398:	e764      	b.n	800b264 <tcp_slowtmr+0x390>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800b39a:	4b19      	ldr	r3, [pc, #100]	@ (800b400 <tcp_slowtmr+0x52c>)
 800b39c:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800b3a0:	491a      	ldr	r1, [pc, #104]	@ (800b40c <tcp_slowtmr+0x538>)
 800b3a2:	4813      	ldr	r0, [pc, #76]	@ (800b3f0 <tcp_slowtmr+0x51c>)
 800b3a4:	f005 fc5a 	bl	8010c5c <iprintf>
 800b3a8:	e675      	b.n	800b096 <tcp_slowtmr+0x1c2>
            if (pcb->state != SYN_SENT) {
 800b3aa:	7d22      	ldrb	r2, [r4, #20]
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800b3ac:	6f21      	ldr	r1, [r4, #112]	@ 0x70
            if (pcb->state != SYN_SENT) {
 800b3ae:	4613      	mov	r3, r2
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800b3b0:	2900      	cmp	r1, #0
 800b3b2:	f47f adbd 	bne.w	800af30 <tcp_slowtmr+0x5c>
 800b3b6:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 800b3b8:	2900      	cmp	r1, #0
 800b3ba:	f47f af0f 	bne.w	800b1dc <tcp_slowtmr+0x308>
 800b3be:	e5b7      	b.n	800af30 <tcp_slowtmr+0x5c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800b3c0:	4b0f      	ldr	r3, [pc, #60]	@ (800b400 <tcp_slowtmr+0x52c>)
 800b3c2:	f240 52af 	movw	r2, #1455	@ 0x5af
 800b3c6:	4912      	ldr	r1, [pc, #72]	@ (800b410 <tcp_slowtmr+0x53c>)
 800b3c8:	4809      	ldr	r0, [pc, #36]	@ (800b3f0 <tcp_slowtmr+0x51c>)
 800b3ca:	f005 fc47 	bl	8010c5c <iprintf>
 800b3ce:	e741      	b.n	800b254 <tcp_slowtmr+0x380>
                if (tcp_output(pcb) == ERR_OK) {
 800b3d0:	4620      	mov	r0, r4
 800b3d2:	f003 f80b 	bl	800e3ec <tcp_output>
 800b3d6:	2800      	cmp	r0, #0
 800b3d8:	d1b1      	bne.n	800b33e <tcp_slowtmr+0x46a>
    pcb_remove = 0;
 800b3da:	4680      	mov	r8, r0
    if (pcb->state == FIN_WAIT_2) {
 800b3dc:	7d22      	ldrb	r2, [r4, #20]
 800b3de:	e5a7      	b.n	800af30 <tcp_slowtmr+0x5c>
 800b3e0:	080137f0 	.word	0x080137f0
 800b3e4:	000124f8 	.word	0x000124f8
 800b3e8:	10624dd3 	.word	0x10624dd3
 800b3ec:	0801315c 	.word	0x0801315c
 800b3f0:	08011f14 	.word	0x08011f14
 800b3f4:	080137e8 	.word	0x080137e8
 800b3f8:	08013508 	.word	0x08013508
 800b3fc:	2400b80c 	.word	0x2400b80c
 800b400:	08013120 	.word	0x08013120
 800b404:	080134dc 	.word	0x080134dc
 800b408:	0801358c 	.word	0x0801358c
 800b40c:	080134a4 	.word	0x080134a4
 800b410:	08013564 	.word	0x08013564

0800b414 <tcp_pcb_remove>:
{
 800b414:	b538      	push	{r3, r4, r5, lr}
 800b416:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800b418:	460c      	mov	r4, r1
 800b41a:	2900      	cmp	r1, #0
 800b41c:	d04a      	beq.n	800b4b4 <tcp_pcb_remove+0xa0>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800b41e:	2d00      	cmp	r5, #0
 800b420:	d051      	beq.n	800b4c6 <tcp_pcb_remove+0xb2>
  TCP_RMV(pcblist, pcb);
 800b422:	682b      	ldr	r3, [r5, #0]
 800b424:	42a3      	cmp	r3, r4
 800b426:	d032      	beq.n	800b48e <tcp_pcb_remove+0x7a>
 800b428:	b12b      	cbz	r3, 800b436 <tcp_pcb_remove+0x22>
 800b42a:	68da      	ldr	r2, [r3, #12]
 800b42c:	42a2      	cmp	r2, r4
 800b42e:	d03e      	beq.n	800b4ae <tcp_pcb_remove+0x9a>
 800b430:	4613      	mov	r3, r2
 800b432:	2b00      	cmp	r3, #0
 800b434:	d1f9      	bne.n	800b42a <tcp_pcb_remove+0x16>
 800b436:	2300      	movs	r3, #0
  tcp_pcb_purge(pcb);
 800b438:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 800b43a:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 800b43c:	f7ff fcf8 	bl	800ae30 <tcp_pcb_purge>
  if ((pcb->state != TIME_WAIT) &&
 800b440:	7d23      	ldrb	r3, [r4, #20]
 800b442:	2b0a      	cmp	r3, #10
 800b444:	d02d      	beq.n	800b4a2 <tcp_pcb_remove+0x8e>
 800b446:	2b01      	cmp	r3, #1
 800b448:	d01d      	beq.n	800b486 <tcp_pcb_remove+0x72>
      (pcb->flags & TF_ACK_DELAY)) {
 800b44a:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 800b44c:	07da      	lsls	r2, r3, #31
 800b44e:	d421      	bmi.n	800b494 <tcp_pcb_remove+0x80>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800b450:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800b452:	b133      	cbz	r3, 800b462 <tcp_pcb_remove+0x4e>
 800b454:	4b20      	ldr	r3, [pc, #128]	@ (800b4d8 <tcp_pcb_remove+0xc4>)
 800b456:	f640 0293 	movw	r2, #2195	@ 0x893
 800b45a:	4920      	ldr	r1, [pc, #128]	@ (800b4dc <tcp_pcb_remove+0xc8>)
 800b45c:	4820      	ldr	r0, [pc, #128]	@ (800b4e0 <tcp_pcb_remove+0xcc>)
 800b45e:	f005 fbfd 	bl	8010c5c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800b462:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800b464:	b133      	cbz	r3, 800b474 <tcp_pcb_remove+0x60>
 800b466:	4b1c      	ldr	r3, [pc, #112]	@ (800b4d8 <tcp_pcb_remove+0xc4>)
 800b468:	f640 0294 	movw	r2, #2196	@ 0x894
 800b46c:	491d      	ldr	r1, [pc, #116]	@ (800b4e4 <tcp_pcb_remove+0xd0>)
 800b46e:	481c      	ldr	r0, [pc, #112]	@ (800b4e0 <tcp_pcb_remove+0xcc>)
 800b470:	f005 fbf4 	bl	8010c5c <iprintf>
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800b474:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800b476:	b133      	cbz	r3, 800b486 <tcp_pcb_remove+0x72>
 800b478:	4b17      	ldr	r3, [pc, #92]	@ (800b4d8 <tcp_pcb_remove+0xc4>)
 800b47a:	f640 0296 	movw	r2, #2198	@ 0x896
 800b47e:	491a      	ldr	r1, [pc, #104]	@ (800b4e8 <tcp_pcb_remove+0xd4>)
 800b480:	4817      	ldr	r0, [pc, #92]	@ (800b4e0 <tcp_pcb_remove+0xcc>)
 800b482:	f005 fbeb 	bl	8010c5c <iprintf>
  pcb->state = CLOSED;
 800b486:	2300      	movs	r3, #0
 800b488:	7523      	strb	r3, [r4, #20]
  pcb->local_port = 0;
 800b48a:	82e3      	strh	r3, [r4, #22]
}
 800b48c:	bd38      	pop	{r3, r4, r5, pc}
  TCP_RMV(pcblist, pcb);
 800b48e:	68e3      	ldr	r3, [r4, #12]
 800b490:	602b      	str	r3, [r5, #0]
 800b492:	e7d0      	b.n	800b436 <tcp_pcb_remove+0x22>
    tcp_ack_now(pcb);
 800b494:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 800b498:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 800b49a:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 800b49c:	f002 ffa6 	bl	800e3ec <tcp_output>
  if (pcb->state != LISTEN) {
 800b4a0:	7d23      	ldrb	r3, [r4, #20]
 800b4a2:	2b01      	cmp	r3, #1
 800b4a4:	d0ef      	beq.n	800b486 <tcp_pcb_remove+0x72>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800b4a6:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d1d3      	bne.n	800b454 <tcp_pcb_remove+0x40>
 800b4ac:	e7d9      	b.n	800b462 <tcp_pcb_remove+0x4e>
  TCP_RMV(pcblist, pcb);
 800b4ae:	68e2      	ldr	r2, [r4, #12]
 800b4b0:	60da      	str	r2, [r3, #12]
 800b4b2:	e7c0      	b.n	800b436 <tcp_pcb_remove+0x22>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800b4b4:	4b08      	ldr	r3, [pc, #32]	@ (800b4d8 <tcp_pcb_remove+0xc4>)
 800b4b6:	f640 0283 	movw	r2, #2179	@ 0x883
 800b4ba:	490c      	ldr	r1, [pc, #48]	@ (800b4ec <tcp_pcb_remove+0xd8>)
 800b4bc:	4808      	ldr	r0, [pc, #32]	@ (800b4e0 <tcp_pcb_remove+0xcc>)
 800b4be:	f005 fbcd 	bl	8010c5c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800b4c2:	2d00      	cmp	r5, #0
 800b4c4:	d1ad      	bne.n	800b422 <tcp_pcb_remove+0xe>
 800b4c6:	4b04      	ldr	r3, [pc, #16]	@ (800b4d8 <tcp_pcb_remove+0xc4>)
 800b4c8:	f640 0284 	movw	r2, #2180	@ 0x884
 800b4cc:	4908      	ldr	r1, [pc, #32]	@ (800b4f0 <tcp_pcb_remove+0xdc>)
 800b4ce:	4804      	ldr	r0, [pc, #16]	@ (800b4e0 <tcp_pcb_remove+0xcc>)
 800b4d0:	f005 fbc4 	bl	8010c5c <iprintf>
 800b4d4:	e7a5      	b.n	800b422 <tcp_pcb_remove+0xe>
 800b4d6:	bf00      	nop
 800b4d8:	08013120 	.word	0x08013120
 800b4dc:	080135f0 	.word	0x080135f0
 800b4e0:	08011f14 	.word	0x08011f14
 800b4e4:	08013608 	.word	0x08013608
 800b4e8:	08013624 	.word	0x08013624
 800b4ec:	080135b4 	.word	0x080135b4
 800b4f0:	080135d0 	.word	0x080135d0

0800b4f4 <tcp_abandon>:
{
 800b4f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4f8:	4605      	mov	r5, r0
 800b4fa:	b087      	sub	sp, #28
 800b4fc:	460e      	mov	r6, r1
  LWIP_ASSERT_CORE_LOCKED();
 800b4fe:	f7fb fa1f 	bl	8006940 <sys_check_core_locking>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800b502:	2d00      	cmp	r5, #0
 800b504:	f000 80a9 	beq.w	800b65a <tcp_abandon+0x166>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800b508:	7d2b      	ldrb	r3, [r5, #20]
 800b50a:	2b01      	cmp	r3, #1
 800b50c:	f000 808c 	beq.w	800b628 <tcp_abandon+0x134>
  if (pcb->state == TIME_WAIT) {
 800b510:	2b0a      	cmp	r3, #10
 800b512:	f000 8094 	beq.w	800b63e <tcp_abandon+0x14a>
    seqno = pcb->snd_nxt;
 800b516:	6d2a      	ldr	r2, [r5, #80]	@ 0x50
    ackno = pcb->rcv_nxt;
 800b518:	f8d5 b024 	ldr.w	fp, [r5, #36]	@ 0x24
    errf = pcb->errf;
 800b51c:	f8d5 7090 	ldr.w	r7, [r5, #144]	@ 0x90
    errf_arg = pcb->callback_arg;
 800b520:	f8d5 9010 	ldr.w	r9, [r5, #16]
      if (pcb->local_port != 0) {
 800b524:	f8b5 8016 	ldrh.w	r8, [r5, #22]
    seqno = pcb->snd_nxt;
 800b528:	9205      	str	r2, [sp, #20]
    if (pcb->state == CLOSED) {
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d144      	bne.n	800b5b8 <tcp_abandon+0xc4>
      if (pcb->local_port != 0) {
 800b52e:	f1b8 0f00 	cmp.w	r8, #0
 800b532:	d149      	bne.n	800b5c8 <tcp_abandon+0xd4>
    u16_t local_port = 0;
 800b534:	f04f 0800 	mov.w	r8, #0
    int send_rst = 0;
 800b538:	4646      	mov	r6, r8
    if (pcb->unacked != NULL) {
 800b53a:	6f2c      	ldr	r4, [r5, #112]	@ 0x70
 800b53c:	b164      	cbz	r4, 800b558 <tcp_abandon+0x64>
      pbuf_free(seg->p);
 800b53e:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 800b540:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800b542:	f8da 0004 	ldr.w	r0, [sl, #4]
 800b546:	b108      	cbz	r0, 800b54c <tcp_abandon+0x58>
      pbuf_free(seg->p);
 800b548:	f7fe fd98 	bl	800a07c <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800b54c:	4651      	mov	r1, sl
 800b54e:	2003      	movs	r0, #3
 800b550:	f7fe fa88 	bl	8009a64 <memp_free>
  while (seg != NULL) {
 800b554:	2c00      	cmp	r4, #0
 800b556:	d1f2      	bne.n	800b53e <tcp_abandon+0x4a>
    if (pcb->unsent != NULL) {
 800b558:	6eec      	ldr	r4, [r5, #108]	@ 0x6c
 800b55a:	b164      	cbz	r4, 800b576 <tcp_abandon+0x82>
      pbuf_free(seg->p);
 800b55c:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 800b55e:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800b560:	f8da 0004 	ldr.w	r0, [sl, #4]
 800b564:	b108      	cbz	r0, 800b56a <tcp_abandon+0x76>
      pbuf_free(seg->p);
 800b566:	f7fe fd89 	bl	800a07c <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800b56a:	4651      	mov	r1, sl
 800b56c:	2003      	movs	r0, #3
 800b56e:	f7fe fa79 	bl	8009a64 <memp_free>
  while (seg != NULL) {
 800b572:	2c00      	cmp	r4, #0
 800b574:	d1f2      	bne.n	800b55c <tcp_abandon+0x68>
    if (pcb->ooseq != NULL) {
 800b576:	6f6c      	ldr	r4, [r5, #116]	@ 0x74
 800b578:	b164      	cbz	r4, 800b594 <tcp_abandon+0xa0>
      pbuf_free(seg->p);
 800b57a:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 800b57c:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800b57e:	f8da 0004 	ldr.w	r0, [sl, #4]
 800b582:	b108      	cbz	r0, 800b588 <tcp_abandon+0x94>
      pbuf_free(seg->p);
 800b584:	f7fe fd7a 	bl	800a07c <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800b588:	4651      	mov	r1, sl
 800b58a:	2003      	movs	r0, #3
 800b58c:	f7fe fa6a 	bl	8009a64 <memp_free>
  while (seg != NULL) {
 800b590:	2c00      	cmp	r4, #0
 800b592:	d1f2      	bne.n	800b57a <tcp_abandon+0x86>
    if (send_rst) {
 800b594:	bb3e      	cbnz	r6, 800b5e6 <tcp_abandon+0xf2>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b596:	7d2b      	ldrb	r3, [r5, #20]
 800b598:	2b01      	cmp	r3, #1
 800b59a:	d033      	beq.n	800b604 <tcp_abandon+0x110>
  memp_free(MEMP_TCP_PCB, pcb);
 800b59c:	4629      	mov	r1, r5
 800b59e:	2001      	movs	r0, #1
 800b5a0:	f7fe fa60 	bl	8009a64 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800b5a4:	2f00      	cmp	r7, #0
 800b5a6:	d039      	beq.n	800b61c <tcp_abandon+0x128>
 800b5a8:	f06f 010c 	mvn.w	r1, #12
 800b5ac:	4648      	mov	r0, r9
 800b5ae:	463b      	mov	r3, r7
}
 800b5b0:	b007      	add	sp, #28
 800b5b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800b5b6:	4718      	bx	r3
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b5b8:	4629      	mov	r1, r5
 800b5ba:	4830      	ldr	r0, [pc, #192]	@ (800b67c <tcp_abandon+0x188>)
 800b5bc:	f7ff ff2a 	bl	800b414 <tcp_pcb_remove>
 800b5c0:	4b2f      	ldr	r3, [pc, #188]	@ (800b680 <tcp_abandon+0x18c>)
 800b5c2:	2201      	movs	r2, #1
 800b5c4:	701a      	strb	r2, [r3, #0]
 800b5c6:	e7b8      	b.n	800b53a <tcp_abandon+0x46>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b5c8:	4a2e      	ldr	r2, [pc, #184]	@ (800b684 <tcp_abandon+0x190>)
 800b5ca:	6813      	ldr	r3, [r2, #0]
 800b5cc:	42ab      	cmp	r3, r5
 800b5ce:	d028      	beq.n	800b622 <tcp_abandon+0x12e>
 800b5d0:	b133      	cbz	r3, 800b5e0 <tcp_abandon+0xec>
 800b5d2:	68da      	ldr	r2, [r3, #12]
 800b5d4:	42aa      	cmp	r2, r5
 800b5d6:	d001      	beq.n	800b5dc <tcp_abandon+0xe8>
 800b5d8:	4613      	mov	r3, r2
 800b5da:	e7f9      	b.n	800b5d0 <tcp_abandon+0xdc>
 800b5dc:	68ea      	ldr	r2, [r5, #12]
 800b5de:	60da      	str	r2, [r3, #12]
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	60eb      	str	r3, [r5, #12]
 800b5e4:	e7a6      	b.n	800b534 <tcp_abandon+0x40>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800b5e6:	f8cd 8004 	str.w	r8, [sp, #4]
 800b5ea:	465a      	mov	r2, fp
 800b5ec:	8b2b      	ldrh	r3, [r5, #24]
 800b5ee:	4628      	mov	r0, r5
 800b5f0:	9905      	ldr	r1, [sp, #20]
 800b5f2:	9302      	str	r3, [sp, #8]
 800b5f4:	1d2b      	adds	r3, r5, #4
 800b5f6:	9300      	str	r3, [sp, #0]
 800b5f8:	462b      	mov	r3, r5
 800b5fa:	f002 fe7d 	bl	800e2f8 <tcp_rst>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b5fe:	7d2b      	ldrb	r3, [r5, #20]
 800b600:	2b01      	cmp	r3, #1
 800b602:	d1cb      	bne.n	800b59c <tcp_abandon+0xa8>
 800b604:	4920      	ldr	r1, [pc, #128]	@ (800b688 <tcp_abandon+0x194>)
 800b606:	22d4      	movs	r2, #212	@ 0xd4
 800b608:	4b20      	ldr	r3, [pc, #128]	@ (800b68c <tcp_abandon+0x198>)
 800b60a:	4821      	ldr	r0, [pc, #132]	@ (800b690 <tcp_abandon+0x19c>)
 800b60c:	f005 fb26 	bl	8010c5c <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 800b610:	4629      	mov	r1, r5
 800b612:	2001      	movs	r0, #1
 800b614:	f7fe fa26 	bl	8009a64 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800b618:	2f00      	cmp	r7, #0
 800b61a:	d1c5      	bne.n	800b5a8 <tcp_abandon+0xb4>
}
 800b61c:	b007      	add	sp, #28
 800b61e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b622:	68eb      	ldr	r3, [r5, #12]
 800b624:	6013      	str	r3, [r2, #0]
 800b626:	e7db      	b.n	800b5e0 <tcp_abandon+0xec>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800b628:	4b18      	ldr	r3, [pc, #96]	@ (800b68c <tcp_abandon+0x198>)
 800b62a:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800b62e:	4919      	ldr	r1, [pc, #100]	@ (800b694 <tcp_abandon+0x1a0>)
 800b630:	4817      	ldr	r0, [pc, #92]	@ (800b690 <tcp_abandon+0x19c>)
 800b632:	f005 fb13 	bl	8010c5c <iprintf>
  if (pcb->state == TIME_WAIT) {
 800b636:	7d2b      	ldrb	r3, [r5, #20]
 800b638:	2b0a      	cmp	r3, #10
 800b63a:	f47f af6c 	bne.w	800b516 <tcp_abandon+0x22>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800b63e:	4629      	mov	r1, r5
 800b640:	4815      	ldr	r0, [pc, #84]	@ (800b698 <tcp_abandon+0x1a4>)
 800b642:	f7ff fee7 	bl	800b414 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b646:	7d2b      	ldrb	r3, [r5, #20]
 800b648:	2b01      	cmp	r3, #1
 800b64a:	d010      	beq.n	800b66e <tcp_abandon+0x17a>
  memp_free(MEMP_TCP_PCB, pcb);
 800b64c:	4629      	mov	r1, r5
 800b64e:	2001      	movs	r0, #1
}
 800b650:	b007      	add	sp, #28
 800b652:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 800b656:	f7fe ba05 	b.w	8009a64 <memp_free>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800b65a:	4b0c      	ldr	r3, [pc, #48]	@ (800b68c <tcp_abandon+0x198>)
 800b65c:	f240 223d 	movw	r2, #573	@ 0x23d
 800b660:	490e      	ldr	r1, [pc, #56]	@ (800b69c <tcp_abandon+0x1a8>)
 800b662:	480b      	ldr	r0, [pc, #44]	@ (800b690 <tcp_abandon+0x19c>)
}
 800b664:	b007      	add	sp, #28
 800b666:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800b66a:	f005 baf7 	b.w	8010c5c <iprintf>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b66e:	4b07      	ldr	r3, [pc, #28]	@ (800b68c <tcp_abandon+0x198>)
 800b670:	22d4      	movs	r2, #212	@ 0xd4
 800b672:	4905      	ldr	r1, [pc, #20]	@ (800b688 <tcp_abandon+0x194>)
 800b674:	4806      	ldr	r0, [pc, #24]	@ (800b690 <tcp_abandon+0x19c>)
 800b676:	f005 faf1 	bl	8010c5c <iprintf>
 800b67a:	e7e7      	b.n	800b64c <tcp_abandon+0x158>
 800b67c:	2400b80c 	.word	0x2400b80c
 800b680:	2400b807 	.word	0x2400b807
 800b684:	2400b814 	.word	0x2400b814
 800b688:	0801315c 	.word	0x0801315c
 800b68c:	08013120 	.word	0x08013120
 800b690:	08011f14 	.word	0x08011f14
 800b694:	08013658 	.word	0x08013658
 800b698:	2400b808 	.word	0x2400b808
 800b69c:	0801363c 	.word	0x0801363c

0800b6a0 <tcp_abort>:
  tcp_abandon(pcb, 1);
 800b6a0:	2101      	movs	r1, #1
 800b6a2:	f7ff bf27 	b.w	800b4f4 <tcp_abandon>
 800b6a6:	bf00      	nop

0800b6a8 <tcp_accept_null>:
{
 800b6a8:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800b6aa:	460c      	mov	r4, r1
 800b6ac:	b131      	cbz	r1, 800b6bc <tcp_accept_null+0x14>
  tcp_abandon(pcb, 1);
 800b6ae:	4620      	mov	r0, r4
 800b6b0:	2101      	movs	r1, #1
 800b6b2:	f7ff ff1f 	bl	800b4f4 <tcp_abandon>
}
 800b6b6:	f06f 000c 	mvn.w	r0, #12
 800b6ba:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800b6bc:	4b06      	ldr	r3, [pc, #24]	@ (800b6d8 <tcp_accept_null+0x30>)
 800b6be:	f240 320f 	movw	r2, #783	@ 0x30f
 800b6c2:	4906      	ldr	r1, [pc, #24]	@ (800b6dc <tcp_accept_null+0x34>)
 800b6c4:	4806      	ldr	r0, [pc, #24]	@ (800b6e0 <tcp_accept_null+0x38>)
 800b6c6:	f005 fac9 	bl	8010c5c <iprintf>
  tcp_abandon(pcb, 1);
 800b6ca:	4620      	mov	r0, r4
 800b6cc:	2101      	movs	r1, #1
 800b6ce:	f7ff ff11 	bl	800b4f4 <tcp_abandon>
}
 800b6d2:	f06f 000c 	mvn.w	r0, #12
 800b6d6:	bd10      	pop	{r4, pc}
 800b6d8:	08013120 	.word	0x08013120
 800b6dc:	0801368c 	.word	0x0801368c
 800b6e0:	08011f14 	.word	0x08011f14

0800b6e4 <tcp_netif_ip_addr_changed_pcblist>:
{
 800b6e4:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800b6e6:	4605      	mov	r5, r0
{
 800b6e8:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800b6ea:	b160      	cbz	r0, 800b706 <tcp_netif_ip_addr_changed_pcblist+0x22>
  while (pcb != NULL) {
 800b6ec:	b154      	cbz	r4, 800b704 <tcp_netif_ip_addr_changed_pcblist+0x20>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800b6ee:	6822      	ldr	r2, [r4, #0]
 800b6f0:	4620      	mov	r0, r4
 800b6f2:	682b      	ldr	r3, [r5, #0]
      struct tcp_pcb *next = pcb->next;
 800b6f4:	68e4      	ldr	r4, [r4, #12]
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800b6f6:	429a      	cmp	r2, r3
 800b6f8:	d1f8      	bne.n	800b6ec <tcp_netif_ip_addr_changed_pcblist+0x8>
  tcp_abandon(pcb, 1);
 800b6fa:	2101      	movs	r1, #1
 800b6fc:	f7ff fefa 	bl	800b4f4 <tcp_abandon>
  while (pcb != NULL) {
 800b700:	2c00      	cmp	r4, #0
 800b702:	d1f4      	bne.n	800b6ee <tcp_netif_ip_addr_changed_pcblist+0xa>
}
 800b704:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800b706:	4b04      	ldr	r3, [pc, #16]	@ (800b718 <tcp_netif_ip_addr_changed_pcblist+0x34>)
 800b708:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800b70c:	4903      	ldr	r1, [pc, #12]	@ (800b71c <tcp_netif_ip_addr_changed_pcblist+0x38>)
 800b70e:	4804      	ldr	r0, [pc, #16]	@ (800b720 <tcp_netif_ip_addr_changed_pcblist+0x3c>)
 800b710:	f005 faa4 	bl	8010c5c <iprintf>
 800b714:	e7ea      	b.n	800b6ec <tcp_netif_ip_addr_changed_pcblist+0x8>
 800b716:	bf00      	nop
 800b718:	08013120 	.word	0x08013120
 800b71c:	080136ac 	.word	0x080136ac
 800b720:	08011f14 	.word	0x08011f14

0800b724 <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b724:	4b10      	ldr	r3, [pc, #64]	@ (800b768 <tcp_kill_state+0x44>)
 800b726:	6819      	ldr	r1, [r3, #0]
 800b728:	b1e9      	cbz	r1, 800b766 <tcp_kill_state+0x42>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b72a:	4b10      	ldr	r3, [pc, #64]	@ (800b76c <tcp_kill_state+0x48>)
  inactivity = 0;
 800b72c:	f04f 0c00 	mov.w	ip, #0
 800b730:	4602      	mov	r2, r0
  inactive = NULL;
 800b732:	4660      	mov	r0, ip
{
 800b734:	b410      	push	{r4}
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b736:	681c      	ldr	r4, [r3, #0]
 800b738:	e001      	b.n	800b73e <tcp_kill_state+0x1a>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b73a:	68c9      	ldr	r1, [r1, #12]
 800b73c:	b159      	cbz	r1, 800b756 <tcp_kill_state+0x32>
    if (pcb->state == state) {
 800b73e:	7d0b      	ldrb	r3, [r1, #20]
 800b740:	4293      	cmp	r3, r2
 800b742:	d1fa      	bne.n	800b73a <tcp_kill_state+0x16>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b744:	6a0b      	ldr	r3, [r1, #32]
 800b746:	1ae3      	subs	r3, r4, r3
 800b748:	459c      	cmp	ip, r3
 800b74a:	d8f6      	bhi.n	800b73a <tcp_kill_state+0x16>
 800b74c:	4608      	mov	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b74e:	68c9      	ldr	r1, [r1, #12]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b750:	469c      	mov	ip, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b752:	2900      	cmp	r1, #0
 800b754:	d1f3      	bne.n	800b73e <tcp_kill_state+0x1a>
  if (inactive != NULL) {
 800b756:	b118      	cbz	r0, 800b760 <tcp_kill_state+0x3c>
}
 800b758:	f85d 4b04 	ldr.w	r4, [sp], #4
    tcp_abandon(inactive, 0);
 800b75c:	f7ff beca 	b.w	800b4f4 <tcp_abandon>
}
 800b760:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b764:	4770      	bx	lr
 800b766:	4770      	bx	lr
 800b768:	2400b80c 	.word	0x2400b80c
 800b76c:	2400b818 	.word	0x2400b818

0800b770 <tcp_alloc>:
{
 800b770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b772:	4606      	mov	r6, r0
  LWIP_ASSERT_CORE_LOCKED();
 800b774:	f7fb f8e4 	bl	8006940 <sys_check_core_locking>
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b778:	2001      	movs	r0, #1
 800b77a:	f7fe f92d 	bl	80099d8 <memp_malloc>
  if (pcb == NULL) {
 800b77e:	4604      	mov	r4, r0
 800b780:	b318      	cbz	r0, 800b7ca <tcp_alloc+0x5a>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800b782:	229c      	movs	r2, #156	@ 0x9c
 800b784:	2100      	movs	r1, #0
 800b786:	4620      	mov	r0, r4
 800b788:	f005 fb1b 	bl	8010dc2 <memset>
    pcb->tmr = tcp_ticks;
 800b78c:	4b42      	ldr	r3, [pc, #264]	@ (800b898 <tcp_alloc+0x128>)
    pcb->last_timer = tcp_timer_ctr;
 800b78e:	4943      	ldr	r1, [pc, #268]	@ (800b89c <tcp_alloc+0x12c>)
    pcb->snd_buf = TCP_SND_BUF;
 800b790:	f241 60d0 	movw	r0, #5840	@ 0x16d0
    pcb->tmr = tcp_ticks;
 800b794:	681a      	ldr	r2, [r3, #0]
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800b796:	4b42      	ldr	r3, [pc, #264]	@ (800b8a0 <tcp_alloc+0x130>)
    pcb->last_timer = tcp_timer_ctr;
 800b798:	7809      	ldrb	r1, [r1, #0]
    pcb->tmr = tcp_ticks;
 800b79a:	6222      	str	r2, [r4, #32]
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800b79c:	62a3      	str	r3, [r4, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800b79e:	23ff      	movs	r3, #255	@ 0xff
    pcb->cwnd = 1;
 800b7a0:	4a40      	ldr	r2, [pc, #256]	@ (800b8a4 <tcp_alloc+0x134>)
    pcb->snd_buf = TCP_SND_BUF;
 800b7a2:	f8a4 0064 	strh.w	r0, [r4, #100]	@ 0x64
    pcb->last_timer = tcp_timer_ctr;
 800b7a6:	77a1      	strb	r1, [r4, #30]
    pcb->recv = tcp_recv_null;
 800b7a8:	483f      	ldr	r0, [pc, #252]	@ (800b8a8 <tcp_alloc+0x138>)
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800b7aa:	4940      	ldr	r1, [pc, #256]	@ (800b8ac <tcp_alloc+0x13c>)
    pcb->cwnd = 1;
 800b7ac:	64a2      	str	r2, [r4, #72]	@ 0x48
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800b7ae:	f04f 1206 	mov.w	r2, #393222	@ 0x60006
    pcb->ttl = TCP_TTL;
 800b7b2:	72e3      	strb	r3, [r4, #11]
    pcb->rtime = -1;
 800b7b4:	4b3e      	ldr	r3, [pc, #248]	@ (800b8b0 <tcp_alloc+0x140>)
    pcb->prio = prio;
 800b7b6:	7566      	strb	r6, [r4, #21]
    pcb->recv = tcp_recv_null;
 800b7b8:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800b7bc:	f8c4 1094 	str.w	r1, [r4, #148]	@ 0x94
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800b7c0:	f8c4 203e 	str.w	r2, [r4, #62]	@ 0x3e
    pcb->rtime = -1;
 800b7c4:	6323      	str	r3, [r4, #48]	@ 0x30
}
 800b7c6:	4620      	mov	r0, r4
 800b7c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800b7ca:	4f3a      	ldr	r7, [pc, #232]	@ (800b8b4 <tcp_alloc+0x144>)
 800b7cc:	683d      	ldr	r5, [r7, #0]
  while (pcb != NULL) {
 800b7ce:	b15d      	cbz	r5, 800b7e8 <tcp_alloc+0x78>
    struct tcp_pcb *next = pcb->next;
 800b7d0:	4628      	mov	r0, r5
 800b7d2:	68ed      	ldr	r5, [r5, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 800b7d4:	8b43      	ldrh	r3, [r0, #26]
 800b7d6:	071a      	lsls	r2, r3, #28
 800b7d8:	d5f9      	bpl.n	800b7ce <tcp_alloc+0x5e>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b7da:	f023 0308 	bic.w	r3, r3, #8
 800b7de:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 800b7e0:	f7fe ffd6 	bl	800a790 <tcp_close_shutdown_fin>
  while (pcb != NULL) {
 800b7e4:	2d00      	cmp	r5, #0
 800b7e6:	d1f3      	bne.n	800b7d0 <tcp_alloc+0x60>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b7e8:	4b33      	ldr	r3, [pc, #204]	@ (800b8b8 <tcp_alloc+0x148>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	b183      	cbz	r3, 800b810 <tcp_alloc+0xa0>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b7ee:	4a2a      	ldr	r2, [pc, #168]	@ (800b898 <tcp_alloc+0x128>)
  inactivity = 0;
 800b7f0:	2100      	movs	r1, #0
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b7f2:	6810      	ldr	r0, [r2, #0]
 800b7f4:	6a1a      	ldr	r2, [r3, #32]
 800b7f6:	1a82      	subs	r2, r0, r2
 800b7f8:	428a      	cmp	r2, r1
 800b7fa:	d301      	bcc.n	800b800 <tcp_alloc+0x90>
 800b7fc:	461c      	mov	r4, r3
 800b7fe:	4611      	mov	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b800:	68db      	ldr	r3, [r3, #12]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d1f6      	bne.n	800b7f4 <tcp_alloc+0x84>
  if (inactive != NULL) {
 800b806:	b11c      	cbz	r4, 800b810 <tcp_alloc+0xa0>
  tcp_abandon(pcb, 1);
 800b808:	2101      	movs	r1, #1
 800b80a:	4620      	mov	r0, r4
 800b80c:	f7ff fe72 	bl	800b4f4 <tcp_abandon>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b810:	2001      	movs	r0, #1
 800b812:	f7fe f8e1 	bl	80099d8 <memp_malloc>
    if (pcb == NULL) {
 800b816:	4604      	mov	r4, r0
 800b818:	2800      	cmp	r0, #0
 800b81a:	d1b2      	bne.n	800b782 <tcp_alloc+0x12>
      tcp_kill_state(LAST_ACK);
 800b81c:	2009      	movs	r0, #9
 800b81e:	f7ff ff81 	bl	800b724 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b822:	2001      	movs	r0, #1
 800b824:	f7fe f8d8 	bl	80099d8 <memp_malloc>
      if (pcb == NULL) {
 800b828:	4604      	mov	r4, r0
 800b82a:	2800      	cmp	r0, #0
 800b82c:	d1a9      	bne.n	800b782 <tcp_alloc+0x12>
        tcp_kill_state(CLOSING);
 800b82e:	2008      	movs	r0, #8
 800b830:	f7ff ff78 	bl	800b724 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b834:	2001      	movs	r0, #1
 800b836:	f7fe f8cf 	bl	80099d8 <memp_malloc>
        if (pcb == NULL) {
 800b83a:	4604      	mov	r4, r0
 800b83c:	2800      	cmp	r0, #0
 800b83e:	d1a0      	bne.n	800b782 <tcp_alloc+0x12>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800b840:	0633      	lsls	r3, r6, #24
 800b842:	d426      	bmi.n	800b892 <tcp_alloc+0x122>
  if (mprio == 0) {
 800b844:	b1ee      	cbz	r6, 800b882 <tcp_alloc+0x112>
 800b846:	4633      	mov	r3, r6
  mprio--;
 800b848:	1e5a      	subs	r2, r3, #1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b84a:	683b      	ldr	r3, [r7, #0]
  mprio--;
 800b84c:	b2d2      	uxtb	r2, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b84e:	b1c3      	cbz	r3, 800b882 <tcp_alloc+0x112>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b850:	4911      	ldr	r1, [pc, #68]	@ (800b898 <tcp_alloc+0x128>)
  inactivity = 0;
 800b852:	2500      	movs	r5, #0
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b854:	680f      	ldr	r7, [r1, #0]
 800b856:	e005      	b.n	800b864 <tcp_alloc+0xf4>
 800b858:	6a18      	ldr	r0, [r3, #32]
      inactivity = tcp_ticks - pcb->tmr;
 800b85a:	1a3d      	subs	r5, r7, r0
    if ((pcb->prio < mprio) ||
 800b85c:	460a      	mov	r2, r1
      inactivity = tcp_ticks - pcb->tmr;
 800b85e:	461c      	mov	r4, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b860:	68db      	ldr	r3, [r3, #12]
 800b862:	b14b      	cbz	r3, 800b878 <tcp_alloc+0x108>
    if ((pcb->prio < mprio) ||
 800b864:	7d59      	ldrb	r1, [r3, #21]
 800b866:	428a      	cmp	r2, r1
 800b868:	d8f6      	bhi.n	800b858 <tcp_alloc+0xe8>
 800b86a:	d1f9      	bne.n	800b860 <tcp_alloc+0xf0>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b86c:	6a18      	ldr	r0, [r3, #32]
 800b86e:	eba7 0c00 	sub.w	ip, r7, r0
 800b872:	45ac      	cmp	ip, r5
 800b874:	d3f4      	bcc.n	800b860 <tcp_alloc+0xf0>
 800b876:	e7f0      	b.n	800b85a <tcp_alloc+0xea>
  if (inactive != NULL) {
 800b878:	b11c      	cbz	r4, 800b882 <tcp_alloc+0x112>
  tcp_abandon(pcb, 1);
 800b87a:	2101      	movs	r1, #1
 800b87c:	4620      	mov	r0, r4
 800b87e:	f7ff fe39 	bl	800b4f4 <tcp_abandon>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b882:	2001      	movs	r0, #1
 800b884:	f7fe f8a8 	bl	80099d8 <memp_malloc>
  if (pcb != NULL) {
 800b888:	4604      	mov	r4, r0
 800b88a:	2800      	cmp	r0, #0
 800b88c:	f47f af79 	bne.w	800b782 <tcp_alloc+0x12>
 800b890:	e799      	b.n	800b7c6 <tcp_alloc+0x56>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800b892:	237f      	movs	r3, #127	@ 0x7f
 800b894:	e7d8      	b.n	800b848 <tcp_alloc+0xd8>
 800b896:	bf00      	nop
 800b898:	2400b818 	.word	0x2400b818
 800b89c:	2400b805 	.word	0x2400b805
 800b8a0:	16d016d0 	.word	0x16d016d0
 800b8a4:	16d00001 	.word	0x16d00001
 800b8a8:	0800baa5 	.word	0x0800baa5
 800b8ac:	006ddd00 	.word	0x006ddd00
 800b8b0:	0218ffff 	.word	0x0218ffff
 800b8b4:	2400b80c 	.word	0x2400b80c
 800b8b8:	2400b808 	.word	0x2400b808

0800b8bc <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800b8bc:	2040      	movs	r0, #64	@ 0x40
 800b8be:	f7ff bf57 	b.w	800b770 <tcp_alloc>
 800b8c2:	bf00      	nop

0800b8c4 <tcp_close_shutdown>:
{
 800b8c4:	b530      	push	{r4, r5, lr}
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800b8c6:	4604      	mov	r4, r0
{
 800b8c8:	b085      	sub	sp, #20
 800b8ca:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800b8cc:	2800      	cmp	r0, #0
 800b8ce:	f000 808a 	beq.w	800b9e6 <tcp_close_shutdown+0x122>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800b8d2:	7d23      	ldrb	r3, [r4, #20]
 800b8d4:	b11d      	cbz	r5, 800b8de <tcp_close_shutdown+0x1a>
 800b8d6:	2b04      	cmp	r3, #4
 800b8d8:	d01e      	beq.n	800b918 <tcp_close_shutdown+0x54>
 800b8da:	2b07      	cmp	r3, #7
 800b8dc:	d01c      	beq.n	800b918 <tcp_close_shutdown+0x54>
  switch (pcb->state) {
 800b8de:	2b01      	cmp	r3, #1
 800b8e0:	d03a      	beq.n	800b958 <tcp_close_shutdown+0x94>
 800b8e2:	2b02      	cmp	r3, #2
 800b8e4:	d007      	beq.n	800b8f6 <tcp_close_shutdown+0x32>
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d055      	beq.n	800b996 <tcp_close_shutdown+0xd2>
      return tcp_close_shutdown_fin(pcb);
 800b8ea:	4620      	mov	r0, r4
}
 800b8ec:	b005      	add	sp, #20
 800b8ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return tcp_close_shutdown_fin(pcb);
 800b8f2:	f7fe bf4d 	b.w	800a790 <tcp_close_shutdown_fin>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b8f6:	4621      	mov	r1, r4
 800b8f8:	484d      	ldr	r0, [pc, #308]	@ (800ba30 <tcp_close_shutdown+0x16c>)
 800b8fa:	f7ff fd8b 	bl	800b414 <tcp_pcb_remove>
 800b8fe:	2101      	movs	r1, #1
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b900:	7d23      	ldrb	r3, [r4, #20]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b902:	4a4c      	ldr	r2, [pc, #304]	@ (800ba34 <tcp_close_shutdown+0x170>)
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b904:	428b      	cmp	r3, r1
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b906:	7011      	strb	r1, [r2, #0]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b908:	d066      	beq.n	800b9d8 <tcp_close_shutdown+0x114>
  memp_free(MEMP_TCP_PCB, pcb);
 800b90a:	4621      	mov	r1, r4
 800b90c:	2001      	movs	r0, #1
 800b90e:	f7fe f8a9 	bl	8009a64 <memp_free>
}
 800b912:	2000      	movs	r0, #0
 800b914:	b005      	add	sp, #20
 800b916:	bd30      	pop	{r4, r5, pc}
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800b918:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 800b91a:	2a00      	cmp	r2, #0
 800b91c:	d048      	beq.n	800b9b0 <tcp_close_shutdown+0xec>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800b91e:	8b63      	ldrh	r3, [r4, #26]
 800b920:	06db      	lsls	r3, r3, #27
 800b922:	d570      	bpl.n	800ba06 <tcp_close_shutdown+0x142>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b924:	8b21      	ldrh	r1, [r4, #24]
 800b926:	1d20      	adds	r0, r4, #4
 800b928:	8ae2      	ldrh	r2, [r4, #22]
 800b92a:	4623      	mov	r3, r4
 800b92c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800b930:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800b932:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800b934:	9000      	str	r0, [sp, #0]
 800b936:	4620      	mov	r0, r4
 800b938:	f002 fcde 	bl	800e2f8 <tcp_rst>
      tcp_pcb_purge(pcb);
 800b93c:	4620      	mov	r0, r4
 800b93e:	f7ff fa77 	bl	800ae30 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800b942:	4a3b      	ldr	r2, [pc, #236]	@ (800ba30 <tcp_close_shutdown+0x16c>)
 800b944:	6813      	ldr	r3, [r2, #0]
 800b946:	42a3      	cmp	r3, r4
 800b948:	d038      	beq.n	800b9bc <tcp_close_shutdown+0xf8>
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d038      	beq.n	800b9c0 <tcp_close_shutdown+0xfc>
 800b94e:	68da      	ldr	r2, [r3, #12]
 800b950:	42a2      	cmp	r2, r4
 800b952:	d055      	beq.n	800ba00 <tcp_close_shutdown+0x13c>
 800b954:	4613      	mov	r3, r2
 800b956:	e7f8      	b.n	800b94a <tcp_close_shutdown+0x86>
 800b958:	4937      	ldr	r1, [pc, #220]	@ (800ba38 <tcp_close_shutdown+0x174>)
      pcb->listener = NULL;
 800b95a:	2000      	movs	r0, #0
 800b95c:	f101 050c 	add.w	r5, r1, #12
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800b960:	f851 3f04 	ldr.w	r3, [r1, #4]!
 800b964:	681b      	ldr	r3, [r3, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b966:	b133      	cbz	r3, 800b976 <tcp_close_shutdown+0xb2>
    if (pcb->listener == lpcb) {
 800b968:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800b96a:	4294      	cmp	r4, r2
      pcb->listener = NULL;
 800b96c:	bf08      	it	eq
 800b96e:	67d8      	streq	r0, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b970:	68db      	ldr	r3, [r3, #12]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d1f8      	bne.n	800b968 <tcp_close_shutdown+0xa4>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b976:	428d      	cmp	r5, r1
 800b978:	d1f2      	bne.n	800b960 <tcp_close_shutdown+0x9c>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800b97a:	4621      	mov	r1, r4
 800b97c:	482f      	ldr	r0, [pc, #188]	@ (800ba3c <tcp_close_shutdown+0x178>)
 800b97e:	f7ff fd49 	bl	800b414 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800b982:	7d23      	ldrb	r3, [r4, #20]
 800b984:	2b01      	cmp	r3, #1
 800b986:	d049      	beq.n	800ba1c <tcp_close_shutdown+0x158>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800b988:	4621      	mov	r1, r4
 800b98a:	2002      	movs	r0, #2
 800b98c:	f7fe f86a 	bl	8009a64 <memp_free>
}
 800b990:	2000      	movs	r0, #0
 800b992:	b005      	add	sp, #20
 800b994:	bd30      	pop	{r4, r5, pc}
      if (pcb->local_port != 0) {
 800b996:	8ae3      	ldrh	r3, [r4, #22]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d0b6      	beq.n	800b90a <tcp_close_shutdown+0x46>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b99c:	4a28      	ldr	r2, [pc, #160]	@ (800ba40 <tcp_close_shutdown+0x17c>)
 800b99e:	6813      	ldr	r3, [r2, #0]
 800b9a0:	42a3      	cmp	r3, r4
 800b9a2:	d042      	beq.n	800ba2a <tcp_close_shutdown+0x166>
 800b9a4:	b34b      	cbz	r3, 800b9fa <tcp_close_shutdown+0x136>
 800b9a6:	68da      	ldr	r2, [r3, #12]
 800b9a8:	42a2      	cmp	r2, r4
 800b9aa:	d024      	beq.n	800b9f6 <tcp_close_shutdown+0x132>
 800b9ac:	4613      	mov	r3, r2
 800b9ae:	e7f9      	b.n	800b9a4 <tcp_close_shutdown+0xe0>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800b9b0:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 800b9b2:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800b9b6:	4291      	cmp	r1, r2
 800b9b8:	d095      	beq.n	800b8e6 <tcp_close_shutdown+0x22>
 800b9ba:	e7b0      	b.n	800b91e <tcp_close_shutdown+0x5a>
      TCP_RMV_ACTIVE(pcb);
 800b9bc:	68e3      	ldr	r3, [r4, #12]
 800b9be:	6013      	str	r3, [r2, #0]
      if (tcp_input_pcb == pcb) {
 800b9c0:	4b20      	ldr	r3, [pc, #128]	@ (800ba44 <tcp_close_shutdown+0x180>)
      TCP_RMV_ACTIVE(pcb);
 800b9c2:	2000      	movs	r0, #0
 800b9c4:	4a1b      	ldr	r2, [pc, #108]	@ (800ba34 <tcp_close_shutdown+0x170>)
 800b9c6:	2101      	movs	r1, #1
      if (tcp_input_pcb == pcb) {
 800b9c8:	681b      	ldr	r3, [r3, #0]
      TCP_RMV_ACTIVE(pcb);
 800b9ca:	60e0      	str	r0, [r4, #12]
      if (tcp_input_pcb == pcb) {
 800b9cc:	42a3      	cmp	r3, r4
      TCP_RMV_ACTIVE(pcb);
 800b9ce:	7011      	strb	r1, [r2, #0]
      if (tcp_input_pcb == pcb) {
 800b9d0:	d021      	beq.n	800ba16 <tcp_close_shutdown+0x152>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b9d2:	7d23      	ldrb	r3, [r4, #20]
 800b9d4:	2b01      	cmp	r3, #1
 800b9d6:	d198      	bne.n	800b90a <tcp_close_shutdown+0x46>
 800b9d8:	4b1b      	ldr	r3, [pc, #108]	@ (800ba48 <tcp_close_shutdown+0x184>)
 800b9da:	22d4      	movs	r2, #212	@ 0xd4
 800b9dc:	491b      	ldr	r1, [pc, #108]	@ (800ba4c <tcp_close_shutdown+0x188>)
 800b9de:	481c      	ldr	r0, [pc, #112]	@ (800ba50 <tcp_close_shutdown+0x18c>)
 800b9e0:	f005 f93c 	bl	8010c5c <iprintf>
 800b9e4:	e791      	b.n	800b90a <tcp_close_shutdown+0x46>
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800b9e6:	4b18      	ldr	r3, [pc, #96]	@ (800ba48 <tcp_close_shutdown+0x184>)
 800b9e8:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800b9ec:	4919      	ldr	r1, [pc, #100]	@ (800ba54 <tcp_close_shutdown+0x190>)
 800b9ee:	4818      	ldr	r0, [pc, #96]	@ (800ba50 <tcp_close_shutdown+0x18c>)
 800b9f0:	f005 f934 	bl	8010c5c <iprintf>
 800b9f4:	e76d      	b.n	800b8d2 <tcp_close_shutdown+0xe>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b9f6:	68e2      	ldr	r2, [r4, #12]
 800b9f8:	60da      	str	r2, [r3, #12]
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	60e3      	str	r3, [r4, #12]
      tcp_free(pcb);
 800b9fe:	e784      	b.n	800b90a <tcp_close_shutdown+0x46>
      TCP_RMV_ACTIVE(pcb);
 800ba00:	68e2      	ldr	r2, [r4, #12]
 800ba02:	60da      	str	r2, [r3, #12]
 800ba04:	e7dc      	b.n	800b9c0 <tcp_close_shutdown+0xfc>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800ba06:	4b10      	ldr	r3, [pc, #64]	@ (800ba48 <tcp_close_shutdown+0x184>)
 800ba08:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800ba0c:	4912      	ldr	r1, [pc, #72]	@ (800ba58 <tcp_close_shutdown+0x194>)
 800ba0e:	4810      	ldr	r0, [pc, #64]	@ (800ba50 <tcp_close_shutdown+0x18c>)
 800ba10:	f005 f924 	bl	8010c5c <iprintf>
 800ba14:	e786      	b.n	800b924 <tcp_close_shutdown+0x60>
        tcp_trigger_input_pcb_close();
 800ba16:	f001 fd73 	bl	800d500 <tcp_trigger_input_pcb_close>
 800ba1a:	e77a      	b.n	800b912 <tcp_close_shutdown+0x4e>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800ba1c:	4b0a      	ldr	r3, [pc, #40]	@ (800ba48 <tcp_close_shutdown+0x184>)
 800ba1e:	22df      	movs	r2, #223	@ 0xdf
 800ba20:	490e      	ldr	r1, [pc, #56]	@ (800ba5c <tcp_close_shutdown+0x198>)
 800ba22:	480b      	ldr	r0, [pc, #44]	@ (800ba50 <tcp_close_shutdown+0x18c>)
 800ba24:	f005 f91a 	bl	8010c5c <iprintf>
 800ba28:	e7ae      	b.n	800b988 <tcp_close_shutdown+0xc4>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ba2a:	68e3      	ldr	r3, [r4, #12]
 800ba2c:	6013      	str	r3, [r2, #0]
 800ba2e:	e7e4      	b.n	800b9fa <tcp_close_shutdown+0x136>
 800ba30:	2400b80c 	.word	0x2400b80c
 800ba34:	2400b807 	.word	0x2400b807
 800ba38:	080137d8 	.word	0x080137d8
 800ba3c:	2400b810 	.word	0x2400b810
 800ba40:	2400b814 	.word	0x2400b814
 800ba44:	2400b81c 	.word	0x2400b81c
 800ba48:	08013120 	.word	0x08013120
 800ba4c:	0801315c 	.word	0x0801315c
 800ba50:	08011f14 	.word	0x08011f14
 800ba54:	080136e0 	.word	0x080136e0
 800ba58:	08013700 	.word	0x08013700
 800ba5c:	0801371c 	.word	0x0801371c

0800ba60 <tcp_close>:
{
 800ba60:	b510      	push	{r4, lr}
 800ba62:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 800ba64:	f7fa ff6c 	bl	8006940 <sys_check_core_locking>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800ba68:	b164      	cbz	r4, 800ba84 <tcp_close+0x24>
  if (pcb->state != LISTEN) {
 800ba6a:	7d23      	ldrb	r3, [r4, #20]
 800ba6c:	2b01      	cmp	r3, #1
 800ba6e:	d003      	beq.n	800ba78 <tcp_close+0x18>
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ba70:	8b63      	ldrh	r3, [r4, #26]
 800ba72:	f043 0310 	orr.w	r3, r3, #16
 800ba76:	8363      	strh	r3, [r4, #26]
  return tcp_close_shutdown(pcb, 1);
 800ba78:	4620      	mov	r0, r4
 800ba7a:	2101      	movs	r1, #1
}
 800ba7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return tcp_close_shutdown(pcb, 1);
 800ba80:	f7ff bf20 	b.w	800b8c4 <tcp_close_shutdown>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800ba84:	4b04      	ldr	r3, [pc, #16]	@ (800ba98 <tcp_close+0x38>)
 800ba86:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800ba8a:	4904      	ldr	r1, [pc, #16]	@ (800ba9c <tcp_close+0x3c>)
 800ba8c:	4804      	ldr	r0, [pc, #16]	@ (800baa0 <tcp_close+0x40>)
 800ba8e:	f005 f8e5 	bl	8010c5c <iprintf>
}
 800ba92:	f06f 000f 	mvn.w	r0, #15
 800ba96:	bd10      	pop	{r4, pc}
 800ba98:	08013120 	.word	0x08013120
 800ba9c:	08013738 	.word	0x08013738
 800baa0:	08011f14 	.word	0x08011f14

0800baa4 <tcp_recv_null>:
{
 800baa4:	b510      	push	{r4, lr}
 800baa6:	b082      	sub	sp, #8
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800baa8:	b1f1      	cbz	r1, 800bae8 <tcp_recv_null+0x44>
  if (p != NULL) {
 800baaa:	4614      	mov	r4, r2
 800baac:	4608      	mov	r0, r1
 800baae:	b142      	cbz	r2, 800bac2 <tcp_recv_null+0x1e>
    tcp_recved(pcb, p->tot_len);
 800bab0:	8911      	ldrh	r1, [r2, #8]
 800bab2:	f7fe fffb 	bl	800aaac <tcp_recved>
    pbuf_free(p);
 800bab6:	4620      	mov	r0, r4
 800bab8:	f7fe fae0 	bl	800a07c <pbuf_free>
  return ERR_OK;
 800babc:	2000      	movs	r0, #0
}
 800babe:	b002      	add	sp, #8
 800bac0:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d1fa      	bne.n	800babc <tcp_recv_null+0x18>
 800bac6:	9101      	str	r1, [sp, #4]
  LWIP_ASSERT_CORE_LOCKED();
 800bac8:	f7fa ff3a 	bl	8006940 <sys_check_core_locking>
  if (pcb->state != LISTEN) {
 800bacc:	9801      	ldr	r0, [sp, #4]
 800bace:	7d03      	ldrb	r3, [r0, #20]
 800bad0:	2b01      	cmp	r3, #1
 800bad2:	d003      	beq.n	800badc <tcp_recv_null+0x38>
    tcp_set_flags(pcb, TF_RXCLOSED);
 800bad4:	8b43      	ldrh	r3, [r0, #26]
 800bad6:	f043 0310 	orr.w	r3, r3, #16
 800bada:	8343      	strh	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 800badc:	2101      	movs	r1, #1
}
 800bade:	b002      	add	sp, #8
 800bae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return tcp_close_shutdown(pcb, 1);
 800bae4:	f7ff beee 	b.w	800b8c4 <tcp_close_shutdown>
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800bae8:	4b04      	ldr	r3, [pc, #16]	@ (800bafc <tcp_recv_null+0x58>)
 800baea:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800baee:	4904      	ldr	r1, [pc, #16]	@ (800bb00 <tcp_recv_null+0x5c>)
 800baf0:	4804      	ldr	r0, [pc, #16]	@ (800bb04 <tcp_recv_null+0x60>)
 800baf2:	f005 f8b3 	bl	8010c5c <iprintf>
 800baf6:	f06f 000f 	mvn.w	r0, #15
 800bafa:	e7e0      	b.n	800babe <tcp_recv_null+0x1a>
 800bafc:	08013120 	.word	0x08013120
 800bb00:	08013750 	.word	0x08013750
 800bb04:	08011f14 	.word	0x08011f14

0800bb08 <tcp_process_refused_data>:
{
 800bb08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800bb0a:	b380      	cbz	r0, 800bb6e <tcp_process_refused_data+0x66>
    u8_t refused_flags = pcb->refused_data->flags;
 800bb0c:	6f85      	ldr	r5, [r0, #120]	@ 0x78
    pcb->refused_data = NULL;
 800bb0e:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800bb10:	f8d0 6084 	ldr.w	r6, [r0, #132]	@ 0x84
 800bb14:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 800bb16:	7b6f      	ldrb	r7, [r5, #13]
    pcb->refused_data = NULL;
 800bb18:	6783      	str	r3, [r0, #120]	@ 0x78
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800bb1a:	b156      	cbz	r6, 800bb32 <tcp_process_refused_data+0x2a>
 800bb1c:	4601      	mov	r1, r0
 800bb1e:	462a      	mov	r2, r5
 800bb20:	6900      	ldr	r0, [r0, #16]
 800bb22:	47b0      	blx	r6
    if (err == ERR_OK) {
 800bb24:	b158      	cbz	r0, 800bb3e <tcp_process_refused_data+0x36>
    } else if (err == ERR_ABRT) {
 800bb26:	300d      	adds	r0, #13
 800bb28:	d01e      	beq.n	800bb68 <tcp_process_refused_data+0x60>
      return ERR_INPROGRESS;
 800bb2a:	f06f 0004 	mvn.w	r0, #4
      pcb->refused_data = refused_data;
 800bb2e:	67a5      	str	r5, [r4, #120]	@ 0x78
}
 800bb30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_recved(pcb, p->tot_len);
 800bb32:	8929      	ldrh	r1, [r5, #8]
 800bb34:	f7fe ffba 	bl	800aaac <tcp_recved>
    pbuf_free(p);
 800bb38:	4628      	mov	r0, r5
 800bb3a:	f7fe fa9f 	bl	800a07c <pbuf_free>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800bb3e:	06bb      	lsls	r3, r7, #26
 800bb40:	d510      	bpl.n	800bb64 <tcp_process_refused_data+0x5c>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800bb42:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800bb44:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800bb48:	4293      	cmp	r3, r2
 800bb4a:	d001      	beq.n	800bb50 <tcp_process_refused_data+0x48>
          pcb->rcv_wnd++;
 800bb4c:	3301      	adds	r3, #1
 800bb4e:	8523      	strh	r3, [r4, #40]	@ 0x28
        TCP_EVENT_CLOSED(pcb, err);
 800bb50:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
 800bb54:	b135      	cbz	r5, 800bb64 <tcp_process_refused_data+0x5c>
 800bb56:	2300      	movs	r3, #0
 800bb58:	4621      	mov	r1, r4
 800bb5a:	6920      	ldr	r0, [r4, #16]
 800bb5c:	461a      	mov	r2, r3
 800bb5e:	47a8      	blx	r5
        if (err == ERR_ABRT) {
 800bb60:	300d      	adds	r0, #13
 800bb62:	d001      	beq.n	800bb68 <tcp_process_refused_data+0x60>
  return ERR_OK;
 800bb64:	2000      	movs	r0, #0
}
 800bb66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          return ERR_ABRT;
 800bb68:	f06f 000c 	mvn.w	r0, #12
}
 800bb6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800bb6e:	4b05      	ldr	r3, [pc, #20]	@ (800bb84 <tcp_process_refused_data+0x7c>)
 800bb70:	f240 6209 	movw	r2, #1545	@ 0x609
 800bb74:	4904      	ldr	r1, [pc, #16]	@ (800bb88 <tcp_process_refused_data+0x80>)
 800bb76:	4805      	ldr	r0, [pc, #20]	@ (800bb8c <tcp_process_refused_data+0x84>)
 800bb78:	f005 f870 	bl	8010c5c <iprintf>
 800bb7c:	f06f 000f 	mvn.w	r0, #15
}
 800bb80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb82:	bf00      	nop
 800bb84:	08013120 	.word	0x08013120
 800bb88:	0801376c 	.word	0x0801376c
 800bb8c:	08011f14 	.word	0x08011f14

0800bb90 <tcp_fasttmr>:
{
 800bb90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ++tcp_timer_ctr;
 800bb94:	4d1c      	ldr	r5, [pc, #112]	@ (800bc08 <tcp_fasttmr+0x78>)
        tcp_active_pcbs_changed = 0;
 800bb96:	2700      	movs	r7, #0
 800bb98:	f8df 8074 	ldr.w	r8, [pc, #116]	@ 800bc10 <tcp_fasttmr+0x80>
  ++tcp_timer_ctr;
 800bb9c:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 800bb9e:	4e1b      	ldr	r6, [pc, #108]	@ (800bc0c <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 800bba0:	3301      	adds	r3, #1
 800bba2:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 800bba4:	f8d8 4000 	ldr.w	r4, [r8]
  while (pcb != NULL) {
 800bba8:	b1b4      	cbz	r4, 800bbd8 <tcp_fasttmr+0x48>
    if (pcb->last_timer != tcp_timer_ctr) {
 800bbaa:	7fa3      	ldrb	r3, [r4, #30]
 800bbac:	782a      	ldrb	r2, [r5, #0]
 800bbae:	4293      	cmp	r3, r2
 800bbb0:	d014      	beq.n	800bbdc <tcp_fasttmr+0x4c>
      if (pcb->flags & TF_ACK_DELAY) {
 800bbb2:	8b63      	ldrh	r3, [r4, #26]
      pcb->last_timer = tcp_timer_ctr;
 800bbb4:	77a2      	strb	r2, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 800bbb6:	07d9      	lsls	r1, r3, #31
 800bbb8:	d419      	bmi.n	800bbee <tcp_fasttmr+0x5e>
      if (pcb->flags & TF_CLOSEPEND) {
 800bbba:	071a      	lsls	r2, r3, #28
 800bbbc:	d410      	bmi.n	800bbe0 <tcp_fasttmr+0x50>
      if (pcb->refused_data != NULL) {
 800bbbe:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
        tcp_process_refused_data(pcb);
 800bbc0:	4620      	mov	r0, r4
      next = pcb->next;
 800bbc2:	68e4      	ldr	r4, [r4, #12]
      if (pcb->refused_data != NULL) {
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d0ef      	beq.n	800bba8 <tcp_fasttmr+0x18>
        tcp_active_pcbs_changed = 0;
 800bbc8:	7037      	strb	r7, [r6, #0]
        tcp_process_refused_data(pcb);
 800bbca:	f7ff ff9d 	bl	800bb08 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800bbce:	7833      	ldrb	r3, [r6, #0]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d1e7      	bne.n	800bba4 <tcp_fasttmr+0x14>
  while (pcb != NULL) {
 800bbd4:	2c00      	cmp	r4, #0
 800bbd6:	d1e8      	bne.n	800bbaa <tcp_fasttmr+0x1a>
}
 800bbd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pcb = pcb->next;
 800bbdc:	68e4      	ldr	r4, [r4, #12]
 800bbde:	e7e3      	b.n	800bba8 <tcp_fasttmr+0x18>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800bbe0:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 800bbe4:	4620      	mov	r0, r4
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800bbe6:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 800bbe8:	f7fe fdd2 	bl	800a790 <tcp_close_shutdown_fin>
 800bbec:	e7e7      	b.n	800bbbe <tcp_fasttmr+0x2e>
        tcp_ack_now(pcb);
 800bbee:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 800bbf2:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 800bbf4:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 800bbf6:	f002 fbf9 	bl	800e3ec <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bbfa:	8b63      	ldrh	r3, [r4, #26]
 800bbfc:	f023 0303 	bic.w	r3, r3, #3
 800bc00:	b29b      	uxth	r3, r3
 800bc02:	8363      	strh	r3, [r4, #26]
 800bc04:	e7d9      	b.n	800bbba <tcp_fasttmr+0x2a>
 800bc06:	bf00      	nop
 800bc08:	2400b805 	.word	0x2400b805
 800bc0c:	2400b807 	.word	0x2400b807
 800bc10:	2400b80c 	.word	0x2400b80c

0800bc14 <tcp_tmr>:
{
 800bc14:	b508      	push	{r3, lr}
  tcp_fasttmr();
 800bc16:	f7ff ffbb 	bl	800bb90 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 800bc1a:	4a06      	ldr	r2, [pc, #24]	@ (800bc34 <tcp_tmr+0x20>)
 800bc1c:	7813      	ldrb	r3, [r2, #0]
 800bc1e:	3301      	adds	r3, #1
 800bc20:	b2db      	uxtb	r3, r3
 800bc22:	7013      	strb	r3, [r2, #0]
 800bc24:	07db      	lsls	r3, r3, #31
 800bc26:	d400      	bmi.n	800bc2a <tcp_tmr+0x16>
}
 800bc28:	bd08      	pop	{r3, pc}
 800bc2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 800bc2e:	f7ff b951 	b.w	800aed4 <tcp_slowtmr>
 800bc32:	bf00      	nop
 800bc34:	2400b806 	.word	0x2400b806

0800bc38 <tcp_next_iss>:
{
 800bc38:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800bc3a:	b130      	cbz	r0, 800bc4a <tcp_next_iss+0x12>
  iss += tcp_ticks;       /* XXX */
 800bc3c:	4b07      	ldr	r3, [pc, #28]	@ (800bc5c <tcp_next_iss+0x24>)
 800bc3e:	4a08      	ldr	r2, [pc, #32]	@ (800bc60 <tcp_next_iss+0x28>)
 800bc40:	6818      	ldr	r0, [r3, #0]
 800bc42:	6812      	ldr	r2, [r2, #0]
 800bc44:	4410      	add	r0, r2
 800bc46:	6018      	str	r0, [r3, #0]
}
 800bc48:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800bc4a:	4b06      	ldr	r3, [pc, #24]	@ (800bc64 <tcp_next_iss+0x2c>)
 800bc4c:	f640 02af 	movw	r2, #2223	@ 0x8af
 800bc50:	4905      	ldr	r1, [pc, #20]	@ (800bc68 <tcp_next_iss+0x30>)
 800bc52:	4806      	ldr	r0, [pc, #24]	@ (800bc6c <tcp_next_iss+0x34>)
 800bc54:	f005 f802 	bl	8010c5c <iprintf>
 800bc58:	e7f0      	b.n	800bc3c <tcp_next_iss+0x4>
 800bc5a:	bf00      	nop
 800bc5c:	24000028 	.word	0x24000028
 800bc60:	2400b818 	.word	0x2400b818
 800bc64:	08013120 	.word	0x08013120
 800bc68:	08013794 	.word	0x08013794
 800bc6c:	08011f14 	.word	0x08011f14

0800bc70 <tcp_eff_send_mss_netif>:
{
 800bc70:	b538      	push	{r3, r4, r5, lr}
 800bc72:	4605      	mov	r5, r0
 800bc74:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800bc76:	b162      	cbz	r2, 800bc92 <tcp_eff_send_mss_netif+0x22>
    if (outif == NULL) {
 800bc78:	b14c      	cbz	r4, 800bc8e <tcp_eff_send_mss_netif+0x1e>
    mtu = outif->mtu;
 800bc7a:	8ca3      	ldrh	r3, [r4, #36]	@ 0x24
  if (mtu != 0) {
 800bc7c:	b13b      	cbz	r3, 800bc8e <tcp_eff_send_mss_netif+0x1e>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800bc7e:	2b28      	cmp	r3, #40	@ 0x28
 800bc80:	bf38      	it	cc
 800bc82:	2328      	movcc	r3, #40	@ 0x28
 800bc84:	3b28      	subs	r3, #40	@ 0x28
    sendmss = LWIP_MIN(sendmss, mss_s);
 800bc86:	b29b      	uxth	r3, r3
 800bc88:	429d      	cmp	r5, r3
 800bc8a:	bf28      	it	cs
 800bc8c:	461d      	movcs	r5, r3
}
 800bc8e:	4628      	mov	r0, r5
 800bc90:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800bc92:	4b04      	ldr	r3, [pc, #16]	@ (800bca4 <tcp_eff_send_mss_netif+0x34>)
 800bc94:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800bc98:	4903      	ldr	r1, [pc, #12]	@ (800bca8 <tcp_eff_send_mss_netif+0x38>)
 800bc9a:	4804      	ldr	r0, [pc, #16]	@ (800bcac <tcp_eff_send_mss_netif+0x3c>)
 800bc9c:	f004 ffde 	bl	8010c5c <iprintf>
 800bca0:	e7ea      	b.n	800bc78 <tcp_eff_send_mss_netif+0x8>
 800bca2:	bf00      	nop
 800bca4:	08013120 	.word	0x08013120
 800bca8:	080137b0 	.word	0x080137b0
 800bcac:	08011f14 	.word	0x08011f14

0800bcb0 <tcp_netif_ip_addr_changed>:
  if (!ip_addr_isany(old_addr)) {
 800bcb0:	b308      	cbz	r0, 800bcf6 <tcp_netif_ip_addr_changed+0x46>
{
 800bcb2:	b538      	push	{r3, r4, r5, lr}
  if (!ip_addr_isany(old_addr)) {
 800bcb4:	6803      	ldr	r3, [r0, #0]
 800bcb6:	4604      	mov	r4, r0
 800bcb8:	b903      	cbnz	r3, 800bcbc <tcp_netif_ip_addr_changed+0xc>
}
 800bcba:	bd38      	pop	{r3, r4, r5, pc}
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800bcbc:	4b0e      	ldr	r3, [pc, #56]	@ (800bcf8 <tcp_netif_ip_addr_changed+0x48>)
 800bcbe:	460d      	mov	r5, r1
 800bcc0:	6819      	ldr	r1, [r3, #0]
 800bcc2:	f7ff fd0f 	bl	800b6e4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800bcc6:	4b0d      	ldr	r3, [pc, #52]	@ (800bcfc <tcp_netif_ip_addr_changed+0x4c>)
 800bcc8:	4620      	mov	r0, r4
 800bcca:	6819      	ldr	r1, [r3, #0]
 800bccc:	f7ff fd0a 	bl	800b6e4 <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
 800bcd0:	2d00      	cmp	r5, #0
 800bcd2:	d0f2      	beq.n	800bcba <tcp_netif_ip_addr_changed+0xa>
 800bcd4:	682b      	ldr	r3, [r5, #0]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d0ef      	beq.n	800bcba <tcp_netif_ip_addr_changed+0xa>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bcda:	4b09      	ldr	r3, [pc, #36]	@ (800bd00 <tcp_netif_ip_addr_changed+0x50>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d0eb      	beq.n	800bcba <tcp_netif_ip_addr_changed+0xa>
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800bce2:	6819      	ldr	r1, [r3, #0]
 800bce4:	6822      	ldr	r2, [r4, #0]
 800bce6:	4291      	cmp	r1, r2
 800bce8:	d101      	bne.n	800bcee <tcp_netif_ip_addr_changed+0x3e>
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800bcea:	682a      	ldr	r2, [r5, #0]
 800bcec:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bcee:	68db      	ldr	r3, [r3, #12]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d1f6      	bne.n	800bce2 <tcp_netif_ip_addr_changed+0x32>
}
 800bcf4:	bd38      	pop	{r3, r4, r5, pc}
 800bcf6:	4770      	bx	lr
 800bcf8:	2400b80c 	.word	0x2400b80c
 800bcfc:	2400b814 	.word	0x2400b814
 800bd00:	2400b810 	.word	0x2400b810

0800bd04 <tcp_free_ooseq>:
{
 800bd04:	b570      	push	{r4, r5, r6, lr}
  if (pcb->ooseq) {
 800bd06:	6f44      	ldr	r4, [r0, #116]	@ 0x74
 800bd08:	b16c      	cbz	r4, 800bd26 <tcp_free_ooseq+0x22>
 800bd0a:	4606      	mov	r6, r0
      pbuf_free(seg->p);
 800bd0c:	4625      	mov	r5, r4
    struct tcp_seg *next = seg->next;
 800bd0e:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800bd10:	6868      	ldr	r0, [r5, #4]
 800bd12:	b108      	cbz	r0, 800bd18 <tcp_free_ooseq+0x14>
      pbuf_free(seg->p);
 800bd14:	f7fe f9b2 	bl	800a07c <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800bd18:	4629      	mov	r1, r5
 800bd1a:	2003      	movs	r0, #3
 800bd1c:	f7fd fea2 	bl	8009a64 <memp_free>
  while (seg != NULL) {
 800bd20:	2c00      	cmp	r4, #0
 800bd22:	d1f3      	bne.n	800bd0c <tcp_free_ooseq+0x8>
    pcb->ooseq = NULL;
 800bd24:	6774      	str	r4, [r6, #116]	@ 0x74
}
 800bd26:	bd70      	pop	{r4, r5, r6, pc}

0800bd28 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800bd28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800bd2a:	4605      	mov	r5, r0
{
 800bd2c:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800bd2e:	2800      	cmp	r0, #0
 800bd30:	d035      	beq.n	800bd9e <tcp_oos_insert_segment+0x76>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800bd32:	68eb      	ldr	r3, [r5, #12]
 800bd34:	8998      	ldrh	r0, [r3, #12]
 800bd36:	f7fd facd 	bl	80092d4 <lwip_htons>
 800bd3a:	07c2      	lsls	r2, r0, #31
 800bd3c:	d429      	bmi.n	800bd92 <tcp_oos_insert_segment+0x6a>
 800bd3e:	4e1c      	ldr	r6, [pc, #112]	@ (800bdb0 <tcp_oos_insert_segment+0x88>)
 800bd40:	e005      	b.n	800bd4e <tcp_oos_insert_segment+0x26>
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
      }
      old_seg = next;
      next = next->next;
 800bd42:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 800bd44:	4620      	mov	r0, r4
 800bd46:	f7fe ffb5 	bl	800acb4 <tcp_seg_free>
      next = next->next;
 800bd4a:	463c      	mov	r4, r7
    while (next &&
 800bd4c:	b327      	cbz	r7, 800bd98 <tcp_oos_insert_segment+0x70>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800bd4e:	68e1      	ldr	r1, [r4, #12]
 800bd50:	892b      	ldrh	r3, [r5, #8]
 800bd52:	6837      	ldr	r7, [r6, #0]
 800bd54:	6848      	ldr	r0, [r1, #4]
 800bd56:	443b      	add	r3, r7
 800bd58:	8922      	ldrh	r2, [r4, #8]
 800bd5a:	1a1b      	subs	r3, r3, r0
 800bd5c:	1a9a      	subs	r2, r3, r2
    while (next &&
 800bd5e:	2a00      	cmp	r2, #0
 800bd60:	db0d      	blt.n	800bd7e <tcp_oos_insert_segment+0x56>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800bd62:	8988      	ldrh	r0, [r1, #12]
 800bd64:	f7fd fab6 	bl	80092d4 <lwip_htons>
 800bd68:	07c3      	lsls	r3, r0, #31
 800bd6a:	d5ea      	bpl.n	800bd42 <tcp_oos_insert_segment+0x1a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800bd6c:	68eb      	ldr	r3, [r5, #12]
 800bd6e:	2001      	movs	r0, #1
 800bd70:	899f      	ldrh	r7, [r3, #12]
 800bd72:	f7fd faaf 	bl	80092d4 <lwip_htons>
 800bd76:	68eb      	ldr	r3, [r5, #12]
 800bd78:	4307      	orrs	r7, r0
 800bd7a:	819f      	strh	r7, [r3, #12]
 800bd7c:	e7e1      	b.n	800bd42 <tcp_oos_insert_segment+0x1a>
    }
    if (next &&
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	dd05      	ble.n	800bd8e <tcp_oos_insert_segment+0x66>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800bd82:	1bc1      	subs	r1, r0, r7
      pbuf_realloc(cseg->p, cseg->len);
 800bd84:	6868      	ldr	r0, [r5, #4]
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800bd86:	b289      	uxth	r1, r1
 800bd88:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800bd8a:	f7fe fa89 	bl	800a2a0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800bd8e:	602c      	str	r4, [r5, #0]
}
 800bd90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_segs_free(next);
 800bd92:	4620      	mov	r0, r4
 800bd94:	f7fe ff7c 	bl	800ac90 <tcp_segs_free>
    next = NULL;
 800bd98:	2400      	movs	r4, #0
  cseg->next = next;
 800bd9a:	602c      	str	r4, [r5, #0]
}
 800bd9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800bd9e:	4b05      	ldr	r3, [pc, #20]	@ (800bdb4 <tcp_oos_insert_segment+0x8c>)
 800bda0:	f240 421f 	movw	r2, #1055	@ 0x41f
 800bda4:	4904      	ldr	r1, [pc, #16]	@ (800bdb8 <tcp_oos_insert_segment+0x90>)
 800bda6:	4805      	ldr	r0, [pc, #20]	@ (800bdbc <tcp_oos_insert_segment+0x94>)
 800bda8:	f004 ff58 	bl	8010c5c <iprintf>
 800bdac:	e7c1      	b.n	800bd32 <tcp_oos_insert_segment+0xa>
 800bdae:	bf00      	nop
 800bdb0:	2400b830 	.word	0x2400b830
 800bdb4:	08013800 	.word	0x08013800
 800bdb8:	08013834 	.word	0x08013834
 800bdbc:	08011f14 	.word	0x08011f14

0800bdc0 <tcp_input_delayed_close>:
  if (recv_flags & TF_CLOSED) {
 800bdc0:	4b0d      	ldr	r3, [pc, #52]	@ (800bdf8 <tcp_input_delayed_close+0x38>)
{
 800bdc2:	b510      	push	{r4, lr}
  if (recv_flags & TF_CLOSED) {
 800bdc4:	781b      	ldrb	r3, [r3, #0]
{
 800bdc6:	4604      	mov	r4, r0
  if (recv_flags & TF_CLOSED) {
 800bdc8:	f013 0010 	ands.w	r0, r3, #16
 800bdcc:	d100      	bne.n	800bdd0 <tcp_input_delayed_close+0x10>
}
 800bdce:	bd10      	pop	{r4, pc}
    if (!(pcb->flags & TF_RXCLOSED)) {
 800bdd0:	8b63      	ldrh	r3, [r4, #26]
 800bdd2:	06db      	lsls	r3, r3, #27
 800bdd4:	d406      	bmi.n	800bde4 <tcp_input_delayed_close+0x24>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800bdd6:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800bdda:	b11b      	cbz	r3, 800bde4 <tcp_input_delayed_close+0x24>
 800bddc:	f06f 010e 	mvn.w	r1, #14
 800bde0:	6920      	ldr	r0, [r4, #16]
 800bde2:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800bde4:	4621      	mov	r1, r4
 800bde6:	4805      	ldr	r0, [pc, #20]	@ (800bdfc <tcp_input_delayed_close+0x3c>)
 800bde8:	f7ff fb14 	bl	800b414 <tcp_pcb_remove>
    tcp_free(pcb);
 800bdec:	4620      	mov	r0, r4
 800bdee:	f7fe fd0d 	bl	800a80c <tcp_free>
 800bdf2:	2001      	movs	r0, #1
}
 800bdf4:	bd10      	pop	{r4, pc}
 800bdf6:	bf00      	nop
 800bdf8:	2400b824 	.word	0x2400b824
 800bdfc:	2400b80c 	.word	0x2400b80c

0800be00 <tcp_free_acked_segments.constprop.0>:
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800be00:	2900      	cmp	r1, #0
 800be02:	d054      	beq.n	800beae <tcp_free_acked_segments.constprop.0+0xae>
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 800be04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be08:	4682      	mov	sl, r0
 800be0a:	460d      	mov	r5, r1
 800be0c:	4690      	mov	r8, r2
 800be0e:	4e29      	ldr	r6, [pc, #164]	@ (800beb4 <tcp_free_acked_segments.constprop.0+0xb4>)
    seg_list = seg_list->next;

    clen = pbuf_clen(next->p);
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800be10:	f8df 90ac 	ldr.w	r9, [pc, #172]	@ 800bec0 <tcp_free_acked_segments.constprop.0+0xc0>
 800be14:	4f28      	ldr	r7, [pc, #160]	@ (800beb8 <tcp_free_acked_segments.constprop.0+0xb8>)
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800be16:	68eb      	ldr	r3, [r5, #12]
 800be18:	6858      	ldr	r0, [r3, #4]
 800be1a:	f7fd fa5f 	bl	80092dc <lwip_htonl>
 800be1e:	68eb      	ldr	r3, [r5, #12]
 800be20:	4604      	mov	r4, r0
 800be22:	f8b5 b008 	ldrh.w	fp, [r5, #8]
 800be26:	8998      	ldrh	r0, [r3, #12]
 800be28:	f7fd fa54 	bl	80092d4 <lwip_htons>
 800be2c:	6833      	ldr	r3, [r6, #0]
 800be2e:	f010 0003 	ands.w	r0, r0, #3
 800be32:	eba4 0403 	sub.w	r4, r4, r3
 800be36:	bf18      	it	ne
 800be38:	2001      	movne	r0, #1
 800be3a:	445c      	add	r4, fp
 800be3c:	4404      	add	r4, r0
  while (seg_list != NULL &&
 800be3e:	2c00      	cmp	r4, #0
 800be40:	dc32      	bgt.n	800bea8 <tcp_free_acked_segments.constprop.0+0xa8>
    seg_list = seg_list->next;
 800be42:	e9d5 b000 	ldrd	fp, r0, [r5]
    clen = pbuf_clen(next->p);
 800be46:	f7fe fa87 	bl	800a358 <pbuf_clen>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800be4a:	f8ba 3066 	ldrh.w	r3, [sl, #102]	@ 0x66
    clen = pbuf_clen(next->p);
 800be4e:	4604      	mov	r4, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800be50:	4298      	cmp	r0, r3
 800be52:	d81f      	bhi.n	800be94 <tcp_free_acked_segments.constprop.0+0x94>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800be54:	4919      	ldr	r1, [pc, #100]	@ (800bebc <tcp_free_acked_segments.constprop.0+0xbc>)
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800be56:	1b1b      	subs	r3, r3, r4
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800be58:	892a      	ldrh	r2, [r5, #8]
    tcp_seg_free(next);
 800be5a:	4628      	mov	r0, r5
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800be5c:	880c      	ldrh	r4, [r1, #0]
 800be5e:	465d      	mov	r5, fp
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800be60:	f8aa 3066 	strh.w	r3, [sl, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800be64:	1913      	adds	r3, r2, r4
 800be66:	800b      	strh	r3, [r1, #0]
    tcp_seg_free(next);
 800be68:	f7fe ff24 	bl	800acb4 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800be6c:	f8ba 3066 	ldrh.w	r3, [sl, #102]	@ 0x66
 800be70:	b113      	cbz	r3, 800be78 <tcp_free_acked_segments.constprop.0+0x78>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800be72:	ea58 030b 	orrs.w	r3, r8, fp
 800be76:	d003      	beq.n	800be80 <tcp_free_acked_segments.constprop.0+0x80>
  while (seg_list != NULL &&
 800be78:	f1bb 0f00 	cmp.w	fp, #0
 800be7c:	d1cb      	bne.n	800be16 <tcp_free_acked_segments.constprop.0+0x16>
 800be7e:	e006      	b.n	800be8e <tcp_free_acked_segments.constprop.0+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800be80:	4b0f      	ldr	r3, [pc, #60]	@ (800bec0 <tcp_free_acked_segments.constprop.0+0xc0>)
 800be82:	f240 4261 	movw	r2, #1121	@ 0x461
 800be86:	490f      	ldr	r1, [pc, #60]	@ (800bec4 <tcp_free_acked_segments.constprop.0+0xc4>)
 800be88:	480b      	ldr	r0, [pc, #44]	@ (800beb8 <tcp_free_acked_segments.constprop.0+0xb8>)
 800be8a:	f004 fee7 	bl	8010c5c <iprintf>
  while (seg_list != NULL &&
 800be8e:	2000      	movs	r0, #0
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
}
 800be90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800be94:	464b      	mov	r3, r9
 800be96:	f240 4257 	movw	r2, #1111	@ 0x457
 800be9a:	490b      	ldr	r1, [pc, #44]	@ (800bec8 <tcp_free_acked_segments.constprop.0+0xc8>)
 800be9c:	4638      	mov	r0, r7
 800be9e:	f004 fedd 	bl	8010c5c <iprintf>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800bea2:	f8ba 3066 	ldrh.w	r3, [sl, #102]	@ 0x66
 800bea6:	e7d5      	b.n	800be54 <tcp_free_acked_segments.constprop.0+0x54>
 800bea8:	4628      	mov	r0, r5
}
 800beaa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beae:	2000      	movs	r0, #0
 800beb0:	4770      	bx	lr
 800beb2:	bf00      	nop
 800beb4:	2400b82c 	.word	0x2400b82c
 800beb8:	08011f14 	.word	0x08011f14
 800bebc:	2400b828 	.word	0x2400b828
 800bec0:	08013800 	.word	0x08013800
 800bec4:	08013884 	.word	0x08013884
 800bec8:	0801385c 	.word	0x0801385c

0800becc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800becc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800bed0:	7d03      	ldrb	r3, [r0, #20]
{
 800bed2:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800bed4:	2b03      	cmp	r3, #3
 800bed6:	f240 8124 	bls.w	800c122 <tcp_receive+0x256>

  if (flags & TCP_ACK) {
 800beda:	4bb6      	ldr	r3, [pc, #728]	@ (800c1b4 <tcp_receive+0x2e8>)
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800bedc:	4eb6      	ldr	r6, [pc, #728]	@ (800c1b8 <tcp_receive+0x2ec>)
  if (flags & TCP_ACK) {
 800bede:	781a      	ldrb	r2, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800bee0:	6833      	ldr	r3, [r6, #0]
  if (flags & TCP_ACK) {
 800bee2:	06d0      	lsls	r0, r2, #27
 800bee4:	f100 80a3 	bmi.w	800c02e <tcp_receive+0x162>
 800bee8:	4fb4      	ldr	r7, [pc, #720]	@ (800c1bc <tcp_receive+0x2f0>)

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800beea:	8839      	ldrh	r1, [r7, #0]
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800beec:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800beee:	6833      	ldr	r3, [r6, #0]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800bef0:	2900      	cmp	r1, #0
 800bef2:	f000 808c 	beq.w	800c00e <tcp_receive+0x142>
 800bef6:	7d20      	ldrb	r0, [r4, #20]
 800bef8:	2806      	cmp	r0, #6
 800befa:	f200 8088 	bhi.w	800c00e <tcp_receive+0x142>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800befe:	eba2 0803 	sub.w	r8, r2, r3
 800bf02:	f1b8 0f01 	cmp.w	r8, #1
 800bf06:	d406      	bmi.n	800bf16 <tcp_receive+0x4a>
 800bf08:	f1c3 0001 	rsb	r0, r3, #1
 800bf0c:	1a41      	subs	r1, r0, r1
 800bf0e:	4411      	add	r1, r2
 800bf10:	2900      	cmp	r1, #0
 800bf12:	f340 81d8 	ble.w	800c2c6 <tcp_receive+0x3fa>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800bf16:	1a99      	subs	r1, r3, r2
 800bf18:	2900      	cmp	r1, #0
 800bf1a:	f2c0 81cf 	blt.w	800c2bc <tcp_receive+0x3f0>
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800bf1e:	f103 0e01 	add.w	lr, r3, #1
 800bf22:	8d20      	ldrh	r0, [r4, #40]	@ 0x28
 800bf24:	ebae 0102 	sub.w	r1, lr, r2
 800bf28:	1a09      	subs	r1, r1, r0
 800bf2a:	2900      	cmp	r1, #0
 800bf2c:	dc43      	bgt.n	800bfb6 <tcp_receive+0xea>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800bf2e:	429a      	cmp	r2, r3
 800bf30:	f000 8454 	beq.w	800c7dc <tcp_receive+0x910>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800bf34:	6f65      	ldr	r5, [r4, #116]	@ 0x74
 800bf36:	2d00      	cmp	r5, #0
 800bf38:	f000 8375 	beq.w	800c626 <tcp_receive+0x75a>
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
          for (next = pcb->ooseq; next != NULL; next = next->next) {
            if (seqno == next->tcphdr->seqno) {
 800bf3c:	68e8      	ldr	r0, [r5, #12]
 800bf3e:	6842      	ldr	r2, [r0, #4]
 800bf40:	429a      	cmp	r2, r3
 800bf42:	f000 8350 	beq.w	800c5e6 <tcp_receive+0x71a>
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800bf46:	1a99      	subs	r1, r3, r2
 800bf48:	2900      	cmp	r1, #0
 800bf4a:	f2c0 83b9 	blt.w	800c6c0 <tcp_receive+0x7f4>
                  break;
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800bf4e:	f103 3cff 	add.w	ip, r3, #4294967295
              prev = next;

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800bf52:	46a8      	mov	r8, r5
 800bf54:	682d      	ldr	r5, [r5, #0]
 800bf56:	2d00      	cmp	r5, #0
 800bf58:	f000 814d 	beq.w	800c1f6 <tcp_receive+0x32a>
            if (seqno == next->tcphdr->seqno) {
 800bf5c:	68e8      	ldr	r0, [r5, #12]
 800bf5e:	6842      	ldr	r2, [r0, #4]
 800bf60:	429a      	cmp	r2, r3
 800bf62:	f000 8342 	beq.w	800c5ea <tcp_receive+0x71e>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800bf66:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800bf6a:	6849      	ldr	r1, [r1, #4]
 800bf6c:	ebac 0101 	sub.w	r1, ip, r1
 800bf70:	2900      	cmp	r1, #0
 800bf72:	dbee      	blt.n	800bf52 <tcp_receive+0x86>
 800bf74:	ebae 0102 	sub.w	r1, lr, r2
 800bf78:	2900      	cmp	r1, #0
 800bf7a:	dcea      	bgt.n	800bf52 <tcp_receive+0x86>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800bf7c:	4890      	ldr	r0, [pc, #576]	@ (800c1c0 <tcp_receive+0x2f4>)
 800bf7e:	f7fe fea7 	bl	800acd0 <tcp_seg_copy>
                  if (cseg != NULL) {
 800bf82:	4607      	mov	r7, r0
 800bf84:	b1b8      	cbz	r0, 800bfb6 <tcp_receive+0xea>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800bf86:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bf8a:	6832      	ldr	r2, [r6, #0]
 800bf8c:	6859      	ldr	r1, [r3, #4]
 800bf8e:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800bf92:	440b      	add	r3, r1
 800bf94:	1a9b      	subs	r3, r3, r2
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	dd07      	ble.n	800bfaa <tcp_receive+0xde>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800bf9a:	1a52      	subs	r2, r2, r1
                      pbuf_realloc(prev->p, prev->len);
 800bf9c:	f8d8 0004 	ldr.w	r0, [r8, #4]
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800bfa0:	b291      	uxth	r1, r2
 800bfa2:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 800bfa6:	f7fe f97b 	bl	800a2a0 <pbuf_realloc>
                    tcp_oos_insert_segment(cseg, next);
 800bfaa:	4629      	mov	r1, r5
 800bfac:	4638      	mov	r0, r7
                    prev->next = cseg;
 800bfae:	f8c8 7000 	str.w	r7, [r8]
                    tcp_oos_insert_segment(cseg, next);
 800bfb2:	f7ff feb9 	bl	800bd28 <tcp_oos_insert_segment>
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800bfb6:	4620      	mov	r0, r4
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      tcp_ack_now(pcb);
    }
  }
}
 800bfb8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        tcp_send_empty_ack(pcb);
 800bfbc:	f002 b9e4 	b.w	800e388 <tcp_send_empty_ack>
      if (tcplen == 0) {
 800bfc0:	4f7e      	ldr	r7, [pc, #504]	@ (800c1bc <tcp_receive+0x2f0>)
 800bfc2:	8839      	ldrh	r1, [r7, #0]
 800bfc4:	2900      	cmp	r1, #0
 800bfc6:	f040 810b 	bne.w	800c1e0 <tcp_receive+0x314>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800bfca:	44e6      	add	lr, ip
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800bfcc:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800bfce:	f8b4 c060 	ldrh.w	ip, [r4, #96]	@ 0x60
 800bfd2:	4461      	add	r1, ip
 800bfd4:	4571      	cmp	r1, lr
 800bfd6:	f040 8103 	bne.w	800c1e0 <tcp_receive+0x314>
          if (pcb->rtime >= 0) {
 800bfda:	8e21      	ldrh	r1, [r4, #48]	@ 0x30
            if (pcb->lastack == ackno) {
 800bfdc:	0409      	lsls	r1, r1, #16
 800bfde:	f100 80ff 	bmi.w	800c1e0 <tcp_receive+0x314>
 800bfe2:	4290      	cmp	r0, r2
 800bfe4:	f040 80fc 	bne.w	800c1e0 <tcp_receive+0x314>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800bfe8:	f894 1043 	ldrb.w	r1, [r4, #67]	@ 0x43
 800bfec:	29ff      	cmp	r1, #255	@ 0xff
 800bfee:	f000 8372 	beq.w	800c6d6 <tcp_receive+0x80a>
                ++pcb->dupacks;
 800bff2:	3101      	adds	r1, #1
 800bff4:	b2c9      	uxtb	r1, r1
              if (pcb->dupacks > 3) {
 800bff6:	2903      	cmp	r1, #3
                ++pcb->dupacks;
 800bff8:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
              if (pcb->dupacks > 3) {
 800bffc:	f200 836b 	bhi.w	800c6d6 <tcp_receive+0x80a>
              if (pcb->dupacks >= 3) {
 800c000:	f000 8374 	beq.w	800c6ec <tcp_receive+0x820>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800c004:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c006:	2900      	cmp	r1, #0
 800c008:	f040 80ae 	bne.w	800c168 <tcp_receive+0x29c>
 800c00c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800c00e:	1a99      	subs	r1, r3, r2
 800c010:	2900      	cmp	r1, #0
 800c012:	db06      	blt.n	800c022 <tcp_receive+0x156>
 800c014:	f1c2 0201 	rsb	r2, r2, #1
 800c018:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 800c01a:	1a52      	subs	r2, r2, r1
 800c01c:	441a      	add	r2, r3
 800c01e:	2a00      	cmp	r2, #0
 800c020:	dd03      	ble.n	800c02a <tcp_receive+0x15e>
      tcp_ack_now(pcb);
 800c022:	8b63      	ldrh	r3, [r4, #26]
 800c024:	f043 0302 	orr.w	r3, r3, #2
 800c028:	8363      	strh	r3, [r4, #26]
}
 800c02a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c02e:	e9d4 1c15 	ldrd	r1, ip, [r4, #84]	@ 0x54
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c032:	4d64      	ldr	r5, [pc, #400]	@ (800c1c4 <tcp_receive+0x2f8>)
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c034:	1ac8      	subs	r0, r1, r3
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800c036:	f8b4 e060 	ldrh.w	lr, [r4, #96]	@ 0x60
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c03a:	682a      	ldr	r2, [r5, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c03c:	2800      	cmp	r0, #0
 800c03e:	db7c      	blt.n	800c13a <tcp_receive+0x26e>
 800c040:	4299      	cmp	r1, r3
 800c042:	d076      	beq.n	800c132 <tcp_receive+0x266>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c044:	4594      	cmp	ip, r2
 800c046:	f000 80cf 	beq.w	800c1e8 <tcp_receive+0x31c>
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800c04a:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800c04c:	1a11      	subs	r1, r2, r0
 800c04e:	2900      	cmp	r1, #0
 800c050:	ddb6      	ble.n	800bfc0 <tcp_receive+0xf4>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c052:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800c054:	1ad3      	subs	r3, r2, r3
 800c056:	2b00      	cmp	r3, #0
 800c058:	dc7d      	bgt.n	800c156 <tcp_receive+0x28a>
      if (pcb->flags & TF_INFR) {
 800c05a:	8b63      	ldrh	r3, [r4, #26]
 800c05c:	0758      	lsls	r0, r3, #29
 800c05e:	d509      	bpl.n	800c074 <tcp_receive+0x1a8>
        tcp_clear_flags(pcb, TF_INFR);
 800c060:	f023 0304 	bic.w	r3, r3, #4
 800c064:	8363      	strh	r3, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 800c066:	f8b4 304a 	ldrh.w	r3, [r4, #74]	@ 0x4a
 800c06a:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800c06e:	2300      	movs	r3, #0
 800c070:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c074:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	@ 0x3c
 800c078:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      pcb->lastack = ackno;
 800c07a:	6462      	str	r2, [r4, #68]	@ 0x44
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c07c:	eb03 03e0 	add.w	r3, r3, r0, asr #3
      if (pcb->state >= ESTABLISHED) {
 800c080:	7d22      	ldrb	r2, [r4, #20]
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c082:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
      if (pcb->state >= ESTABLISHED) {
 800c086:	2a03      	cmp	r2, #3
      pcb->nrtx = 0;
 800c088:	f04f 0300 	mov.w	r3, #0
 800c08c:	f8a4 3042 	strh.w	r3, [r4, #66]	@ 0x42
      if (pcb->state >= ESTABLISHED) {
 800c090:	d913      	bls.n	800c0ba <tcp_receive+0x1ee>
        if (pcb->cwnd < pcb->ssthresh) {
 800c092:	f8b4 3048 	ldrh.w	r3, [r4, #72]	@ 0x48
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800c096:	b289      	uxth	r1, r1
        if (pcb->cwnd < pcb->ssthresh) {
 800c098:	f8b4 204a 	ldrh.w	r2, [r4, #74]	@ 0x4a
 800c09c:	429a      	cmp	r2, r3
 800c09e:	f200 81af 	bhi.w	800c400 <tcp_receive+0x534>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800c0a2:	f8b4 206a 	ldrh.w	r2, [r4, #106]	@ 0x6a
 800c0a6:	4411      	add	r1, r2
 800c0a8:	b289      	uxth	r1, r1
 800c0aa:	428a      	cmp	r2, r1
 800c0ac:	f200 828b 	bhi.w	800c5c6 <tcp_receive+0x6fa>
          if (pcb->bytes_acked >= pcb->cwnd) {
 800c0b0:	428b      	cmp	r3, r1
 800c0b2:	f240 828a 	bls.w	800c5ca <tcp_receive+0x6fe>
 800c0b6:	f8a4 106a 	strh.w	r1, [r4, #106]	@ 0x6a
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800c0ba:	4620      	mov	r0, r4
 800c0bc:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	@ 0x6c
 800c0c0:	f7ff fe9e 	bl	800be00 <tcp_free_acked_segments.constprop.0>
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800c0c4:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800c0c6:	4602      	mov	r2, r0
 800c0c8:	6720      	str	r0, [r4, #112]	@ 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800c0ca:	4620      	mov	r0, r4
 800c0cc:	f7ff fe98 	bl	800be00 <tcp_free_acked_segments.constprop.0>
      if (pcb->unacked == NULL) {
 800c0d0:	6f22      	ldr	r2, [r4, #112]	@ 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800c0d2:	66e0      	str	r0, [r4, #108]	@ 0x6c
      if (pcb->unacked == NULL) {
 800c0d4:	fab2 f382 	clz	r3, r2
 800c0d8:	095b      	lsrs	r3, r3, #5
 800c0da:	425b      	negs	r3, r3
 800c0dc:	8623      	strh	r3, [r4, #48]	@ 0x30
      pcb->polltmr = 0;
 800c0de:	2300      	movs	r3, #0
 800c0e0:	7723      	strb	r3, [r4, #28]
      if (pcb->unsent == NULL) {
 800c0e2:	2800      	cmp	r0, #0
 800c0e4:	f000 8189 	beq.w	800c3fa <tcp_receive+0x52e>
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800c0e8:	4b37      	ldr	r3, [pc, #220]	@ (800c1c8 <tcp_receive+0x2fc>)
 800c0ea:	8819      	ldrh	r1, [r3, #0]
 800c0ec:	f8b4 3064 	ldrh.w	r3, [r4, #100]	@ 0x64
 800c0f0:	440b      	add	r3, r1
 800c0f2:	f8a4 3064 	strh.w	r3, [r4, #100]	@ 0x64
      if (pcb->flags & TF_RTO) {
 800c0f6:	8b63      	ldrh	r3, [r4, #26]
 800c0f8:	0519      	lsls	r1, r3, #20
 800c0fa:	f140 80dd 	bpl.w	800c2b8 <tcp_receive+0x3ec>
        if (pcb->unacked == NULL) {
 800c0fe:	2a00      	cmp	r2, #0
 800c100:	f000 8195 	beq.w	800c42e <tcp_receive+0x562>
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800c104:	68d3      	ldr	r3, [r2, #12]
 800c106:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 800c108:	6858      	ldr	r0, [r3, #4]
 800c10a:	f7fd f8e7 	bl	80092dc <lwip_htonl>
 800c10e:	1a3f      	subs	r7, r7, r0
 800c110:	2f00      	cmp	r7, #0
 800c112:	f300 80d1 	bgt.w	800c2b8 <tcp_receive+0x3ec>
          tcp_clear_flags(pcb, TF_RTO);
 800c116:	8b63      	ldrh	r3, [r4, #26]
 800c118:	4f28      	ldr	r7, [pc, #160]	@ (800c1bc <tcp_receive+0x2f0>)
 800c11a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c11e:	8363      	strh	r3, [r4, #26]
 800c120:	e01d      	b.n	800c15e <tcp_receive+0x292>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800c122:	4b2a      	ldr	r3, [pc, #168]	@ (800c1cc <tcp_receive+0x300>)
 800c124:	f240 427c 	movw	r2, #1148	@ 0x47c
 800c128:	4929      	ldr	r1, [pc, #164]	@ (800c1d0 <tcp_receive+0x304>)
 800c12a:	482a      	ldr	r0, [pc, #168]	@ (800c1d4 <tcp_receive+0x308>)
 800c12c:	f004 fd96 	bl	8010c5c <iprintf>
 800c130:	e6d3      	b.n	800beda <tcp_receive+0xe>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c132:	ebac 0102 	sub.w	r1, ip, r2
 800c136:	2900      	cmp	r1, #0
 800c138:	da84      	bge.n	800c044 <tcp_receive+0x178>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c13a:	4927      	ldr	r1, [pc, #156]	@ (800c1d8 <tcp_receive+0x30c>)
 800c13c:	6809      	ldr	r1, [r1, #0]
 800c13e:	89c9      	ldrh	r1, [r1, #14]
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800c140:	f8b4 0062 	ldrh.w	r0, [r4, #98]	@ 0x62
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800c144:	f8a4 1060 	strh.w	r1, [r4, #96]	@ 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800c148:	4288      	cmp	r0, r1
      pcb->snd_wl2 = ackno;
 800c14a:	e9c4 3215 	strd	r3, r2, [r4, #84]	@ 0x54
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c14e:	bf38      	it	cc
 800c150:	f8a4 1062 	strhcc.w	r1, [r4, #98]	@ 0x62
      pcb->snd_wl1 = seqno;
 800c154:	e779      	b.n	800c04a <tcp_receive+0x17e>
      tcp_send_empty_ack(pcb);
 800c156:	4620      	mov	r0, r4
 800c158:	4f18      	ldr	r7, [pc, #96]	@ (800c1bc <tcp_receive+0x2f0>)
 800c15a:	f002 f915 	bl	800e388 <tcp_send_empty_ack>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800c15e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c160:	2900      	cmp	r1, #0
 800c162:	f43f aec2 	beq.w	800beea <tcp_receive+0x1e>
 800c166:	682a      	ldr	r2, [r5, #0]
 800c168:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800c16a:	1a9b      	subs	r3, r3, r2
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	f6bf aebc 	bge.w	800beea <tcp_receive+0x1e>
      m = (s16_t)(m - (pcb->sa >> 3));
 800c172:	f9b4 203c 	ldrsh.w	r2, [r4, #60]	@ 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800c176:	b289      	uxth	r1, r1
 800c178:	4b18      	ldr	r3, [pc, #96]	@ (800c1dc <tcp_receive+0x310>)
      m = (s16_t)(m - (pcb->sa >> 3));
 800c17a:	f3c2 00cf 	ubfx	r0, r2, #3, #16
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800c17e:	881d      	ldrh	r5, [r3, #0]
      m = (s16_t)(m - (pcb->sa >> 3));
 800c180:	1a2b      	subs	r3, r5, r0
 800c182:	1a5b      	subs	r3, r3, r1
 800c184:	b29b      	uxth	r3, r3
      pcb->sa = (s16_t)(pcb->sa + m);
 800c186:	441a      	add	r2, r3
      if (m < 0) {
 800c188:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
      pcb->sa = (s16_t)(pcb->sa + m);
 800c18c:	b212      	sxth	r2, r2
 800c18e:	87a2      	strh	r2, [r4, #60]	@ 0x3c
      if (m < 0) {
 800c190:	d002      	beq.n	800c198 <tcp_receive+0x2cc>
        m = (s16_t) - m;
 800c192:	1b40      	subs	r0, r0, r5
 800c194:	4401      	add	r1, r0
 800c196:	b28b      	uxth	r3, r1
      m = (s16_t)(m - (pcb->sv >> 2));
 800c198:	f9b4 103e 	ldrsh.w	r1, [r4, #62]	@ 0x3e
      pcb->sv = (s16_t)(pcb->sv + m);
 800c19c:	eba1 01a1 	sub.w	r1, r1, r1, asr #2
 800c1a0:	440b      	add	r3, r1
 800c1a2:	b29b      	uxth	r3, r3
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c1a4:	eb03 02e2 	add.w	r2, r3, r2, asr #3
      pcb->sv = (s16_t)(pcb->sv + m);
 800c1a8:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      pcb->rttest = 0;
 800c1aa:	2300      	movs	r3, #0
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c1ac:	f8a4 2040 	strh.w	r2, [r4, #64]	@ 0x40
      pcb->rttest = 0;
 800c1b0:	6363      	str	r3, [r4, #52]	@ 0x34
 800c1b2:	e69a      	b.n	800beea <tcp_receive+0x1e>
 800c1b4:	2400b825 	.word	0x2400b825
 800c1b8:	2400b830 	.word	0x2400b830
 800c1bc:	2400b826 	.word	0x2400b826
 800c1c0:	2400b844 	.word	0x2400b844
 800c1c4:	2400b82c 	.word	0x2400b82c
 800c1c8:	2400b828 	.word	0x2400b828
 800c1cc:	08013800 	.word	0x08013800
 800c1d0:	080138a4 	.word	0x080138a4
 800c1d4:	08011f14 	.word	0x08011f14
 800c1d8:	2400b840 	.word	0x2400b840
 800c1dc:	2400b818 	.word	0x2400b818
        pcb->dupacks = 0;
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c1e6:	e7ba      	b.n	800c15e <tcp_receive+0x292>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c1e8:	49a2      	ldr	r1, [pc, #648]	@ (800c474 <tcp_receive+0x5a8>)
 800c1ea:	6809      	ldr	r1, [r1, #0]
 800c1ec:	89c9      	ldrh	r1, [r1, #14]
 800c1ee:	458e      	cmp	lr, r1
 800c1f0:	f4bf af2b 	bcs.w	800c04a <tcp_receive+0x17e>
 800c1f4:	e7a4      	b.n	800c140 <tcp_receive+0x274>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800c1f6:	1a9a      	subs	r2, r3, r2
              if (next->next == NULL &&
 800c1f8:	2a00      	cmp	r2, #0
 800c1fa:	f77f aedc 	ble.w	800bfb6 <tcp_receive+0xea>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c1fe:	8980      	ldrh	r0, [r0, #12]
 800c200:	f7fd f868 	bl	80092d4 <lwip_htons>
 800c204:	07c1      	lsls	r1, r0, #31
 800c206:	f53f aed6 	bmi.w	800bfb6 <tcp_receive+0xea>
                next->next = tcp_seg_copy(&inseg);
 800c20a:	489b      	ldr	r0, [pc, #620]	@ (800c478 <tcp_receive+0x5ac>)
 800c20c:	f7fe fd60 	bl	800acd0 <tcp_seg_copy>
 800c210:	f8c8 0000 	str.w	r0, [r8]
                if (next->next != NULL) {
 800c214:	2800      	cmp	r0, #0
 800c216:	f43f aece 	beq.w	800bfb6 <tcp_receive+0xea>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800c21a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c21e:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 800c222:	6859      	ldr	r1, [r3, #4]
 800c224:	6833      	ldr	r3, [r6, #0]
 800c226:	440a      	add	r2, r1
 800c228:	1ad2      	subs	r2, r2, r3
 800c22a:	2a00      	cmp	r2, #0
 800c22c:	dd07      	ble.n	800c23e <tcp_receive+0x372>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800c22e:	1a5b      	subs	r3, r3, r1
                    pbuf_realloc(next->p, next->len);
 800c230:	f8d8 0004 	ldr.w	r0, [r8, #4]
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800c234:	b299      	uxth	r1, r3
 800c236:	f8a8 1008 	strh.w	r1, [r8, #8]
                    pbuf_realloc(next->p, next->len);
 800c23a:	f7fe f831 	bl	800a2a0 <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800c23e:	6832      	ldr	r2, [r6, #0]
 800c240:	883b      	ldrh	r3, [r7, #0]
 800c242:	4413      	add	r3, r2
 800c244:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800c246:	1a9b      	subs	r3, r3, r2
 800c248:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 800c24a:	1a9b      	subs	r3, r3, r2
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	f77f aeb2 	ble.w	800bfb6 <tcp_receive+0xea>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800c252:	f8d8 3000 	ldr.w	r3, [r8]
 800c256:	68db      	ldr	r3, [r3, #12]
 800c258:	8998      	ldrh	r0, [r3, #12]
 800c25a:	f7fd f83b 	bl	80092d4 <lwip_htons>
 800c25e:	07c2      	lsls	r2, r0, #31
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800c260:	f8d8 3000 	ldr.w	r3, [r8]
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800c264:	f100 82a8 	bmi.w	800c7b8 <tcp_receive+0x8ec>
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800c268:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 800c26a:	6832      	ldr	r2, [r6, #0]
                    pbuf_realloc(next->next->p, next->next->len);
 800c26c:	6858      	ldr	r0, [r3, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800c26e:	1a89      	subs	r1, r1, r2
 800c270:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800c272:	4411      	add	r1, r2
 800c274:	b289      	uxth	r1, r1
 800c276:	8119      	strh	r1, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800c278:	f7fe f812 	bl	800a2a0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800c27c:	f8d8 3000 	ldr.w	r3, [r8]
 800c280:	891d      	ldrh	r5, [r3, #8]
 800c282:	68db      	ldr	r3, [r3, #12]
 800c284:	8998      	ldrh	r0, [r3, #12]
 800c286:	f7fd f825 	bl	80092d4 <lwip_htons>
 800c28a:	f010 0303 	ands.w	r3, r0, #3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c28e:	6831      	ldr	r1, [r6, #0]
                    tcplen = TCP_TCPLEN(next->next);
 800c290:	bf18      	it	ne
 800c292:	2301      	movne	r3, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c294:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
                    tcplen = TCP_TCPLEN(next->next);
 800c296:	442b      	add	r3, r5
 800c298:	b29b      	uxth	r3, r3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c29a:	4419      	add	r1, r3
                    tcplen = TCP_TCPLEN(next->next);
 800c29c:	803b      	strh	r3, [r7, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c29e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c2a0:	4413      	add	r3, r2
 800c2a2:	4299      	cmp	r1, r3
 800c2a4:	f43f ae87 	beq.w	800bfb6 <tcp_receive+0xea>
 800c2a8:	4b74      	ldr	r3, [pc, #464]	@ (800c47c <tcp_receive+0x5b0>)
 800c2aa:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800c2ae:	4974      	ldr	r1, [pc, #464]	@ (800c480 <tcp_receive+0x5b4>)
 800c2b0:	4874      	ldr	r0, [pc, #464]	@ (800c484 <tcp_receive+0x5b8>)
 800c2b2:	f004 fcd3 	bl	8010c5c <iprintf>
 800c2b6:	e67e      	b.n	800bfb6 <tcp_receive+0xea>
 800c2b8:	4f73      	ldr	r7, [pc, #460]	@ (800c488 <tcp_receive+0x5bc>)
 800c2ba:	e750      	b.n	800c15e <tcp_receive+0x292>
        tcp_ack_now(pcb);
 800c2bc:	8b63      	ldrh	r3, [r4, #26]
 800c2be:	f043 0302 	orr.w	r3, r3, #2
 800c2c2:	8363      	strh	r3, [r4, #26]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c2c4:	e677      	b.n	800bfb6 <tcp_receive+0xea>
      struct pbuf *p = inseg.p;
 800c2c6:	f8df 91b0 	ldr.w	r9, [pc, #432]	@ 800c478 <tcp_receive+0x5ac>
 800c2ca:	f8d9 5004 	ldr.w	r5, [r9, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800c2ce:	2d00      	cmp	r5, #0
 800c2d0:	f000 8171 	beq.w	800c5b6 <tcp_receive+0x6ea>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800c2d4:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800c2d8:	4598      	cmp	r8, r3
 800c2da:	f200 80c3 	bhi.w	800c464 <tcp_receive+0x598>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800c2de:	f8d9 3004 	ldr.w	r3, [r9, #4]
      off = (u16_t)off32;
 800c2e2:	fa1f f888 	uxth.w	r8, r8
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800c2e6:	891a      	ldrh	r2, [r3, #8]
 800c2e8:	4542      	cmp	r2, r8
 800c2ea:	f0c0 80b0 	bcc.w	800c44e <tcp_receive+0x582>
      inseg.len -= off;
 800c2ee:	f8b9 3008 	ldrh.w	r3, [r9, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800c2f2:	eba2 0208 	sub.w	r2, r2, r8
      inseg.len -= off;
 800c2f6:	eba3 0308 	sub.w	r3, r3, r8
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800c2fa:	b292      	uxth	r2, r2
      inseg.len -= off;
 800c2fc:	f8a9 3008 	strh.w	r3, [r9, #8]
      while (p->len < off) {
 800c300:	896b      	ldrh	r3, [r5, #10]
 800c302:	4598      	cmp	r8, r3
 800c304:	d90a      	bls.n	800c31c <tcp_receive+0x450>
        p->len = 0;
 800c306:	2100      	movs	r1, #0
        off -= p->len;
 800c308:	eba8 0303 	sub.w	r3, r8, r3
        p->len = 0;
 800c30c:	8169      	strh	r1, [r5, #10]
        p->tot_len = new_tot_len;
 800c30e:	812a      	strh	r2, [r5, #8]
        p = p->next;
 800c310:	682d      	ldr	r5, [r5, #0]
        off -= p->len;
 800c312:	fa1f f883 	uxth.w	r8, r3
      while (p->len < off) {
 800c316:	896b      	ldrh	r3, [r5, #10]
 800c318:	4543      	cmp	r3, r8
 800c31a:	d3f5      	bcc.n	800c308 <tcp_receive+0x43c>
      pbuf_remove_header(p, off);
 800c31c:	4641      	mov	r1, r8
 800c31e:	4628      	mov	r0, r5
 800c320:	f7fd fe4a 	bl	8009fb8 <pbuf_remove_header>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c324:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800c326:	6a62      	ldr	r2, [r4, #36]	@ 0x24
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c328:	f1c3 0301 	rsb	r3, r3, #1
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800c32c:	f8d9 100c 	ldr.w	r1, [r9, #12]
 800c330:	6032      	str	r2, [r6, #0]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c332:	2b00      	cmp	r3, #0
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800c334:	604a      	str	r2, [r1, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c336:	f73f ae3e 	bgt.w	800bfb6 <tcp_receive+0xea>
        tcplen = TCP_TCPLEN(&inseg);
 800c33a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800c33e:	f8b9 5008 	ldrh.w	r5, [r9, #8]
 800c342:	8998      	ldrh	r0, [r3, #12]
 800c344:	f7fc ffc6 	bl	80092d4 <lwip_htons>
 800c348:	f010 0303 	ands.w	r3, r0, #3
        if (tcplen > pcb->rcv_wnd) {
 800c34c:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
        tcplen = TCP_TCPLEN(&inseg);
 800c34e:	bf18      	it	ne
 800c350:	2301      	movne	r3, #1
 800c352:	442b      	add	r3, r5
 800c354:	b29b      	uxth	r3, r3
        if (tcplen > pcb->rcv_wnd) {
 800c356:	429a      	cmp	r2, r3
        tcplen = TCP_TCPLEN(&inseg);
 800c358:	803b      	strh	r3, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
 800c35a:	f0c0 816d 	bcc.w	800c638 <tcp_receive+0x76c>
        if (pcb->ooseq != NULL) {
 800c35e:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800c360:	2b00      	cmp	r3, #0
 800c362:	f000 809e 	beq.w	800c4a2 <tcp_receive+0x5d6>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c366:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800c36a:	8998      	ldrh	r0, [r3, #12]
 800c36c:	f7fc ffb2 	bl	80092d4 <lwip_htons>
 800c370:	07c2      	lsls	r2, r0, #31
 800c372:	f100 8093 	bmi.w	800c49c <tcp_receive+0x5d0>
            struct tcp_seg *next = pcb->ooseq;
 800c376:	6f65      	ldr	r5, [r4, #116]	@ 0x74
        pcb->rcv_nxt = seqno + tcplen;
 800c378:	883a      	ldrh	r2, [r7, #0]
 800c37a:	6831      	ldr	r1, [r6, #0]
            while (next &&
 800c37c:	b955      	cbnz	r5, 800c394 <tcp_receive+0x4c8>
 800c37e:	e1f3      	b.n	800c768 <tcp_receive+0x89c>
              next = next->next;
 800c380:	f8d5 8000 	ldr.w	r8, [r5]
              tcp_seg_free(tmp);
 800c384:	4628      	mov	r0, r5
 800c386:	f7fe fc95 	bl	800acb4 <tcp_seg_free>
              next = next->next;
 800c38a:	4645      	mov	r5, r8
            while (next &&
 800c38c:	f1b8 0f00 	cmp.w	r8, #0
 800c390:	f000 81e8 	beq.w	800c764 <tcp_receive+0x898>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800c394:	68e8      	ldr	r0, [r5, #12]
 800c396:	883a      	ldrh	r2, [r7, #0]
 800c398:	f8d6 e000 	ldr.w	lr, [r6]
 800c39c:	892b      	ldrh	r3, [r5, #8]
 800c39e:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800c3a2:	eb02 010e 	add.w	r1, r2, lr
 800c3a6:	4463      	add	r3, ip
 800c3a8:	1acb      	subs	r3, r1, r3
            while (next &&
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	f2c0 81a2 	blt.w	800c6f4 <tcp_receive+0x828>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c3b0:	8980      	ldrh	r0, [r0, #12]
 800c3b2:	f7fc ff8f 	bl	80092d4 <lwip_htons>
 800c3b6:	07c3      	lsls	r3, r0, #31
 800c3b8:	d5e2      	bpl.n	800c380 <tcp_receive+0x4b4>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800c3ba:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800c3be:	8998      	ldrh	r0, [r3, #12]
 800c3c0:	f7fc ff88 	bl	80092d4 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c3c4:	0780      	lsls	r0, r0, #30
 800c3c6:	d4db      	bmi.n	800c380 <tcp_receive+0x4b4>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800c3c8:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800c3cc:	2001      	movs	r0, #1
 800c3ce:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 800c3d2:	f7fc ff7f 	bl	80092d4 <lwip_htons>
 800c3d6:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800c3da:	ea48 0000 	orr.w	r0, r8, r0
                tcplen = TCP_TCPLEN(&inseg);
 800c3de:	f8b9 8008 	ldrh.w	r8, [r9, #8]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800c3e2:	8198      	strh	r0, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800c3e4:	b280      	uxth	r0, r0
 800c3e6:	f7fc ff75 	bl	80092d4 <lwip_htons>
 800c3ea:	f010 0303 	ands.w	r3, r0, #3
 800c3ee:	bf18      	it	ne
 800c3f0:	2301      	movne	r3, #1
 800c3f2:	4498      	add	r8, r3
 800c3f4:	f8a7 8000 	strh.w	r8, [r7]
 800c3f8:	e7c2      	b.n	800c380 <tcp_receive+0x4b4>
        pcb->unsent_oversize = 0;
 800c3fa:	f8a4 0068 	strh.w	r0, [r4, #104]	@ 0x68
 800c3fe:	e673      	b.n	800c0e8 <tcp_receive+0x21c>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800c400:	8b62      	ldrh	r2, [r4, #26]
 800c402:	f412 6f00 	tst.w	r2, #2048	@ 0x800
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800c406:	8e62      	ldrh	r2, [r4, #50]	@ 0x32
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800c408:	bf0c      	ite	eq
 800c40a:	2002      	moveq	r0, #2
 800c40c:	2001      	movne	r0, #1
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800c40e:	fb12 f200 	smulbb	r2, r2, r0
 800c412:	b292      	uxth	r2, r2
          TCP_WND_INC(pcb->cwnd, increase);
 800c414:	428a      	cmp	r2, r1
 800c416:	bf94      	ite	ls
 800c418:	1898      	addls	r0, r3, r2
 800c41a:	1858      	addhi	r0, r3, r1
 800c41c:	b282      	uxth	r2, r0
 800c41e:	4293      	cmp	r3, r2
 800c420:	f240 80dc 	bls.w	800c5dc <tcp_receive+0x710>
 800c424:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c428:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 800c42c:	e645      	b.n	800c0ba <tcp_receive+0x1ee>
          if ((pcb->unsent == NULL) ||
 800c42e:	b148      	cbz	r0, 800c444 <tcp_receive+0x578>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800c430:	68c3      	ldr	r3, [r0, #12]
 800c432:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 800c434:	6858      	ldr	r0, [r3, #4]
 800c436:	f7fc ff51 	bl	80092dc <lwip_htonl>
 800c43a:	1a3f      	subs	r7, r7, r0
          if ((pcb->unsent == NULL) ||
 800c43c:	2f00      	cmp	r7, #0
 800c43e:	f73f af3b 	bgt.w	800c2b8 <tcp_receive+0x3ec>
            tcp_clear_flags(pcb, TF_RTO);
 800c442:	8b63      	ldrh	r3, [r4, #26]
 800c444:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c448:	4f0f      	ldr	r7, [pc, #60]	@ (800c488 <tcp_receive+0x5bc>)
 800c44a:	8363      	strh	r3, [r4, #26]
 800c44c:	e687      	b.n	800c15e <tcp_receive+0x292>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800c44e:	4b0b      	ldr	r3, [pc, #44]	@ (800c47c <tcp_receive+0x5b0>)
 800c450:	f240 5297 	movw	r2, #1431	@ 0x597
 800c454:	490d      	ldr	r1, [pc, #52]	@ (800c48c <tcp_receive+0x5c0>)
 800c456:	480b      	ldr	r0, [pc, #44]	@ (800c484 <tcp_receive+0x5b8>)
 800c458:	f004 fc00 	bl	8010c5c <iprintf>
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800c45c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c460:	891a      	ldrh	r2, [r3, #8]
 800c462:	e744      	b.n	800c2ee <tcp_receive+0x422>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800c464:	4b05      	ldr	r3, [pc, #20]	@ (800c47c <tcp_receive+0x5b0>)
 800c466:	f240 5295 	movw	r2, #1429	@ 0x595
 800c46a:	4909      	ldr	r1, [pc, #36]	@ (800c490 <tcp_receive+0x5c4>)
 800c46c:	4805      	ldr	r0, [pc, #20]	@ (800c484 <tcp_receive+0x5b8>)
 800c46e:	f004 fbf5 	bl	8010c5c <iprintf>
 800c472:	e734      	b.n	800c2de <tcp_receive+0x412>
 800c474:	2400b840 	.word	0x2400b840
 800c478:	2400b844 	.word	0x2400b844
 800c47c:	08013800 	.word	0x08013800
 800c480:	080138f0 	.word	0x080138f0
 800c484:	08011f14 	.word	0x08011f14
 800c488:	2400b826 	.word	0x2400b826
 800c48c:	080138e0 	.word	0x080138e0
 800c490:	080138d0 	.word	0x080138d0
              pcb->ooseq = pcb->ooseq->next;
 800c494:	6803      	ldr	r3, [r0, #0]
 800c496:	6763      	str	r3, [r4, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800c498:	f7fe fc0c 	bl	800acb4 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800c49c:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800c49e:	2800      	cmp	r0, #0
 800c4a0:	d1f8      	bne.n	800c494 <tcp_receive+0x5c8>
        pcb->rcv_nxt = seqno + tcplen;
 800c4a2:	883a      	ldrh	r2, [r7, #0]
 800c4a4:	6831      	ldr	r1, [r6, #0]
 800c4a6:	4411      	add	r1, r2
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800c4a8:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
        pcb->rcv_nxt = seqno + tcplen;
 800c4aa:	6261      	str	r1, [r4, #36]	@ 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800c4ac:	4293      	cmp	r3, r2
 800c4ae:	f0c0 80fd 	bcc.w	800c6ac <tcp_receive+0x7e0>
        pcb->rcv_wnd -= tcplen;
 800c4b2:	1a9b      	subs	r3, r3, r2
        tcp_update_rcv_ann_wnd(pcb);
 800c4b4:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 800c4b6:	8523      	strh	r3, [r4, #40]	@ 0x28
        tcp_update_rcv_ann_wnd(pcb);
 800c4b8:	f7fe faba 	bl	800aa30 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 800c4bc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c4c0:	891a      	ldrh	r2, [r3, #8]
 800c4c2:	b122      	cbz	r2, 800c4ce <tcp_receive+0x602>
          recv_data = inseg.p;
 800c4c4:	4ab2      	ldr	r2, [pc, #712]	@ (800c790 <tcp_receive+0x8c4>)
 800c4c6:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	f8c9 3004 	str.w	r3, [r9, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c4ce:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800c4d2:	8998      	ldrh	r0, [r3, #12]
 800c4d4:	f7fc fefe 	bl	80092d4 <lwip_htons>
 800c4d8:	07c2      	lsls	r2, r0, #31
 800c4da:	d504      	bpl.n	800c4e6 <tcp_receive+0x61a>
          recv_flags |= TF_GOT_FIN;
 800c4dc:	4aad      	ldr	r2, [pc, #692]	@ (800c794 <tcp_receive+0x8c8>)
 800c4de:	7813      	ldrb	r3, [r2, #0]
 800c4e0:	f043 0320 	orr.w	r3, r3, #32
 800c4e4:	7013      	strb	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 800c4e6:	6f65      	ldr	r5, [r4, #116]	@ 0x74
 800c4e8:	2d00      	cmp	r5, #0
 800c4ea:	f000 8093 	beq.w	800c614 <tcp_receive+0x748>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800c4ee:	f8df 92ac 	ldr.w	r9, [pc, #684]	@ 800c79c <tcp_receive+0x8d0>
 800c4f2:	f8df 82c0 	ldr.w	r8, [pc, #704]	@ 800c7b4 <tcp_receive+0x8e8>
 800c4f6:	4fa8      	ldr	r7, [pc, #672]	@ (800c798 <tcp_receive+0x8cc>)
 800c4f8:	e033      	b.n	800c562 <tcp_receive+0x696>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800c4fa:	68eb      	ldr	r3, [r5, #12]
 800c4fc:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800c500:	8998      	ldrh	r0, [r3, #12]
 800c502:	f7fc fee7 	bl	80092d4 <lwip_htons>
 800c506:	f010 0003 	ands.w	r0, r0, #3
 800c50a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800c50c:	bf18      	it	ne
 800c50e:	2001      	movne	r0, #1
 800c510:	4450      	add	r0, sl
 800c512:	1a1b      	subs	r3, r3, r0
          tcp_update_rcv_ann_wnd(pcb);
 800c514:	4620      	mov	r0, r4
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800c516:	8523      	strh	r3, [r4, #40]	@ 0x28
          tcp_update_rcv_ann_wnd(pcb);
 800c518:	f7fe fa8a 	bl	800aa30 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 800c51c:	6869      	ldr	r1, [r5, #4]
 800c51e:	890b      	ldrh	r3, [r1, #8]
 800c520:	b13b      	cbz	r3, 800c532 <tcp_receive+0x666>
            if (recv_data) {
 800c522:	4b9b      	ldr	r3, [pc, #620]	@ (800c790 <tcp_receive+0x8c4>)
 800c524:	6818      	ldr	r0, [r3, #0]
 800c526:	2800      	cmp	r0, #0
 800c528:	d05b      	beq.n	800c5e2 <tcp_receive+0x716>
              pbuf_cat(recv_data, cseg->p);
 800c52a:	f7fd ff3d 	bl	800a3a8 <pbuf_cat>
            cseg->p = NULL;
 800c52e:	2300      	movs	r3, #0
 800c530:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c532:	68eb      	ldr	r3, [r5, #12]
 800c534:	8998      	ldrh	r0, [r3, #12]
 800c536:	f7fc fecd 	bl	80092d4 <lwip_htons>
 800c53a:	07c3      	lsls	r3, r0, #31
 800c53c:	d509      	bpl.n	800c552 <tcp_receive+0x686>
            recv_flags |= TF_GOT_FIN;
 800c53e:	4a95      	ldr	r2, [pc, #596]	@ (800c794 <tcp_receive+0x8c8>)
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800c540:	7d21      	ldrb	r1, [r4, #20]
            recv_flags |= TF_GOT_FIN;
 800c542:	7813      	ldrb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800c544:	2904      	cmp	r1, #4
            recv_flags |= TF_GOT_FIN;
 800c546:	f043 0320 	orr.w	r3, r3, #32
 800c54a:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800c54c:	d101      	bne.n	800c552 <tcp_receive+0x686>
              pcb->state = CLOSE_WAIT;
 800c54e:	2307      	movs	r3, #7
 800c550:	7523      	strb	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 800c552:	682b      	ldr	r3, [r5, #0]
          tcp_seg_free(cseg);
 800c554:	4628      	mov	r0, r5
          pcb->ooseq = cseg->next;
 800c556:	6763      	str	r3, [r4, #116]	@ 0x74
          tcp_seg_free(cseg);
 800c558:	f7fe fbac 	bl	800acb4 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800c55c:	6f65      	ldr	r5, [r4, #116]	@ 0x74
 800c55e:	2d00      	cmp	r5, #0
 800c560:	d058      	beq.n	800c614 <tcp_receive+0x748>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800c562:	68ea      	ldr	r2, [r5, #12]
        while (pcb->ooseq != NULL &&
 800c564:	6a61      	ldr	r1, [r4, #36]	@ 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800c566:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 800c568:	428b      	cmp	r3, r1
 800c56a:	d153      	bne.n	800c614 <tcp_receive+0x748>
          seqno = pcb->ooseq->tcphdr->seqno;
 800c56c:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800c56e:	8990      	ldrh	r0, [r2, #12]
 800c570:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800c574:	f7fc feae 	bl	80092d4 <lwip_htons>
 800c578:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c57a:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800c57e:	f8b5 b008 	ldrh.w	fp, [r5, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800c582:	bf18      	it	ne
 800c584:	2001      	movne	r0, #1
 800c586:	449a      	add	sl, r3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800c588:	68eb      	ldr	r3, [r5, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800c58a:	4450      	add	r0, sl
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800c58c:	f8b4 a028 	ldrh.w	sl, [r4, #40]	@ 0x28
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800c590:	6260      	str	r0, [r4, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800c592:	8998      	ldrh	r0, [r3, #12]
 800c594:	f7fc fe9e 	bl	80092d4 <lwip_htons>
 800c598:	f010 0003 	ands.w	r0, r0, #3
 800c59c:	bf18      	it	ne
 800c59e:	2001      	movne	r0, #1
 800c5a0:	4458      	add	r0, fp
 800c5a2:	4582      	cmp	sl, r0
 800c5a4:	d2a9      	bcs.n	800c4fa <tcp_receive+0x62e>
 800c5a6:	464b      	mov	r3, r9
 800c5a8:	f240 622b 	movw	r2, #1579	@ 0x62b
 800c5ac:	4641      	mov	r1, r8
 800c5ae:	4638      	mov	r0, r7
 800c5b0:	f004 fb54 	bl	8010c5c <iprintf>
 800c5b4:	e7a1      	b.n	800c4fa <tcp_receive+0x62e>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800c5b6:	4b79      	ldr	r3, [pc, #484]	@ (800c79c <tcp_receive+0x8d0>)
 800c5b8:	f240 5294 	movw	r2, #1428	@ 0x594
 800c5bc:	4978      	ldr	r1, [pc, #480]	@ (800c7a0 <tcp_receive+0x8d4>)
 800c5be:	4876      	ldr	r0, [pc, #472]	@ (800c798 <tcp_receive+0x8cc>)
 800c5c0:	f004 fb4c 	bl	8010c5c <iprintf>
 800c5c4:	e686      	b.n	800c2d4 <tcp_receive+0x408>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800c5c6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c5ca:	8e62      	ldrh	r2, [r4, #50]	@ 0x32
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800c5cc:	1ac9      	subs	r1, r1, r3
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c5ce:	441a      	add	r2, r3
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800c5d0:	f8a4 106a 	strh.w	r1, [r4, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c5d4:	b292      	uxth	r2, r2
 800c5d6:	4293      	cmp	r3, r2
 800c5d8:	f63f af24 	bhi.w	800c424 <tcp_receive+0x558>
 800c5dc:	f8a4 2048 	strh.w	r2, [r4, #72]	@ 0x48
 800c5e0:	e56b      	b.n	800c0ba <tcp_receive+0x1ee>
              recv_data = cseg->p;
 800c5e2:	6019      	str	r1, [r3, #0]
 800c5e4:	e7a3      	b.n	800c52e <tcp_receive+0x662>
          struct tcp_seg *next, *prev = NULL;
 800c5e6:	f04f 0800 	mov.w	r8, #0
              if (inseg.len > next->len) {
 800c5ea:	486e      	ldr	r0, [pc, #440]	@ (800c7a4 <tcp_receive+0x8d8>)
 800c5ec:	892b      	ldrh	r3, [r5, #8]
 800c5ee:	8902      	ldrh	r2, [r0, #8]
 800c5f0:	429a      	cmp	r2, r3
 800c5f2:	f67f ace0 	bls.w	800bfb6 <tcp_receive+0xea>
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c5f6:	f7fe fb6b 	bl	800acd0 <tcp_seg_copy>
                if (cseg != NULL) {
 800c5fa:	2800      	cmp	r0, #0
 800c5fc:	f43f acdb 	beq.w	800bfb6 <tcp_receive+0xea>
                  if (prev != NULL) {
 800c600:	f1b8 0f00 	cmp.w	r8, #0
 800c604:	f000 80c2 	beq.w	800c78c <tcp_receive+0x8c0>
                    prev->next = cseg;
 800c608:	f8c8 0000 	str.w	r0, [r8]
                  tcp_oos_insert_segment(cseg, next);
 800c60c:	4629      	mov	r1, r5
 800c60e:	f7ff fb8b 	bl	800bd28 <tcp_oos_insert_segment>
 800c612:	e4d0      	b.n	800bfb6 <tcp_receive+0xea>
        tcp_ack(pcb);
 800c614:	8b63      	ldrh	r3, [r4, #26]
 800c616:	07d8      	lsls	r0, r3, #31
 800c618:	d50a      	bpl.n	800c630 <tcp_receive+0x764>
 800c61a:	f023 0301 	bic.w	r3, r3, #1
 800c61e:	f043 0302 	orr.w	r3, r3, #2
 800c622:	8363      	strh	r3, [r4, #26]
 800c624:	e501      	b.n	800c02a <tcp_receive+0x15e>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800c626:	485f      	ldr	r0, [pc, #380]	@ (800c7a4 <tcp_receive+0x8d8>)
 800c628:	f7fe fb52 	bl	800acd0 <tcp_seg_copy>
 800c62c:	6760      	str	r0, [r4, #116]	@ 0x74
 800c62e:	e4c2      	b.n	800bfb6 <tcp_receive+0xea>
        tcp_ack(pcb);
 800c630:	f043 0301 	orr.w	r3, r3, #1
 800c634:	8363      	strh	r3, [r4, #26]
 800c636:	e4f8      	b.n	800c02a <tcp_receive+0x15e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c638:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800c63c:	8998      	ldrh	r0, [r3, #12]
 800c63e:	f7fc fe49 	bl	80092d4 <lwip_htons>
 800c642:	07c5      	lsls	r5, r0, #31
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800c644:	f8d9 300c 	ldr.w	r3, [r9, #12]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c648:	f100 8090 	bmi.w	800c76c <tcp_receive+0x8a0>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800c64c:	8998      	ldrh	r0, [r3, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
 800c64e:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800c650:	f8a9 3008 	strh.w	r3, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c654:	f7fc fe3e 	bl	80092d4 <lwip_htons>
 800c658:	0780      	lsls	r0, r0, #30
            inseg.len -= 1;
 800c65a:	f8b9 1008 	ldrh.w	r1, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c65e:	d503      	bpl.n	800c668 <tcp_receive+0x79c>
            inseg.len -= 1;
 800c660:	3901      	subs	r1, #1
 800c662:	b289      	uxth	r1, r1
 800c664:	f8a9 1008 	strh.w	r1, [r9, #8]
          pbuf_realloc(inseg.p, inseg.len);
 800c668:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800c66c:	f7fd fe18 	bl	800a2a0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800c670:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800c674:	f8b9 5008 	ldrh.w	r5, [r9, #8]
 800c678:	8998      	ldrh	r0, [r3, #12]
 800c67a:	f7fc fe2b 	bl	80092d4 <lwip_htons>
 800c67e:	f010 0303 	ands.w	r3, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c682:	6832      	ldr	r2, [r6, #0]
          tcplen = TCP_TCPLEN(&inseg);
 800c684:	bf18      	it	ne
 800c686:	2301      	movne	r3, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c688:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          tcplen = TCP_TCPLEN(&inseg);
 800c68a:	442b      	add	r3, r5
 800c68c:	b29b      	uxth	r3, r3
 800c68e:	803b      	strh	r3, [r7, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c690:	4413      	add	r3, r2
 800c692:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 800c694:	440a      	add	r2, r1
 800c696:	4293      	cmp	r3, r2
 800c698:	f43f ae61 	beq.w	800c35e <tcp_receive+0x492>
 800c69c:	4b3f      	ldr	r3, [pc, #252]	@ (800c79c <tcp_receive+0x8d0>)
 800c69e:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800c6a2:	4941      	ldr	r1, [pc, #260]	@ (800c7a8 <tcp_receive+0x8dc>)
 800c6a4:	483c      	ldr	r0, [pc, #240]	@ (800c798 <tcp_receive+0x8cc>)
 800c6a6:	f004 fad9 	bl	8010c5c <iprintf>
 800c6aa:	e658      	b.n	800c35e <tcp_receive+0x492>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800c6ac:	4b3b      	ldr	r3, [pc, #236]	@ (800c79c <tcp_receive+0x8d0>)
 800c6ae:	f240 6207 	movw	r2, #1543	@ 0x607
 800c6b2:	493e      	ldr	r1, [pc, #248]	@ (800c7ac <tcp_receive+0x8e0>)
 800c6b4:	4838      	ldr	r0, [pc, #224]	@ (800c798 <tcp_receive+0x8cc>)
 800c6b6:	f004 fad1 	bl	8010c5c <iprintf>
        pcb->rcv_wnd -= tcplen;
 800c6ba:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800c6bc:	883a      	ldrh	r2, [r7, #0]
 800c6be:	e6f8      	b.n	800c4b2 <tcp_receive+0x5e6>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c6c0:	4838      	ldr	r0, [pc, #224]	@ (800c7a4 <tcp_receive+0x8d8>)
 800c6c2:	f7fe fb05 	bl	800acd0 <tcp_seg_copy>
                  if (cseg != NULL) {
 800c6c6:	2800      	cmp	r0, #0
 800c6c8:	f43f ac75 	beq.w	800bfb6 <tcp_receive+0xea>
                    tcp_oos_insert_segment(cseg, next);
 800c6cc:	4629      	mov	r1, r5
                    pcb->ooseq = cseg;
 800c6ce:	6760      	str	r0, [r4, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800c6d0:	f7ff fb2a 	bl	800bd28 <tcp_oos_insert_segment>
 800c6d4:	e46f      	b.n	800bfb6 <tcp_receive+0xea>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c6d6:	f8b4 2048 	ldrh.w	r2, [r4, #72]	@ 0x48
 800c6da:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800c6dc:	4413      	add	r3, r2
 800c6de:	b29b      	uxth	r3, r3
 800c6e0:	429a      	cmp	r2, r3
 800c6e2:	d901      	bls.n	800c6e8 <tcp_receive+0x81c>
 800c6e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c6e8:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
                tcp_rexmit_fast(pcb);
 800c6ec:	4620      	mov	r0, r4
 800c6ee:	f001 fdc9 	bl	800e284 <tcp_rexmit_fast>
      if (!found_dupack) {
 800c6f2:	e534      	b.n	800c15e <tcp_receive+0x292>
                TCP_SEQ_GT(seqno + tcplen,
 800c6f4:	eba1 030c 	sub.w	r3, r1, ip
            if (next &&
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	dc01      	bgt.n	800c700 <tcp_receive+0x834>
            pcb->ooseq = next;
 800c6fc:	6765      	str	r5, [r4, #116]	@ 0x74
 800c6fe:	e6d3      	b.n	800c4a8 <tcp_receive+0x5dc>
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800c700:	ebac 0c0e 	sub.w	ip, ip, lr
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c704:	f8d9 300c 	ldr.w	r3, [r9, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800c708:	f8a9 c008 	strh.w	ip, [r9, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c70c:	8998      	ldrh	r0, [r3, #12]
 800c70e:	f7fc fde1 	bl	80092d4 <lwip_htons>
 800c712:	0781      	lsls	r1, r0, #30
 800c714:	d504      	bpl.n	800c720 <tcp_receive+0x854>
                inseg.len -= 1;
 800c716:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 800c71a:	3b01      	subs	r3, #1
 800c71c:	f8a9 3008 	strh.w	r3, [r9, #8]
              pbuf_realloc(inseg.p, inseg.len);
 800c720:	f8b9 1008 	ldrh.w	r1, [r9, #8]
 800c724:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800c728:	f7fd fdba 	bl	800a2a0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800c72c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800c730:	f8b9 8008 	ldrh.w	r8, [r9, #8]
 800c734:	8998      	ldrh	r0, [r3, #12]
 800c736:	f7fc fdcd 	bl	80092d4 <lwip_htons>
 800c73a:	f010 0303 	ands.w	r3, r0, #3
 800c73e:	bf18      	it	ne
 800c740:	2301      	movne	r3, #1
 800c742:	eb08 0203 	add.w	r2, r8, r3
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800c746:	68eb      	ldr	r3, [r5, #12]
              tcplen = TCP_TCPLEN(&inseg);
 800c748:	b292      	uxth	r2, r2
 800c74a:	803a      	strh	r2, [r7, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800c74c:	6859      	ldr	r1, [r3, #4]
 800c74e:	6833      	ldr	r3, [r6, #0]
 800c750:	4413      	add	r3, r2
 800c752:	428b      	cmp	r3, r1
 800c754:	d0d2      	beq.n	800c6fc <tcp_receive+0x830>
 800c756:	4b11      	ldr	r3, [pc, #68]	@ (800c79c <tcp_receive+0x8d0>)
 800c758:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800c75c:	4914      	ldr	r1, [pc, #80]	@ (800c7b0 <tcp_receive+0x8e4>)
 800c75e:	480e      	ldr	r0, [pc, #56]	@ (800c798 <tcp_receive+0x8cc>)
 800c760:	f004 fa7c 	bl	8010c5c <iprintf>
        pcb->rcv_nxt = seqno + tcplen;
 800c764:	883a      	ldrh	r2, [r7, #0]
 800c766:	6831      	ldr	r1, [r6, #0]
 800c768:	4411      	add	r1, r2
 800c76a:	e7c7      	b.n	800c6fc <tcp_receive+0x830>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800c76c:	899d      	ldrh	r5, [r3, #12]
 800c76e:	4628      	mov	r0, r5
 800c770:	f425 557c 	bic.w	r5, r5, #16128	@ 0x3f00
 800c774:	f7fc fdae 	bl	80092d4 <lwip_htons>
 800c778:	f000 003e 	and.w	r0, r0, #62	@ 0x3e
 800c77c:	f7fc fdaa 	bl	80092d4 <lwip_htons>
 800c780:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800c784:	4328      	orrs	r0, r5
 800c786:	8198      	strh	r0, [r3, #12]
 800c788:	b280      	uxth	r0, r0
 800c78a:	e760      	b.n	800c64e <tcp_receive+0x782>
                    pcb->ooseq = cseg;
 800c78c:	6760      	str	r0, [r4, #116]	@ 0x74
 800c78e:	e73d      	b.n	800c60c <tcp_receive+0x740>
 800c790:	2400b820 	.word	0x2400b820
 800c794:	2400b824 	.word	0x2400b824
 800c798:	08011f14 	.word	0x08011f14
 800c79c:	08013800 	.word	0x08013800
 800c7a0:	080138c0 	.word	0x080138c0
 800c7a4:	2400b844 	.word	0x2400b844
 800c7a8:	080138f0 	.word	0x080138f0
 800c7ac:	08013964 	.word	0x08013964
 800c7b0:	08013928 	.word	0x08013928
 800c7b4:	08013984 	.word	0x08013984
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800c7b8:	68db      	ldr	r3, [r3, #12]
 800c7ba:	899d      	ldrh	r5, [r3, #12]
 800c7bc:	4628      	mov	r0, r5
 800c7be:	f425 557c 	bic.w	r5, r5, #16128	@ 0x3f00
 800c7c2:	f7fc fd87 	bl	80092d4 <lwip_htons>
 800c7c6:	f000 003e 	and.w	r0, r0, #62	@ 0x3e
 800c7ca:	f7fc fd83 	bl	80092d4 <lwip_htons>
 800c7ce:	f8d8 3000 	ldr.w	r3, [r8]
 800c7d2:	ea40 0205 	orr.w	r2, r0, r5
 800c7d6:	68d9      	ldr	r1, [r3, #12]
 800c7d8:	818a      	strh	r2, [r1, #12]
 800c7da:	e545      	b.n	800c268 <tcp_receive+0x39c>
 800c7dc:	f8df 9004 	ldr.w	r9, [pc, #4]	@ 800c7e4 <tcp_receive+0x918>
 800c7e0:	e5ab      	b.n	800c33a <tcp_receive+0x46e>
 800c7e2:	bf00      	nop
 800c7e4:	2400b844 	.word	0x2400b844

0800c7e8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800c7e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800c7ec:	4604      	mov	r4, r0
 800c7ee:	2800      	cmp	r0, #0
 800c7f0:	f000 808b 	beq.w	800c90a <tcp_parseopt+0x122>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800c7f4:	4b52      	ldr	r3, [pc, #328]	@ (800c940 <tcp_parseopt+0x158>)
 800c7f6:	881d      	ldrh	r5, [r3, #0]
 800c7f8:	2d00      	cmp	r5, #0
 800c7fa:	d036      	beq.n	800c86a <tcp_parseopt+0x82>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c7fc:	4a51      	ldr	r2, [pc, #324]	@ (800c944 <tcp_parseopt+0x15c>)
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c7fe:	2300      	movs	r3, #0
 800c800:	4e51      	ldr	r6, [pc, #324]	@ (800c948 <tcp_parseopt+0x160>)
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c802:	6810      	ldr	r0, [r2, #0]
 800c804:	4619      	mov	r1, r3
 800c806:	4a51      	ldr	r2, [pc, #324]	@ (800c94c <tcp_parseopt+0x164>)
    return opts[optidx];
 800c808:	4f51      	ldr	r7, [pc, #324]	@ (800c950 <tcp_parseopt+0x168>)
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c80a:	f8b2 c000 	ldrh.w	ip, [r2]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c80e:	8033      	strh	r3, [r6, #0]
tcp_parseopt(struct tcp_pcb *pcb)
 800c810:	468e      	mov	lr, r1
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c812:	428d      	cmp	r5, r1
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c814:	fa1f f88e 	uxth.w	r8, lr
  u16_t optidx = tcp_optidx++;
 800c818:	f101 0201 	add.w	r2, r1, #1
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c81c:	f240 8087 	bls.w	800c92e <tcp_parseopt+0x146>
  u16_t optidx = tcp_optidx++;
 800c820:	b292      	uxth	r2, r2
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c822:	b1c0      	cbz	r0, 800c856 <tcp_parseopt+0x6e>
 800c824:	45c4      	cmp	ip, r8
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800c826:	eba2 030c 	sub.w	r3, r2, ip
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c82a:	d814      	bhi.n	800c856 <tcp_parseopt+0x6e>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800c82c:	3b01      	subs	r3, #1
    return tcphdr_opt2[idx];
 800c82e:	b2db      	uxtb	r3, r3
 800c830:	5cc3      	ldrb	r3, [r0, r3]
      u8_t opt = tcp_get_next_optbyte();
      switch (opt) {
 800c832:	2b01      	cmp	r3, #1
 800c834:	d014      	beq.n	800c860 <tcp_parseopt+0x78>
 800c836:	2b02      	cmp	r3, #2
 800c838:	d019      	beq.n	800c86e <tcp_parseopt+0x86>
 800c83a:	b1ab      	cbz	r3, 800c868 <tcp_parseopt+0x80>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c83c:	b108      	cbz	r0, 800c842 <tcp_parseopt+0x5a>
 800c83e:	4562      	cmp	r2, ip
 800c840:	d24e      	bcs.n	800c8e0 <tcp_parseopt+0xf8>
    return opts[optidx];
 800c842:	4b43      	ldr	r3, [pc, #268]	@ (800c950 <tcp_parseopt+0x168>)
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	4413      	add	r3, r2
 800c848:	7d1b      	ldrb	r3, [r3, #20]
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
          if (data < 2) {
 800c84a:	2b01      	cmp	r3, #1
 800c84c:	d975      	bls.n	800c93a <tcp_parseopt+0x152>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800c84e:	440b      	add	r3, r1
 800c850:	b299      	uxth	r1, r3
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800c852:	2301      	movs	r3, #1
 800c854:	e7dc      	b.n	800c810 <tcp_parseopt+0x28>
    return opts[optidx];
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	4473      	add	r3, lr
 800c85a:	7d1b      	ldrb	r3, [r3, #20]
      switch (opt) {
 800c85c:	2b01      	cmp	r3, #1
 800c85e:	d1ea      	bne.n	800c836 <tcp_parseopt+0x4e>
 800c860:	f10e 0e01 	add.w	lr, lr, #1
  u16_t optidx = tcp_optidx++;
 800c864:	4611      	mov	r1, r2
 800c866:	e7d4      	b.n	800c812 <tcp_parseopt+0x2a>
 800c868:	8032      	strh	r2, [r6, #0]
      }
    }
  }
}
 800c86a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  u16_t optidx = tcp_optidx++;
 800c86e:	1c8b      	adds	r3, r1, #2
 800c870:	b29b      	uxth	r3, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c872:	b108      	cbz	r0, 800c878 <tcp_parseopt+0x90>
 800c874:	4562      	cmp	r2, ip
 800c876:	d22e      	bcs.n	800c8d6 <tcp_parseopt+0xee>
    return opts[optidx];
 800c878:	f8df e0d4 	ldr.w	lr, [pc, #212]	@ 800c950 <tcp_parseopt+0x168>
 800c87c:	f8de e000 	ldr.w	lr, [lr]
 800c880:	4472      	add	r2, lr
 800c882:	7d12      	ldrb	r2, [r2, #20]
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800c884:	2a04      	cmp	r2, #4
 800c886:	d156      	bne.n	800c936 <tcp_parseopt+0x14e>
 800c888:	1c5a      	adds	r2, r3, #1
 800c88a:	42aa      	cmp	r2, r5
 800c88c:	da53      	bge.n	800c936 <tcp_parseopt+0x14e>
  u16_t optidx = tcp_optidx++;
 800c88e:	1cca      	adds	r2, r1, #3
 800c890:	3104      	adds	r1, #4
 800c892:	b292      	uxth	r2, r2
 800c894:	b289      	uxth	r1, r1
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c896:	2800      	cmp	r0, #0
 800c898:	d03f      	beq.n	800c91a <tcp_parseopt+0x132>
 800c89a:	459c      	cmp	ip, r3
 800c89c:	d825      	bhi.n	800c8ea <tcp_parseopt+0x102>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800c89e:	eba3 030c 	sub.w	r3, r3, ip
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c8a2:	4594      	cmp	ip, r2
    return tcphdr_opt2[idx];
 800c8a4:	b2db      	uxtb	r3, r3
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800c8a6:	f810 e003 	ldrb.w	lr, [r0, r3]
 800c8aa:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c8ae:	d927      	bls.n	800c900 <tcp_parseopt+0x118>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800c8b0:	4b27      	ldr	r3, [pc, #156]	@ (800c950 <tcp_parseopt+0x168>)
 800c8b2:	f8d3 8000 	ldr.w	r8, [r3]
    return opts[optidx];
 800c8b6:	4490      	add	r8, r2
 800c8b8:	f898 3014 	ldrb.w	r3, [r8, #20]
          mss |= tcp_get_next_optbyte();
 800c8bc:	ea43 030e 	orr.w	r3, r3, lr
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800c8c0:	f240 58b3 	movw	r8, #1459	@ 0x5b3
 800c8c4:	f240 5eb4 	movw	lr, #1460	@ 0x5b4
 800c8c8:	1e5a      	subs	r2, r3, #1
 800c8ca:	b292      	uxth	r2, r2
 800c8cc:	4542      	cmp	r2, r8
 800c8ce:	bf88      	it	hi
 800c8d0:	4673      	movhi	r3, lr
 800c8d2:	8663      	strh	r3, [r4, #50]	@ 0x32
          break;
 800c8d4:	e7bd      	b.n	800c852 <tcp_parseopt+0x6a>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800c8d6:	eba2 020c 	sub.w	r2, r2, ip
    return tcphdr_opt2[idx];
 800c8da:	b2d2      	uxtb	r2, r2
 800c8dc:	5c82      	ldrb	r2, [r0, r2]
 800c8de:	e7d1      	b.n	800c884 <tcp_parseopt+0x9c>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800c8e0:	eba2 020c 	sub.w	r2, r2, ip
    return tcphdr_opt2[idx];
 800c8e4:	b2d2      	uxtb	r2, r2
 800c8e6:	5c83      	ldrb	r3, [r0, r2]
 800c8e8:	e7af      	b.n	800c84a <tcp_parseopt+0x62>
    return opts[optidx];
 800c8ea:	f8df e064 	ldr.w	lr, [pc, #100]	@ 800c950 <tcp_parseopt+0x168>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c8ee:	4594      	cmp	ip, r2
    return opts[optidx];
 800c8f0:	f8de e000 	ldr.w	lr, [lr]
 800c8f4:	4473      	add	r3, lr
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800c8f6:	f893 e014 	ldrb.w	lr, [r3, #20]
 800c8fa:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c8fe:	d8d7      	bhi.n	800c8b0 <tcp_parseopt+0xc8>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800c900:	eba2 020c 	sub.w	r2, r2, ip
    return tcphdr_opt2[idx];
 800c904:	b2d2      	uxtb	r2, r2
 800c906:	5c83      	ldrb	r3, [r0, r2]
 800c908:	e7d8      	b.n	800c8bc <tcp_parseopt+0xd4>
  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800c90a:	4b12      	ldr	r3, [pc, #72]	@ (800c954 <tcp_parseopt+0x16c>)
 800c90c:	f240 727d 	movw	r2, #1917	@ 0x77d
 800c910:	4911      	ldr	r1, [pc, #68]	@ (800c958 <tcp_parseopt+0x170>)
 800c912:	4812      	ldr	r0, [pc, #72]	@ (800c95c <tcp_parseopt+0x174>)
 800c914:	f004 f9a2 	bl	8010c5c <iprintf>
 800c918:	e76c      	b.n	800c7f4 <tcp_parseopt+0xc>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800c91a:	f8df e034 	ldr.w	lr, [pc, #52]	@ 800c950 <tcp_parseopt+0x168>
 800c91e:	f8de 8000 	ldr.w	r8, [lr]
    return opts[optidx];
 800c922:	4443      	add	r3, r8
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800c924:	f893 e014 	ldrb.w	lr, [r3, #20]
 800c928:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c92c:	e7c3      	b.n	800c8b6 <tcp_parseopt+0xce>
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d09b      	beq.n	800c86a <tcp_parseopt+0x82>
 800c932:	8031      	strh	r1, [r6, #0]
 800c934:	e799      	b.n	800c86a <tcp_parseopt+0x82>
 800c936:	8033      	strh	r3, [r6, #0]
 800c938:	e797      	b.n	800c86a <tcp_parseopt+0x82>
  u16_t optidx = tcp_optidx++;
 800c93a:	3102      	adds	r1, #2
 800c93c:	8031      	strh	r1, [r6, #0]
 800c93e:	e794      	b.n	800c86a <tcp_parseopt+0x82>
 800c940:	2400b83e 	.word	0x2400b83e
 800c944:	2400b838 	.word	0x2400b838
 800c948:	2400b834 	.word	0x2400b834
 800c94c:	2400b83c 	.word	0x2400b83c
 800c950:	2400b840 	.word	0x2400b840
 800c954:	08013800 	.word	0x08013800
 800c958:	080139ac 	.word	0x080139ac
 800c95c:	08011f14 	.word	0x08011f14

0800c960 <tcp_input>:
{
 800c960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c964:	4604      	mov	r4, r0
 800c966:	b087      	sub	sp, #28
  LWIP_ASSERT_CORE_LOCKED();
 800c968:	f7f9 ffea 	bl	8006940 <sys_check_core_locking>
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800c96c:	2c00      	cmp	r4, #0
 800c96e:	f000 80d5 	beq.w	800cb1c <tcp_input+0x1bc>
  if (p->len < TCP_HLEN) {
 800c972:	8963      	ldrh	r3, [r4, #10]
  tcphdr = (struct tcp_hdr *)p->payload;
 800c974:	4e6d      	ldr	r6, [pc, #436]	@ (800cb2c <tcp_input+0x1cc>)
 800c976:	6862      	ldr	r2, [r4, #4]
  if (p->len < TCP_HLEN) {
 800c978:	2b13      	cmp	r3, #19
  tcphdr = (struct tcp_hdr *)p->payload;
 800c97a:	6032      	str	r2, [r6, #0]
  if (p->len < TCP_HLEN) {
 800c97c:	d805      	bhi.n	800c98a <tcp_input+0x2a>
  pbuf_free(p);
 800c97e:	4620      	mov	r0, r4
}
 800c980:	b007      	add	sp, #28
 800c982:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800c986:	f7fd bb79 	b.w	800a07c <pbuf_free>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c98a:	4f69      	ldr	r7, [pc, #420]	@ (800cb30 <tcp_input+0x1d0>)
 800c98c:	6839      	ldr	r1, [r7, #0]
 800c98e:	6978      	ldr	r0, [r7, #20]
 800c990:	f003 fade 	bl	800ff50 <ip4_addr_isbroadcast_u32>
 800c994:	4605      	mov	r5, r0
 800c996:	2800      	cmp	r0, #0
 800c998:	d1f1      	bne.n	800c97e <tcp_input+0x1e>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800c99a:	697b      	ldr	r3, [r7, #20]
 800c99c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c9a0:	2be0      	cmp	r3, #224	@ 0xe0
 800c9a2:	d0ec      	beq.n	800c97e <tcp_input+0x1e>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800c9a4:	6833      	ldr	r3, [r6, #0]
 800c9a6:	8998      	ldrh	r0, [r3, #12]
 800c9a8:	f7fc fc94 	bl	80092d4 <lwip_htons>
 800c9ac:	0a81      	lsrs	r1, r0, #10
 800c9ae:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800c9b2:	2913      	cmp	r1, #19
 800c9b4:	d9e3      	bls.n	800c97e <tcp_input+0x1e>
 800c9b6:	8923      	ldrh	r3, [r4, #8]
 800c9b8:	428b      	cmp	r3, r1
 800c9ba:	d3e0      	bcc.n	800c97e <tcp_input+0x1e>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800c9bc:	f1a1 0314 	sub.w	r3, r1, #20
  if (p->len >= hdrlen_bytes) {
 800c9c0:	8962      	ldrh	r2, [r4, #10]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800c9c2:	f8df 91a0 	ldr.w	r9, [pc, #416]	@ 800cb64 <tcp_input+0x204>
 800c9c6:	b29b      	uxth	r3, r3
  tcphdr_opt2 = NULL;
 800c9c8:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cb68 <tcp_input+0x208>
  if (p->len >= hdrlen_bytes) {
 800c9cc:	428a      	cmp	r2, r1
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800c9ce:	f8a9 3000 	strh.w	r3, [r9]
  tcphdr_opt2 = NULL;
 800c9d2:	f8c8 5000 	str.w	r5, [r8]
  if (p->len >= hdrlen_bytes) {
 800c9d6:	f080 819d 	bcs.w	800cd14 <tcp_input+0x3b4>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800c9da:	6823      	ldr	r3, [r4, #0]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	f000 8379 	beq.w	800d0d4 <tcp_input+0x774>
    pbuf_remove_header(p, TCP_HLEN);
 800c9e2:	2114      	movs	r1, #20
 800c9e4:	4620      	mov	r0, r4
 800c9e6:	f7fd fae7 	bl	8009fb8 <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 800c9ea:	8965      	ldrh	r5, [r4, #10]
 800c9ec:	4b51      	ldr	r3, [pc, #324]	@ (800cb34 <tcp_input+0x1d4>)
    pbuf_remove_header(p, tcphdr_opt1len);
 800c9ee:	4620      	mov	r0, r4
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800c9f0:	f8b9 a000 	ldrh.w	sl, [r9]
    pbuf_remove_header(p, tcphdr_opt1len);
 800c9f4:	4629      	mov	r1, r5
    tcphdr_opt1len = p->len;
 800c9f6:	801d      	strh	r5, [r3, #0]
    pbuf_remove_header(p, tcphdr_opt1len);
 800c9f8:	f7fd fade 	bl	8009fb8 <pbuf_remove_header>
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800c9fc:	ebaa 0905 	sub.w	r9, sl, r5
    if (opt2len > p->next->len) {
 800ca00:	6820      	ldr	r0, [r4, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800ca02:	fa1f f989 	uxth.w	r9, r9
    if (opt2len > p->next->len) {
 800ca06:	8943      	ldrh	r3, [r0, #10]
 800ca08:	454b      	cmp	r3, r9
 800ca0a:	d3b8      	bcc.n	800c97e <tcp_input+0x1e>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800ca0c:	6843      	ldr	r3, [r0, #4]
    pbuf_remove_header(p->next, opt2len);
 800ca0e:	4649      	mov	r1, r9
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800ca10:	f8c8 3000 	str.w	r3, [r8]
    pbuf_remove_header(p->next, opt2len);
 800ca14:	f7fd fad0 	bl	8009fb8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800ca18:	8923      	ldrh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800ca1a:	8962      	ldrh	r2, [r4, #10]
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800ca1c:	442b      	add	r3, r5
 800ca1e:	eba3 030a 	sub.w	r3, r3, sl
 800ca22:	b29b      	uxth	r3, r3
 800ca24:	8123      	strh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800ca26:	2a00      	cmp	r2, #0
 800ca28:	f040 835b 	bne.w	800d0e2 <tcp_input+0x782>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800ca2c:	6822      	ldr	r2, [r4, #0]
 800ca2e:	8912      	ldrh	r2, [r2, #8]
 800ca30:	429a      	cmp	r2, r3
 800ca32:	d005      	beq.n	800ca40 <tcp_input+0xe0>
 800ca34:	4b40      	ldr	r3, [pc, #256]	@ (800cb38 <tcp_input+0x1d8>)
 800ca36:	22e0      	movs	r2, #224	@ 0xe0
 800ca38:	4940      	ldr	r1, [pc, #256]	@ (800cb3c <tcp_input+0x1dc>)
 800ca3a:	4841      	ldr	r0, [pc, #260]	@ (800cb40 <tcp_input+0x1e0>)
 800ca3c:	f004 f90e 	bl	8010c5c <iprintf>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800ca40:	6835      	ldr	r5, [r6, #0]
 800ca42:	8828      	ldrh	r0, [r5, #0]
 800ca44:	f7fc fc46 	bl	80092d4 <lwip_htons>
 800ca48:	8028      	strh	r0, [r5, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800ca4a:	6835      	ldr	r5, [r6, #0]
 800ca4c:	8868      	ldrh	r0, [r5, #2]
 800ca4e:	f7fc fc41 	bl	80092d4 <lwip_htons>
 800ca52:	8068      	strh	r0, [r5, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800ca54:	6835      	ldr	r5, [r6, #0]
 800ca56:	6868      	ldr	r0, [r5, #4]
 800ca58:	f7fc fc40 	bl	80092dc <lwip_htonl>
 800ca5c:	4b39      	ldr	r3, [pc, #228]	@ (800cb44 <tcp_input+0x1e4>)
 800ca5e:	6068      	str	r0, [r5, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800ca60:	6835      	ldr	r5, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800ca62:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800ca64:	68a8      	ldr	r0, [r5, #8]
 800ca66:	f7fc fc39 	bl	80092dc <lwip_htonl>
 800ca6a:	4b37      	ldr	r3, [pc, #220]	@ (800cb48 <tcp_input+0x1e8>)
 800ca6c:	60a8      	str	r0, [r5, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800ca6e:	6835      	ldr	r5, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800ca70:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800ca72:	89e8      	ldrh	r0, [r5, #14]
 800ca74:	f7fc fc2e 	bl	80092d4 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 800ca78:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800ca7a:	81e8      	strh	r0, [r5, #14]
  flags = TCPH_FLAGS(tcphdr);
 800ca7c:	8998      	ldrh	r0, [r3, #12]
 800ca7e:	f7fc fc29 	bl	80092d4 <lwip_htons>
 800ca82:	4932      	ldr	r1, [pc, #200]	@ (800cb4c <tcp_input+0x1ec>)
 800ca84:	f000 033f 	and.w	r3, r0, #63	@ 0x3f
  tcplen = p->tot_len;
 800ca88:	8922      	ldrh	r2, [r4, #8]
  flags = TCPH_FLAGS(tcphdr);
 800ca8a:	700b      	strb	r3, [r1, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800ca8c:	0781      	lsls	r1, r0, #30
 800ca8e:	f040 8147 	bne.w	800cd20 <tcp_input+0x3c0>
  tcplen = p->tot_len;
 800ca92:	4b2f      	ldr	r3, [pc, #188]	@ (800cb50 <tcp_input+0x1f0>)
 800ca94:	9305      	str	r3, [sp, #20]
 800ca96:	801a      	strh	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ca98:	4b2e      	ldr	r3, [pc, #184]	@ (800cb54 <tcp_input+0x1f4>)
 800ca9a:	681d      	ldr	r5, [r3, #0]
 800ca9c:	2d00      	cmp	r5, #0
 800ca9e:	f000 80e8 	beq.w	800cc72 <tcp_input+0x312>
  prev = NULL;
 800caa2:	f04f 0800 	mov.w	r8, #0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800caa6:	f8df a090 	ldr.w	sl, [pc, #144]	@ 800cb38 <tcp_input+0x1d8>
 800caaa:	f8df b0c0 	ldr.w	fp, [pc, #192]	@ 800cb6c <tcp_input+0x20c>
 800caae:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800cb40 <tcp_input+0x1e0>
 800cab2:	e017      	b.n	800cae4 <tcp_input+0x184>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800cab4:	2b0a      	cmp	r3, #10
 800cab6:	d021      	beq.n	800cafc <tcp_input+0x19c>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800cab8:	2b01      	cmp	r3, #1
 800caba:	d028      	beq.n	800cb0e <tcp_input+0x1ae>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cabc:	7a2a      	ldrb	r2, [r5, #8]
 800cabe:	b132      	cbz	r2, 800cace <tcp_input+0x16e>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cac6:	3301      	adds	r3, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cac8:	b2db      	uxtb	r3, r3
 800caca:	429a      	cmp	r2, r3
 800cacc:	d104      	bne.n	800cad8 <tcp_input+0x178>
    if (pcb->remote_port == tcphdr->src &&
 800cace:	6833      	ldr	r3, [r6, #0]
 800cad0:	8b29      	ldrh	r1, [r5, #24]
 800cad2:	881a      	ldrh	r2, [r3, #0]
 800cad4:	4291      	cmp	r1, r2
 800cad6:	d04b      	beq.n	800cb70 <tcp_input+0x210>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cad8:	68eb      	ldr	r3, [r5, #12]
 800cada:	46a8      	mov	r8, r5
 800cadc:	2b00      	cmp	r3, #0
 800cade:	f000 80c8 	beq.w	800cc72 <tcp_input+0x312>
 800cae2:	461d      	mov	r5, r3
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800cae4:	7d2b      	ldrb	r3, [r5, #20]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d1e4      	bne.n	800cab4 <tcp_input+0x154>
 800caea:	4653      	mov	r3, sl
 800caec:	22fb      	movs	r2, #251	@ 0xfb
 800caee:	4659      	mov	r1, fp
 800caf0:	4648      	mov	r0, r9
 800caf2:	f004 f8b3 	bl	8010c5c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800caf6:	7d2b      	ldrb	r3, [r5, #20]
 800caf8:	2b0a      	cmp	r3, #10
 800cafa:	d1dd      	bne.n	800cab8 <tcp_input+0x158>
 800cafc:	4653      	mov	r3, sl
 800cafe:	22fc      	movs	r2, #252	@ 0xfc
 800cb00:	4915      	ldr	r1, [pc, #84]	@ (800cb58 <tcp_input+0x1f8>)
 800cb02:	4648      	mov	r0, r9
 800cb04:	f004 f8aa 	bl	8010c5c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800cb08:	7d2b      	ldrb	r3, [r5, #20]
 800cb0a:	2b01      	cmp	r3, #1
 800cb0c:	d1d6      	bne.n	800cabc <tcp_input+0x15c>
 800cb0e:	4653      	mov	r3, sl
 800cb10:	22fd      	movs	r2, #253	@ 0xfd
 800cb12:	4912      	ldr	r1, [pc, #72]	@ (800cb5c <tcp_input+0x1fc>)
 800cb14:	4648      	mov	r0, r9
 800cb16:	f004 f8a1 	bl	8010c5c <iprintf>
 800cb1a:	e7cf      	b.n	800cabc <tcp_input+0x15c>
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800cb1c:	4b06      	ldr	r3, [pc, #24]	@ (800cb38 <tcp_input+0x1d8>)
 800cb1e:	2283      	movs	r2, #131	@ 0x83
 800cb20:	490f      	ldr	r1, [pc, #60]	@ (800cb60 <tcp_input+0x200>)
 800cb22:	4807      	ldr	r0, [pc, #28]	@ (800cb40 <tcp_input+0x1e0>)
 800cb24:	f004 f89a 	bl	8010c5c <iprintf>
 800cb28:	e723      	b.n	800c972 <tcp_input+0x12>
 800cb2a:	bf00      	nop
 800cb2c:	2400b840 	.word	0x2400b840
 800cb30:	24004d48 	.word	0x24004d48
 800cb34:	2400b83c 	.word	0x2400b83c
 800cb38:	08013800 	.word	0x08013800
 800cb3c:	080139fc 	.word	0x080139fc
 800cb40:	08011f14 	.word	0x08011f14
 800cb44:	2400b830 	.word	0x2400b830
 800cb48:	2400b82c 	.word	0x2400b82c
 800cb4c:	2400b825 	.word	0x2400b825
 800cb50:	2400b826 	.word	0x2400b826
 800cb54:	2400b80c 	.word	0x2400b80c
 800cb58:	08013a44 	.word	0x08013a44
 800cb5c:	08013a70 	.word	0x08013a70
 800cb60:	080139c8 	.word	0x080139c8
 800cb64:	2400b83e 	.word	0x2400b83e
 800cb68:	2400b838 	.word	0x2400b838
 800cb6c:	08013a1c 	.word	0x08013a1c
    if (pcb->remote_port == tcphdr->src &&
 800cb70:	885b      	ldrh	r3, [r3, #2]
 800cb72:	8aea      	ldrh	r2, [r5, #22]
 800cb74:	429a      	cmp	r2, r3
 800cb76:	d1af      	bne.n	800cad8 <tcp_input+0x178>
        pcb->local_port == tcphdr->dest &&
 800cb78:	686a      	ldr	r2, [r5, #4]
 800cb7a:	693b      	ldr	r3, [r7, #16]
 800cb7c:	429a      	cmp	r2, r3
 800cb7e:	d1ab      	bne.n	800cad8 <tcp_input+0x178>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800cb80:	682a      	ldr	r2, [r5, #0]
 800cb82:	697b      	ldr	r3, [r7, #20]
 800cb84:	429a      	cmp	r2, r3
 800cb86:	d1a7      	bne.n	800cad8 <tcp_input+0x178>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800cb88:	68eb      	ldr	r3, [r5, #12]
 800cb8a:	42ab      	cmp	r3, r5
 800cb8c:	f000 843d 	beq.w	800d40a <tcp_input+0xaaa>
      if (prev != NULL) {
 800cb90:	f1b8 0f00 	cmp.w	r8, #0
 800cb94:	d009      	beq.n	800cbaa <tcp_input+0x24a>
        pcb->next = tcp_active_pcbs;
 800cb96:	4a6f      	ldr	r2, [pc, #444]	@ (800cd54 <tcp_input+0x3f4>)
        prev->next = pcb->next;
 800cb98:	f8c8 300c 	str.w	r3, [r8, #12]
        pcb->next = tcp_active_pcbs;
 800cb9c:	6813      	ldr	r3, [r2, #0]
        tcp_active_pcbs = pcb;
 800cb9e:	6015      	str	r5, [r2, #0]
        pcb->next = tcp_active_pcbs;
 800cba0:	60eb      	str	r3, [r5, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800cba2:	68eb      	ldr	r3, [r5, #12]
 800cba4:	42ab      	cmp	r3, r5
 800cba6:	f000 843e 	beq.w	800d426 <tcp_input+0xac6>
    inseg.next = NULL;
 800cbaa:	2300      	movs	r3, #0
 800cbac:	4f6a      	ldr	r7, [pc, #424]	@ (800cd58 <tcp_input+0x3f8>)
    recv_data = NULL;
 800cbae:	f8df 81c4 	ldr.w	r8, [pc, #452]	@ 800cd74 <tcp_input+0x414>
    recv_flags = 0;
 800cbb2:	f8df 91c4 	ldr.w	r9, [pc, #452]	@ 800cd78 <tcp_input+0x418>
    recv_acked = 0;
 800cbb6:	f8df a1c4 	ldr.w	sl, [pc, #452]	@ 800cd7c <tcp_input+0x41c>
    inseg.next = NULL;
 800cbba:	603b      	str	r3, [r7, #0]
    recv_data = NULL;
 800cbbc:	f8c8 3000 	str.w	r3, [r8]
    recv_flags = 0;
 800cbc0:	f889 3000 	strb.w	r3, [r9]
    recv_acked = 0;
 800cbc4:	f8aa 3000 	strh.w	r3, [sl]
    if (flags & TCP_PSH) {
 800cbc8:	4b64      	ldr	r3, [pc, #400]	@ (800cd5c <tcp_input+0x3fc>)
    inseg.len = p->tot_len;
 800cbca:	8922      	ldrh	r2, [r4, #8]
    if (flags & TCP_PSH) {
 800cbcc:	781b      	ldrb	r3, [r3, #0]
    inseg.len = p->tot_len;
 800cbce:	813a      	strh	r2, [r7, #8]
    if (flags & TCP_PSH) {
 800cbd0:	0719      	lsls	r1, r3, #28
    inseg.tcphdr = tcphdr;
 800cbd2:	6832      	ldr	r2, [r6, #0]
    inseg.p = p;
 800cbd4:	607c      	str	r4, [r7, #4]
    inseg.tcphdr = tcphdr;
 800cbd6:	60fa      	str	r2, [r7, #12]
    if (flags & TCP_PSH) {
 800cbd8:	d503      	bpl.n	800cbe2 <tcp_input+0x282>
      p->flags |= PBUF_FLAG_PUSH;
 800cbda:	7b62      	ldrb	r2, [r4, #13]
 800cbdc:	f042 0201 	orr.w	r2, r2, #1
 800cbe0:	7362      	strb	r2, [r4, #13]
    if (pcb->refused_data != NULL) {
 800cbe2:	6faa      	ldr	r2, [r5, #120]	@ 0x78
 800cbe4:	2a00      	cmp	r2, #0
 800cbe6:	f000 826c 	beq.w	800d0c2 <tcp_input+0x762>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800cbea:	4628      	mov	r0, r5
 800cbec:	f7fe ff8c 	bl	800bb08 <tcp_process_refused_data>
 800cbf0:	300d      	adds	r0, #13
 800cbf2:	f000 8269 	beq.w	800d0c8 <tcp_input+0x768>
 800cbf6:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 800cbf8:	b123      	cbz	r3, 800cc04 <tcp_input+0x2a4>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800cbfa:	9b05      	ldr	r3, [sp, #20]
 800cbfc:	881b      	ldrh	r3, [r3, #0]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	f040 8262 	bne.w	800d0c8 <tcp_input+0x768>
  if (flags & TCP_RST) {
 800cc04:	4b55      	ldr	r3, [pc, #340]	@ (800cd5c <tcp_input+0x3fc>)
    tcp_input_pcb = pcb;
 800cc06:	4c56      	ldr	r4, [pc, #344]	@ (800cd60 <tcp_input+0x400>)
  if (flags & TCP_RST) {
 800cc08:	781b      	ldrb	r3, [r3, #0]
    tcp_input_pcb = pcb;
 800cc0a:	6025      	str	r5, [r4, #0]
  if (flags & TCP_RST) {
 800cc0c:	075a      	lsls	r2, r3, #29
 800cc0e:	f140 814d 	bpl.w	800ceac <tcp_input+0x54c>
    if (pcb->state == SYN_SENT) {
 800cc12:	7d29      	ldrb	r1, [r5, #20]
 800cc14:	2902      	cmp	r1, #2
 800cc16:	f000 82d7 	beq.w	800d1c8 <tcp_input+0x868>
      if (seqno == pcb->rcv_nxt) {
 800cc1a:	4b52      	ldr	r3, [pc, #328]	@ (800cd64 <tcp_input+0x404>)
 800cc1c:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	429a      	cmp	r2, r3
 800cc22:	f000 8409 	beq.w	800d438 <tcp_input+0xad8>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800cc26:	1a9b      	subs	r3, r3, r2
 800cc28:	d404      	bmi.n	800cc34 <tcp_input+0x2d4>
 800cc2a:	8d2a      	ldrh	r2, [r5, #40]	@ 0x28
 800cc2c:	1a9b      	subs	r3, r3, r2
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	f340 833e 	ble.w	800d2b0 <tcp_input+0x950>
      if (recv_flags & TF_RESET) {
 800cc34:	f899 3000 	ldrb.w	r3, [r9]
 800cc38:	071a      	lsls	r2, r3, #28
 800cc3a:	f140 825a 	bpl.w	800d0f2 <tcp_input+0x792>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800cc3e:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 800cc42:	b11b      	cbz	r3, 800cc4c <tcp_input+0x2ec>
 800cc44:	f06f 010d 	mvn.w	r1, #13
 800cc48:	6928      	ldr	r0, [r5, #16]
 800cc4a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800cc4c:	4841      	ldr	r0, [pc, #260]	@ (800cd54 <tcp_input+0x3f4>)
 800cc4e:	4629      	mov	r1, r5
 800cc50:	f7fe fbe0 	bl	800b414 <tcp_pcb_remove>
        tcp_free(pcb);
 800cc54:	4628      	mov	r0, r5
 800cc56:	f7fd fdd9 	bl	800a80c <tcp_free>
    tcp_input_pcb = NULL;
 800cc5a:	2500      	movs	r5, #0
    if (inseg.p != NULL) {
 800cc5c:	6878      	ldr	r0, [r7, #4]
    tcp_input_pcb = NULL;
 800cc5e:	6025      	str	r5, [r4, #0]
    recv_data = NULL;
 800cc60:	f8c8 5000 	str.w	r5, [r8]
    if (inseg.p != NULL) {
 800cc64:	b110      	cbz	r0, 800cc6c <tcp_input+0x30c>
      pbuf_free(inseg.p);
 800cc66:	f7fd fa09 	bl	800a07c <pbuf_free>
      inseg.p = NULL;
 800cc6a:	607d      	str	r5, [r7, #4]
}
 800cc6c:	b007      	add	sp, #28
 800cc6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cc72:	4b3d      	ldr	r3, [pc, #244]	@ (800cd68 <tcp_input+0x408>)
 800cc74:	681d      	ldr	r5, [r3, #0]
 800cc76:	2d00      	cmp	r5, #0
 800cc78:	d05b      	beq.n	800cd32 <tcp_input+0x3d2>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800cc7a:	f8df 8104 	ldr.w	r8, [pc, #260]	@ 800cd80 <tcp_input+0x420>
 800cc7e:	f8df a104 	ldr.w	sl, [pc, #260]	@ 800cd84 <tcp_input+0x424>
 800cc82:	f8df 9104 	ldr.w	r9, [pc, #260]	@ 800cd88 <tcp_input+0x428>
 800cc86:	e002      	b.n	800cc8e <tcp_input+0x32e>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cc88:	68ed      	ldr	r5, [r5, #12]
 800cc8a:	2d00      	cmp	r5, #0
 800cc8c:	d051      	beq.n	800cd32 <tcp_input+0x3d2>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800cc8e:	7d2b      	ldrb	r3, [r5, #20]
 800cc90:	2b0a      	cmp	r3, #10
 800cc92:	4643      	mov	r3, r8
 800cc94:	d005      	beq.n	800cca2 <tcp_input+0x342>
 800cc96:	f240 121f 	movw	r2, #287	@ 0x11f
 800cc9a:	4651      	mov	r1, sl
 800cc9c:	4648      	mov	r0, r9
 800cc9e:	f003 ffdd 	bl	8010c5c <iprintf>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cca2:	7a2a      	ldrb	r2, [r5, #8]
 800cca4:	b132      	cbz	r2, 800ccb4 <tcp_input+0x354>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ccac:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ccae:	b2db      	uxtb	r3, r3
 800ccb0:	429a      	cmp	r2, r3
 800ccb2:	d1e9      	bne.n	800cc88 <tcp_input+0x328>
      if (pcb->remote_port == tcphdr->src &&
 800ccb4:	6833      	ldr	r3, [r6, #0]
 800ccb6:	8b29      	ldrh	r1, [r5, #24]
 800ccb8:	881a      	ldrh	r2, [r3, #0]
 800ccba:	4291      	cmp	r1, r2
 800ccbc:	d1e4      	bne.n	800cc88 <tcp_input+0x328>
          pcb->local_port == tcphdr->dest &&
 800ccbe:	885a      	ldrh	r2, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
 800ccc0:	8aeb      	ldrh	r3, [r5, #22]
 800ccc2:	4293      	cmp	r3, r2
 800ccc4:	d1e0      	bne.n	800cc88 <tcp_input+0x328>
          pcb->local_port == tcphdr->dest &&
 800ccc6:	6868      	ldr	r0, [r5, #4]
 800ccc8:	693a      	ldr	r2, [r7, #16]
 800ccca:	4290      	cmp	r0, r2
 800cccc:	d1dc      	bne.n	800cc88 <tcp_input+0x328>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ccce:	6828      	ldr	r0, [r5, #0]
 800ccd0:	697a      	ldr	r2, [r7, #20]
 800ccd2:	4290      	cmp	r0, r2
 800ccd4:	d1d8      	bne.n	800cc88 <tcp_input+0x328>
  if (flags & TCP_RST) {
 800ccd6:	4a21      	ldr	r2, [pc, #132]	@ (800cd5c <tcp_input+0x3fc>)
 800ccd8:	7810      	ldrb	r0, [r2, #0]
 800ccda:	0742      	lsls	r2, r0, #29
 800ccdc:	f53f ae4f 	bmi.w	800c97e <tcp_input+0x1e>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cce0:	9a05      	ldr	r2, [sp, #20]
  if (flags & TCP_SYN) {
 800cce2:	0787      	lsls	r7, r0, #30
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cce4:	8816      	ldrh	r6, [r2, #0]
  if (flags & TCP_SYN) {
 800cce6:	f140 83b2 	bpl.w	800d44e <tcp_input+0xaee>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800ccea:	4a1e      	ldr	r2, [pc, #120]	@ (800cd64 <tcp_input+0x404>)
 800ccec:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 800ccee:	6812      	ldr	r2, [r2, #0]
 800ccf0:	1a10      	subs	r0, r2, r0
 800ccf2:	d404      	bmi.n	800ccfe <tcp_input+0x39e>
 800ccf4:	8d2f      	ldrh	r7, [r5, #40]	@ 0x28
 800ccf6:	1bc0      	subs	r0, r0, r7
 800ccf8:	2800      	cmp	r0, #0
 800ccfa:	f340 83c7 	ble.w	800d48c <tcp_input+0xb2c>
  if ((tcplen > 0)) {
 800ccfe:	2e00      	cmp	r6, #0
 800cd00:	f43f ae3d 	beq.w	800c97e <tcp_input+0x1e>
    tcp_ack_now(pcb);
 800cd04:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 800cd06:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 800cd08:	f043 0302 	orr.w	r3, r3, #2
 800cd0c:	836b      	strh	r3, [r5, #26]
    tcp_output(pcb);
 800cd0e:	f001 fb6d 	bl	800e3ec <tcp_output>
        pbuf_free(p);
 800cd12:	e634      	b.n	800c97e <tcp_input+0x1e>
    tcphdr_opt1len = tcphdr_optlen;
 800cd14:	4a15      	ldr	r2, [pc, #84]	@ (800cd6c <tcp_input+0x40c>)
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800cd16:	4620      	mov	r0, r4
    tcphdr_opt1len = tcphdr_optlen;
 800cd18:	8013      	strh	r3, [r2, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800cd1a:	f7fd f94d 	bl	8009fb8 <pbuf_remove_header>
 800cd1e:	e68f      	b.n	800ca40 <tcp_input+0xe0>
    tcplen++;
 800cd20:	1c53      	adds	r3, r2, #1
 800cd22:	4913      	ldr	r1, [pc, #76]	@ (800cd70 <tcp_input+0x410>)
 800cd24:	b29b      	uxth	r3, r3
 800cd26:	9105      	str	r1, [sp, #20]
    if (tcplen < p->tot_len) {
 800cd28:	429a      	cmp	r2, r3
    tcplen++;
 800cd2a:	800b      	strh	r3, [r1, #0]
    if (tcplen < p->tot_len) {
 800cd2c:	f67f aeb4 	bls.w	800ca98 <tcp_input+0x138>
 800cd30:	e625      	b.n	800c97e <tcp_input+0x1e>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cd32:	f8df 8058 	ldr.w	r8, [pc, #88]	@ 800cd8c <tcp_input+0x42c>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800cd36:	f8d6 c000 	ldr.w	ip, [r6]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cd3a:	f8d8 2000 	ldr.w	r2, [r8]
 800cd3e:	2a00      	cmp	r2, #0
 800cd40:	f000 8227 	beq.w	800d192 <tcp_input+0x832>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800cd44:	6878      	ldr	r0, [r7, #4]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cd46:	4615      	mov	r5, r2
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800cd48:	f8d7 e014 	ldr.w	lr, [r7, #20]
    prev = NULL;
 800cd4c:	2100      	movs	r1, #0
 800cd4e:	4692      	mov	sl, r2
 800cd50:	e024      	b.n	800cd9c <tcp_input+0x43c>
 800cd52:	bf00      	nop
 800cd54:	2400b80c 	.word	0x2400b80c
 800cd58:	2400b844 	.word	0x2400b844
 800cd5c:	2400b825 	.word	0x2400b825
 800cd60:	2400b81c 	.word	0x2400b81c
 800cd64:	2400b830 	.word	0x2400b830
 800cd68:	2400b808 	.word	0x2400b808
 800cd6c:	2400b83c 	.word	0x2400b83c
 800cd70:	2400b826 	.word	0x2400b826
 800cd74:	2400b820 	.word	0x2400b820
 800cd78:	2400b824 	.word	0x2400b824
 800cd7c:	2400b828 	.word	0x2400b828
 800cd80:	08013800 	.word	0x08013800
 800cd84:	08013af0 	.word	0x08013af0
 800cd88:	08011f14 	.word	0x08011f14
 800cd8c:	2400b810 	.word	0x2400b810
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cd90:	68eb      	ldr	r3, [r5, #12]
 800cd92:	4629      	mov	r1, r5
 800cd94:	461d      	mov	r5, r3
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	f000 81fb 	beq.w	800d192 <tcp_input+0x832>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800cd9c:	7a2a      	ldrb	r2, [r5, #8]
 800cd9e:	b12a      	cbz	r2, 800cdac <tcp_input+0x44c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800cda0:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 800cda4:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800cda6:	b2db      	uxtb	r3, r3
 800cda8:	429a      	cmp	r2, r3
 800cdaa:	d1f1      	bne.n	800cd90 <tcp_input+0x430>
      if (lpcb->local_port == tcphdr->dest) {
 800cdac:	f8b5 9016 	ldrh.w	r9, [r5, #22]
 800cdb0:	f8bc 3002 	ldrh.w	r3, [ip, #2]
 800cdb4:	4599      	cmp	r9, r3
 800cdb6:	d1eb      	bne.n	800cd90 <tcp_input+0x430>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800cdb8:	682b      	ldr	r3, [r5, #0]
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800cdba:	b10b      	cbz	r3, 800cdc0 <tcp_input+0x460>
 800cdbc:	4573      	cmp	r3, lr
 800cdbe:	d1e7      	bne.n	800cd90 <tcp_input+0x430>
      if (prev != NULL) {
 800cdc0:	4652      	mov	r2, sl
 800cdc2:	b121      	cbz	r1, 800cdce <tcp_input+0x46e>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800cdc4:	68eb      	ldr	r3, [r5, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800cdc6:	f8c8 5000 	str.w	r5, [r8]
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800cdca:	60cb      	str	r3, [r1, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800cdcc:	60ea      	str	r2, [r5, #12]
  if (flags & TCP_RST) {
 800cdce:	4ba8      	ldr	r3, [pc, #672]	@ (800d070 <tcp_input+0x710>)
 800cdd0:	781b      	ldrb	r3, [r3, #0]
 800cdd2:	075a      	lsls	r2, r3, #29
 800cdd4:	f53f add3 	bmi.w	800c97e <tcp_input+0x1e>
  if (flags & TCP_ACK) {
 800cdd8:	f013 0810 	ands.w	r8, r3, #16
 800cddc:	f040 826d 	bne.w	800d2ba <tcp_input+0x95a>
  } else if (flags & TCP_SYN) {
 800cde0:	0798      	lsls	r0, r3, #30
 800cde2:	f57f adcc 	bpl.w	800c97e <tcp_input+0x1e>
    npcb = tcp_alloc(pcb->prio);
 800cde6:	7d68      	ldrb	r0, [r5, #21]
 800cde8:	f7fe fcc2 	bl	800b770 <tcp_alloc>
    if (npcb == NULL) {
 800cdec:	4681      	mov	r9, r0
 800cdee:	2800      	cmp	r0, #0
 800cdf0:	f000 82ca 	beq.w	800d388 <tcp_input+0xa28>
    npcb->remote_port = tcphdr->src;
 800cdf4:	6831      	ldr	r1, [r6, #0]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800cdf6:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
    npcb->rcv_nxt = seqno + 1;
 800cdfa:	4f9e      	ldr	r7, [pc, #632]	@ (800d074 <tcp_input+0x714>)
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800cdfc:	e9c0 2300 	strd	r2, r3, [r0]
    npcb->rcv_nxt = seqno + 1;
 800ce00:	683b      	ldr	r3, [r7, #0]
    npcb->remote_port = tcphdr->src;
 800ce02:	780a      	ldrb	r2, [r1, #0]
    npcb->rcv_nxt = seqno + 1;
 800ce04:	3301      	adds	r3, #1
    npcb->remote_port = tcphdr->src;
 800ce06:	7849      	ldrb	r1, [r1, #1]
 800ce08:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    npcb->local_port = pcb->local_port;
 800ce0c:	8ae9      	ldrh	r1, [r5, #22]
    npcb->rcv_nxt = seqno + 1;
 800ce0e:	6243      	str	r3, [r0, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800ce10:	62c3      	str	r3, [r0, #44]	@ 0x2c
    npcb->state = SYN_RCVD;
 800ce12:	2303      	movs	r3, #3
    npcb->local_port = pcb->local_port;
 800ce14:	82c1      	strh	r1, [r0, #22]
    npcb->remote_port = tcphdr->src;
 800ce16:	8302      	strh	r2, [r0, #24]
    npcb->state = SYN_RCVD;
 800ce18:	7503      	strb	r3, [r0, #20]
    iss = tcp_next_iss(npcb);
 800ce1a:	f7fe ff0d 	bl	800bc38 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800ce1e:	683a      	ldr	r2, [r7, #0]
    npcb->callback_arg = pcb->callback_arg;
 800ce20:	692b      	ldr	r3, [r5, #16]
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800ce22:	3a01      	subs	r2, #1
    npcb->snd_nxt = iss;
 800ce24:	f8c9 0050 	str.w	r0, [r9, #80]	@ 0x50
    npcb->lastack = iss;
 800ce28:	f8c9 0044 	str.w	r0, [r9, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800ce2c:	f8c9 005c 	str.w	r0, [r9, #92]	@ 0x5c
    npcb->listener = pcb;
 800ce30:	f8c9 507c 	str.w	r5, [r9, #124]	@ 0x7c
    npcb->callback_arg = pcb->callback_arg;
 800ce34:	f8c9 3010 	str.w	r3, [r9, #16]
    npcb->snd_wl2 = iss;
 800ce38:	e9c9 2015 	strd	r2, r0, [r9, #84]	@ 0x54
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ce3c:	7a6b      	ldrb	r3, [r5, #9]
    TCP_REG_ACTIVE(npcb);
 800ce3e:	4a8e      	ldr	r2, [pc, #568]	@ (800d078 <tcp_input+0x718>)
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ce40:	f003 030c 	and.w	r3, r3, #12
 800ce44:	f889 3009 	strb.w	r3, [r9, #9]
    npcb->netif_idx = pcb->netif_idx;
 800ce48:	7a2b      	ldrb	r3, [r5, #8]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ce4a:	f109 0504 	add.w	r5, r9, #4
    npcb->netif_idx = pcb->netif_idx;
 800ce4e:	f889 3008 	strb.w	r3, [r9, #8]
    TCP_REG_ACTIVE(npcb);
 800ce52:	6813      	ldr	r3, [r2, #0]
 800ce54:	f8c2 9000 	str.w	r9, [r2]
 800ce58:	f8c9 300c 	str.w	r3, [r9, #12]
 800ce5c:	f001 fde4 	bl	800ea28 <tcp_timer_needed>
 800ce60:	4b86      	ldr	r3, [pc, #536]	@ (800d07c <tcp_input+0x71c>)
 800ce62:	2201      	movs	r2, #1
    tcp_parseopt(npcb);
 800ce64:	4648      	mov	r0, r9
    TCP_REG_ACTIVE(npcb);
 800ce66:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800ce68:	f7ff fcbe 	bl	800c7e8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ce6c:	6832      	ldr	r2, [r6, #0]
 800ce6e:	4643      	mov	r3, r8
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ce70:	f8b9 6032 	ldrh.w	r6, [r9, #50]	@ 0x32
 800ce74:	4628      	mov	r0, r5
    npcb->snd_wnd = tcphdr->wnd;
 800ce76:	89d2      	ldrh	r2, [r2, #14]
 800ce78:	f362 030f 	bfi	r3, r2, #0, #16
 800ce7c:	f362 431f 	bfi	r3, r2, #16, #16
 800ce80:	f8c9 3060 	str.w	r3, [r9, #96]	@ 0x60
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ce84:	f002 feb8 	bl	800fbf8 <ip4_route>
 800ce88:	462a      	mov	r2, r5
 800ce8a:	4601      	mov	r1, r0
 800ce8c:	4630      	mov	r0, r6
 800ce8e:	f7fe feef 	bl	800bc70 <tcp_eff_send_mss_netif>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ce92:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ce94:	f8a9 0032 	strh.w	r0, [r9, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ce98:	4648      	mov	r0, r9
 800ce9a:	f001 f899 	bl	800dfd0 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 800ce9e:	2800      	cmp	r0, #0
 800cea0:	f040 827d 	bne.w	800d39e <tcp_input+0xa3e>
    tcp_output(npcb);
 800cea4:	4648      	mov	r0, r9
 800cea6:	f001 faa1 	bl	800e3ec <tcp_output>
 800ceaa:	e568      	b.n	800c97e <tcp_input+0x1e>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800ceac:	079b      	lsls	r3, r3, #30
        tcp_ack_now(pcb);
 800ceae:	8b6a      	ldrh	r2, [r5, #26]
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800ceb0:	d504      	bpl.n	800cebc <tcp_input+0x55c>
 800ceb2:	7d2b      	ldrb	r3, [r5, #20]
 800ceb4:	3b02      	subs	r3, #2
 800ceb6:	2b01      	cmp	r3, #1
 800ceb8:	f200 819c 	bhi.w	800d1f4 <tcp_input+0x894>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800cebc:	06d0      	lsls	r0, r2, #27
 800cebe:	d402      	bmi.n	800cec6 <tcp_input+0x566>
    pcb->tmr = tcp_ticks;
 800cec0:	4b6f      	ldr	r3, [pc, #444]	@ (800d080 <tcp_input+0x720>)
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	622b      	str	r3, [r5, #32]
  pcb->persist_probe = 0;
 800cec6:	2300      	movs	r3, #0
  tcp_parseopt(pcb);
 800cec8:	4628      	mov	r0, r5
  pcb->persist_probe = 0;
 800ceca:	f8a5 309a 	strh.w	r3, [r5, #154]	@ 0x9a
  tcp_parseopt(pcb);
 800cece:	f7ff fc8b 	bl	800c7e8 <tcp_parseopt>
  switch (pcb->state) {
 800ced2:	7d2b      	ldrb	r3, [r5, #20]
 800ced4:	3b02      	subs	r3, #2
 800ced6:	2b07      	cmp	r3, #7
 800ced8:	f63f aeac 	bhi.w	800cc34 <tcp_input+0x2d4>
 800cedc:	e8df f003 	tbb	[pc, r3]
 800cee0:	8f041334 	.word	0x8f041334
 800cee4:	5ba80474 	.word	0x5ba80474
      tcp_receive(pcb);
 800cee8:	4628      	mov	r0, r5
 800ceea:	f7fe ffef 	bl	800becc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800ceee:	f899 3000 	ldrb.w	r3, [r9]
 800cef2:	0699      	lsls	r1, r3, #26
 800cef4:	f57f ae9e 	bpl.w	800cc34 <tcp_input+0x2d4>
        tcp_ack_now(pcb);
 800cef8:	8b6b      	ldrh	r3, [r5, #26]
 800cefa:	f043 0302 	orr.w	r3, r3, #2
 800cefe:	836b      	strh	r3, [r5, #26]
        pcb->state = CLOSE_WAIT;
 800cf00:	2307      	movs	r3, #7
 800cf02:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 800cf04:	e696      	b.n	800cc34 <tcp_input+0x2d4>
      if (flags & TCP_ACK) {
 800cf06:	4b5a      	ldr	r3, [pc, #360]	@ (800d070 <tcp_input+0x710>)
 800cf08:	781b      	ldrb	r3, [r3, #0]
 800cf0a:	06da      	lsls	r2, r3, #27
 800cf0c:	f140 8210 	bpl.w	800d330 <tcp_input+0x9d0>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800cf10:	4b5c      	ldr	r3, [pc, #368]	@ (800d084 <tcp_input+0x724>)
 800cf12:	6819      	ldr	r1, [r3, #0]
 800cf14:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800cf16:	43db      	mvns	r3, r3
 800cf18:	42cb      	cmn	r3, r1
 800cf1a:	d404      	bmi.n	800cf26 <tcp_input+0x5c6>
 800cf1c:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800cf1e:	1acb      	subs	r3, r1, r3
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	f340 8242 	ble.w	800d3aa <tcp_input+0xa4a>
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cf26:	9a05      	ldr	r2, [sp, #20]
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cf28:	6833      	ldr	r3, [r6, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cf2a:	8810      	ldrh	r0, [r2, #0]
 800cf2c:	4a51      	ldr	r2, [pc, #324]	@ (800d074 <tcp_input+0x714>)
 800cf2e:	6812      	ldr	r2, [r2, #0]
 800cf30:	4402      	add	r2, r0
 800cf32:	8818      	ldrh	r0, [r3, #0]
 800cf34:	9002      	str	r0, [sp, #8]
 800cf36:	4628      	mov	r0, r5
 800cf38:	885b      	ldrh	r3, [r3, #2]
 800cf3a:	9301      	str	r3, [sp, #4]
 800cf3c:	4b52      	ldr	r3, [pc, #328]	@ (800d088 <tcp_input+0x728>)
 800cf3e:	9300      	str	r3, [sp, #0]
 800cf40:	3304      	adds	r3, #4
 800cf42:	f001 f9d9 	bl	800e2f8 <tcp_rst>
    if (err != ERR_ABRT) {
 800cf46:	e675      	b.n	800cc34 <tcp_input+0x2d4>
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800cf48:	4b49      	ldr	r3, [pc, #292]	@ (800d070 <tcp_input+0x710>)
 800cf4a:	781a      	ldrb	r2, [r3, #0]
 800cf4c:	f002 0312 	and.w	r3, r2, #18
 800cf50:	2b12      	cmp	r3, #18
 800cf52:	f000 8153 	beq.w	800d1fc <tcp_input+0x89c>
      else if (flags & TCP_ACK) {
 800cf56:	06d1      	lsls	r1, r2, #27
 800cf58:	f57f ae6c 	bpl.w	800cc34 <tcp_input+0x2d4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cf5c:	9a05      	ldr	r2, [sp, #20]
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cf5e:	6833      	ldr	r3, [r6, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cf60:	8811      	ldrh	r1, [r2, #0]
 800cf62:	4a44      	ldr	r2, [pc, #272]	@ (800d074 <tcp_input+0x714>)
 800cf64:	8818      	ldrh	r0, [r3, #0]
 800cf66:	6812      	ldr	r2, [r2, #0]
 800cf68:	440a      	add	r2, r1
 800cf6a:	4946      	ldr	r1, [pc, #280]	@ (800d084 <tcp_input+0x724>)
 800cf6c:	6809      	ldr	r1, [r1, #0]
 800cf6e:	9002      	str	r0, [sp, #8]
 800cf70:	4628      	mov	r0, r5
 800cf72:	885b      	ldrh	r3, [r3, #2]
 800cf74:	9301      	str	r3, [sp, #4]
 800cf76:	4b44      	ldr	r3, [pc, #272]	@ (800d088 <tcp_input+0x728>)
 800cf78:	9300      	str	r3, [sp, #0]
 800cf7a:	3304      	adds	r3, #4
 800cf7c:	f001 f9bc 	bl	800e2f8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800cf80:	f895 3042 	ldrb.w	r3, [r5, #66]	@ 0x42
 800cf84:	2b05      	cmp	r3, #5
 800cf86:	f63f ae55 	bhi.w	800cc34 <tcp_input+0x2d4>
          pcb->rtime = 0;
 800cf8a:	2300      	movs	r3, #0
          tcp_rexmit_rto(pcb);
 800cf8c:	4628      	mov	r0, r5
          pcb->rtime = 0;
 800cf8e:	862b      	strh	r3, [r5, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800cf90:	f001 fc1e 	bl	800e7d0 <tcp_rexmit_rto>
    if (err != ERR_ABRT) {
 800cf94:	e64e      	b.n	800cc34 <tcp_input+0x2d4>
      tcp_receive(pcb);
 800cf96:	4628      	mov	r0, r5
 800cf98:	f7fe ff98 	bl	800becc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800cf9c:	4b34      	ldr	r3, [pc, #208]	@ (800d070 <tcp_input+0x710>)
 800cf9e:	781b      	ldrb	r3, [r3, #0]
 800cfa0:	06d9      	lsls	r1, r3, #27
 800cfa2:	f57f ae47 	bpl.w	800cc34 <tcp_input+0x2d4>
 800cfa6:	4b37      	ldr	r3, [pc, #220]	@ (800d084 <tcp_input+0x724>)
 800cfa8:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 800cfaa:	681a      	ldr	r2, [r3, #0]
        recv_flags |= TF_CLOSED;
 800cfac:	f899 3000 	ldrb.w	r3, [r9]
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800cfb0:	4291      	cmp	r1, r2
 800cfb2:	f47f ae3f 	bne.w	800cc34 <tcp_input+0x2d4>
 800cfb6:	6eea      	ldr	r2, [r5, #108]	@ 0x6c
 800cfb8:	2a00      	cmp	r2, #0
 800cfba:	f47f ae3b 	bne.w	800cc34 <tcp_input+0x2d4>
        recv_flags |= TF_CLOSED;
 800cfbe:	f043 0310 	orr.w	r3, r3, #16
 800cfc2:	f889 3000 	strb.w	r3, [r9]
    if (err != ERR_ABRT) {
 800cfc6:	e635      	b.n	800cc34 <tcp_input+0x2d4>
      tcp_receive(pcb);
 800cfc8:	4628      	mov	r0, r5
 800cfca:	f7fe ff7f 	bl	800becc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800cfce:	f899 3000 	ldrb.w	r3, [r9]
 800cfd2:	069e      	lsls	r6, r3, #26
 800cfd4:	f57f ae2e 	bpl.w	800cc34 <tcp_input+0x2d4>
        tcp_ack_now(pcb);
 800cfd8:	8b6b      	ldrh	r3, [r5, #26]
        tcp_pcb_purge(pcb);
 800cfda:	4628      	mov	r0, r5
        tcp_ack_now(pcb);
 800cfdc:	f043 0302 	orr.w	r3, r3, #2
 800cfe0:	836b      	strh	r3, [r5, #26]
        tcp_pcb_purge(pcb);
 800cfe2:	f7fd ff25 	bl	800ae30 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800cfe6:	4b24      	ldr	r3, [pc, #144]	@ (800d078 <tcp_input+0x718>)
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	42ab      	cmp	r3, r5
 800cfec:	d05a      	beq.n	800d0a4 <tcp_input+0x744>
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d05b      	beq.n	800d0aa <tcp_input+0x74a>
 800cff2:	68da      	ldr	r2, [r3, #12]
 800cff4:	42aa      	cmp	r2, r5
 800cff6:	f000 8205 	beq.w	800d404 <tcp_input+0xaa4>
 800cffa:	4613      	mov	r3, r2
 800cffc:	e7f7      	b.n	800cfee <tcp_input+0x68e>
      tcp_receive(pcb);
 800cffe:	4628      	mov	r0, r5
 800d000:	f7fe ff64 	bl	800becc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d004:	f899 3000 	ldrb.w	r3, [r9]
 800d008:	f013 0f20 	tst.w	r3, #32
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d00c:	4b18      	ldr	r3, [pc, #96]	@ (800d070 <tcp_input+0x710>)
      if (recv_flags & TF_GOT_FIN) {
 800d00e:	f000 817e 	beq.w	800d30e <tcp_input+0x9ae>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d012:	781a      	ldrb	r2, [r3, #0]
          tcp_ack_now(pcb);
 800d014:	8b6b      	ldrh	r3, [r5, #26]
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d016:	06d2      	lsls	r2, r2, #27
          tcp_ack_now(pcb);
 800d018:	f043 0302 	orr.w	r3, r3, #2
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d01c:	d504      	bpl.n	800d028 <tcp_input+0x6c8>
 800d01e:	4a19      	ldr	r2, [pc, #100]	@ (800d084 <tcp_input+0x724>)
 800d020:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 800d022:	6812      	ldr	r2, [r2, #0]
 800d024:	4291      	cmp	r1, r2
 800d026:	d031      	beq.n	800d08c <tcp_input+0x72c>
          tcp_ack_now(pcb);
 800d028:	836b      	strh	r3, [r5, #26]
          pcb->state = CLOSING;
 800d02a:	2308      	movs	r3, #8
 800d02c:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 800d02e:	e601      	b.n	800cc34 <tcp_input+0x2d4>
      tcp_receive(pcb);
 800d030:	4628      	mov	r0, r5
 800d032:	f7fe ff4b 	bl	800becc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d036:	4b0e      	ldr	r3, [pc, #56]	@ (800d070 <tcp_input+0x710>)
 800d038:	781b      	ldrb	r3, [r3, #0]
 800d03a:	06d8      	lsls	r0, r3, #27
 800d03c:	f57f adfa 	bpl.w	800cc34 <tcp_input+0x2d4>
 800d040:	4b10      	ldr	r3, [pc, #64]	@ (800d084 <tcp_input+0x724>)
 800d042:	6d2a      	ldr	r2, [r5, #80]	@ 0x50
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	429a      	cmp	r2, r3
 800d048:	f47f adf4 	bne.w	800cc34 <tcp_input+0x2d4>
 800d04c:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 800d04e:	2b00      	cmp	r3, #0
 800d050:	f47f adf0 	bne.w	800cc34 <tcp_input+0x2d4>
        tcp_pcb_purge(pcb);
 800d054:	4628      	mov	r0, r5
 800d056:	f7fd feeb 	bl	800ae30 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d05a:	4b07      	ldr	r3, [pc, #28]	@ (800d078 <tcp_input+0x718>)
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	42ab      	cmp	r3, r5
 800d060:	d020      	beq.n	800d0a4 <tcp_input+0x744>
 800d062:	b313      	cbz	r3, 800d0aa <tcp_input+0x74a>
 800d064:	68da      	ldr	r2, [r3, #12]
 800d066:	42aa      	cmp	r2, r5
 800d068:	f000 81cc 	beq.w	800d404 <tcp_input+0xaa4>
 800d06c:	4613      	mov	r3, r2
 800d06e:	e7f8      	b.n	800d062 <tcp_input+0x702>
 800d070:	2400b825 	.word	0x2400b825
 800d074:	2400b830 	.word	0x2400b830
 800d078:	2400b80c 	.word	0x2400b80c
 800d07c:	2400b807 	.word	0x2400b807
 800d080:	2400b818 	.word	0x2400b818
 800d084:	2400b82c 	.word	0x2400b82c
 800d088:	24004d58 	.word	0x24004d58
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d08c:	6eea      	ldr	r2, [r5, #108]	@ 0x6c
 800d08e:	2a00      	cmp	r2, #0
 800d090:	d1ca      	bne.n	800d028 <tcp_input+0x6c8>
          tcp_ack_now(pcb);
 800d092:	836b      	strh	r3, [r5, #26]
          tcp_pcb_purge(pcb);
 800d094:	4628      	mov	r0, r5
 800d096:	f7fd fecb 	bl	800ae30 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800d09a:	4bac      	ldr	r3, [pc, #688]	@ (800d34c <tcp_input+0x9ec>)
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	42ab      	cmp	r3, r5
 800d0a0:	f040 81e0 	bne.w	800d464 <tcp_input+0xb04>
        TCP_RMV_ACTIVE(pcb);
 800d0a4:	68eb      	ldr	r3, [r5, #12]
 800d0a6:	4aa9      	ldr	r2, [pc, #676]	@ (800d34c <tcp_input+0x9ec>)
 800d0a8:	6013      	str	r3, [r2, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d0aa:	4ba9      	ldr	r3, [pc, #676]	@ (800d350 <tcp_input+0x9f0>)
        pcb->state = TIME_WAIT;
 800d0ac:	220a      	movs	r2, #10
 800d0ae:	752a      	strb	r2, [r5, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d0b0:	681a      	ldr	r2, [r3, #0]
 800d0b2:	601d      	str	r5, [r3, #0]
 800d0b4:	60ea      	str	r2, [r5, #12]
        TCP_RMV_ACTIVE(pcb);
 800d0b6:	2201      	movs	r2, #1
 800d0b8:	4ba6      	ldr	r3, [pc, #664]	@ (800d354 <tcp_input+0x9f4>)
 800d0ba:	701a      	strb	r2, [r3, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d0bc:	f001 fcb4 	bl	800ea28 <tcp_timer_needed>
    if (err != ERR_ABRT) {
 800d0c0:	e5b8      	b.n	800cc34 <tcp_input+0x2d4>
    tcp_input_pcb = pcb;
 800d0c2:	4ca5      	ldr	r4, [pc, #660]	@ (800d358 <tcp_input+0x9f8>)
 800d0c4:	6025      	str	r5, [r4, #0]
  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800d0c6:	e5a1      	b.n	800cc0c <tcp_input+0x2ac>
        if (pcb->rcv_ann_wnd == 0) {
 800d0c8:	8d6b      	ldrh	r3, [r5, #42]	@ 0x2a
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	f000 808d 	beq.w	800d1ea <tcp_input+0x88a>
 800d0d0:	4ca1      	ldr	r4, [pc, #644]	@ (800d358 <tcp_input+0x9f8>)
 800d0d2:	e5c2      	b.n	800cc5a <tcp_input+0x2fa>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800d0d4:	4ba1      	ldr	r3, [pc, #644]	@ (800d35c <tcp_input+0x9fc>)
 800d0d6:	22c2      	movs	r2, #194	@ 0xc2
 800d0d8:	49a1      	ldr	r1, [pc, #644]	@ (800d360 <tcp_input+0xa00>)
 800d0da:	48a2      	ldr	r0, [pc, #648]	@ (800d364 <tcp_input+0xa04>)
 800d0dc:	f003 fdbe 	bl	8010c5c <iprintf>
 800d0e0:	e47f      	b.n	800c9e2 <tcp_input+0x82>
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800d0e2:	4b9e      	ldr	r3, [pc, #632]	@ (800d35c <tcp_input+0x9fc>)
 800d0e4:	22df      	movs	r2, #223	@ 0xdf
 800d0e6:	49a0      	ldr	r1, [pc, #640]	@ (800d368 <tcp_input+0xa08>)
 800d0e8:	489e      	ldr	r0, [pc, #632]	@ (800d364 <tcp_input+0xa04>)
 800d0ea:	f003 fdb7 	bl	8010c5c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800d0ee:	8923      	ldrh	r3, [r4, #8]
 800d0f0:	e49c      	b.n	800ca2c <tcp_input+0xcc>
        if (recv_acked > 0) {
 800d0f2:	f8ba 2000 	ldrh.w	r2, [sl]
 800d0f6:	b15a      	cbz	r2, 800d110 <tcp_input+0x7b0>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800d0f8:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 800d0fc:	b12b      	cbz	r3, 800d10a <tcp_input+0x7aa>
 800d0fe:	4629      	mov	r1, r5
 800d100:	6928      	ldr	r0, [r5, #16]
 800d102:	4798      	blx	r3
            if (err == ERR_ABRT) {
 800d104:	300d      	adds	r0, #13
 800d106:	f43f ada8 	beq.w	800cc5a <tcp_input+0x2fa>
          recv_acked = 0;
 800d10a:	2300      	movs	r3, #0
 800d10c:	f8aa 3000 	strh.w	r3, [sl]
        if (tcp_input_delayed_close(pcb)) {
 800d110:	4628      	mov	r0, r5
 800d112:	f7fe fe55 	bl	800bdc0 <tcp_input_delayed_close>
 800d116:	2800      	cmp	r0, #0
 800d118:	f47f ad9f 	bne.w	800cc5a <tcp_input+0x2fa>
        if (recv_data != NULL) {
 800d11c:	f8d8 2000 	ldr.w	r2, [r8]
 800d120:	b1fa      	cbz	r2, 800d162 <tcp_input+0x802>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800d122:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 800d124:	b143      	cbz	r3, 800d138 <tcp_input+0x7d8>
 800d126:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800d12a:	4b8c      	ldr	r3, [pc, #560]	@ (800d35c <tcp_input+0x9fc>)
 800d12c:	498f      	ldr	r1, [pc, #572]	@ (800d36c <tcp_input+0xa0c>)
 800d12e:	488d      	ldr	r0, [pc, #564]	@ (800d364 <tcp_input+0xa04>)
 800d130:	f003 fd94 	bl	8010c5c <iprintf>
            pbuf_free(recv_data);
 800d134:	f8d8 2000 	ldr.w	r2, [r8]
          if (pcb->flags & TF_RXCLOSED) {
 800d138:	8b6b      	ldrh	r3, [r5, #26]
 800d13a:	f013 0310 	ands.w	r3, r3, #16
 800d13e:	f040 80df 	bne.w	800d300 <tcp_input+0x9a0>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800d142:	f8d5 6084 	ldr.w	r6, [r5, #132]	@ 0x84
 800d146:	2e00      	cmp	r6, #0
 800d148:	f000 8118 	beq.w	800d37c <tcp_input+0xa1c>
 800d14c:	4629      	mov	r1, r5
 800d14e:	6928      	ldr	r0, [r5, #16]
 800d150:	47b0      	blx	r6
          if (err == ERR_ABRT) {
 800d152:	f110 0f0d 	cmn.w	r0, #13
 800d156:	f43f ad80 	beq.w	800cc5a <tcp_input+0x2fa>
          if (err != ERR_OK) {
 800d15a:	b110      	cbz	r0, 800d162 <tcp_input+0x802>
            pcb->refused_data = recv_data;
 800d15c:	f8d8 3000 	ldr.w	r3, [r8]
 800d160:	67ab      	str	r3, [r5, #120]	@ 0x78
        if (recv_flags & TF_GOT_FIN) {
 800d162:	f899 3000 	ldrb.w	r3, [r9]
 800d166:	069b      	lsls	r3, r3, #26
 800d168:	d507      	bpl.n	800d17a <tcp_input+0x81a>
          if (pcb->refused_data != NULL) {
 800d16a:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	f000 80b2 	beq.w	800d2d6 <tcp_input+0x976>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800d172:	7b5a      	ldrb	r2, [r3, #13]
 800d174:	f042 0220 	orr.w	r2, r2, #32
 800d178:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 800d17a:	2300      	movs	r3, #0
        if (tcp_input_delayed_close(pcb)) {
 800d17c:	4628      	mov	r0, r5
        tcp_input_pcb = NULL;
 800d17e:	6023      	str	r3, [r4, #0]
        if (tcp_input_delayed_close(pcb)) {
 800d180:	f7fe fe1e 	bl	800bdc0 <tcp_input_delayed_close>
 800d184:	2800      	cmp	r0, #0
 800d186:	f47f ad68 	bne.w	800cc5a <tcp_input+0x2fa>
        tcp_output(pcb);
 800d18a:	4628      	mov	r0, r5
 800d18c:	f001 f92e 	bl	800e3ec <tcp_output>
 800d190:	e563      	b.n	800cc5a <tcp_input+0x2fa>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800d192:	f8bc 000c 	ldrh.w	r0, [ip, #12]
 800d196:	f7fc f89d 	bl	80092d4 <lwip_htons>
 800d19a:	f010 0004 	ands.w	r0, r0, #4
 800d19e:	f47f abee 	bne.w	800c97e <tcp_input+0x1e>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d1a2:	9a05      	ldr	r2, [sp, #20]
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d1a4:	6833      	ldr	r3, [r6, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d1a6:	8811      	ldrh	r1, [r2, #0]
 800d1a8:	4a71      	ldr	r2, [pc, #452]	@ (800d370 <tcp_input+0xa10>)
 800d1aa:	881d      	ldrh	r5, [r3, #0]
 800d1ac:	6812      	ldr	r2, [r2, #0]
 800d1ae:	440a      	add	r2, r1
 800d1b0:	4970      	ldr	r1, [pc, #448]	@ (800d374 <tcp_input+0xa14>)
 800d1b2:	6809      	ldr	r1, [r1, #0]
 800d1b4:	9502      	str	r5, [sp, #8]
 800d1b6:	885b      	ldrh	r3, [r3, #2]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d1b8:	9301      	str	r3, [sp, #4]
 800d1ba:	4b6f      	ldr	r3, [pc, #444]	@ (800d378 <tcp_input+0xa18>)
 800d1bc:	9300      	str	r3, [sp, #0]
 800d1be:	3304      	adds	r3, #4
 800d1c0:	f001 f89a 	bl	800e2f8 <tcp_rst>
 800d1c4:	f7ff bbdb 	b.w	800c97e <tcp_input+0x1e>
      if (ackno == pcb->snd_nxt) {
 800d1c8:	4b6a      	ldr	r3, [pc, #424]	@ (800d374 <tcp_input+0xa14>)
 800d1ca:	6d2a      	ldr	r2, [r5, #80]	@ 0x50
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	429a      	cmp	r2, r3
 800d1d0:	f47f ad30 	bne.w	800cc34 <tcp_input+0x2d4>
      recv_flags |= TF_RESET;
 800d1d4:	f899 3000 	ldrb.w	r3, [r9]
 800d1d8:	f043 0308 	orr.w	r3, r3, #8
 800d1dc:	f889 3000 	strb.w	r3, [r9]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800d1e0:	8b6b      	ldrh	r3, [r5, #26]
 800d1e2:	f023 0301 	bic.w	r3, r3, #1
 800d1e6:	836b      	strh	r3, [r5, #26]
    if (err != ERR_ABRT) {
 800d1e8:	e524      	b.n	800cc34 <tcp_input+0x2d4>
          tcp_send_empty_ack(pcb);
 800d1ea:	4628      	mov	r0, r5
 800d1ec:	4c5a      	ldr	r4, [pc, #360]	@ (800d358 <tcp_input+0x9f8>)
 800d1ee:	f001 f8cb 	bl	800e388 <tcp_send_empty_ack>
 800d1f2:	e532      	b.n	800cc5a <tcp_input+0x2fa>
    tcp_ack_now(pcb);
 800d1f4:	f042 0202 	orr.w	r2, r2, #2
 800d1f8:	836a      	strh	r2, [r5, #26]
    if (err != ERR_ABRT) {
 800d1fa:	e51b      	b.n	800cc34 <tcp_input+0x2d4>
          && (ackno == pcb->lastack + 1)) {
 800d1fc:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800d1fe:	495d      	ldr	r1, [pc, #372]	@ (800d374 <tcp_input+0xa14>)
 800d200:	3301      	adds	r3, #1
 800d202:	6809      	ldr	r1, [r1, #0]
 800d204:	428b      	cmp	r3, r1
 800d206:	f47f aea6 	bne.w	800cf56 <tcp_input+0x5f6>
        pcb->lastack = ackno;
 800d20a:	646b      	str	r3, [r5, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800d20c:	2200      	movs	r2, #0
        pcb->rcv_nxt = seqno + 1;
 800d20e:	4b58      	ldr	r3, [pc, #352]	@ (800d370 <tcp_input+0xa10>)
        pcb->snd_wnd = tcphdr->wnd;
 800d210:	6830      	ldr	r0, [r6, #0]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d212:	1d2e      	adds	r6, r5, #4
        pcb->rcv_nxt = seqno + 1;
 800d214:	681b      	ldr	r3, [r3, #0]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d216:	f8b5 b032 	ldrh.w	fp, [r5, #50]	@ 0x32
        pcb->rcv_nxt = seqno + 1;
 800d21a:	1c59      	adds	r1, r3, #1
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800d21c:	3b01      	subs	r3, #1
        pcb->rcv_nxt = seqno + 1;
 800d21e:	6269      	str	r1, [r5, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800d220:	62e9      	str	r1, [r5, #44]	@ 0x2c
        pcb->snd_wnd = tcphdr->wnd;
 800d222:	89c1      	ldrh	r1, [r0, #14]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d224:	4630      	mov	r0, r6
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800d226:	656b      	str	r3, [r5, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800d228:	2304      	movs	r3, #4
        pcb->snd_wnd = tcphdr->wnd;
 800d22a:	f361 020f 	bfi	r2, r1, #0, #16
        pcb->state = ESTABLISHED;
 800d22e:	752b      	strb	r3, [r5, #20]
        pcb->snd_wnd = tcphdr->wnd;
 800d230:	f361 421f 	bfi	r2, r1, #16, #16
 800d234:	662a      	str	r2, [r5, #96]	@ 0x60
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d236:	f002 fcdf 	bl	800fbf8 <ip4_route>
 800d23a:	4632      	mov	r2, r6
 800d23c:	4601      	mov	r1, r0
 800d23e:	4658      	mov	r0, fp
 800d240:	f7fe fd16 	bl	800bc70 <tcp_eff_send_mss_netif>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d244:	f241 131c 	movw	r3, #4380	@ 0x111c
 800d248:	0041      	lsls	r1, r0, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d24a:	4602      	mov	r2, r0
 800d24c:	8668      	strh	r0, [r5, #50]	@ 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d24e:	0080      	lsls	r0, r0, #2
 800d250:	4299      	cmp	r1, r3
 800d252:	460e      	mov	r6, r1
 800d254:	bf38      	it	cc
 800d256:	461e      	movcc	r6, r3
 800d258:	ebb6 0f82 	cmp.w	r6, r2, lsl #2
 800d25c:	f240 8130 	bls.w	800d4c0 <tcp_input+0xb60>
 800d260:	b283      	uxth	r3, r0
 800d262:	f8a5 3048 	strh.w	r3, [r5, #72]	@ 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800d266:	f8b5 3066 	ldrh.w	r3, [r5, #102]	@ 0x66
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	f000 8120 	beq.w	800d4b0 <tcp_input+0xb50>
        --pcb->snd_queuelen;
 800d270:	f8b5 3066 	ldrh.w	r3, [r5, #102]	@ 0x66
        rseg = pcb->unacked;
 800d274:	6f2e      	ldr	r6, [r5, #112]	@ 0x70
        --pcb->snd_queuelen;
 800d276:	3b01      	subs	r3, #1
 800d278:	f8a5 3066 	strh.w	r3, [r5, #102]	@ 0x66
        if (rseg == NULL) {
 800d27c:	2e00      	cmp	r6, #0
 800d27e:	f000 8112 	beq.w	800d4a6 <tcp_input+0xb46>
          pcb->unacked = rseg->next;
 800d282:	6833      	ldr	r3, [r6, #0]
 800d284:	672b      	str	r3, [r5, #112]	@ 0x70
        tcp_seg_free(rseg);
 800d286:	4630      	mov	r0, r6
 800d288:	f7fd fd14 	bl	800acb4 <tcp_seg_free>
        if (pcb->unacked == NULL) {
 800d28c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800d28e:	2b00      	cmp	r3, #0
 800d290:	f000 8106 	beq.w	800d4a0 <tcp_input+0xb40>
          pcb->nrtx = 0;
 800d294:	2300      	movs	r3, #0
 800d296:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
 800d29a:	862b      	strh	r3, [r5, #48]	@ 0x30
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800d29c:	f8d5 3088 	ldr.w	r3, [r5, #136]	@ 0x88
 800d2a0:	b133      	cbz	r3, 800d2b0 <tcp_input+0x950>
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	4629      	mov	r1, r5
 800d2a6:	6928      	ldr	r0, [r5, #16]
 800d2a8:	4798      	blx	r3
        if (err == ERR_ABRT) {
 800d2aa:	300d      	adds	r0, #13
 800d2ac:	f43f acd5 	beq.w	800cc5a <tcp_input+0x2fa>
        tcp_ack_now(pcb);
 800d2b0:	8b6b      	ldrh	r3, [r5, #26]
 800d2b2:	f043 0302 	orr.w	r3, r3, #2
 800d2b6:	836b      	strh	r3, [r5, #26]
    if (err != ERR_ABRT) {
 800d2b8:	e4bc      	b.n	800cc34 <tcp_input+0x2d4>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d2ba:	9b05      	ldr	r3, [sp, #20]
 800d2bc:	4628      	mov	r0, r5
 800d2be:	881a      	ldrh	r2, [r3, #0]
 800d2c0:	4b2b      	ldr	r3, [pc, #172]	@ (800d370 <tcp_input+0xa10>)
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	441a      	add	r2, r3
 800d2c6:	4b2b      	ldr	r3, [pc, #172]	@ (800d374 <tcp_input+0xa14>)
 800d2c8:	6819      	ldr	r1, [r3, #0]
 800d2ca:	f8bc 3000 	ldrh.w	r3, [ip]
 800d2ce:	9302      	str	r3, [sp, #8]
 800d2d0:	f8bc 3002 	ldrh.w	r3, [ip, #2]
 800d2d4:	e770      	b.n	800d1b8 <tcp_input+0x858>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d2d6:	8d2b      	ldrh	r3, [r5, #40]	@ 0x28
 800d2d8:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800d2dc:	4293      	cmp	r3, r2
 800d2de:	d001      	beq.n	800d2e4 <tcp_input+0x984>
              pcb->rcv_wnd++;
 800d2e0:	3301      	adds	r3, #1
 800d2e2:	852b      	strh	r3, [r5, #40]	@ 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800d2e4:	f8d5 6084 	ldr.w	r6, [r5, #132]	@ 0x84
 800d2e8:	2e00      	cmp	r6, #0
 800d2ea:	f43f af46 	beq.w	800d17a <tcp_input+0x81a>
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	4629      	mov	r1, r5
 800d2f2:	6928      	ldr	r0, [r5, #16]
 800d2f4:	461a      	mov	r2, r3
 800d2f6:	47b0      	blx	r6
            if (err == ERR_ABRT) {
 800d2f8:	300d      	adds	r0, #13
 800d2fa:	f47f af3e 	bne.w	800d17a <tcp_input+0x81a>
 800d2fe:	e4ac      	b.n	800cc5a <tcp_input+0x2fa>
            pbuf_free(recv_data);
 800d300:	4610      	mov	r0, r2
 800d302:	f7fc febb 	bl	800a07c <pbuf_free>
            tcp_abort(pcb);
 800d306:	4628      	mov	r0, r5
 800d308:	f7fe f9ca 	bl	800b6a0 <tcp_abort>
            goto aborted;
 800d30c:	e4a5      	b.n	800cc5a <tcp_input+0x2fa>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d30e:	781b      	ldrb	r3, [r3, #0]
 800d310:	06db      	lsls	r3, r3, #27
 800d312:	f57f ac8f 	bpl.w	800cc34 <tcp_input+0x2d4>
 800d316:	4b17      	ldr	r3, [pc, #92]	@ (800d374 <tcp_input+0xa14>)
 800d318:	6d2a      	ldr	r2, [r5, #80]	@ 0x50
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	429a      	cmp	r2, r3
 800d31e:	f47f ac89 	bne.w	800cc34 <tcp_input+0x2d4>
 800d322:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 800d324:	2b00      	cmp	r3, #0
 800d326:	f47f ac85 	bne.w	800cc34 <tcp_input+0x2d4>
        pcb->state = FIN_WAIT_2;
 800d32a:	2306      	movs	r3, #6
 800d32c:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 800d32e:	e481      	b.n	800cc34 <tcp_input+0x2d4>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800d330:	0798      	lsls	r0, r3, #30
 800d332:	f57f ac7f 	bpl.w	800cc34 <tcp_input+0x2d4>
 800d336:	4b0e      	ldr	r3, [pc, #56]	@ (800d370 <tcp_input+0xa10>)
 800d338:	681a      	ldr	r2, [r3, #0]
 800d33a:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800d33c:	3b01      	subs	r3, #1
 800d33e:	4293      	cmp	r3, r2
 800d340:	f47f ac78 	bne.w	800cc34 <tcp_input+0x2d4>
        tcp_rexmit(pcb);
 800d344:	4628      	mov	r0, r5
 800d346:	f000 ff59 	bl	800e1fc <tcp_rexmit>
    if (err != ERR_ABRT) {
 800d34a:	e473      	b.n	800cc34 <tcp_input+0x2d4>
 800d34c:	2400b80c 	.word	0x2400b80c
 800d350:	2400b808 	.word	0x2400b808
 800d354:	2400b807 	.word	0x2400b807
 800d358:	2400b81c 	.word	0x2400b81c
 800d35c:	08013800 	.word	0x08013800
 800d360:	080139e0 	.word	0x080139e0
 800d364:	08011f14 	.word	0x08011f14
 800d368:	080139f0 	.word	0x080139f0
 800d36c:	08013b8c 	.word	0x08013b8c
 800d370:	2400b830 	.word	0x2400b830
 800d374:	2400b82c 	.word	0x2400b82c
 800d378:	24004d58 	.word	0x24004d58
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800d37c:	4633      	mov	r3, r6
 800d37e:	4630      	mov	r0, r6
 800d380:	4629      	mov	r1, r5
 800d382:	f7fe fb8f 	bl	800baa4 <tcp_recv_null>
 800d386:	e6e4      	b.n	800d152 <tcp_input+0x7f2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d388:	69ab      	ldr	r3, [r5, #24]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	f43f aaf7 	beq.w	800c97e <tcp_input+0x1e>
 800d390:	4601      	mov	r1, r0
 800d392:	f04f 32ff 	mov.w	r2, #4294967295
 800d396:	6928      	ldr	r0, [r5, #16]
 800d398:	4798      	blx	r3
 800d39a:	f7ff baf0 	b.w	800c97e <tcp_input+0x1e>
      tcp_abandon(npcb, 0);
 800d39e:	4641      	mov	r1, r8
 800d3a0:	4648      	mov	r0, r9
 800d3a2:	f7fe f8a7 	bl	800b4f4 <tcp_abandon>
      return;
 800d3a6:	f7ff baea 	b.w	800c97e <tcp_input+0x1e>
          pcb->state = ESTABLISHED;
 800d3aa:	2304      	movs	r3, #4
 800d3ac:	752b      	strb	r3, [r5, #20]
          if (pcb->listener == NULL) {
 800d3ae:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d0a8      	beq.n	800d306 <tcp_input+0x9a6>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800d3b4:	699b      	ldr	r3, [r3, #24]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d05c      	beq.n	800d474 <tcp_input+0xb14>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	4629      	mov	r1, r5
 800d3be:	6928      	ldr	r0, [r5, #16]
 800d3c0:	4798      	blx	r3
          if (err != ERR_OK) {
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	2800      	cmp	r0, #0
 800d3c6:	d167      	bne.n	800d498 <tcp_input+0xb38>
          tcp_receive(pcb);
 800d3c8:	4628      	mov	r0, r5
 800d3ca:	f7fe fd7f 	bl	800becc <tcp_receive>
          if (recv_acked != 0) {
 800d3ce:	f8ba 3000 	ldrh.w	r3, [sl]
 800d3d2:	b113      	cbz	r3, 800d3da <tcp_input+0xa7a>
            recv_acked--;
 800d3d4:	3b01      	subs	r3, #1
 800d3d6:	f8aa 3000 	strh.w	r3, [sl]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d3da:	8e69      	ldrh	r1, [r5, #50]	@ 0x32
 800d3dc:	f241 131c 	movw	r3, #4380	@ 0x111c
 800d3e0:	004a      	lsls	r2, r1, #1
 800d3e2:	0088      	lsls	r0, r1, #2
 800d3e4:	429a      	cmp	r2, r3
 800d3e6:	4616      	mov	r6, r2
 800d3e8:	bf38      	it	cc
 800d3ea:	461e      	movcc	r6, r3
 800d3ec:	ebb6 0f81 	cmp.w	r6, r1, lsl #2
 800d3f0:	d934      	bls.n	800d45c <tcp_input+0xafc>
 800d3f2:	b283      	uxth	r3, r0
 800d3f4:	f8a5 3048 	strh.w	r3, [r5, #72]	@ 0x48
          if (recv_flags & TF_GOT_FIN) {
 800d3f8:	f899 3000 	ldrb.w	r3, [r9]
 800d3fc:	069e      	lsls	r6, r3, #26
 800d3fe:	f57f ac19 	bpl.w	800cc34 <tcp_input+0x2d4>
 800d402:	e579      	b.n	800cef8 <tcp_input+0x598>
        TCP_RMV_ACTIVE(pcb);
 800d404:	68ea      	ldr	r2, [r5, #12]
 800d406:	60da      	str	r2, [r3, #12]
 800d408:	e64f      	b.n	800d0aa <tcp_input+0x74a>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800d40a:	4b33      	ldr	r3, [pc, #204]	@ (800d4d8 <tcp_input+0xb78>)
 800d40c:	f240 120d 	movw	r2, #269	@ 0x10d
 800d410:	4932      	ldr	r1, [pc, #200]	@ (800d4dc <tcp_input+0xb7c>)
 800d412:	4833      	ldr	r0, [pc, #204]	@ (800d4e0 <tcp_input+0xb80>)
 800d414:	f003 fc22 	bl	8010c5c <iprintf>
      if (prev != NULL) {
 800d418:	f1b8 0f00 	cmp.w	r8, #0
 800d41c:	f43f abc1 	beq.w	800cba2 <tcp_input+0x242>
 800d420:	68eb      	ldr	r3, [r5, #12]
 800d422:	f7ff bbb8 	b.w	800cb96 <tcp_input+0x236>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800d426:	4b2c      	ldr	r3, [pc, #176]	@ (800d4d8 <tcp_input+0xb78>)
 800d428:	f240 1215 	movw	r2, #277	@ 0x115
 800d42c:	492d      	ldr	r1, [pc, #180]	@ (800d4e4 <tcp_input+0xb84>)
 800d42e:	482c      	ldr	r0, [pc, #176]	@ (800d4e0 <tcp_input+0xb80>)
 800d430:	f003 fc14 	bl	8010c5c <iprintf>
  if (pcb == NULL) {
 800d434:	f7ff bbb9 	b.w	800cbaa <tcp_input+0x24a>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800d438:	2900      	cmp	r1, #0
 800d43a:	f47f aecb 	bne.w	800d1d4 <tcp_input+0x874>
 800d43e:	4b26      	ldr	r3, [pc, #152]	@ (800d4d8 <tcp_input+0xb78>)
 800d440:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800d444:	4928      	ldr	r1, [pc, #160]	@ (800d4e8 <tcp_input+0xb88>)
 800d446:	4826      	ldr	r0, [pc, #152]	@ (800d4e0 <tcp_input+0xb80>)
 800d448:	f003 fc08 	bl	8010c5c <iprintf>
 800d44c:	e6c2      	b.n	800d1d4 <tcp_input+0x874>
  } else if (flags & TCP_FIN) {
 800d44e:	07c1      	lsls	r1, r0, #31
 800d450:	f57f ac55 	bpl.w	800ccfe <tcp_input+0x39e>
    pcb->tmr = tcp_ticks;
 800d454:	4b25      	ldr	r3, [pc, #148]	@ (800d4ec <tcp_input+0xb8c>)
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	622b      	str	r3, [r5, #32]
 800d45a:	e450      	b.n	800ccfe <tcp_input+0x39e>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d45c:	429a      	cmp	r2, r3
 800d45e:	bf88      	it	hi
 800d460:	b293      	uxthhi	r3, r2
 800d462:	e7c7      	b.n	800d3f4 <tcp_input+0xa94>
          TCP_RMV_ACTIVE(pcb);
 800d464:	2b00      	cmp	r3, #0
 800d466:	f43f ae20 	beq.w	800d0aa <tcp_input+0x74a>
 800d46a:	68da      	ldr	r2, [r3, #12]
 800d46c:	42aa      	cmp	r2, r5
 800d46e:	d0c9      	beq.n	800d404 <tcp_input+0xaa4>
 800d470:	4613      	mov	r3, r2
 800d472:	e7f7      	b.n	800d464 <tcp_input+0xb04>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800d474:	4b18      	ldr	r3, [pc, #96]	@ (800d4d8 <tcp_input+0xb78>)
 800d476:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800d47a:	491d      	ldr	r1, [pc, #116]	@ (800d4f0 <tcp_input+0xb90>)
 800d47c:	4818      	ldr	r0, [pc, #96]	@ (800d4e0 <tcp_input+0xb80>)
 800d47e:	f003 fbed 	bl	8010c5c <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800d482:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 800d484:	699b      	ldr	r3, [r3, #24]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d197      	bne.n	800d3ba <tcp_input+0xa5a>
 800d48a:	e73c      	b.n	800d306 <tcp_input+0x9a6>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d48c:	9102      	str	r1, [sp, #8]
 800d48e:	4432      	add	r2, r6
 800d490:	4918      	ldr	r1, [pc, #96]	@ (800d4f4 <tcp_input+0xb94>)
 800d492:	4628      	mov	r0, r5
 800d494:	6809      	ldr	r1, [r1, #0]
 800d496:	e68f      	b.n	800d1b8 <tcp_input+0x858>
            if (err != ERR_ABRT) {
 800d498:	330d      	adds	r3, #13
 800d49a:	f43f abde 	beq.w	800cc5a <tcp_input+0x2fa>
 800d49e:	e732      	b.n	800d306 <tcp_input+0x9a6>
          pcb->rtime = -1;
 800d4a0:	f04f 33ff 	mov.w	r3, #4294967295
 800d4a4:	e6f9      	b.n	800d29a <tcp_input+0x93a>
          rseg = pcb->unsent;
 800d4a6:	6eee      	ldr	r6, [r5, #108]	@ 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800d4a8:	b176      	cbz	r6, 800d4c8 <tcp_input+0xb68>
          pcb->unsent = rseg->next;
 800d4aa:	6833      	ldr	r3, [r6, #0]
 800d4ac:	66eb      	str	r3, [r5, #108]	@ 0x6c
 800d4ae:	e6ea      	b.n	800d286 <tcp_input+0x926>
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800d4b0:	4b09      	ldr	r3, [pc, #36]	@ (800d4d8 <tcp_input+0xb78>)
 800d4b2:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800d4b6:	4910      	ldr	r1, [pc, #64]	@ (800d4f8 <tcp_input+0xb98>)
 800d4b8:	4809      	ldr	r0, [pc, #36]	@ (800d4e0 <tcp_input+0xb80>)
 800d4ba:	f003 fbcf 	bl	8010c5c <iprintf>
 800d4be:	e6d7      	b.n	800d270 <tcp_input+0x910>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d4c0:	4299      	cmp	r1, r3
 800d4c2:	bf88      	it	hi
 800d4c4:	b28b      	uxthhi	r3, r1
 800d4c6:	e6cc      	b.n	800d262 <tcp_input+0x902>
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800d4c8:	4b03      	ldr	r3, [pc, #12]	@ (800d4d8 <tcp_input+0xb78>)
 800d4ca:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800d4ce:	490b      	ldr	r1, [pc, #44]	@ (800d4fc <tcp_input+0xb9c>)
 800d4d0:	4803      	ldr	r0, [pc, #12]	@ (800d4e0 <tcp_input+0xb80>)
 800d4d2:	f003 fbc3 	bl	8010c5c <iprintf>
 800d4d6:	e7e8      	b.n	800d4aa <tcp_input+0xb4a>
 800d4d8:	08013800 	.word	0x08013800
 800d4dc:	08013a98 	.word	0x08013a98
 800d4e0:	08011f14 	.word	0x08011f14
 800d4e4:	08013ac4 	.word	0x08013ac4
 800d4e8:	08013b20 	.word	0x08013b20
 800d4ec:	2400b818 	.word	0x2400b818
 800d4f0:	08013b6c 	.word	0x08013b6c
 800d4f4:	2400b82c 	.word	0x2400b82c
 800d4f8:	08013b40 	.word	0x08013b40
 800d4fc:	08013b58 	.word	0x08013b58

0800d500 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 800d500:	4a02      	ldr	r2, [pc, #8]	@ (800d50c <tcp_trigger_input_pcb_close+0xc>)
 800d502:	7813      	ldrb	r3, [r2, #0]
 800d504:	f043 0310 	orr.w	r3, r3, #16
 800d508:	7013      	strb	r3, [r2, #0]
}
 800d50a:	4770      	bx	lr
 800d50c:	2400b824 	.word	0x2400b824

0800d510 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800d510:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d514:	2600      	movs	r6, #0
 800d516:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 800d518:	460c      	mov	r4, r1
 800d51a:	4681      	mov	r9, r0
 800d51c:	f361 060f 	bfi	r6, r1, #0, #16
 800d520:	4615      	mov	r5, r2
 800d522:	4698      	mov	r8, r3
 800d524:	f89d a02c 	ldrb.w	sl, [sp, #44]	@ 0x2c
 800d528:	f361 461f 	bfi	r6, r1, #16, #16
 800d52c:	f89d b030 	ldrb.w	fp, [sp, #48]	@ 0x30
  struct pbuf *p;
  u16_t alloc = length;

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800d530:	2f00      	cmp	r7, #0
 800d532:	d033      	beq.n	800d59c <tcp_pbuf_prealloc+0x8c>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800d534:	42ac      	cmp	r4, r5
 800d536:	d20e      	bcs.n	800d556 <tcp_pbuf_prealloc+0x46>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800d538:	f01a 0f02 	tst.w	sl, #2
 800d53c:	d008      	beq.n	800d550 <tcp_pbuf_prealloc+0x40>
        (!(pcb->flags & TF_NODELAY) &&
         (!first_seg ||
          pcb->unsent != NULL ||
          pcb->unacked != NULL))) {
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800d53e:	f204 51b7 	addw	r1, r4, #1463	@ 0x5b7
 800d542:	f021 0103 	bic.w	r1, r1, #3
 800d546:	42a9      	cmp	r1, r5
 800d548:	bf28      	it	cs
 800d54a:	4629      	movcs	r1, r5
 800d54c:	b289      	uxth	r1, r1
 800d54e:	e003      	b.n	800d558 <tcp_pbuf_prealloc+0x48>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800d550:	8b7b      	ldrh	r3, [r7, #26]
 800d552:	065b      	lsls	r3, r3, #25
 800d554:	d518      	bpl.n	800d588 <tcp_pbuf_prealloc+0x78>
 800d556:	4621      	mov	r1, r4
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800d558:	4648      	mov	r0, r9
 800d55a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d55e:	f7fc fdfd 	bl	800a15c <pbuf_alloc>
  if (p == NULL) {
 800d562:	4605      	mov	r5, r0
 800d564:	b168      	cbz	r0, 800d582 <tcp_pbuf_prealloc+0x72>
    return NULL;
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800d566:	6803      	ldr	r3, [r0, #0]
 800d568:	b133      	cbz	r3, 800d578 <tcp_pbuf_prealloc+0x68>
 800d56a:	4b10      	ldr	r3, [pc, #64]	@ (800d5ac <tcp_pbuf_prealloc+0x9c>)
 800d56c:	f240 120b 	movw	r2, #267	@ 0x10b
 800d570:	490f      	ldr	r1, [pc, #60]	@ (800d5b0 <tcp_pbuf_prealloc+0xa0>)
 800d572:	4810      	ldr	r0, [pc, #64]	@ (800d5b4 <tcp_pbuf_prealloc+0xa4>)
 800d574:	f003 fb72 	bl	8010c5c <iprintf>
  *oversize = p->len - length;
 800d578:	896b      	ldrh	r3, [r5, #10]
 800d57a:	1b1b      	subs	r3, r3, r4
 800d57c:	f8a8 3000 	strh.w	r3, [r8]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800d580:	60ae      	str	r6, [r5, #8]
  return p;
}
 800d582:	4628      	mov	r0, r5
 800d584:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (!(pcb->flags & TF_NODELAY) &&
 800d588:	f1bb 0f00 	cmp.w	fp, #0
 800d58c:	d0d7      	beq.n	800d53e <tcp_pbuf_prealloc+0x2e>
         (!first_seg ||
 800d58e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d590:	2b00      	cmp	r3, #0
 800d592:	d1d4      	bne.n	800d53e <tcp_pbuf_prealloc+0x2e>
          pcb->unsent != NULL ||
 800d594:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d596:	2b00      	cmp	r3, #0
 800d598:	d1d1      	bne.n	800d53e <tcp_pbuf_prealloc+0x2e>
 800d59a:	e7dc      	b.n	800d556 <tcp_pbuf_prealloc+0x46>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800d59c:	4b03      	ldr	r3, [pc, #12]	@ (800d5ac <tcp_pbuf_prealloc+0x9c>)
 800d59e:	22e9      	movs	r2, #233	@ 0xe9
 800d5a0:	4905      	ldr	r1, [pc, #20]	@ (800d5b8 <tcp_pbuf_prealloc+0xa8>)
 800d5a2:	4804      	ldr	r0, [pc, #16]	@ (800d5b4 <tcp_pbuf_prealloc+0xa4>)
 800d5a4:	f003 fb5a 	bl	8010c5c <iprintf>
 800d5a8:	e7c4      	b.n	800d534 <tcp_pbuf_prealloc+0x24>
 800d5aa:	bf00      	nop
 800d5ac:	08013ba8 	.word	0x08013ba8
 800d5b0:	08013bfc 	.word	0x08013bfc
 800d5b4:	08011f14 	.word	0x08011f14
 800d5b8:	08013bdc 	.word	0x08013bdc

0800d5bc <tcp_create_segment>:
{
 800d5bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5c0:	460e      	mov	r6, r1
 800d5c2:	f89d a020 	ldrb.w	sl, [sp, #32]
 800d5c6:	4690      	mov	r8, r2
 800d5c8:	4699      	mov	r9, r3
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800d5ca:	4607      	mov	r7, r0
 800d5cc:	2800      	cmp	r0, #0
 800d5ce:	d047      	beq.n	800d660 <tcp_create_segment+0xa4>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800d5d0:	2e00      	cmp	r6, #0
 800d5d2:	d04d      	beq.n	800d670 <tcp_create_segment+0xb4>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d5d4:	ea4f 058a 	mov.w	r5, sl, lsl #2
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800d5d8:	2003      	movs	r0, #3
 800d5da:	f7fc f9fd 	bl	80099d8 <memp_malloc>
 800d5de:	4604      	mov	r4, r0
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d5e0:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800d5e4:	2800      	cmp	r0, #0
 800d5e6:	d051      	beq.n	800d68c <tcp_create_segment+0xd0>
  seg->flags = optflags;
 800d5e8:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 800d5ec:	2300      	movs	r3, #0
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800d5ee:	8932      	ldrh	r2, [r6, #8]
  seg->p = p;
 800d5f0:	6046      	str	r6, [r0, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800d5f2:	42aa      	cmp	r2, r5
  seg->next = NULL;
 800d5f4:	6003      	str	r3, [r0, #0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800d5f6:	d32b      	bcc.n	800d650 <tcp_create_segment+0x94>
  seg->len = p->tot_len - optlen;
 800d5f8:	1b52      	subs	r2, r2, r5
  if (pbuf_add_header(p, TCP_HLEN)) {
 800d5fa:	4630      	mov	r0, r6
 800d5fc:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 800d5fe:	8122      	strh	r2, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 800d600:	f7fc fcaa 	bl	8009f58 <pbuf_add_header>
 800d604:	4606      	mov	r6, r0
 800d606:	2800      	cmp	r0, #0
 800d608:	d139      	bne.n	800d67e <tcp_create_segment+0xc2>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800d60a:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800d60c:	02ad      	lsls	r5, r5, #10
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800d60e:	8af8      	ldrh	r0, [r7, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800d610:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800d614:	f505 45a0 	add.w	r5, r5, #20480	@ 0x5000
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800d618:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800d61c:	f7fb fe5a 	bl	80092d4 <lwip_htons>
 800d620:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800d624:	8b38      	ldrh	r0, [r7, #24]
 800d626:	68e7      	ldr	r7, [r4, #12]
 800d628:	f7fb fe54 	bl	80092d4 <lwip_htons>
 800d62c:	8078      	strh	r0, [r7, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800d62e:	4648      	mov	r0, r9
 800d630:	68e7      	ldr	r7, [r4, #12]
 800d632:	f7fb fe53 	bl	80092dc <lwip_htonl>
 800d636:	6078      	str	r0, [r7, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800d638:	ea48 0005 	orr.w	r0, r8, r5
 800d63c:	68e7      	ldr	r7, [r4, #12]
 800d63e:	f7fb fe49 	bl	80092d4 <lwip_htons>
  seg->tcphdr->urgp = 0;
 800d642:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800d644:	81b8      	strh	r0, [r7, #12]
}
 800d646:	4620      	mov	r0, r4
  seg->tcphdr->urgp = 0;
 800d648:	749e      	strb	r6, [r3, #18]
 800d64a:	74de      	strb	r6, [r3, #19]
}
 800d64c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800d650:	22b0      	movs	r2, #176	@ 0xb0
 800d652:	4b10      	ldr	r3, [pc, #64]	@ (800d694 <tcp_create_segment+0xd8>)
 800d654:	4910      	ldr	r1, [pc, #64]	@ (800d698 <tcp_create_segment+0xdc>)
 800d656:	4811      	ldr	r0, [pc, #68]	@ (800d69c <tcp_create_segment+0xe0>)
 800d658:	f003 fb00 	bl	8010c5c <iprintf>
  seg->len = p->tot_len - optlen;
 800d65c:	8932      	ldrh	r2, [r6, #8]
 800d65e:	e7cb      	b.n	800d5f8 <tcp_create_segment+0x3c>
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800d660:	4b0c      	ldr	r3, [pc, #48]	@ (800d694 <tcp_create_segment+0xd8>)
 800d662:	22a3      	movs	r2, #163	@ 0xa3
 800d664:	490e      	ldr	r1, [pc, #56]	@ (800d6a0 <tcp_create_segment+0xe4>)
 800d666:	480d      	ldr	r0, [pc, #52]	@ (800d69c <tcp_create_segment+0xe0>)
 800d668:	f003 faf8 	bl	8010c5c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800d66c:	2e00      	cmp	r6, #0
 800d66e:	d1b1      	bne.n	800d5d4 <tcp_create_segment+0x18>
 800d670:	4b08      	ldr	r3, [pc, #32]	@ (800d694 <tcp_create_segment+0xd8>)
 800d672:	22a4      	movs	r2, #164	@ 0xa4
 800d674:	490b      	ldr	r1, [pc, #44]	@ (800d6a4 <tcp_create_segment+0xe8>)
 800d676:	4809      	ldr	r0, [pc, #36]	@ (800d69c <tcp_create_segment+0xe0>)
 800d678:	f003 faf0 	bl	8010c5c <iprintf>
 800d67c:	e7aa      	b.n	800d5d4 <tcp_create_segment+0x18>
    tcp_seg_free(seg);
 800d67e:	4620      	mov	r0, r4
 800d680:	f7fd fb18 	bl	800acb4 <tcp_seg_free>
    return NULL;
 800d684:	2400      	movs	r4, #0
}
 800d686:	4620      	mov	r0, r4
 800d688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    pbuf_free(p);
 800d68c:	4630      	mov	r0, r6
 800d68e:	f7fc fcf5 	bl	800a07c <pbuf_free>
    return NULL;
 800d692:	e7f7      	b.n	800d684 <tcp_create_segment+0xc8>
 800d694:	08013ba8 	.word	0x08013ba8
 800d698:	08013c54 	.word	0x08013c54
 800d69c:	08011f14 	.word	0x08011f14
 800d6a0:	08013c10 	.word	0x08013c10
 800d6a4:	08013c30 	.word	0x08013c30

0800d6a8 <tcp_output_alloc_header_common.constprop.0>:
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800d6a8:	3114      	adds	r1, #20
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800d6aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800d6ae:	b289      	uxth	r1, r1
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800d6b0:	4606      	mov	r6, r0
 800d6b2:	4617      	mov	r7, r2
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800d6b4:	2022      	movs	r0, #34	@ 0x22
 800d6b6:	f44f 7220 	mov.w	r2, #640	@ 0x280
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800d6ba:	461c      	mov	r4, r3
 800d6bc:	f8bd a020 	ldrh.w	sl, [sp, #32]
 800d6c0:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800d6c4:	f8bd 8028 	ldrh.w	r8, [sp, #40]	@ 0x28
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800d6c8:	f7fc fd48 	bl	800a15c <pbuf_alloc>
  if (p != NULL) {
 800d6cc:	4605      	mov	r5, r0
 800d6ce:	b300      	cbz	r0, 800d712 <tcp_output_alloc_header_common.constprop.0+0x6a>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800d6d0:	8943      	ldrh	r3, [r0, #10]
 800d6d2:	2b13      	cmp	r3, #19
 800d6d4:	d920      	bls.n	800d718 <tcp_output_alloc_header_common.constprop.0+0x70>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
    tcphdr->src = lwip_htons(src_port);
 800d6d6:	4620      	mov	r0, r4
    tcphdr = (struct tcp_hdr *)p->payload;
 800d6d8:	686c      	ldr	r4, [r5, #4]
    tcphdr->src = lwip_htons(src_port);
 800d6da:	f7fb fdfb 	bl	80092d4 <lwip_htons>
 800d6de:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800d6e0:	4650      	mov	r0, sl
 800d6e2:	f7fb fdf7 	bl	80092d4 <lwip_htons>
    tcphdr->seqno = seqno_be;
 800d6e6:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(dst_port);
 800d6e8:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(ackno);
 800d6ea:	4630      	mov	r0, r6
 800d6ec:	f7fb fdf6 	bl	80092dc <lwip_htonl>
 800d6f0:	4603      	mov	r3, r0
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800d6f2:	f449 40a0 	orr.w	r0, r9, #20480	@ 0x5000
    tcphdr->ackno = lwip_htonl(ackno);
 800d6f6:	60a3      	str	r3, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800d6f8:	f7fb fdec 	bl	80092d4 <lwip_htons>
 800d6fc:	4603      	mov	r3, r0
    tcphdr->wnd = lwip_htons(wnd);
 800d6fe:	4640      	mov	r0, r8
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800d700:	81a3      	strh	r3, [r4, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800d702:	f7fb fde7 	bl	80092d4 <lwip_htons>
    tcphdr->chksum = 0;
 800d706:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(wnd);
 800d708:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
 800d70a:	7423      	strb	r3, [r4, #16]
 800d70c:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 800d70e:	74a3      	strb	r3, [r4, #18]
 800d710:	74e3      	strb	r3, [r4, #19]
  }
  return p;
}
 800d712:	4628      	mov	r0, r5
 800d714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800d718:	4b03      	ldr	r3, [pc, #12]	@ (800d728 <tcp_output_alloc_header_common.constprop.0+0x80>)
 800d71a:	f240 7223 	movw	r2, #1827	@ 0x723
 800d71e:	4903      	ldr	r1, [pc, #12]	@ (800d72c <tcp_output_alloc_header_common.constprop.0+0x84>)
 800d720:	4803      	ldr	r0, [pc, #12]	@ (800d730 <tcp_output_alloc_header_common.constprop.0+0x88>)
 800d722:	f003 fa9b 	bl	8010c5c <iprintf>
 800d726:	e7d6      	b.n	800d6d6 <tcp_output_alloc_header_common.constprop.0+0x2e>
 800d728:	08013ba8 	.word	0x08013ba8
 800d72c:	08013c6c 	.word	0x08013c6c
 800d730:	08011f14 	.word	0x08011f14

0800d734 <tcp_output_alloc_header.constprop.0>:
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800d734:	b570      	push	{r4, r5, r6, lr}
 800d736:	460d      	mov	r5, r1
 800d738:	b084      	sub	sp, #16
                        u32_t seqno_be /* already in network byte order */)
{
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800d73a:	4604      	mov	r4, r0
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800d73c:	4616      	mov	r6, r2
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800d73e:	b190      	cbz	r0, 800d766 <tcp_output_alloc_header.constprop.0+0x32>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800d740:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800d742:	2210      	movs	r2, #16
 800d744:	8b21      	ldrh	r1, [r4, #24]
 800d746:	9302      	str	r3, [sp, #8]
 800d748:	e9cd 1200 	strd	r1, r2, [sp]
 800d74c:	4632      	mov	r2, r6
 800d74e:	4629      	mov	r1, r5
 800d750:	8ae3      	ldrh	r3, [r4, #22]
 800d752:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800d754:	f7ff ffa8 	bl	800d6a8 <tcp_output_alloc_header_common.constprop.0>
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800d758:	b118      	cbz	r0, 800d762 <tcp_output_alloc_header.constprop.0+0x2e>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d75a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800d75c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d75e:	4413      	add	r3, r2
 800d760:	62e3      	str	r3, [r4, #44]	@ 0x2c
  }
  return p;
}
 800d762:	b004      	add	sp, #16
 800d764:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800d766:	4b04      	ldr	r3, [pc, #16]	@ (800d778 <tcp_output_alloc_header.constprop.0+0x44>)
 800d768:	f240 7242 	movw	r2, #1858	@ 0x742
 800d76c:	4903      	ldr	r1, [pc, #12]	@ (800d77c <tcp_output_alloc_header.constprop.0+0x48>)
 800d76e:	4804      	ldr	r0, [pc, #16]	@ (800d780 <tcp_output_alloc_header.constprop.0+0x4c>)
 800d770:	f003 fa74 	bl	8010c5c <iprintf>
 800d774:	e7e4      	b.n	800d740 <tcp_output_alloc_header.constprop.0+0xc>
 800d776:	bf00      	nop
 800d778:	08013ba8 	.word	0x08013ba8
 800d77c:	08013c9c 	.word	0x08013c9c
 800d780:	08011f14 	.word	0x08011f14

0800d784 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800d784:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d786:	4604      	mov	r4, r0
 800d788:	b085      	sub	sp, #20
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800d78a:	460d      	mov	r5, r1
{
 800d78c:	4617      	mov	r7, r2
 800d78e:	461e      	mov	r6, r3
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800d790:	b1f9      	cbz	r1, 800d7d2 <tcp_output_control_segment+0x4e>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800d792:	b334      	cbz	r4, 800d7e2 <tcp_output_control_segment+0x5e>
 800d794:	7a20      	ldrb	r0, [r4, #8]
 800d796:	b9a8      	cbnz	r0, 800d7c4 <tcp_output_control_segment+0x40>
    return ip_route(src, dst);
 800d798:	4630      	mov	r0, r6
 800d79a:	f002 fa2d 	bl	800fbf8 <ip4_route>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 800d79e:	b1a8      	cbz	r0, 800d7cc <tcp_output_control_segment+0x48>
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800d7a0:	7ae3      	ldrb	r3, [r4, #11]
      tos = pcb->tos;
 800d7a2:	7aa4      	ldrb	r4, [r4, #10]
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
      tos = 0;
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800d7a4:	9400      	str	r4, [sp, #0]
 800d7a6:	2406      	movs	r4, #6
 800d7a8:	9002      	str	r0, [sp, #8]
 800d7aa:	4632      	mov	r2, r6
 800d7ac:	9401      	str	r4, [sp, #4]
 800d7ae:	4639      	mov	r1, r7
 800d7b0:	4628      	mov	r0, r5
 800d7b2:	f002 fbbb 	bl	800ff2c <ip4_output_if>
 800d7b6:	4604      	mov	r4, r0
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800d7b8:	4628      	mov	r0, r5
 800d7ba:	f7fc fc5f 	bl	800a07c <pbuf_free>
  return err;
}
 800d7be:	4620      	mov	r0, r4
 800d7c0:	b005      	add	sp, #20
 800d7c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return netif_get_by_index(pcb->netif_idx);
 800d7c4:	f7fc fb50 	bl	8009e68 <netif_get_by_index>
  if (netif == NULL) {
 800d7c8:	2800      	cmp	r0, #0
 800d7ca:	d1e9      	bne.n	800d7a0 <tcp_output_control_segment+0x1c>
    err = ERR_RTE;
 800d7cc:	f06f 0403 	mvn.w	r4, #3
 800d7d0:	e7f2      	b.n	800d7b8 <tcp_output_control_segment+0x34>
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800d7d2:	4b07      	ldr	r3, [pc, #28]	@ (800d7f0 <tcp_output_control_segment+0x6c>)
 800d7d4:	f240 7287 	movw	r2, #1927	@ 0x787
 800d7d8:	4906      	ldr	r1, [pc, #24]	@ (800d7f4 <tcp_output_control_segment+0x70>)
 800d7da:	4807      	ldr	r0, [pc, #28]	@ (800d7f8 <tcp_output_control_segment+0x74>)
 800d7dc:	f003 fa3e 	bl	8010c5c <iprintf>
 800d7e0:	e7d7      	b.n	800d792 <tcp_output_control_segment+0xe>
    return ip_route(src, dst);
 800d7e2:	4630      	mov	r0, r6
 800d7e4:	f002 fa08 	bl	800fbf8 <ip4_route>
  if (netif == NULL) {
 800d7e8:	2800      	cmp	r0, #0
 800d7ea:	d0ef      	beq.n	800d7cc <tcp_output_control_segment+0x48>
      ttl = TCP_TTL;
 800d7ec:	23ff      	movs	r3, #255	@ 0xff
 800d7ee:	e7d9      	b.n	800d7a4 <tcp_output_control_segment+0x20>
 800d7f0:	08013ba8 	.word	0x08013ba8
 800d7f4:	08013cc4 	.word	0x08013cc4
 800d7f8:	08011f14 	.word	0x08011f14

0800d7fc <tcp_write>:
{
 800d7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t oversize = 0;
 800d800:	2400      	movs	r4, #0
{
 800d802:	b091      	sub	sp, #68	@ 0x44
 800d804:	9107      	str	r1, [sp, #28]
 800d806:	9309      	str	r3, [sp, #36]	@ 0x24
  u16_t oversize = 0;
 800d808:	f8ad 403e 	strh.w	r4, [sp, #62]	@ 0x3e
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800d80c:	2800      	cmp	r0, #0
 800d80e:	f000 82dc 	beq.w	800ddca <tcp_write+0x5ce>
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800d812:	f8b0 a062 	ldrh.w	sl, [r0, #98]	@ 0x62
 800d816:	4691      	mov	r9, r2
 800d818:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 800d81a:	4680      	mov	r8, r0
 800d81c:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
 800d820:	459a      	cmp	sl, r3
 800d822:	4652      	mov	r2, sl
 800d824:	bf28      	it	cs
 800d826:	461a      	movcs	r2, r3
  mss_local = mss_local ? mss_local : pcb->mss;
 800d828:	2a00      	cmp	r2, #0
 800d82a:	bf08      	it	eq
 800d82c:	461a      	moveq	r2, r3
 800d82e:	9205      	str	r2, [sp, #20]
  LWIP_ASSERT_CORE_LOCKED();
 800d830:	f7f9 f886 	bl	8006940 <sys_check_core_locking>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800d834:	9b07      	ldr	r3, [sp, #28]
 800d836:	2b00      	cmp	r3, #0
 800d838:	f000 82bd 	beq.w	800ddb6 <tcp_write+0x5ba>
  if ((pcb->state != ESTABLISHED) &&
 800d83c:	f898 3014 	ldrb.w	r3, [r8, #20]
      (pcb->state != CLOSE_WAIT) &&
 800d840:	1e9a      	subs	r2, r3, #2
      (pcb->state != SYN_SENT) &&
 800d842:	2a02      	cmp	r2, #2
 800d844:	d902      	bls.n	800d84c <tcp_write+0x50>
 800d846:	2b07      	cmp	r3, #7
 800d848:	f040 824d 	bne.w	800dce6 <tcp_write+0x4ea>
  } else if (len == 0) {
 800d84c:	f1b9 0f00 	cmp.w	r9, #0
 800d850:	d05b      	beq.n	800d90a <tcp_write+0x10e>
  if (len > pcb->snd_buf) {
 800d852:	f8b8 3064 	ldrh.w	r3, [r8, #100]	@ 0x64
 800d856:	454b      	cmp	r3, r9
 800d858:	f0c0 8290 	bcc.w	800dd7c <tcp_write+0x580>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800d85c:	f8b8 5066 	ldrh.w	r5, [r8, #102]	@ 0x66
 800d860:	2d0f      	cmp	r5, #15
 800d862:	f200 828b 	bhi.w	800dd7c <tcp_write+0x580>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800d866:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
  if (pcb->snd_queuelen != 0) {
 800d86a:	2d00      	cmp	r5, #0
 800d86c:	d043      	beq.n	800d8f6 <tcp_write+0xfa>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800d86e:	f8d8 706c 	ldr.w	r7, [r8, #108]	@ 0x6c
 800d872:	2b00      	cmp	r3, #0
 800d874:	f000 81db 	beq.w	800dc2e <tcp_write+0x432>
  if (pcb->unsent != NULL) {
 800d878:	2f00      	cmp	r7, #0
 800d87a:	f000 81c6 	beq.w	800dc0a <tcp_write+0x40e>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d87e:	463b      	mov	r3, r7
 800d880:	683f      	ldr	r7, [r7, #0]
 800d882:	2f00      	cmp	r7, #0
 800d884:	d1fb      	bne.n	800d87e <tcp_write+0x82>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800d886:	7a9c      	ldrb	r4, [r3, #10]
 800d888:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d88a:	00a4      	lsls	r4, r4, #2
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800d88c:	891b      	ldrh	r3, [r3, #8]
 800d88e:	9905      	ldr	r1, [sp, #20]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800d890:	f004 0404 	and.w	r4, r4, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800d894:	191a      	adds	r2, r3, r4
 800d896:	4291      	cmp	r1, r2
 800d898:	f2c0 81eb 	blt.w	800dc72 <tcp_write+0x476>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800d89c:	9a05      	ldr	r2, [sp, #20]
 800d89e:	eba2 0b04 	sub.w	fp, r2, r4
 800d8a2:	ebab 0b03 	sub.w	fp, fp, r3
    oversize = pcb->unsent_oversize;
 800d8a6:	f8b8 3068 	ldrh.w	r3, [r8, #104]	@ 0x68
    space = mss_local - (last_unsent->len + unsent_optlen);
 800d8aa:	fa1f fb8b 	uxth.w	fp, fp
    oversize = pcb->unsent_oversize;
 800d8ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800d8b0:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
    if (oversize > 0) {
 800d8b4:	b383      	cbz	r3, 800d918 <tcp_write+0x11c>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800d8b6:	455b      	cmp	r3, fp
 800d8b8:	f200 81cb 	bhi.w	800dc52 <tcp_write+0x456>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800d8bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d8be:	454b      	cmp	r3, r9
 800d8c0:	461c      	mov	r4, r3
 800d8c2:	bf28      	it	cs
 800d8c4:	464c      	movcs	r4, r9
 800d8c6:	455c      	cmp	r4, fp
 800d8c8:	bf28      	it	cs
 800d8ca:	465c      	movcs	r4, fp
      oversize -= oversize_used;
 800d8cc:	1b1b      	subs	r3, r3, r4
 800d8ce:	b29b      	uxth	r3, r3
 800d8d0:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800d8d4:	b143      	cbz	r3, 800d8e8 <tcp_write+0xec>
 800d8d6:	45a1      	cmp	r9, r4
 800d8d8:	d006      	beq.n	800d8e8 <tcp_write+0xec>
 800d8da:	4bae      	ldr	r3, [pc, #696]	@ (800db94 <tcp_write+0x398>)
 800d8dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d8e0:	49ad      	ldr	r1, [pc, #692]	@ (800db98 <tcp_write+0x39c>)
 800d8e2:	48ae      	ldr	r0, [pc, #696]	@ (800db9c <tcp_write+0x3a0>)
 800d8e4:	f003 f9ba 	bl	8010c5c <iprintf>
      space -= oversize_used;
 800d8e8:	ebab 0b04 	sub.w	fp, fp, r4
 800d8ec:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
      pos += oversize_used;
 800d8ee:	940a      	str	r4, [sp, #40]	@ 0x28
      space -= oversize_used;
 800d8f0:	fa1f fb8b 	uxth.w	fp, fp
 800d8f4:	e011      	b.n	800d91a <tcp_write+0x11e>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	f000 8182 	beq.w	800dc00 <tcp_write+0x404>
 800d8fc:	4ba5      	ldr	r3, [pc, #660]	@ (800db94 <tcp_write+0x398>)
 800d8fe:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 800d902:	49a7      	ldr	r1, [pc, #668]	@ (800dba0 <tcp_write+0x3a4>)
 800d904:	48a5      	ldr	r0, [pc, #660]	@ (800db9c <tcp_write+0x3a0>)
 800d906:	f003 f9a9 	bl	8010c5c <iprintf>
  if (pcb->unsent != NULL) {
 800d90a:	f8d8 706c 	ldr.w	r7, [r8, #108]	@ 0x6c
  queuelen = pcb->snd_queuelen;
 800d90e:	f8b8 5066 	ldrh.w	r5, [r8, #102]	@ 0x66
  if (pcb->unsent != NULL) {
 800d912:	2f00      	cmp	r7, #0
 800d914:	d1b3      	bne.n	800d87e <tcp_write+0x82>
 800d916:	e178      	b.n	800dc0a <tcp_write+0x40e>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800d918:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800d91a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d91c:	454b      	cmp	r3, r9
 800d91e:	d23b      	bcs.n	800d998 <tcp_write+0x19c>
 800d920:	f1bb 0f00 	cmp.w	fp, #0
 800d924:	d038      	beq.n	800d998 <tcp_write+0x19c>
 800d926:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d928:	8912      	ldrh	r2, [r2, #8]
 800d92a:	920d      	str	r2, [sp, #52]	@ 0x34
 800d92c:	2a00      	cmp	r2, #0
 800d92e:	f000 817a 	beq.w	800dc26 <tcp_write+0x42a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800d932:	eba9 0603 	sub.w	r6, r9, r3
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d936:	9b09      	ldr	r3, [sp, #36]	@ 0x24
      u16_t seglen = LWIP_MIN(space, len - pos);
 800d938:	455e      	cmp	r6, fp
 800d93a:	bfa8      	it	ge
 800d93c:	465e      	movge	r6, fp
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d93e:	07d9      	lsls	r1, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 800d940:	b2b4      	uxth	r4, r6
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d942:	f100 81d3 	bmi.w	800dcec <tcp_write+0x4f0>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800d946:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d948:	685a      	ldr	r2, [r3, #4]
 800d94a:	4613      	mov	r3, r2
 800d94c:	6812      	ldr	r2, [r2, #0]
 800d94e:	2a00      	cmp	r2, #0
 800d950:	d1fb      	bne.n	800d94a <tcp_write+0x14e>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800d952:	920c      	str	r2, [sp, #48]	@ 0x30
 800d954:	7b1a      	ldrb	r2, [r3, #12]
 800d956:	2a3f      	cmp	r2, #63	@ 0x3f
 800d958:	d806      	bhi.n	800d968 <tcp_write+0x16c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800d95a:	895a      	ldrh	r2, [r3, #10]
 800d95c:	685b      	ldr	r3, [r3, #4]
 800d95e:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800d960:	9a07      	ldr	r2, [sp, #28]
 800d962:	429a      	cmp	r2, r3
 800d964:	f000 81ba 	beq.w	800dcdc <tcp_write+0x4e0>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800d968:	2201      	movs	r2, #1
 800d96a:	4621      	mov	r1, r4
 800d96c:	2000      	movs	r0, #0
 800d96e:	f7fc fbf5 	bl	800a15c <pbuf_alloc>
 800d972:	900c      	str	r0, [sp, #48]	@ 0x30
 800d974:	2800      	cmp	r0, #0
 800d976:	f000 8232 	beq.w	800ddde <tcp_write+0x5e2>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800d97a:	9b07      	ldr	r3, [sp, #28]
 800d97c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d97e:	440b      	add	r3, r1
 800d980:	6043      	str	r3, [r0, #4]
          queuelen += pbuf_clen(concat_p);
 800d982:	f7fc fce9 	bl	800a358 <pbuf_clen>
 800d986:	1943      	adds	r3, r0, r5
 800d988:	b29d      	uxth	r5, r3
  u16_t extendlen = 0;
 800d98a:	2300      	movs	r3, #0
 800d98c:	930d      	str	r3, [sp, #52]	@ 0x34
      pos += seglen;
 800d98e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d990:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d992:	1919      	adds	r1, r3, r4
 800d994:	b28c      	uxth	r4, r1
 800d996:	e003      	b.n	800d9a0 <tcp_write+0x1a4>
  struct pbuf *concat_p = NULL;
 800d998:	2300      	movs	r3, #0
 800d99a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d99c:	930c      	str	r3, [sp, #48]	@ 0x30
  u16_t extendlen = 0;
 800d99e:	930d      	str	r3, [sp, #52]	@ 0x34
  while (pos < len) {
 800d9a0:	45a1      	cmp	r9, r4
 800d9a2:	f240 8083 	bls.w	800daac <tcp_write+0x2b0>
 800d9a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800d9a8:	2700      	movs	r7, #0
 800d9aa:	f003 0301 	and.w	r3, r3, #1
 800d9ae:	46bb      	mov	fp, r7
 800d9b0:	9308      	str	r3, [sp, #32]
 800d9b2:	e03f      	b.n	800da34 <tcp_write+0x238>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800d9b4:	f8bd 303e 	ldrh.w	r3, [sp, #62]	@ 0x3e
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	f040 80d2 	bne.w	800db62 <tcp_write+0x366>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800d9be:	2201      	movs	r2, #1
 800d9c0:	4651      	mov	r1, sl
 800d9c2:	2036      	movs	r0, #54	@ 0x36
 800d9c4:	f7fc fbca 	bl	800a15c <pbuf_alloc>
 800d9c8:	2800      	cmp	r0, #0
 800d9ca:	f000 80f1 	beq.w	800dbb0 <tcp_write+0x3b4>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800d9ce:	9a07      	ldr	r2, [sp, #28]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d9d0:	2100      	movs	r1, #0
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800d9d2:	9006      	str	r0, [sp, #24]
 800d9d4:	4422      	add	r2, r4
 800d9d6:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d9d8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d9dc:	2036      	movs	r0, #54	@ 0x36
 800d9de:	f7fc fbbd 	bl	800a15c <pbuf_alloc>
 800d9e2:	9b06      	ldr	r3, [sp, #24]
 800d9e4:	4606      	mov	r6, r0
 800d9e6:	2800      	cmp	r0, #0
 800d9e8:	f000 814d 	beq.w	800dc86 <tcp_write+0x48a>
      pbuf_cat(p/*header*/, p2/*data*/);
 800d9ec:	4619      	mov	r1, r3
 800d9ee:	f7fc fcdb 	bl	800a3a8 <pbuf_cat>
    queuelen += pbuf_clen(p);
 800d9f2:	4630      	mov	r0, r6
 800d9f4:	f7fc fcb0 	bl	800a358 <pbuf_clen>
 800d9f8:	4428      	add	r0, r5
 800d9fa:	b285      	uxth	r5, r0
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800d9fc:	2d10      	cmp	r5, #16
 800d9fe:	d849      	bhi.n	800da94 <tcp_write+0x298>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800da00:	f8d8 305c 	ldr.w	r3, [r8, #92]	@ 0x5c
 800da04:	2200      	movs	r2, #0
 800da06:	4631      	mov	r1, r6
 800da08:	4640      	mov	r0, r8
 800da0a:	4423      	add	r3, r4
 800da0c:	9200      	str	r2, [sp, #0]
 800da0e:	f7ff fdd5 	bl	800d5bc <tcp_create_segment>
 800da12:	4606      	mov	r6, r0
 800da14:	2800      	cmp	r0, #0
 800da16:	f000 80cb 	beq.w	800dbb0 <tcp_write+0x3b4>
    if (queue == NULL) {
 800da1a:	f1bb 0f00 	cmp.w	fp, #0
 800da1e:	d03e      	beq.n	800da9e <tcp_write+0x2a2>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800da20:	2f00      	cmp	r7, #0
 800da22:	f000 80a6 	beq.w	800db72 <tcp_write+0x376>
    pos += seglen;
 800da26:	44a2      	add	sl, r4
      prev_seg->next = seg;
 800da28:	603e      	str	r6, [r7, #0]
    pos += seglen;
 800da2a:	fa1f f48a 	uxth.w	r4, sl
  while (pos < len) {
 800da2e:	45a1      	cmp	r9, r4
 800da30:	d93b      	bls.n	800daaa <tcp_write+0x2ae>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800da32:	4637      	mov	r7, r6
    u16_t left = len - pos;
 800da34:	eba9 0a04 	sub.w	sl, r9, r4
    u16_t seglen = LWIP_MIN(left, max_len);
 800da38:	9b05      	ldr	r3, [sp, #20]
 800da3a:	fa1f fa8a 	uxth.w	sl, sl
 800da3e:	459a      	cmp	sl, r3
 800da40:	bf28      	it	cs
 800da42:	469a      	movcs	sl, r3
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800da44:	9b08      	ldr	r3, [sp, #32]
    u16_t seglen = LWIP_MIN(left, max_len);
 800da46:	fa1f fa8a 	uxth.w	sl, sl
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d0b2      	beq.n	800d9b4 <tcp_write+0x1b8>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800da4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da50:	4651      	mov	r1, sl
 800da52:	9a05      	ldr	r2, [sp, #20]
 800da54:	2036      	movs	r0, #54	@ 0x36
 800da56:	e9cd 8300 	strd	r8, r3, [sp]
 800da5a:	fabb f38b 	clz	r3, fp
 800da5e:	095b      	lsrs	r3, r3, #5
 800da60:	9302      	str	r3, [sp, #8]
 800da62:	f10d 033e 	add.w	r3, sp, #62	@ 0x3e
 800da66:	f7ff fd53 	bl	800d510 <tcp_pbuf_prealloc>
 800da6a:	4606      	mov	r6, r0
 800da6c:	2800      	cmp	r0, #0
 800da6e:	f000 809f 	beq.w	800dbb0 <tcp_write+0x3b4>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800da72:	8943      	ldrh	r3, [r0, #10]
 800da74:	4553      	cmp	r3, sl
 800da76:	f0c0 8084 	bcc.w	800db82 <tcp_write+0x386>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800da7a:	9b07      	ldr	r3, [sp, #28]
 800da7c:	4652      	mov	r2, sl
 800da7e:	6870      	ldr	r0, [r6, #4]
 800da80:	1919      	adds	r1, r3, r4
 800da82:	f003 fa6a 	bl	8010f5a <memcpy>
    queuelen += pbuf_clen(p);
 800da86:	4630      	mov	r0, r6
 800da88:	f7fc fc66 	bl	800a358 <pbuf_clen>
 800da8c:	4428      	add	r0, r5
 800da8e:	b285      	uxth	r5, r0
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800da90:	2d10      	cmp	r5, #16
 800da92:	d9b5      	bls.n	800da00 <tcp_write+0x204>
      pbuf_free(p);
 800da94:	4630      	mov	r0, r6
 800da96:	465f      	mov	r7, fp
 800da98:	f7fc faf0 	bl	800a07c <pbuf_free>
      goto memerr;
 800da9c:	e089      	b.n	800dbb2 <tcp_write+0x3b6>
    pos += seglen;
 800da9e:	44a2      	add	sl, r4
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800daa0:	4683      	mov	fp, r0
    pos += seglen;
 800daa2:	fa1f f48a 	uxth.w	r4, sl
  while (pos < len) {
 800daa6:	45a1      	cmp	r9, r4
 800daa8:	d8c3      	bhi.n	800da32 <tcp_write+0x236>
 800daaa:	465f      	mov	r7, fp
  if (oversize_used > 0) {
 800daac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  pcb->unsent_oversize = oversize;
 800daae:	f8bd a03e 	ldrh.w	sl, [sp, #62]	@ 0x3e
  if (oversize_used > 0) {
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	f000 80ec 	beq.w	800dc90 <tcp_write+0x494>
    for (p = last_unsent->p; p; p = p->next) {
 800dab8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800daba:	685c      	ldr	r4, [r3, #4]
 800dabc:	b1d4      	cbz	r4, 800daf4 <tcp_write+0x2f8>
      p->tot_len += oversize_used;
 800dabe:	8923      	ldrh	r3, [r4, #8]
 800dac0:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
      if (p->next == NULL) {
 800dac4:	6821      	ldr	r1, [r4, #0]
      p->tot_len += oversize_used;
 800dac6:	445b      	add	r3, fp
 800dac8:	8123      	strh	r3, [r4, #8]
      if (p->next == NULL) {
 800daca:	b131      	cbz	r1, 800dada <tcp_write+0x2de>
      pos += seglen;
 800dacc:	460c      	mov	r4, r1
      p->tot_len += oversize_used;
 800dace:	8923      	ldrh	r3, [r4, #8]
      if (p->next == NULL) {
 800dad0:	6821      	ldr	r1, [r4, #0]
      p->tot_len += oversize_used;
 800dad2:	445b      	add	r3, fp
 800dad4:	8123      	strh	r3, [r4, #8]
      if (p->next == NULL) {
 800dad6:	2900      	cmp	r1, #0
 800dad8:	d1f8      	bne.n	800dacc <tcp_write+0x2d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800dada:	8963      	ldrh	r3, [r4, #10]
 800dadc:	465a      	mov	r2, fp
 800dade:	6860      	ldr	r0, [r4, #4]
 800dae0:	9907      	ldr	r1, [sp, #28]
 800dae2:	4418      	add	r0, r3
 800dae4:	f003 fa39 	bl	8010f5a <memcpy>
        p->len += oversize_used;
 800dae8:	8963      	ldrh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800daea:	6821      	ldr	r1, [r4, #0]
        p->len += oversize_used;
 800daec:	445b      	add	r3, fp
 800daee:	8163      	strh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800daf0:	2900      	cmp	r1, #0
 800daf2:	d1eb      	bne.n	800dacc <tcp_write+0x2d0>
    last_unsent->len += oversize_used;
 800daf4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800daf6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800daf8:	8913      	ldrh	r3, [r2, #8]
 800dafa:	4419      	add	r1, r3
  if (concat_p != NULL) {
 800dafc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    last_unsent->len += oversize_used;
 800dafe:	8111      	strh	r1, [r2, #8]
  pcb->unsent_oversize = oversize;
 800db00:	f8a8 a068 	strh.w	sl, [r8, #104]	@ 0x68
  if (concat_p != NULL) {
 800db04:	2b00      	cmp	r3, #0
 800db06:	f000 810a 	beq.w	800dd1e <tcp_write+0x522>
    pbuf_cat(last_unsent->p, concat_p);
 800db0a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800db0c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800db10:	6860      	ldr	r0, [r4, #4]
 800db12:	4651      	mov	r1, sl
 800db14:	f7fc fc48 	bl	800a3a8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800db18:	f8ba 2008 	ldrh.w	r2, [sl, #8]
 800db1c:	8923      	ldrh	r3, [r4, #8]
 800db1e:	4413      	add	r3, r2
 800db20:	8123      	strh	r3, [r4, #8]
    last_unsent->next = queue;
 800db22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800db24:	601f      	str	r7, [r3, #0]
  pcb->snd_lbb += len;
 800db26:	f8d8 305c 	ldr.w	r3, [r8, #92]	@ 0x5c
  pcb->snd_queuelen = queuelen;
 800db2a:	f8a8 5066 	strh.w	r5, [r8, #102]	@ 0x66
  pcb->snd_lbb += len;
 800db2e:	444b      	add	r3, r9
 800db30:	f8c8 305c 	str.w	r3, [r8, #92]	@ 0x5c
  pcb->snd_buf -= len;
 800db34:	f8b8 3064 	ldrh.w	r3, [r8, #100]	@ 0x64
 800db38:	eba3 0309 	sub.w	r3, r3, r9
 800db3c:	f8a8 3064 	strh.w	r3, [r8, #100]	@ 0x64
  if (pcb->snd_queuelen != 0) {
 800db40:	b125      	cbz	r5, 800db4c <tcp_write+0x350>
    LWIP_ASSERT("tcp_write: valid queue length",
 800db42:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800db46:	2b00      	cmp	r3, #0
 800db48:	f000 80bb 	beq.w	800dcc2 <tcp_write+0x4c6>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800db4c:	b12e      	cbz	r6, 800db5a <tcp_write+0x35e>
 800db4e:	68f3      	ldr	r3, [r6, #12]
 800db50:	b11b      	cbz	r3, 800db5a <tcp_write+0x35e>
 800db52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800db54:	0792      	lsls	r2, r2, #30
 800db56:	f140 80ac 	bpl.w	800dcb2 <tcp_write+0x4b6>
  return ERR_OK;
 800db5a:	2000      	movs	r0, #0
}
 800db5c:	b011      	add	sp, #68	@ 0x44
 800db5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800db62:	4b0c      	ldr	r3, [pc, #48]	@ (800db94 <tcp_write+0x398>)
 800db64:	f240 2271 	movw	r2, #625	@ 0x271
 800db68:	490e      	ldr	r1, [pc, #56]	@ (800dba4 <tcp_write+0x3a8>)
 800db6a:	480c      	ldr	r0, [pc, #48]	@ (800db9c <tcp_write+0x3a0>)
 800db6c:	f003 f876 	bl	8010c5c <iprintf>
 800db70:	e725      	b.n	800d9be <tcp_write+0x1c2>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800db72:	4b08      	ldr	r3, [pc, #32]	@ (800db94 <tcp_write+0x398>)
 800db74:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800db78:	490b      	ldr	r1, [pc, #44]	@ (800dba8 <tcp_write+0x3ac>)
 800db7a:	4808      	ldr	r0, [pc, #32]	@ (800db9c <tcp_write+0x3a0>)
 800db7c:	f003 f86e 	bl	8010c5c <iprintf>
 800db80:	e751      	b.n	800da26 <tcp_write+0x22a>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800db82:	4b04      	ldr	r3, [pc, #16]	@ (800db94 <tcp_write+0x398>)
 800db84:	f240 2266 	movw	r2, #614	@ 0x266
 800db88:	4908      	ldr	r1, [pc, #32]	@ (800dbac <tcp_write+0x3b0>)
 800db8a:	4804      	ldr	r0, [pc, #16]	@ (800db9c <tcp_write+0x3a0>)
 800db8c:	f003 f866 	bl	8010c5c <iprintf>
 800db90:	e773      	b.n	800da7a <tcp_write+0x27e>
 800db92:	bf00      	nop
 800db94:	08013ba8 	.word	0x08013ba8
 800db98:	08013de4 	.word	0x08013de4
 800db9c:	08011f14 	.word	0x08011f14
 800dba0:	08013d78 	.word	0x08013d78
 800dba4:	08013ea0 	.word	0x08013ea0
 800dba8:	08013eb0 	.word	0x08013eb0
 800dbac:	08013e60 	.word	0x08013e60
 800dbb0:	465f      	mov	r7, fp
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800dbb2:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 800dbb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dbba:	f8a8 301a 	strh.w	r3, [r8, #26]
  if (concat_p != NULL) {
 800dbbe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dbc0:	b113      	cbz	r3, 800dbc8 <tcp_write+0x3cc>
    pbuf_free(concat_p);
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	f7fc fa5a 	bl	800a07c <pbuf_free>
  if (queue != NULL) {
 800dbc8:	b117      	cbz	r7, 800dbd0 <tcp_write+0x3d4>
    tcp_segs_free(queue);
 800dbca:	4638      	mov	r0, r7
 800dbcc:	f7fd f860 	bl	800ac90 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 800dbd0:	f8b8 3066 	ldrh.w	r3, [r8, #102]	@ 0x66
 800dbd4:	b923      	cbnz	r3, 800dbe0 <tcp_write+0x3e4>
  return ERR_MEM;
 800dbd6:	f04f 30ff 	mov.w	r0, #4294967295
}
 800dbda:	b011      	add	sp, #68	@ 0x44
 800dbdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800dbe0:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d1f6      	bne.n	800dbd6 <tcp_write+0x3da>
 800dbe8:	f8d8 306c 	ldr.w	r3, [r8, #108]	@ 0x6c
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d1f2      	bne.n	800dbd6 <tcp_write+0x3da>
 800dbf0:	4b7e      	ldr	r3, [pc, #504]	@ (800ddec <tcp_write+0x5f0>)
 800dbf2:	f240 3227 	movw	r2, #807	@ 0x327
 800dbf6:	497e      	ldr	r1, [pc, #504]	@ (800ddf0 <tcp_write+0x5f4>)
 800dbf8:	487e      	ldr	r0, [pc, #504]	@ (800ddf4 <tcp_write+0x5f8>)
 800dbfa:	f003 f82f 	bl	8010c5c <iprintf>
 800dbfe:	e7ea      	b.n	800dbd6 <tcp_write+0x3da>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800dc00:	f8d8 306c 	ldr.w	r3, [r8, #108]	@ 0x6c
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	f47f ae79 	bne.w	800d8fc <tcp_write+0x100>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800dc0a:	f8b8 3068 	ldrh.w	r3, [r8, #104]	@ 0x68
 800dc0e:	bb43      	cbnz	r3, 800dc62 <tcp_write+0x466>
  while (pos < len) {
 800dc10:	f1b9 0f00 	cmp.w	r9, #0
 800dc14:	f000 80c8 	beq.w	800dda8 <tcp_write+0x5ac>
 800dc18:	2300      	movs	r3, #0
 800dc1a:	461c      	mov	r4, r3
 800dc1c:	930d      	str	r3, [sp, #52]	@ 0x34
 800dc1e:	930a      	str	r3, [sp, #40]	@ 0x28
 800dc20:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
 800dc24:	e6bf      	b.n	800d9a6 <tcp_write+0x1aa>
  struct pbuf *concat_p = NULL;
 800dc26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dc28:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800dc2a:	930c      	str	r3, [sp, #48]	@ 0x30
 800dc2c:	e6bb      	b.n	800d9a6 <tcp_write+0x1aa>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800dc2e:	2f00      	cmp	r7, #0
 800dc30:	f47f ae25 	bne.w	800d87e <tcp_write+0x82>
 800dc34:	4b6d      	ldr	r3, [pc, #436]	@ (800ddec <tcp_write+0x5f0>)
 800dc36:	f240 1255 	movw	r2, #341	@ 0x155
 800dc3a:	496f      	ldr	r1, [pc, #444]	@ (800ddf8 <tcp_write+0x5fc>)
 800dc3c:	486d      	ldr	r0, [pc, #436]	@ (800ddf4 <tcp_write+0x5f8>)
 800dc3e:	f003 f80d 	bl	8010c5c <iprintf>
  if (pcb->unsent != NULL) {
 800dc42:	f8d8 706c 	ldr.w	r7, [r8, #108]	@ 0x6c
  queuelen = pcb->snd_queuelen;
 800dc46:	f8b8 5066 	ldrh.w	r5, [r8, #102]	@ 0x66
  if (pcb->unsent != NULL) {
 800dc4a:	2f00      	cmp	r7, #0
 800dc4c:	f47f ae17 	bne.w	800d87e <tcp_write+0x82>
 800dc50:	e7db      	b.n	800dc0a <tcp_write+0x40e>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800dc52:	4b66      	ldr	r3, [pc, #408]	@ (800ddec <tcp_write+0x5f0>)
 800dc54:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 800dc58:	4968      	ldr	r1, [pc, #416]	@ (800ddfc <tcp_write+0x600>)
 800dc5a:	4866      	ldr	r0, [pc, #408]	@ (800ddf4 <tcp_write+0x5f8>)
 800dc5c:	f002 fffe 	bl	8010c5c <iprintf>
 800dc60:	e62c      	b.n	800d8bc <tcp_write+0xc0>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800dc62:	4b62      	ldr	r3, [pc, #392]	@ (800ddec <tcp_write+0x5f0>)
 800dc64:	f240 224a 	movw	r2, #586	@ 0x24a
 800dc68:	4965      	ldr	r1, [pc, #404]	@ (800de00 <tcp_write+0x604>)
 800dc6a:	4862      	ldr	r0, [pc, #392]	@ (800ddf4 <tcp_write+0x5f8>)
 800dc6c:	f002 fff6 	bl	8010c5c <iprintf>
 800dc70:	e7ce      	b.n	800dc10 <tcp_write+0x414>
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800dc72:	4b5e      	ldr	r3, [pc, #376]	@ (800ddec <tcp_write+0x5f0>)
 800dc74:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800dc78:	4962      	ldr	r1, [pc, #392]	@ (800de04 <tcp_write+0x608>)
 800dc7a:	485e      	ldr	r0, [pc, #376]	@ (800ddf4 <tcp_write+0x5f8>)
 800dc7c:	f002 ffee 	bl	8010c5c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800dc80:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dc82:	891b      	ldrh	r3, [r3, #8]
 800dc84:	e60a      	b.n	800d89c <tcp_write+0xa0>
        pbuf_free(p2);
 800dc86:	4618      	mov	r0, r3
 800dc88:	465f      	mov	r7, fp
 800dc8a:	f7fc f9f7 	bl	800a07c <pbuf_free>
        goto memerr;
 800dc8e:	e790      	b.n	800dbb2 <tcp_write+0x3b6>
  if (concat_p != NULL) {
 800dc90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  pcb->unsent_oversize = oversize;
 800dc92:	f8a8 a068 	strh.w	sl, [r8, #104]	@ 0x68
  if (concat_p != NULL) {
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d061      	beq.n	800dd5e <tcp_write+0x562>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800dc9a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	f47f af34 	bne.w	800db0a <tcp_write+0x30e>
 800dca2:	4b52      	ldr	r3, [pc, #328]	@ (800ddec <tcp_write+0x5f0>)
 800dca4:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 800dca8:	4957      	ldr	r1, [pc, #348]	@ (800de08 <tcp_write+0x60c>)
 800dcaa:	4852      	ldr	r0, [pc, #328]	@ (800ddf4 <tcp_write+0x5f8>)
 800dcac:	f002 ffd6 	bl	8010c5c <iprintf>
 800dcb0:	e72b      	b.n	800db0a <tcp_write+0x30e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800dcb2:	899c      	ldrh	r4, [r3, #12]
 800dcb4:	2008      	movs	r0, #8
 800dcb6:	f7fb fb0d 	bl	80092d4 <lwip_htons>
 800dcba:	68f3      	ldr	r3, [r6, #12]
 800dcbc:	4304      	orrs	r4, r0
 800dcbe:	819c      	strh	r4, [r3, #12]
 800dcc0:	e74b      	b.n	800db5a <tcp_write+0x35e>
    LWIP_ASSERT("tcp_write: valid queue length",
 800dcc2:	f8d8 306c 	ldr.w	r3, [r8, #108]	@ 0x6c
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	f47f af40 	bne.w	800db4c <tcp_write+0x350>
 800dccc:	4b47      	ldr	r3, [pc, #284]	@ (800ddec <tcp_write+0x5f0>)
 800dcce:	f240 3212 	movw	r2, #786	@ 0x312
 800dcd2:	4947      	ldr	r1, [pc, #284]	@ (800ddf0 <tcp_write+0x5f4>)
 800dcd4:	4847      	ldr	r0, [pc, #284]	@ (800ddf4 <tcp_write+0x5f8>)
 800dcd6:	f002 ffc1 	bl	8010c5c <iprintf>
 800dcda:	e737      	b.n	800db4c <tcp_write+0x350>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800dcdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d15a      	bne.n	800dd98 <tcp_write+0x59c>
          extendlen = seglen;
 800dce2:	940d      	str	r4, [sp, #52]	@ 0x34
 800dce4:	e653      	b.n	800d98e <tcp_write+0x192>
    return ERR_CONN;
 800dce6:	f06f 000a 	mvn.w	r0, #10
 800dcea:	e737      	b.n	800db5c <tcp_write+0x360>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800dcec:	e9cd 8300 	strd	r8, r3, [sp]
 800dcf0:	2301      	movs	r3, #1
 800dcf2:	465a      	mov	r2, fp
 800dcf4:	4621      	mov	r1, r4
 800dcf6:	2000      	movs	r0, #0
 800dcf8:	9302      	str	r3, [sp, #8]
 800dcfa:	f10d 033e 	add.w	r3, sp, #62	@ 0x3e
 800dcfe:	f7ff fc07 	bl	800d510 <tcp_pbuf_prealloc>
 800dd02:	4603      	mov	r3, r0
 800dd04:	900c      	str	r0, [sp, #48]	@ 0x30
 800dd06:	2800      	cmp	r0, #0
 800dd08:	d069      	beq.n	800ddde <tcp_write+0x5e2>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800dd0a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800dd0c:	461e      	mov	r6, r3
 800dd0e:	9907      	ldr	r1, [sp, #28]
 800dd10:	4622      	mov	r2, r4
 800dd12:	4401      	add	r1, r0
 800dd14:	6858      	ldr	r0, [r3, #4]
 800dd16:	f003 f920 	bl	8010f5a <memcpy>
        queuelen += pbuf_clen(concat_p);
 800dd1a:	4630      	mov	r0, r6
 800dd1c:	e631      	b.n	800d982 <tcp_write+0x186>
  } else if (extendlen > 0) {
 800dd1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	f43f aefe 	beq.w	800db22 <tcp_write+0x326>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800dd26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dd28:	6859      	ldr	r1, [r3, #4]
 800dd2a:	b1e9      	cbz	r1, 800dd68 <tcp_write+0x56c>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800dd2c:	680a      	ldr	r2, [r1, #0]
 800dd2e:	2a00      	cmp	r2, #0
 800dd30:	d053      	beq.n	800ddda <tcp_write+0x5de>
 800dd32:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 800dd34:	e000      	b.n	800dd38 <tcp_write+0x53c>
 800dd36:	4602      	mov	r2, r0
      p->tot_len += extendlen;
 800dd38:	890b      	ldrh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800dd3a:	6810      	ldr	r0, [r2, #0]
      p->tot_len += extendlen;
 800dd3c:	4423      	add	r3, r4
 800dd3e:	810b      	strh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800dd40:	4611      	mov	r1, r2
 800dd42:	2800      	cmp	r0, #0
 800dd44:	d1f7      	bne.n	800dd36 <tcp_write+0x53a>
    p->tot_len += extendlen;
 800dd46:	8913      	ldrh	r3, [r2, #8]
 800dd48:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800dd4a:	440b      	add	r3, r1
 800dd4c:	8113      	strh	r3, [r2, #8]
    p->len += extendlen;
 800dd4e:	8953      	ldrh	r3, [r2, #10]
 800dd50:	440b      	add	r3, r1
 800dd52:	8153      	strh	r3, [r2, #10]
    last_unsent->len += extendlen;
 800dd54:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800dd56:	8913      	ldrh	r3, [r2, #8]
 800dd58:	440b      	add	r3, r1
 800dd5a:	8113      	strh	r3, [r2, #8]
  if (last_unsent == NULL) {
 800dd5c:	e6e1      	b.n	800db22 <tcp_write+0x326>
  } else if (extendlen > 0) {
 800dd5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dd60:	b19b      	cbz	r3, 800dd8a <tcp_write+0x58e>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800dd62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d1de      	bne.n	800dd26 <tcp_write+0x52a>
 800dd68:	4b20      	ldr	r3, [pc, #128]	@ (800ddec <tcp_write+0x5f0>)
 800dd6a:	f240 22e6 	movw	r2, #742	@ 0x2e6
 800dd6e:	4927      	ldr	r1, [pc, #156]	@ (800de0c <tcp_write+0x610>)
 800dd70:	4820      	ldr	r0, [pc, #128]	@ (800ddf4 <tcp_write+0x5f8>)
 800dd72:	f002 ff73 	bl	8010c5c <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800dd76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dd78:	6859      	ldr	r1, [r3, #4]
 800dd7a:	e7d7      	b.n	800dd2c <tcp_write+0x530>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800dd7c:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 800dd80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd84:	f8a8 301a 	strh.w	r3, [r8, #26]
  if (err != ERR_OK) {
 800dd88:	e725      	b.n	800dbd6 <tcp_write+0x3da>
  if (last_unsent == NULL) {
 800dd8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	f47f aec8 	bne.w	800db22 <tcp_write+0x326>
    pcb->unsent = queue;
 800dd92:	f8c8 706c 	str.w	r7, [r8, #108]	@ 0x6c
 800dd96:	e6c6      	b.n	800db26 <tcp_write+0x32a>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800dd98:	4b14      	ldr	r3, [pc, #80]	@ (800ddec <tcp_write+0x5f0>)
 800dd9a:	f240 2231 	movw	r2, #561	@ 0x231
 800dd9e:	491c      	ldr	r1, [pc, #112]	@ (800de10 <tcp_write+0x614>)
 800dda0:	4814      	ldr	r0, [pc, #80]	@ (800ddf4 <tcp_write+0x5f8>)
 800dda2:	f002 ff5b 	bl	8010c5c <iprintf>
 800dda6:	e79c      	b.n	800dce2 <tcp_write+0x4e6>
  pcb->unsent_oversize = oversize;
 800dda8:	f8bd 303e 	ldrh.w	r3, [sp, #62]	@ 0x3e
 800ddac:	464f      	mov	r7, r9
 800ddae:	464e      	mov	r6, r9
 800ddb0:	f8a8 3068 	strh.w	r3, [r8, #104]	@ 0x68
  if (concat_p != NULL) {
 800ddb4:	e7ed      	b.n	800dd92 <tcp_write+0x596>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800ddb6:	4b0d      	ldr	r3, [pc, #52]	@ (800ddec <tcp_write+0x5f0>)
 800ddb8:	f240 12ad 	movw	r2, #429	@ 0x1ad
 800ddbc:	4915      	ldr	r1, [pc, #84]	@ (800de14 <tcp_write+0x618>)
 800ddbe:	480d      	ldr	r0, [pc, #52]	@ (800ddf4 <tcp_write+0x5f8>)
 800ddc0:	f002 ff4c 	bl	8010c5c <iprintf>
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800ddc4:	f06f 000f 	mvn.w	r0, #15
 800ddc8:	e6c8      	b.n	800db5c <tcp_write+0x360>
 800ddca:	4b08      	ldr	r3, [pc, #32]	@ (800ddec <tcp_write+0x5f0>)
 800ddcc:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 800ddd0:	4911      	ldr	r1, [pc, #68]	@ (800de18 <tcp_write+0x61c>)
 800ddd2:	4808      	ldr	r0, [pc, #32]	@ (800ddf4 <tcp_write+0x5f8>)
 800ddd4:	f002 ff42 	bl	8010c5c <iprintf>
 800ddd8:	e7f4      	b.n	800ddc4 <tcp_write+0x5c8>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800ddda:	460a      	mov	r2, r1
 800dddc:	e7b3      	b.n	800dd46 <tcp_write+0x54a>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ddde:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 800dde2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dde6:	f8a8 301a 	strh.w	r3, [r8, #26]
  if (queue != NULL) {
 800ddea:	e6f1      	b.n	800dbd0 <tcp_write+0x3d4>
 800ddec:	08013ba8 	.word	0x08013ba8
 800ddf0:	08013f34 	.word	0x08013f34
 800ddf4:	08011f14 	.word	0x08011f14
 800ddf8:	08013d3c 	.word	0x08013d3c
 800ddfc:	08013dc4 	.word	0x08013dc4
 800de00:	08013e30 	.word	0x08013e30
 800de04:	08013dac 	.word	0x08013dac
 800de08:	08013ec4 	.word	0x08013ec4
 800de0c:	08013efc 	.word	0x08013efc
 800de10:	08013e04 	.word	0x08013e04
 800de14:	08013d08 	.word	0x08013d08
 800de18:	08013cf0 	.word	0x08013cf0

0800de1c <tcp_split_unsent_seg>:
{
 800de1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800de20:	4606      	mov	r6, r0
{
 800de22:	b083      	sub	sp, #12
 800de24:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800de26:	2800      	cmp	r0, #0
 800de28:	f000 80ad 	beq.w	800df86 <tcp_split_unsent_seg+0x16a>
  useg = pcb->unsent;
 800de2c:	6ef5      	ldr	r5, [r6, #108]	@ 0x6c
  if (useg == NULL) {
 800de2e:	2d00      	cmp	r5, #0
 800de30:	f000 80b4 	beq.w	800df9c <tcp_split_unsent_seg+0x180>
  if (split == 0) {
 800de34:	2c00      	cmp	r4, #0
 800de36:	f000 80b4 	beq.w	800dfa2 <tcp_split_unsent_seg+0x186>
  if (useg->len <= split) {
 800de3a:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800de3e:	45a0      	cmp	r8, r4
 800de40:	d97e      	bls.n	800df40 <tcp_split_unsent_seg+0x124>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800de42:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 800de44:	42a3      	cmp	r3, r4
 800de46:	f0c0 8084 	bcc.w	800df52 <tcp_split_unsent_seg+0x136>
  optflags = useg->flags;
 800de4a:	f895 a00a 	ldrb.w	sl, [r5, #10]
  remainder = useg->len - split;
 800de4e:	eba8 0904 	sub.w	r9, r8, r4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800de52:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800de56:	2036      	movs	r0, #54	@ 0x36
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800de58:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
  remainder = useg->len - split;
 800de5c:	fa1f f989 	uxth.w	r9, r9
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800de60:	f00b 0b04 	and.w	fp, fp, #4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800de64:	eb0b 0109 	add.w	r1, fp, r9
 800de68:	b289      	uxth	r1, r1
 800de6a:	f7fc f977 	bl	800a15c <pbuf_alloc>
  if (p == NULL) {
 800de6e:	4607      	mov	r7, r0
 800de70:	2800      	cmp	r0, #0
 800de72:	f000 8093 	beq.w	800df9c <tcp_split_unsent_seg+0x180>
  offset = useg->p->tot_len - useg->len + split;
 800de76:	6868      	ldr	r0, [r5, #4]
 800de78:	892a      	ldrh	r2, [r5, #8]
 800de7a:	8903      	ldrh	r3, [r0, #8]
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800de7c:	6879      	ldr	r1, [r7, #4]
  offset = useg->p->tot_len - useg->len + split;
 800de7e:	1a9b      	subs	r3, r3, r2
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800de80:	464a      	mov	r2, r9
 800de82:	4459      	add	r1, fp
  offset = useg->p->tot_len - useg->len + split;
 800de84:	4423      	add	r3, r4
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800de86:	b29b      	uxth	r3, r3
 800de88:	f7fc fbb8 	bl	800a5fc <pbuf_copy_partial>
 800de8c:	4548      	cmp	r0, r9
 800de8e:	f040 8082 	bne.w	800df96 <tcp_split_unsent_seg+0x17a>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800de92:	68eb      	ldr	r3, [r5, #12]
 800de94:	8998      	ldrh	r0, [r3, #12]
 800de96:	f7fb fa1d 	bl	80092d4 <lwip_htons>
  if (split_flags & TCP_PSH) {
 800de9a:	f010 0b08 	ands.w	fp, r0, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800de9e:	fa5f f980 	uxtb.w	r9, r0
  if (split_flags & TCP_PSH) {
 800dea2:	d151      	bne.n	800df48 <tcp_split_unsent_seg+0x12c>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800dea4:	f009 093f 	and.w	r9, r9, #63	@ 0x3f
  if (split_flags & TCP_FIN) {
 800dea8:	f019 0f01 	tst.w	r9, #1
 800deac:	d003      	beq.n	800deb6 <tcp_split_unsent_seg+0x9a>
    split_flags &= ~TCP_FIN;
 800deae:	f009 09fe 	and.w	r9, r9, #254	@ 0xfe
    remainder_flags |= TCP_FIN;
 800deb2:	f04b 0b01 	orr.w	fp, fp, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800deb6:	68eb      	ldr	r3, [r5, #12]
 800deb8:	6858      	ldr	r0, [r3, #4]
 800deba:	f7fb fa0f 	bl	80092dc <lwip_htonl>
 800debe:	f8cd a000 	str.w	sl, [sp]
 800dec2:	1823      	adds	r3, r4, r0
 800dec4:	465a      	mov	r2, fp
 800dec6:	4639      	mov	r1, r7
 800dec8:	4630      	mov	r0, r6
 800deca:	f7ff fb77 	bl	800d5bc <tcp_create_segment>
  if (seg == NULL) {
 800dece:	4682      	mov	sl, r0
 800ded0:	2800      	cmp	r0, #0
 800ded2:	d060      	beq.n	800df96 <tcp_split_unsent_seg+0x17a>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800ded4:	6868      	ldr	r0, [r5, #4]
 800ded6:	eba4 0408 	sub.w	r4, r4, r8
 800deda:	f7fc fa3d 	bl	800a358 <pbuf_clen>
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800dede:	686a      	ldr	r2, [r5, #4]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800dee0:	f8b6 3066 	ldrh.w	r3, [r6, #102]	@ 0x66
 800dee4:	b2a4      	uxth	r4, r4
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800dee6:	8911      	ldrh	r1, [r2, #8]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800dee8:	1a1b      	subs	r3, r3, r0
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800deea:	4610      	mov	r0, r2
 800deec:	4421      	add	r1, r4
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800deee:	f8a6 3066 	strh.w	r3, [r6, #102]	@ 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800def2:	b289      	uxth	r1, r1
 800def4:	f7fc f9d4 	bl	800a2a0 <pbuf_realloc>
  useg->len -= remainder;
 800def8:	892b      	ldrh	r3, [r5, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800defa:	4648      	mov	r0, r9
  useg->len -= remainder;
 800defc:	441c      	add	r4, r3
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800defe:	68eb      	ldr	r3, [r5, #12]
  useg->len -= remainder;
 800df00:	812c      	strh	r4, [r5, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800df02:	899c      	ldrh	r4, [r3, #12]
 800df04:	f7fb f9e6 	bl	80092d4 <lwip_htons>
 800df08:	68eb      	ldr	r3, [r5, #12]
 800df0a:	4304      	orrs	r4, r0
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800df0c:	6868      	ldr	r0, [r5, #4]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800df0e:	819c      	strh	r4, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800df10:	f7fc fa22 	bl	800a358 <pbuf_clen>
 800df14:	f8b6 3066 	ldrh.w	r3, [r6, #102]	@ 0x66
 800df18:	4403      	add	r3, r0
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800df1a:	f8da 0004 	ldr.w	r0, [sl, #4]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800df1e:	f8a6 3066 	strh.w	r3, [r6, #102]	@ 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800df22:	f7fc fa19 	bl	800a358 <pbuf_clen>
 800df26:	f8b6 3066 	ldrh.w	r3, [r6, #102]	@ 0x66
 800df2a:	4418      	add	r0, r3
  seg->next = useg->next;
 800df2c:	682b      	ldr	r3, [r5, #0]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800df2e:	f8a6 0066 	strh.w	r0, [r6, #102]	@ 0x66
  seg->next = useg->next;
 800df32:	f8ca 3000 	str.w	r3, [sl]
  useg->next = seg;
 800df36:	f8c5 a000 	str.w	sl, [r5]
  if (seg->next == NULL) {
 800df3a:	f8da 3000 	ldr.w	r3, [sl]
 800df3e:	b1fb      	cbz	r3, 800df80 <tcp_split_unsent_seg+0x164>
    return ERR_OK;
 800df40:	2000      	movs	r0, #0
}
 800df42:	b003      	add	sp, #12
 800df44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    split_flags &= ~TCP_PSH;
 800df48:	f009 0937 	and.w	r9, r9, #55	@ 0x37
    remainder_flags |= TCP_PSH;
 800df4c:	f04f 0b08 	mov.w	fp, #8
 800df50:	e7aa      	b.n	800dea8 <tcp_split_unsent_seg+0x8c>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800df52:	4b19      	ldr	r3, [pc, #100]	@ (800dfb8 <tcp_split_unsent_seg+0x19c>)
 800df54:	f240 325b 	movw	r2, #859	@ 0x35b
 800df58:	4918      	ldr	r1, [pc, #96]	@ (800dfbc <tcp_split_unsent_seg+0x1a0>)
 800df5a:	4819      	ldr	r0, [pc, #100]	@ (800dfc0 <tcp_split_unsent_seg+0x1a4>)
 800df5c:	f002 fe7e 	bl	8010c5c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800df60:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800df64:	f1b8 0f00 	cmp.w	r8, #0
 800df68:	f47f af6f 	bne.w	800de4a <tcp_split_unsent_seg+0x2e>
 800df6c:	4b12      	ldr	r3, [pc, #72]	@ (800dfb8 <tcp_split_unsent_seg+0x19c>)
 800df6e:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800df72:	4914      	ldr	r1, [pc, #80]	@ (800dfc4 <tcp_split_unsent_seg+0x1a8>)
 800df74:	4812      	ldr	r0, [pc, #72]	@ (800dfc0 <tcp_split_unsent_seg+0x1a4>)
 800df76:	f002 fe71 	bl	8010c5c <iprintf>
  remainder = useg->len - split;
 800df7a:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800df7e:	e764      	b.n	800de4a <tcp_split_unsent_seg+0x2e>
    pcb->unsent_oversize = 0;
 800df80:	f8a6 3068 	strh.w	r3, [r6, #104]	@ 0x68
 800df84:	e7dc      	b.n	800df40 <tcp_split_unsent_seg+0x124>
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800df86:	4b0c      	ldr	r3, [pc, #48]	@ (800dfb8 <tcp_split_unsent_seg+0x19c>)
 800df88:	f240 324b 	movw	r2, #843	@ 0x34b
 800df8c:	490e      	ldr	r1, [pc, #56]	@ (800dfc8 <tcp_split_unsent_seg+0x1ac>)
 800df8e:	480c      	ldr	r0, [pc, #48]	@ (800dfc0 <tcp_split_unsent_seg+0x1a4>)
 800df90:	f002 fe64 	bl	8010c5c <iprintf>
 800df94:	e74a      	b.n	800de2c <tcp_split_unsent_seg+0x10>
    pbuf_free(p);
 800df96:	4638      	mov	r0, r7
 800df98:	f7fc f870 	bl	800a07c <pbuf_free>
    return ERR_MEM;
 800df9c:	f04f 30ff 	mov.w	r0, #4294967295
 800dfa0:	e7cf      	b.n	800df42 <tcp_split_unsent_seg+0x126>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800dfa2:	4b05      	ldr	r3, [pc, #20]	@ (800dfb8 <tcp_split_unsent_seg+0x19c>)
 800dfa4:	f240 3253 	movw	r2, #851	@ 0x353
 800dfa8:	4908      	ldr	r1, [pc, #32]	@ (800dfcc <tcp_split_unsent_seg+0x1b0>)
 800dfaa:	4805      	ldr	r0, [pc, #20]	@ (800dfc0 <tcp_split_unsent_seg+0x1a4>)
 800dfac:	f002 fe56 	bl	8010c5c <iprintf>
    return ERR_VAL;
 800dfb0:	f06f 0005 	mvn.w	r0, #5
 800dfb4:	e7c5      	b.n	800df42 <tcp_split_unsent_seg+0x126>
 800dfb6:	bf00      	nop
 800dfb8:	08013ba8 	.word	0x08013ba8
 800dfbc:	08013f9c 	.word	0x08013f9c
 800dfc0:	08011f14 	.word	0x08011f14
 800dfc4:	08013fac 	.word	0x08013fac
 800dfc8:	08013f54 	.word	0x08013f54
 800dfcc:	08013f78 	.word	0x08013f78

0800dfd0 <tcp_enqueue_flags>:
{
 800dfd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800dfd4:	f011 0703 	ands.w	r7, r1, #3
{
 800dfd8:	b083      	sub	sp, #12
 800dfda:	460d      	mov	r5, r1
 800dfdc:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800dfde:	d053      	beq.n	800e088 <tcp_enqueue_flags+0xb8>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800dfe0:	2c00      	cmp	r4, #0
 800dfe2:	d05a      	beq.n	800e09a <tcp_enqueue_flags+0xca>
  if (flags & TCP_SYN) {
 800dfe4:	f3c5 0840 	ubfx	r8, r5, #1, #1
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800dfe8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800dfec:	2036      	movs	r0, #54	@ 0x36
 800dfee:	ea4f 0988 	mov.w	r9, r8, lsl #2
 800dff2:	4649      	mov	r1, r9
 800dff4:	f7fc f8b2 	bl	800a15c <pbuf_alloc>
 800dff8:	4606      	mov	r6, r0
 800dffa:	2800      	cmp	r0, #0
 800dffc:	d071      	beq.n	800e0e2 <tcp_enqueue_flags+0x112>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800dffe:	8943      	ldrh	r3, [r0, #10]
 800e000:	454b      	cmp	r3, r9
 800e002:	d352      	bcc.n	800e0aa <tcp_enqueue_flags+0xda>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800e004:	4631      	mov	r1, r6
 800e006:	f8cd 8000 	str.w	r8, [sp]
 800e00a:	462a      	mov	r2, r5
 800e00c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800e00e:	4620      	mov	r0, r4
 800e010:	f7ff fad4 	bl	800d5bc <tcp_create_segment>
 800e014:	4606      	mov	r6, r0
 800e016:	2800      	cmp	r0, #0
 800e018:	d063      	beq.n	800e0e2 <tcp_enqueue_flags+0x112>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800e01a:	68c3      	ldr	r3, [r0, #12]
 800e01c:	079a      	lsls	r2, r3, #30
 800e01e:	d158      	bne.n	800e0d2 <tcp_enqueue_flags+0x102>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800e020:	8933      	ldrh	r3, [r6, #8]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d149      	bne.n	800e0ba <tcp_enqueue_flags+0xea>
  if (pcb->unsent == NULL) {
 800e026:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d050      	beq.n	800e0ce <tcp_enqueue_flags+0xfe>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800e02c:	461a      	mov	r2, r3
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d1fb      	bne.n	800e02c <tcp_enqueue_flags+0x5c>
    useg->next = seg;
 800e034:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 800e036:	2300      	movs	r3, #0
 800e038:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800e03c:	b117      	cbz	r7, 800e044 <tcp_enqueue_flags+0x74>
    pcb->snd_lbb++;
 800e03e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800e040:	3301      	adds	r3, #1
 800e042:	65e3      	str	r3, [r4, #92]	@ 0x5c
  if (flags & TCP_FIN) {
 800e044:	07eb      	lsls	r3, r5, #31
 800e046:	d503      	bpl.n	800e050 <tcp_enqueue_flags+0x80>
    tcp_set_flags(pcb, TF_FIN);
 800e048:	8b63      	ldrh	r3, [r4, #26]
 800e04a:	f043 0320 	orr.w	r3, r3, #32
 800e04e:	8363      	strh	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e050:	6870      	ldr	r0, [r6, #4]
 800e052:	f7fc f981 	bl	800a358 <pbuf_clen>
 800e056:	f8b4 3066 	ldrh.w	r3, [r4, #102]	@ 0x66
 800e05a:	4418      	add	r0, r3
 800e05c:	b280      	uxth	r0, r0
 800e05e:	f8a4 0066 	strh.w	r0, [r4, #102]	@ 0x66
  if (pcb->snd_queuelen != 0) {
 800e062:	b918      	cbnz	r0, 800e06c <tcp_enqueue_flags+0x9c>
  return ERR_OK;
 800e064:	2000      	movs	r0, #0
}
 800e066:	b003      	add	sp, #12
 800e068:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800e06c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d1f8      	bne.n	800e064 <tcp_enqueue_flags+0x94>
 800e072:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800e074:	2b00      	cmp	r3, #0
 800e076:	d1f5      	bne.n	800e064 <tcp_enqueue_flags+0x94>
 800e078:	4b1d      	ldr	r3, [pc, #116]	@ (800e0f0 <tcp_enqueue_flags+0x120>)
 800e07a:	f240 4265 	movw	r2, #1125	@ 0x465
 800e07e:	491d      	ldr	r1, [pc, #116]	@ (800e0f4 <tcp_enqueue_flags+0x124>)
 800e080:	481d      	ldr	r0, [pc, #116]	@ (800e0f8 <tcp_enqueue_flags+0x128>)
 800e082:	f002 fdeb 	bl	8010c5c <iprintf>
 800e086:	e7ed      	b.n	800e064 <tcp_enqueue_flags+0x94>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800e088:	4b19      	ldr	r3, [pc, #100]	@ (800e0f0 <tcp_enqueue_flags+0x120>)
 800e08a:	f240 4211 	movw	r2, #1041	@ 0x411
 800e08e:	491b      	ldr	r1, [pc, #108]	@ (800e0fc <tcp_enqueue_flags+0x12c>)
 800e090:	4819      	ldr	r0, [pc, #100]	@ (800e0f8 <tcp_enqueue_flags+0x128>)
 800e092:	f002 fde3 	bl	8010c5c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800e096:	2c00      	cmp	r4, #0
 800e098:	d1a4      	bne.n	800dfe4 <tcp_enqueue_flags+0x14>
 800e09a:	4b15      	ldr	r3, [pc, #84]	@ (800e0f0 <tcp_enqueue_flags+0x120>)
 800e09c:	f240 4213 	movw	r2, #1043	@ 0x413
 800e0a0:	4917      	ldr	r1, [pc, #92]	@ (800e100 <tcp_enqueue_flags+0x130>)
 800e0a2:	4815      	ldr	r0, [pc, #84]	@ (800e0f8 <tcp_enqueue_flags+0x128>)
 800e0a4:	f002 fdda 	bl	8010c5c <iprintf>
 800e0a8:	e79c      	b.n	800dfe4 <tcp_enqueue_flags+0x14>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800e0aa:	4b11      	ldr	r3, [pc, #68]	@ (800e0f0 <tcp_enqueue_flags+0x120>)
 800e0ac:	f240 4239 	movw	r2, #1081	@ 0x439
 800e0b0:	4914      	ldr	r1, [pc, #80]	@ (800e104 <tcp_enqueue_flags+0x134>)
 800e0b2:	4811      	ldr	r0, [pc, #68]	@ (800e0f8 <tcp_enqueue_flags+0x128>)
 800e0b4:	f002 fdd2 	bl	8010c5c <iprintf>
 800e0b8:	e7a4      	b.n	800e004 <tcp_enqueue_flags+0x34>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800e0ba:	4b0d      	ldr	r3, [pc, #52]	@ (800e0f0 <tcp_enqueue_flags+0x120>)
 800e0bc:	f240 4243 	movw	r2, #1091	@ 0x443
 800e0c0:	4911      	ldr	r1, [pc, #68]	@ (800e108 <tcp_enqueue_flags+0x138>)
 800e0c2:	480d      	ldr	r0, [pc, #52]	@ (800e0f8 <tcp_enqueue_flags+0x128>)
 800e0c4:	f002 fdca 	bl	8010c5c <iprintf>
  if (pcb->unsent == NULL) {
 800e0c8:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d1ae      	bne.n	800e02c <tcp_enqueue_flags+0x5c>
    pcb->unsent = seg;
 800e0ce:	66e6      	str	r6, [r4, #108]	@ 0x6c
 800e0d0:	e7b1      	b.n	800e036 <tcp_enqueue_flags+0x66>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800e0d2:	4b07      	ldr	r3, [pc, #28]	@ (800e0f0 <tcp_enqueue_flags+0x120>)
 800e0d4:	f240 4242 	movw	r2, #1090	@ 0x442
 800e0d8:	490c      	ldr	r1, [pc, #48]	@ (800e10c <tcp_enqueue_flags+0x13c>)
 800e0da:	4807      	ldr	r0, [pc, #28]	@ (800e0f8 <tcp_enqueue_flags+0x128>)
 800e0dc:	f002 fdbe 	bl	8010c5c <iprintf>
 800e0e0:	e79e      	b.n	800e020 <tcp_enqueue_flags+0x50>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e0e2:	8b63      	ldrh	r3, [r4, #26]
    return ERR_MEM;
 800e0e4:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e0e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e0ec:	8363      	strh	r3, [r4, #26]
 800e0ee:	e7ba      	b.n	800e066 <tcp_enqueue_flags+0x96>
 800e0f0:	08013ba8 	.word	0x08013ba8
 800e0f4:	080140b4 	.word	0x080140b4
 800e0f8:	08011f14 	.word	0x08011f14
 800e0fc:	08013fbc 	.word	0x08013fbc
 800e100:	08014014 	.word	0x08014014
 800e104:	08014034 	.word	0x08014034
 800e108:	08014088 	.word	0x08014088
 800e10c:	08014070 	.word	0x08014070

0800e110 <tcp_send_fin>:
{
 800e110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800e112:	4606      	mov	r6, r0
 800e114:	b188      	cbz	r0, 800e13a <tcp_send_fin+0x2a>
  if (pcb->unsent != NULL) {
 800e116:	6ef4      	ldr	r4, [r6, #108]	@ 0x6c
 800e118:	b14c      	cbz	r4, 800e12e <tcp_send_fin+0x1e>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e11a:	4625      	mov	r5, r4
 800e11c:	6824      	ldr	r4, [r4, #0]
 800e11e:	2c00      	cmp	r4, #0
 800e120:	d1fb      	bne.n	800e11a <tcp_send_fin+0xa>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800e122:	68eb      	ldr	r3, [r5, #12]
 800e124:	8998      	ldrh	r0, [r3, #12]
 800e126:	f7fb f8d5 	bl	80092d4 <lwip_htons>
 800e12a:	0743      	lsls	r3, r0, #29
 800e12c:	d00d      	beq.n	800e14a <tcp_send_fin+0x3a>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800e12e:	4630      	mov	r0, r6
 800e130:	2101      	movs	r1, #1
}
 800e132:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800e136:	f7ff bf4b 	b.w	800dfd0 <tcp_enqueue_flags>
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800e13a:	4b0b      	ldr	r3, [pc, #44]	@ (800e168 <tcp_send_fin+0x58>)
 800e13c:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800e140:	490a      	ldr	r1, [pc, #40]	@ (800e16c <tcp_send_fin+0x5c>)
 800e142:	480b      	ldr	r0, [pc, #44]	@ (800e170 <tcp_send_fin+0x60>)
 800e144:	f002 fd8a 	bl	8010c5c <iprintf>
 800e148:	e7e5      	b.n	800e116 <tcp_send_fin+0x6>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800e14a:	68eb      	ldr	r3, [r5, #12]
 800e14c:	2001      	movs	r0, #1
 800e14e:	899f      	ldrh	r7, [r3, #12]
 800e150:	f7fb f8c0 	bl	80092d4 <lwip_htons>
      tcp_set_flags(pcb, TF_FIN);
 800e154:	8b73      	ldrh	r3, [r6, #26]
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800e156:	4307      	orrs	r7, r0
 800e158:	68ea      	ldr	r2, [r5, #12]
      tcp_set_flags(pcb, TF_FIN);
 800e15a:	f043 0320 	orr.w	r3, r3, #32
}
 800e15e:	4620      	mov	r0, r4
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800e160:	8197      	strh	r7, [r2, #12]
      tcp_set_flags(pcb, TF_FIN);
 800e162:	8373      	strh	r3, [r6, #26]
}
 800e164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e166:	bf00      	nop
 800e168:	08013ba8 	.word	0x08013ba8
 800e16c:	080140dc 	.word	0x080140dc
 800e170:	08011f14 	.word	0x08011f14

0800e174 <tcp_rexmit_rto_prepare>:
{
 800e174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800e176:	4605      	mov	r5, r0
 800e178:	2800      	cmp	r0, #0
 800e17a:	d031      	beq.n	800e1e0 <tcp_rexmit_rto_prepare+0x6c>
  if (pcb->unacked == NULL) {
 800e17c:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
 800e17e:	b132      	cbz	r2, 800e18e <tcp_rexmit_rto_prepare+0x1a>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e180:	6813      	ldr	r3, [r2, #0]
 800e182:	4614      	mov	r4, r2
 800e184:	b153      	cbz	r3, 800e19c <tcp_rexmit_rto_prepare+0x28>
  if (seg->p->ref != 1) {
 800e186:	6863      	ldr	r3, [r4, #4]
 800e188:	7b9b      	ldrb	r3, [r3, #14]
 800e18a:	2b01      	cmp	r3, #1
 800e18c:	d002      	beq.n	800e194 <tcp_rexmit_rto_prepare+0x20>
    return ERR_VAL;
 800e18e:	f06f 0005 	mvn.w	r0, #5
}
 800e192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e194:	6824      	ldr	r4, [r4, #0]
 800e196:	6823      	ldr	r3, [r4, #0]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d1f4      	bne.n	800e186 <tcp_rexmit_rto_prepare+0x12>
  if (seg->p->ref != 1) {
 800e19c:	6863      	ldr	r3, [r4, #4]
 800e19e:	7b9b      	ldrb	r3, [r3, #14]
 800e1a0:	2b01      	cmp	r3, #1
 800e1a2:	d1f4      	bne.n	800e18e <tcp_rexmit_rto_prepare+0x1a>
  tcp_set_flags(pcb, TF_RTO);
 800e1a4:	8b6b      	ldrh	r3, [r5, #26]
  pcb->unacked = NULL;
 800e1a6:	2700      	movs	r7, #0
  seg->next = pcb->unsent;
 800e1a8:	6ee9      	ldr	r1, [r5, #108]	@ 0x6c
  tcp_set_flags(pcb, TF_RTO);
 800e1aa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
  seg->next = pcb->unsent;
 800e1ae:	6021      	str	r1, [r4, #0]
  tcp_set_flags(pcb, TF_RTO);
 800e1b0:	836b      	strh	r3, [r5, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e1b2:	68e3      	ldr	r3, [r4, #12]
  pcb->unacked = NULL;
 800e1b4:	e9c5 271b 	strd	r2, r7, [r5, #108]	@ 0x6c
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e1b8:	6858      	ldr	r0, [r3, #4]
 800e1ba:	f7fb f88f 	bl	80092dc <lwip_htonl>
 800e1be:	68e3      	ldr	r3, [r4, #12]
 800e1c0:	4606      	mov	r6, r0
 800e1c2:	8924      	ldrh	r4, [r4, #8]
 800e1c4:	8998      	ldrh	r0, [r3, #12]
 800e1c6:	f7fb f885 	bl	80092d4 <lwip_htons>
 800e1ca:	4603      	mov	r3, r0
 800e1cc:	4426      	add	r6, r4
  return ERR_OK;
 800e1ce:	4638      	mov	r0, r7
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e1d0:	f013 0303 	ands.w	r3, r3, #3
  pcb->rttest = 0;
 800e1d4:	636f      	str	r7, [r5, #52]	@ 0x34
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e1d6:	bf18      	it	ne
 800e1d8:	2301      	movne	r3, #1
 800e1da:	4433      	add	r3, r6
 800e1dc:	64eb      	str	r3, [r5, #76]	@ 0x4c
}
 800e1de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800e1e0:	4b03      	ldr	r3, [pc, #12]	@ (800e1f0 <tcp_rexmit_rto_prepare+0x7c>)
 800e1e2:	f240 6263 	movw	r2, #1635	@ 0x663
 800e1e6:	4903      	ldr	r1, [pc, #12]	@ (800e1f4 <tcp_rexmit_rto_prepare+0x80>)
 800e1e8:	4803      	ldr	r0, [pc, #12]	@ (800e1f8 <tcp_rexmit_rto_prepare+0x84>)
 800e1ea:	f002 fd37 	bl	8010c5c <iprintf>
 800e1ee:	e7c5      	b.n	800e17c <tcp_rexmit_rto_prepare+0x8>
 800e1f0:	08013ba8 	.word	0x08013ba8
 800e1f4:	080140f8 	.word	0x080140f8
 800e1f8:	08011f14 	.word	0x08011f14

0800e1fc <tcp_rexmit>:
{
 800e1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800e1fe:	4607      	mov	r7, r0
 800e200:	2800      	cmp	r0, #0
 800e202:	d031      	beq.n	800e268 <tcp_rexmit+0x6c>
  if (pcb->unacked == NULL) {
 800e204:	6f3e      	ldr	r6, [r7, #112]	@ 0x70
 800e206:	b34e      	cbz	r6, 800e25c <tcp_rexmit+0x60>
  if (seg->p->ref != 1) {
 800e208:	6873      	ldr	r3, [r6, #4]
 800e20a:	7b9b      	ldrb	r3, [r3, #14]
 800e20c:	2b01      	cmp	r3, #1
 800e20e:	d125      	bne.n	800e25c <tcp_rexmit+0x60>
  pcb->unacked = seg->next;
 800e210:	6832      	ldr	r2, [r6, #0]
  cur_seg = &(pcb->unsent);
 800e212:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
  while (*cur_seg &&
 800e216:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
  pcb->unacked = seg->next;
 800e218:	673a      	str	r2, [r7, #112]	@ 0x70
  while (*cur_seg &&
 800e21a:	b91b      	cbnz	r3, 800e224 <tcp_rexmit+0x28>
 800e21c:	e00f      	b.n	800e23e <tcp_rexmit+0x42>
    cur_seg = &((*cur_seg)->next );
 800e21e:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 800e220:	682b      	ldr	r3, [r5, #0]
 800e222:	b163      	cbz	r3, 800e23e <tcp_rexmit+0x42>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e224:	68db      	ldr	r3, [r3, #12]
 800e226:	6858      	ldr	r0, [r3, #4]
 800e228:	f7fb f858 	bl	80092dc <lwip_htonl>
 800e22c:	68f3      	ldr	r3, [r6, #12]
 800e22e:	4604      	mov	r4, r0
 800e230:	6858      	ldr	r0, [r3, #4]
 800e232:	f7fb f853 	bl	80092dc <lwip_htonl>
 800e236:	1a24      	subs	r4, r4, r0
  while (*cur_seg &&
 800e238:	2c00      	cmp	r4, #0
 800e23a:	dbf0      	blt.n	800e21e <tcp_rexmit+0x22>
    cur_seg = &((*cur_seg)->next );
 800e23c:	682b      	ldr	r3, [r5, #0]
  seg->next = *cur_seg;
 800e23e:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 800e240:	602e      	str	r6, [r5, #0]
  if (seg->next == NULL) {
 800e242:	6833      	ldr	r3, [r6, #0]
 800e244:	b16b      	cbz	r3, 800e262 <tcp_rexmit+0x66>
  if (pcb->nrtx < 0xFF) {
 800e246:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 800e24a:	2bff      	cmp	r3, #255	@ 0xff
 800e24c:	d002      	beq.n	800e254 <tcp_rexmit+0x58>
    ++pcb->nrtx;
 800e24e:	3301      	adds	r3, #1
 800e250:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  pcb->rttest = 0;
 800e254:	2300      	movs	r3, #0
  return ERR_OK;
 800e256:	4618      	mov	r0, r3
  pcb->rttest = 0;
 800e258:	637b      	str	r3, [r7, #52]	@ 0x34
}
 800e25a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_VAL;
 800e25c:	f06f 0005 	mvn.w	r0, #5
}
 800e260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = 0;
 800e262:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800e266:	e7ee      	b.n	800e246 <tcp_rexmit+0x4a>
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800e268:	4b03      	ldr	r3, [pc, #12]	@ (800e278 <tcp_rexmit+0x7c>)
 800e26a:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800e26e:	4903      	ldr	r1, [pc, #12]	@ (800e27c <tcp_rexmit+0x80>)
 800e270:	4803      	ldr	r0, [pc, #12]	@ (800e280 <tcp_rexmit+0x84>)
 800e272:	f002 fcf3 	bl	8010c5c <iprintf>
 800e276:	e7c5      	b.n	800e204 <tcp_rexmit+0x8>
 800e278:	08013ba8 	.word	0x08013ba8
 800e27c:	0801411c 	.word	0x0801411c
 800e280:	08011f14 	.word	0x08011f14

0800e284 <tcp_rexmit_fast>:
{
 800e284:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800e286:	4604      	mov	r4, r0
 800e288:	b340      	cbz	r0, 800e2dc <tcp_rexmit_fast+0x58>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800e28a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e28c:	b113      	cbz	r3, 800e294 <tcp_rexmit_fast+0x10>
 800e28e:	8b63      	ldrh	r3, [r4, #26]
 800e290:	075b      	lsls	r3, r3, #29
 800e292:	d500      	bpl.n	800e296 <tcp_rexmit_fast+0x12>
}
 800e294:	bd10      	pop	{r4, pc}
    if (tcp_rexmit(pcb) == ERR_OK) {
 800e296:	4620      	mov	r0, r4
 800e298:	f7ff ffb0 	bl	800e1fc <tcp_rexmit>
 800e29c:	2800      	cmp	r0, #0
 800e29e:	d1f9      	bne.n	800e294 <tcp_rexmit_fast+0x10>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e2a0:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 800e2a4:	f8b4 3048 	ldrh.w	r3, [r4, #72]	@ 0x48
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800e2a8:	8e62      	ldrh	r2, [r4, #50]	@ 0x32
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e2aa:	4299      	cmp	r1, r3
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800e2ac:	ea4f 0042 	mov.w	r0, r2, lsl #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e2b0:	bf28      	it	cs
 800e2b2:	4619      	movcs	r1, r3
 800e2b4:	084b      	lsrs	r3, r1, #1
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800e2b6:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e2ba:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800e2be:	d902      	bls.n	800e2c6 <tcp_rexmit_fast+0x42>
        pcb->ssthresh = 2 * pcb->mss;
 800e2c0:	b283      	uxth	r3, r0
 800e2c2:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
      tcp_set_flags(pcb, TF_INFR);
 800e2c6:	8b61      	ldrh	r1, [r4, #26]
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800e2c8:	4402      	add	r2, r0
      tcp_set_flags(pcb, TF_INFR);
 800e2ca:	f041 0104 	orr.w	r1, r1, #4
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800e2ce:	4413      	add	r3, r2
      pcb->rtime = 0;
 800e2d0:	2200      	movs	r2, #0
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800e2d2:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800e2d6:	8361      	strh	r1, [r4, #26]
      pcb->rtime = 0;
 800e2d8:	8622      	strh	r2, [r4, #48]	@ 0x30
}
 800e2da:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800e2dc:	4b03      	ldr	r3, [pc, #12]	@ (800e2ec <tcp_rexmit_fast+0x68>)
 800e2de:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800e2e2:	4903      	ldr	r1, [pc, #12]	@ (800e2f0 <tcp_rexmit_fast+0x6c>)
 800e2e4:	4803      	ldr	r0, [pc, #12]	@ (800e2f4 <tcp_rexmit_fast+0x70>)
 800e2e6:	f002 fcb9 	bl	8010c5c <iprintf>
 800e2ea:	e7ce      	b.n	800e28a <tcp_rexmit_fast+0x6>
 800e2ec:	08013ba8 	.word	0x08013ba8
 800e2f0:	08014134 	.word	0x08014134
 800e2f4:	08011f14 	.word	0x08011f14

0800e2f8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800e2f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2fc:	b084      	sub	sp, #16
 800e2fe:	4607      	mov	r7, r0
 800e300:	460e      	mov	r6, r1
 800e302:	4615      	mov	r5, r2
 800e304:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800e308:	461c      	mov	r4, r3
{
 800e30a:	f8bd 9034 	ldrh.w	r9, [sp, #52]	@ 0x34
 800e30e:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800e312:	b1fb      	cbz	r3, 800e354 <tcp_rst+0x5c>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800e314:	f1b8 0f00 	cmp.w	r8, #0
 800e318:	d026      	beq.n	800e368 <tcp_rst+0x70>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800e31a:	4630      	mov	r0, r6
 800e31c:	f7fa ffde 	bl	80092dc <lwip_htonl>
 800e320:	2114      	movs	r1, #20
 800e322:	4602      	mov	r2, r0
 800e324:	4628      	mov	r0, r5
 800e326:	f24d 0516 	movw	r5, #53270	@ 0xd016
 800e32a:	464b      	mov	r3, r9
 800e32c:	f8cd a000 	str.w	sl, [sp]
 800e330:	e9cd 1501 	strd	r1, r5, [sp, #4]
 800e334:	2100      	movs	r1, #0
 800e336:	f7ff f9b7 	bl	800d6a8 <tcp_output_alloc_header_common.constprop.0>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800e33a:	4601      	mov	r1, r0
 800e33c:	b138      	cbz	r0, 800e34e <tcp_rst+0x56>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800e33e:	4643      	mov	r3, r8
 800e340:	4622      	mov	r2, r4
 800e342:	4638      	mov	r0, r7
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800e344:	b004      	add	sp, #16
 800e346:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800e34a:	f7ff ba1b 	b.w	800d784 <tcp_output_control_segment>
}
 800e34e:	b004      	add	sp, #16
 800e350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800e354:	4b08      	ldr	r3, [pc, #32]	@ (800e378 <tcp_rst+0x80>)
 800e356:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800e35a:	4908      	ldr	r1, [pc, #32]	@ (800e37c <tcp_rst+0x84>)
 800e35c:	4808      	ldr	r0, [pc, #32]	@ (800e380 <tcp_rst+0x88>)
 800e35e:	f002 fc7d 	bl	8010c5c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800e362:	f1b8 0f00 	cmp.w	r8, #0
 800e366:	d1d8      	bne.n	800e31a <tcp_rst+0x22>
 800e368:	4b03      	ldr	r3, [pc, #12]	@ (800e378 <tcp_rst+0x80>)
 800e36a:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800e36e:	4905      	ldr	r1, [pc, #20]	@ (800e384 <tcp_rst+0x8c>)
 800e370:	4803      	ldr	r0, [pc, #12]	@ (800e380 <tcp_rst+0x88>)
 800e372:	f002 fc73 	bl	8010c5c <iprintf>
 800e376:	e7d0      	b.n	800e31a <tcp_rst+0x22>
 800e378:	08013ba8 	.word	0x08013ba8
 800e37c:	08014154 	.word	0x08014154
 800e380:	08011f14 	.word	0x08011f14
 800e384:	08014170 	.word	0x08014170

0800e388 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800e388:	b510      	push	{r4, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800e38a:	4604      	mov	r4, r0
 800e38c:	b1c8      	cbz	r0, 800e3c2 <tcp_send_empty_ack+0x3a>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800e38e:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 800e390:	f7fa ffa4 	bl	80092dc <lwip_htonl>
 800e394:	2100      	movs	r1, #0
 800e396:	4602      	mov	r2, r0
 800e398:	4620      	mov	r0, r4
 800e39a:	f7ff f9cb 	bl	800d734 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800e39e:	4601      	mov	r1, r0
 800e3a0:	b1b8      	cbz	r0, 800e3d2 <tcp_send_empty_ack+0x4a>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e3a2:	1d23      	adds	r3, r4, #4
 800e3a4:	4622      	mov	r2, r4
 800e3a6:	4620      	mov	r0, r4
 800e3a8:	f7ff f9ec 	bl	800d784 <tcp_output_control_segment>
  if (err != ERR_OK) {
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e3ac:	8b63      	ldrh	r3, [r4, #26]
  if (err != ERR_OK) {
 800e3ae:	b920      	cbnz	r0, 800e3ba <tcp_send_empty_ack+0x32>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e3b0:	f023 0303 	bic.w	r3, r3, #3
 800e3b4:	b29b      	uxth	r3, r3
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e3b6:	8363      	strh	r3, [r4, #26]
  }

  return err;
}
 800e3b8:	bd10      	pop	{r4, pc}
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e3ba:	f043 0303 	orr.w	r3, r3, #3
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e3be:	8363      	strh	r3, [r4, #26]
}
 800e3c0:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800e3c2:	4b07      	ldr	r3, [pc, #28]	@ (800e3e0 <tcp_send_empty_ack+0x58>)
 800e3c4:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800e3c8:	4906      	ldr	r1, [pc, #24]	@ (800e3e4 <tcp_send_empty_ack+0x5c>)
 800e3ca:	4807      	ldr	r0, [pc, #28]	@ (800e3e8 <tcp_send_empty_ack+0x60>)
 800e3cc:	f002 fc46 	bl	8010c5c <iprintf>
 800e3d0:	e7dd      	b.n	800e38e <tcp_send_empty_ack+0x6>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e3d2:	8b63      	ldrh	r3, [r4, #26]
    return ERR_BUF;
 800e3d4:	f06f 0001 	mvn.w	r0, #1
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e3d8:	f043 0303 	orr.w	r3, r3, #3
    return ERR_BUF;
 800e3dc:	e7eb      	b.n	800e3b6 <tcp_send_empty_ack+0x2e>
 800e3de:	bf00      	nop
 800e3e0:	08013ba8 	.word	0x08013ba8
 800e3e4:	0801418c 	.word	0x0801418c
 800e3e8:	08011f14 	.word	0x08011f14

0800e3ec <tcp_output>:
{
 800e3ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3f0:	4604      	mov	r4, r0
 800e3f2:	b085      	sub	sp, #20
  LWIP_ASSERT_CORE_LOCKED();
 800e3f4:	f7f8 faa4 	bl	8006940 <sys_check_core_locking>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800e3f8:	2c00      	cmp	r4, #0
 800e3fa:	f000 81a5 	beq.w	800e748 <tcp_output+0x35c>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800e3fe:	7d23      	ldrb	r3, [r4, #20]
 800e400:	2b01      	cmp	r3, #1
 800e402:	f000 8155 	beq.w	800e6b0 <tcp_output+0x2c4>
  if (tcp_input_pcb == pcb) {
 800e406:	4bb1      	ldr	r3, [pc, #708]	@ (800e6cc <tcp_output+0x2e0>)
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	42a3      	cmp	r3, r4
 800e40c:	d031      	beq.n	800e472 <tcp_output+0x86>
  seg = pcb->unsent;
 800e40e:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800e410:	f8b4 7048 	ldrh.w	r7, [r4, #72]	@ 0x48
 800e414:	f8b4 6060 	ldrh.w	r6, [r4, #96]	@ 0x60
  if (seg == NULL) {
 800e418:	b325      	cbz	r5, 800e464 <tcp_output+0x78>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800e41a:	7a20      	ldrb	r0, [r4, #8]
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800e41c:	f104 0804 	add.w	r8, r4, #4
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800e420:	2800      	cmp	r0, #0
 800e422:	f040 8199 	bne.w	800e758 <tcp_output+0x36c>
    return ip_route(src, dst);
 800e426:	4640      	mov	r0, r8
 800e428:	f001 fbe6 	bl	800fbf8 <ip4_route>
 800e42c:	4683      	mov	fp, r0
  if (netif == NULL) {
 800e42e:	f1bb 0f00 	cmp.w	fp, #0
 800e432:	f000 81a5 	beq.w	800e780 <tcp_output+0x394>
  if (ip_addr_isany(&pcb->local_ip)) {
 800e436:	6823      	ldr	r3, [r4, #0]
 800e438:	b913      	cbnz	r3, 800e440 <tcp_output+0x54>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e43a:	f8db 3004 	ldr.w	r3, [fp, #4]
 800e43e:	6023      	str	r3, [r4, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800e440:	68eb      	ldr	r3, [r5, #12]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800e442:	42b7      	cmp	r7, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800e444:	6858      	ldr	r0, [r3, #4]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800e446:	bf28      	it	cs
 800e448:	4637      	movcs	r7, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800e44a:	f7fa ff47 	bl	80092dc <lwip_htonl>
 800e44e:	892b      	ldrh	r3, [r5, #8]
 800e450:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800e452:	1a9b      	subs	r3, r3, r2
 800e454:	4403      	add	r3, r0
 800e456:	42bb      	cmp	r3, r7
 800e458:	d90f      	bls.n	800e47a <tcp_output+0x8e>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800e45a:	f8b4 3060 	ldrh.w	r3, [r4, #96]	@ 0x60
 800e45e:	42bb      	cmp	r3, r7
 800e460:	f000 8142 	beq.w	800e6e8 <tcp_output+0x2fc>
    if (pcb->flags & TF_ACK_NOW) {
 800e464:	8b62      	ldrh	r2, [r4, #26]
 800e466:	0790      	lsls	r0, r2, #30
 800e468:	f100 812a 	bmi.w	800e6c0 <tcp_output+0x2d4>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800e46c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e470:	8362      	strh	r2, [r4, #26]
    return ERR_OK;
 800e472:	2000      	movs	r0, #0
}
 800e474:	b005      	add	sp, #20
 800e476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  pcb->persist_backoff = 0;
 800e47a:	2300      	movs	r3, #0
 800e47c:	f884 3099 	strb.w	r3, [r4, #153]	@ 0x99
  useg = pcb->unacked;
 800e480:	6f23      	ldr	r3, [r4, #112]	@ 0x70
  if (useg != NULL) {
 800e482:	2b00      	cmp	r3, #0
 800e484:	f000 8140 	beq.w	800e708 <tcp_output+0x31c>
    for (; useg->next != NULL; useg = useg->next);
 800e488:	4699      	mov	r9, r3
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d1fb      	bne.n	800e488 <tcp_output+0x9c>
    LWIP_ASSERT("RST not expected here!",
 800e490:	465e      	mov	r6, fp
 800e492:	e0a6      	b.n	800e5e2 <tcp_output+0x1f6>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e494:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e496:	b15b      	cbz	r3, 800e4b0 <tcp_output+0xc4>
 800e498:	8b62      	ldrh	r2, [r4, #26]
 800e49a:	f012 0f44 	tst.w	r2, #68	@ 0x44
 800e49e:	d107      	bne.n	800e4b0 <tcp_output+0xc4>
 800e4a0:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 800e4a2:	2800      	cmp	r0, #0
 800e4a4:	f000 80f2 	beq.w	800e68c <tcp_output+0x2a0>
 800e4a8:	6803      	ldr	r3, [r0, #0]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	f000 80e9 	beq.w	800e682 <tcp_output+0x296>
    if (pcb->state != SYN_SENT) {
 800e4b0:	7d23      	ldrb	r3, [r4, #20]
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800e4b2:	f8d5 a00c 	ldr.w	sl, [r5, #12]
    if (pcb->state != SYN_SENT) {
 800e4b6:	2b02      	cmp	r3, #2
 800e4b8:	d00a      	beq.n	800e4d0 <tcp_output+0xe4>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800e4ba:	f8ba a00c 	ldrh.w	sl, [sl, #12]
 800e4be:	2010      	movs	r0, #16
 800e4c0:	f7fa ff08 	bl	80092d4 <lwip_htons>
 800e4c4:	ea4a 0000 	orr.w	r0, sl, r0
 800e4c8:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800e4cc:	f8aa 000c 	strh.w	r0, [sl, #12]
  if (seg->p->ref != 1) {
 800e4d0:	686b      	ldr	r3, [r5, #4]
 800e4d2:	7b9b      	ldrb	r3, [r3, #14]
 800e4d4:	2b01      	cmp	r3, #1
 800e4d6:	d153      	bne.n	800e580 <tcp_output+0x194>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800e4d8:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800e4da:	f7fa feff 	bl	80092dc <lwip_htonl>
 800e4de:	f8ca 0008 	str.w	r0, [sl, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800e4e2:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
 800e4e4:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800e4e8:	f7fa fef4 	bl	80092d4 <lwip_htons>
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e4ec:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800e4ee:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800e4f0:	f8aa 000e 	strh.w	r0, [sl, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e4f4:	4413      	add	r3, r2
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800e4f6:	f8d5 a00c 	ldr.w	sl, [r5, #12]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e4fa:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800e4fc:	7aab      	ldrb	r3, [r5, #10]
 800e4fe:	07da      	lsls	r2, r3, #31
 800e500:	f100 80ae 	bmi.w	800e660 <tcp_output+0x274>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800e504:	f10a 0b14 	add.w	fp, sl, #20
  if (pcb->rtime < 0) {
 800e508:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	@ 0x30
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	da01      	bge.n	800e514 <tcp_output+0x128>
    pcb->rtime = 0;
 800e510:	2300      	movs	r3, #0
 800e512:	8623      	strh	r3, [r4, #48]	@ 0x30
  if (pcb->rttest == 0) {
 800e514:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e516:	2b00      	cmp	r3, #0
 800e518:	f000 8097 	beq.w	800e64a <tcp_output+0x25e>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e51c:	6868      	ldr	r0, [r5, #4]
  seg->tcphdr->chksum = 0;
 800e51e:	2200      	movs	r2, #0
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e520:	6843      	ldr	r3, [r0, #4]
  seg->p->len -= len;
 800e522:	8941      	ldrh	r1, [r0, #10]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e524:	ebaa 0303 	sub.w	r3, sl, r3
  seg->p->payload = seg->tcphdr;
 800e528:	f8c0 a004 	str.w	sl, [r0, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e52c:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 800e52e:	1ac9      	subs	r1, r1, r3
 800e530:	8141      	strh	r1, [r0, #10]
  seg->p->tot_len -= len;
 800e532:	8901      	ldrh	r1, [r0, #8]
 800e534:	1acb      	subs	r3, r1, r3
 800e536:	8103      	strh	r3, [r0, #8]
  seg->tcphdr->chksum = 0;
 800e538:	f88a 2010 	strb.w	r2, [sl, #16]
 800e53c:	f88a 2011 	strb.w	r2, [sl, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800e540:	7aab      	ldrb	r3, [r5, #10]
 800e542:	f013 0f01 	tst.w	r3, #1
 800e546:	bf0c      	ite	eq
 800e548:	2314      	moveq	r3, #20
 800e54a:	2318      	movne	r3, #24
 800e54c:	449a      	add	sl, r3
 800e54e:	45d3      	cmp	fp, sl
 800e550:	d007      	beq.n	800e562 <tcp_output+0x176>
 800e552:	4b5f      	ldr	r3, [pc, #380]	@ (800e6d0 <tcp_output+0x2e4>)
 800e554:	f240 621c 	movw	r2, #1564	@ 0x61c
 800e558:	495e      	ldr	r1, [pc, #376]	@ (800e6d4 <tcp_output+0x2e8>)
 800e55a:	485f      	ldr	r0, [pc, #380]	@ (800e6d8 <tcp_output+0x2ec>)
 800e55c:	f002 fb7e 	bl	8010c5c <iprintf>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800e560:	6868      	ldr	r0, [r5, #4]
 800e562:	9602      	str	r6, [sp, #8]
 800e564:	4642      	mov	r2, r8
 800e566:	7aa3      	ldrb	r3, [r4, #10]
 800e568:	4621      	mov	r1, r4
 800e56a:	9300      	str	r3, [sp, #0]
 800e56c:	2306      	movs	r3, #6
 800e56e:	9301      	str	r3, [sp, #4]
 800e570:	7ae3      	ldrb	r3, [r4, #11]
 800e572:	f001 fcdb 	bl	800ff2c <ip4_output_if>
    if (err != ERR_OK) {
 800e576:	2800      	cmp	r0, #0
 800e578:	f040 80f8 	bne.w	800e76c <tcp_output+0x380>
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e57c:	f8d5 a00c 	ldr.w	sl, [r5, #12]
    pcb->unsent = seg->next;
 800e580:	682b      	ldr	r3, [r5, #0]
 800e582:	66e3      	str	r3, [r4, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800e584:	7d23      	ldrb	r3, [r4, #20]
 800e586:	2b02      	cmp	r3, #2
 800e588:	d003      	beq.n	800e592 <tcp_output+0x1a6>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e58a:	8b63      	ldrh	r3, [r4, #26]
 800e58c:	f023 0303 	bic.w	r3, r3, #3
 800e590:	8363      	strh	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e592:	f8da 0004 	ldr.w	r0, [sl, #4]
 800e596:	f7fa fea1 	bl	80092dc <lwip_htonl>
 800e59a:	68eb      	ldr	r3, [r5, #12]
 800e59c:	4682      	mov	sl, r0
 800e59e:	f8b5 b008 	ldrh.w	fp, [r5, #8]
 800e5a2:	8998      	ldrh	r0, [r3, #12]
 800e5a4:	f7fa fe96 	bl	80092d4 <lwip_htons>
 800e5a8:	f010 0303 	ands.w	r3, r0, #3
 800e5ac:	44da      	add	sl, fp
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e5ae:	6d22      	ldr	r2, [r4, #80]	@ 0x50
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e5b0:	bf18      	it	ne
 800e5b2:	2301      	movne	r3, #1
 800e5b4:	4453      	add	r3, sl
    if (TCP_TCPLEN(seg) > 0) {
 800e5b6:	f8b5 a008 	ldrh.w	sl, [r5, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e5ba:	1ad2      	subs	r2, r2, r3
 800e5bc:	2a00      	cmp	r2, #0
      pcb->snd_nxt = snd_nxt;
 800e5be:	bfb8      	it	lt
 800e5c0:	6523      	strlt	r3, [r4, #80]	@ 0x50
    if (TCP_TCPLEN(seg) > 0) {
 800e5c2:	68eb      	ldr	r3, [r5, #12]
 800e5c4:	8998      	ldrh	r0, [r3, #12]
 800e5c6:	f7fa fe85 	bl	80092d4 <lwip_htons>
 800e5ca:	0783      	lsls	r3, r0, #30
 800e5cc:	d123      	bne.n	800e616 <tcp_output+0x22a>
 800e5ce:	f1ba 0f00 	cmp.w	sl, #0
 800e5d2:	d120      	bne.n	800e616 <tcp_output+0x22a>
      tcp_seg_free(seg);
 800e5d4:	4628      	mov	r0, r5
 800e5d6:	f7fc fb6d 	bl	800acb4 <tcp_seg_free>
    seg = pcb->unsent;
 800e5da:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
  while (seg != NULL &&
 800e5dc:	2d00      	cmp	r5, #0
 800e5de:	f000 80ca 	beq.w	800e776 <tcp_output+0x38a>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800e5e2:	68eb      	ldr	r3, [r5, #12]
 800e5e4:	6858      	ldr	r0, [r3, #4]
 800e5e6:	f7fa fe79 	bl	80092dc <lwip_htonl>
 800e5ea:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800e5ec:	1ac0      	subs	r0, r0, r3
 800e5ee:	892b      	ldrh	r3, [r5, #8]
 800e5f0:	4418      	add	r0, r3
  while (seg != NULL &&
 800e5f2:	42b8      	cmp	r0, r7
 800e5f4:	f200 80b4 	bhi.w	800e760 <tcp_output+0x374>
    LWIP_ASSERT("RST not expected here!",
 800e5f8:	68eb      	ldr	r3, [r5, #12]
 800e5fa:	8998      	ldrh	r0, [r3, #12]
 800e5fc:	f7fa fe6a 	bl	80092d4 <lwip_htons>
 800e600:	0741      	lsls	r1, r0, #29
 800e602:	f57f af47 	bpl.w	800e494 <tcp_output+0xa8>
 800e606:	4b32      	ldr	r3, [pc, #200]	@ (800e6d0 <tcp_output+0x2e4>)
 800e608:	f240 5236 	movw	r2, #1334	@ 0x536
 800e60c:	4933      	ldr	r1, [pc, #204]	@ (800e6dc <tcp_output+0x2f0>)
 800e60e:	4832      	ldr	r0, [pc, #200]	@ (800e6d8 <tcp_output+0x2ec>)
 800e610:	f002 fb24 	bl	8010c5c <iprintf>
 800e614:	e73e      	b.n	800e494 <tcp_output+0xa8>
      seg->next = NULL;
 800e616:	2300      	movs	r3, #0
 800e618:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 800e61a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e61c:	b193      	cbz	r3, 800e644 <tcp_output+0x258>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800e61e:	68eb      	ldr	r3, [r5, #12]
 800e620:	6858      	ldr	r0, [r3, #4]
 800e622:	f7fa fe5b 	bl	80092dc <lwip_htonl>
 800e626:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800e62a:	4682      	mov	sl, r0
 800e62c:	6858      	ldr	r0, [r3, #4]
 800e62e:	f7fa fe55 	bl	80092dc <lwip_htonl>
 800e632:	ebaa 0a00 	sub.w	sl, sl, r0
 800e636:	f1ba 0f00 	cmp.w	sl, #0
 800e63a:	db67      	blt.n	800e70c <tcp_output+0x320>
          useg->next = seg;
 800e63c:	f8c9 5000 	str.w	r5, [r9]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800e640:	46a9      	mov	r9, r5
 800e642:	e7ca      	b.n	800e5da <tcp_output+0x1ee>
 800e644:	46a9      	mov	r9, r5
        pcb->unacked = seg;
 800e646:	6725      	str	r5, [r4, #112]	@ 0x70
        useg = seg;
 800e648:	e7c7      	b.n	800e5da <tcp_output+0x1ee>
    pcb->rttest = tcp_ticks;
 800e64a:	4b25      	ldr	r3, [pc, #148]	@ (800e6e0 <tcp_output+0x2f4>)
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	6363      	str	r3, [r4, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800e650:	f8da 0004 	ldr.w	r0, [sl, #4]
 800e654:	f7fa fe42 	bl	80092dc <lwip_htonl>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e658:	f8d5 a00c 	ldr.w	sl, [r5, #12]
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800e65c:	63a0      	str	r0, [r4, #56]	@ 0x38
 800e65e:	e75d      	b.n	800e51c <tcp_output+0x130>
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800e660:	4642      	mov	r2, r8
 800e662:	4631      	mov	r1, r6
 800e664:	f240 50b4 	movw	r0, #1460	@ 0x5b4
    opts += 1;
 800e668:	f10a 0b18 	add.w	fp, sl, #24
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800e66c:	f7fd fb00 	bl	800bc70 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800e670:	f040 7001 	orr.w	r0, r0, #33816576	@ 0x2040000
 800e674:	f7fa fe32 	bl	80092dc <lwip_htonl>
 800e678:	f8ca 0014 	str.w	r0, [sl, #20]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e67c:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800e680:	e742      	b.n	800e508 <tcp_output+0x11c>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e682:	8901      	ldrh	r1, [r0, #8]
 800e684:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800e686:	4299      	cmp	r1, r3
 800e688:	f4bf af12 	bcs.w	800e4b0 <tcp_output+0xc4>
 800e68c:	f8b4 3064 	ldrh.w	r3, [r4, #100]	@ 0x64
 800e690:	2b00      	cmp	r3, #0
 800e692:	f43f af0d 	beq.w	800e4b0 <tcp_output+0xc4>
 800e696:	f8b4 3066 	ldrh.w	r3, [r4, #102]	@ 0x66
 800e69a:	2b0f      	cmp	r3, #15
 800e69c:	f63f af08 	bhi.w	800e4b0 <tcp_output+0xc4>
 800e6a0:	f012 0fa0 	tst.w	r2, #160	@ 0xa0
 800e6a4:	f47f af04 	bne.w	800e4b0 <tcp_output+0xc4>
  if (pcb->unsent == NULL) {
 800e6a8:	2800      	cmp	r0, #0
 800e6aa:	f47f aedf 	bne.w	800e46c <tcp_output+0x80>
 800e6ae:	e063      	b.n	800e778 <tcp_output+0x38c>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800e6b0:	4b07      	ldr	r3, [pc, #28]	@ (800e6d0 <tcp_output+0x2e4>)
 800e6b2:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800e6b6:	490b      	ldr	r1, [pc, #44]	@ (800e6e4 <tcp_output+0x2f8>)
 800e6b8:	4807      	ldr	r0, [pc, #28]	@ (800e6d8 <tcp_output+0x2ec>)
 800e6ba:	f002 facf 	bl	8010c5c <iprintf>
 800e6be:	e6a2      	b.n	800e406 <tcp_output+0x1a>
      return tcp_send_empty_ack(pcb);
 800e6c0:	4620      	mov	r0, r4
}
 800e6c2:	b005      	add	sp, #20
 800e6c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return tcp_send_empty_ack(pcb);
 800e6c8:	f7ff be5e 	b.w	800e388 <tcp_send_empty_ack>
 800e6cc:	2400b81c 	.word	0x2400b81c
 800e6d0:	08013ba8 	.word	0x08013ba8
 800e6d4:	08014204 	.word	0x08014204
 800e6d8:	08011f14 	.word	0x08011f14
 800e6dc:	080141ec 	.word	0x080141ec
 800e6e0:	2400b818 	.word	0x2400b818
 800e6e4:	080141c4 	.word	0x080141c4
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800e6e8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	f47f aeba 	bne.w	800e464 <tcp_output+0x78>
 800e6f0:	f894 3099 	ldrb.w	r3, [r4, #153]	@ 0x99
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	f47f aeb5 	bne.w	800e464 <tcp_output+0x78>
      pcb->persist_cnt = 0;
 800e6fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
      pcb->persist_probe = 0;
 800e6fe:	f884 309a 	strb.w	r3, [r4, #154]	@ 0x9a
      pcb->persist_cnt = 0;
 800e702:	f8a4 2098 	strh.w	r2, [r4, #152]	@ 0x98
      pcb->persist_probe = 0;
 800e706:	e6ad      	b.n	800e464 <tcp_output+0x78>
  useg = pcb->unacked;
 800e708:	4699      	mov	r9, r3
 800e70a:	e6c1      	b.n	800e490 <tcp_output+0xa4>
          while (*cur_seg &&
 800e70c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800e70e:	f104 0b70 	add.w	fp, r4, #112	@ 0x70
          while (*cur_seg &&
 800e712:	b92b      	cbnz	r3, 800e720 <tcp_output+0x334>
 800e714:	e014      	b.n	800e740 <tcp_output+0x354>
            cur_seg = &((*cur_seg)->next );
 800e716:	f8db b000 	ldr.w	fp, [fp]
          while (*cur_seg &&
 800e71a:	f8db 3000 	ldr.w	r3, [fp]
 800e71e:	b17b      	cbz	r3, 800e740 <tcp_output+0x354>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e720:	68db      	ldr	r3, [r3, #12]
 800e722:	6858      	ldr	r0, [r3, #4]
 800e724:	f7fa fdda 	bl	80092dc <lwip_htonl>
 800e728:	68eb      	ldr	r3, [r5, #12]
 800e72a:	4682      	mov	sl, r0
 800e72c:	6858      	ldr	r0, [r3, #4]
 800e72e:	f7fa fdd5 	bl	80092dc <lwip_htonl>
 800e732:	ebaa 0a00 	sub.w	sl, sl, r0
          while (*cur_seg &&
 800e736:	f1ba 0f00 	cmp.w	sl, #0
 800e73a:	dbec      	blt.n	800e716 <tcp_output+0x32a>
            cur_seg = &((*cur_seg)->next );
 800e73c:	f8db 3000 	ldr.w	r3, [fp]
          seg->next = (*cur_seg);
 800e740:	602b      	str	r3, [r5, #0]
          (*cur_seg) = seg;
 800e742:	f8cb 5000 	str.w	r5, [fp]
 800e746:	e748      	b.n	800e5da <tcp_output+0x1ee>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800e748:	4b0f      	ldr	r3, [pc, #60]	@ (800e788 <tcp_output+0x39c>)
 800e74a:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800e74e:	490f      	ldr	r1, [pc, #60]	@ (800e78c <tcp_output+0x3a0>)
 800e750:	480f      	ldr	r0, [pc, #60]	@ (800e790 <tcp_output+0x3a4>)
 800e752:	f002 fa83 	bl	8010c5c <iprintf>
 800e756:	e652      	b.n	800e3fe <tcp_output+0x12>
    return netif_get_by_index(pcb->netif_idx);
 800e758:	f7fb fb86 	bl	8009e68 <netif_get_by_index>
 800e75c:	4683      	mov	fp, r0
 800e75e:	e666      	b.n	800e42e <tcp_output+0x42>
  if (pcb->unsent == NULL) {
 800e760:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 800e762:	8b62      	ldrh	r2, [r4, #26]
 800e764:	2800      	cmp	r0, #0
 800e766:	f47f ae81 	bne.w	800e46c <tcp_output+0x80>
 800e76a:	e005      	b.n	800e778 <tcp_output+0x38c>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e76c:	8b63      	ldrh	r3, [r4, #26]
 800e76e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e772:	8363      	strh	r3, [r4, #26]
      return err;
 800e774:	e67e      	b.n	800e474 <tcp_output+0x88>
 800e776:	8b62      	ldrh	r2, [r4, #26]
    pcb->unsent_oversize = 0;
 800e778:	2300      	movs	r3, #0
 800e77a:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
 800e77e:	e675      	b.n	800e46c <tcp_output+0x80>
    return ERR_RTE;
 800e780:	f06f 0003 	mvn.w	r0, #3
 800e784:	e676      	b.n	800e474 <tcp_output+0x88>
 800e786:	bf00      	nop
 800e788:	08013ba8 	.word	0x08013ba8
 800e78c:	080141ac 	.word	0x080141ac
 800e790:	08011f14 	.word	0x08011f14

0800e794 <tcp_rexmit_rto_commit>:
{
 800e794:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800e796:	4604      	mov	r4, r0
 800e798:	b158      	cbz	r0, 800e7b2 <tcp_rexmit_rto_commit+0x1e>
  if (pcb->nrtx < 0xFF) {
 800e79a:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 800e79e:	2bff      	cmp	r3, #255	@ 0xff
 800e7a0:	d002      	beq.n	800e7a8 <tcp_rexmit_rto_commit+0x14>
    ++pcb->nrtx;
 800e7a2:	3301      	adds	r3, #1
 800e7a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  tcp_output(pcb);
 800e7a8:	4620      	mov	r0, r4
}
 800e7aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 800e7ae:	f7ff be1d 	b.w	800e3ec <tcp_output>
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800e7b2:	4b04      	ldr	r3, [pc, #16]	@ (800e7c4 <tcp_rexmit_rto_commit+0x30>)
 800e7b4:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800e7b8:	4903      	ldr	r1, [pc, #12]	@ (800e7c8 <tcp_rexmit_rto_commit+0x34>)
 800e7ba:	4804      	ldr	r0, [pc, #16]	@ (800e7cc <tcp_rexmit_rto_commit+0x38>)
 800e7bc:	f002 fa4e 	bl	8010c5c <iprintf>
 800e7c0:	e7eb      	b.n	800e79a <tcp_rexmit_rto_commit+0x6>
 800e7c2:	bf00      	nop
 800e7c4:	08013ba8 	.word	0x08013ba8
 800e7c8:	08014218 	.word	0x08014218
 800e7cc:	08011f14 	.word	0x08011f14

0800e7d0 <tcp_rexmit_rto>:
{
 800e7d0:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800e7d2:	4604      	mov	r4, r0
 800e7d4:	b118      	cbz	r0, 800e7de <tcp_rexmit_rto+0xe>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800e7d6:	f7ff fccd 	bl	800e174 <tcp_rexmit_rto_prepare>
 800e7da:	b198      	cbz	r0, 800e804 <tcp_rexmit_rto+0x34>
}
 800e7dc:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800e7de:	4b0f      	ldr	r3, [pc, #60]	@ (800e81c <tcp_rexmit_rto+0x4c>)
 800e7e0:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800e7e4:	490e      	ldr	r1, [pc, #56]	@ (800e820 <tcp_rexmit_rto+0x50>)
 800e7e6:	480f      	ldr	r0, [pc, #60]	@ (800e824 <tcp_rexmit_rto+0x54>)
 800e7e8:	f002 fa38 	bl	8010c5c <iprintf>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800e7ec:	4620      	mov	r0, r4
 800e7ee:	f7ff fcc1 	bl	800e174 <tcp_rexmit_rto_prepare>
 800e7f2:	2800      	cmp	r0, #0
 800e7f4:	d1f2      	bne.n	800e7dc <tcp_rexmit_rto+0xc>
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800e7f6:	4b09      	ldr	r3, [pc, #36]	@ (800e81c <tcp_rexmit_rto+0x4c>)
 800e7f8:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800e7fc:	490a      	ldr	r1, [pc, #40]	@ (800e828 <tcp_rexmit_rto+0x58>)
 800e7fe:	4809      	ldr	r0, [pc, #36]	@ (800e824 <tcp_rexmit_rto+0x54>)
 800e800:	f002 fa2c 	bl	8010c5c <iprintf>
  if (pcb->nrtx < 0xFF) {
 800e804:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 800e808:	2bff      	cmp	r3, #255	@ 0xff
 800e80a:	d002      	beq.n	800e812 <tcp_rexmit_rto+0x42>
    ++pcb->nrtx;
 800e80c:	3301      	adds	r3, #1
 800e80e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  tcp_output(pcb);
 800e812:	4620      	mov	r0, r4
}
 800e814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 800e818:	f7ff bde8 	b.w	800e3ec <tcp_output>
 800e81c:	08013ba8 	.word	0x08013ba8
 800e820:	0801423c 	.word	0x0801423c
 800e824:	08011f14 	.word	0x08011f14
 800e828:	08014218 	.word	0x08014218

0800e82c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800e82c:	b510      	push	{r4, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800e82e:	4604      	mov	r4, r0
 800e830:	b188      	cbz	r0, 800e856 <tcp_keepalive+0x2a>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800e832:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 800e834:	3801      	subs	r0, #1
 800e836:	f7fa fd51 	bl	80092dc <lwip_htonl>
 800e83a:	2100      	movs	r1, #0
 800e83c:	4602      	mov	r2, r0
 800e83e:	4620      	mov	r0, r4
 800e840:	f7fe ff78 	bl	800d734 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800e844:	4601      	mov	r1, r0
 800e846:	b170      	cbz	r0, 800e866 <tcp_keepalive+0x3a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e848:	1d23      	adds	r3, r4, #4
 800e84a:	4622      	mov	r2, r4
 800e84c:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800e84e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e852:	f7fe bf97 	b.w	800d784 <tcp_output_control_segment>
  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800e856:	4b05      	ldr	r3, [pc, #20]	@ (800e86c <tcp_keepalive+0x40>)
 800e858:	f640 0224 	movw	r2, #2084	@ 0x824
 800e85c:	4904      	ldr	r1, [pc, #16]	@ (800e870 <tcp_keepalive+0x44>)
 800e85e:	4805      	ldr	r0, [pc, #20]	@ (800e874 <tcp_keepalive+0x48>)
 800e860:	f002 f9fc 	bl	8010c5c <iprintf>
 800e864:	e7e5      	b.n	800e832 <tcp_keepalive+0x6>
}
 800e866:	f04f 30ff 	mov.w	r0, #4294967295
 800e86a:	bd10      	pop	{r4, pc}
 800e86c:	08013ba8 	.word	0x08013ba8
 800e870:	08014258 	.word	0x08014258
 800e874:	08011f14 	.word	0x08011f14

0800e878 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800e878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800e87c:	4604      	mov	r4, r0
 800e87e:	2800      	cmp	r0, #0
 800e880:	d055      	beq.n	800e92e <tcp_zero_window_probe+0xb6>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800e882:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
  if (seg == NULL) {
 800e884:	2d00      	cmp	r5, #0
 800e886:	d04f      	beq.n	800e928 <tcp_zero_window_probe+0xb0>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800e888:	f894 309a 	ldrb.w	r3, [r4, #154]	@ 0x9a
 800e88c:	2bff      	cmp	r3, #255	@ 0xff
 800e88e:	d002      	beq.n	800e896 <tcp_zero_window_probe+0x1e>
    ++pcb->persist_probe;
 800e890:	3301      	adds	r3, #1
 800e892:	f884 309a 	strb.w	r3, [r4, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800e896:	68eb      	ldr	r3, [r5, #12]
 800e898:	8998      	ldrh	r0, [r3, #12]
 800e89a:	f7fa fd1b 	bl	80092d4 <lwip_htons>
 800e89e:	07c3      	lsls	r3, r0, #31
 800e8a0:	d427      	bmi.n	800e8f2 <tcp_zero_window_probe+0x7a>
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800e8a2:	68eb      	ldr	r3, [r5, #12]
 800e8a4:	2101      	movs	r1, #1
 800e8a6:	4620      	mov	r0, r4
 800e8a8:	685a      	ldr	r2, [r3, #4]
 800e8aa:	f7fe ff43 	bl	800d734 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800e8ae:	4606      	mov	r6, r0
 800e8b0:	2800      	cmp	r0, #0
 800e8b2:	d044      	beq.n	800e93e <tcp_zero_window_probe+0xc6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800e8b4:	f8d6 8004 	ldr.w	r8, [r6, #4]
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800e8b8:	6868      	ldr	r0, [r5, #4]
 800e8ba:	f108 0114 	add.w	r1, r8, #20
 800e8be:	892f      	ldrh	r7, [r5, #8]
 800e8c0:	2201      	movs	r2, #1
 800e8c2:	8903      	ldrh	r3, [r0, #8]
 800e8c4:	1bdb      	subs	r3, r3, r7
 800e8c6:	b29b      	uxth	r3, r3
 800e8c8:	f7fb fe98 	bl	800a5fc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800e8cc:	68eb      	ldr	r3, [r5, #12]
 800e8ce:	6858      	ldr	r0, [r3, #4]
 800e8d0:	f7fa fd04 	bl	80092dc <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e8d4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800e8d6:	3001      	adds	r0, #1
    pcb->snd_nxt = snd_nxt;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e8d8:	4622      	mov	r2, r4
 800e8da:	4631      	mov	r1, r6
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e8dc:	1a1b      	subs	r3, r3, r0
 800e8de:	2b00      	cmp	r3, #0
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e8e0:	f104 0304 	add.w	r3, r4, #4
    pcb->snd_nxt = snd_nxt;
 800e8e4:	bfb8      	it	lt
 800e8e6:	6520      	strlt	r0, [r4, #80]	@ 0x50
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e8e8:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800e8ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e8ee:	f7fe bf49 	b.w	800d784 <tcp_output_control_segment>
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800e8f2:	892f      	ldrh	r7, [r5, #8]
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800e8f4:	4620      	mov	r0, r4
 800e8f6:	68eb      	ldr	r3, [r5, #12]
 800e8f8:	1e39      	subs	r1, r7, #0
 800e8fa:	685a      	ldr	r2, [r3, #4]
 800e8fc:	bf18      	it	ne
 800e8fe:	2101      	movne	r1, #1
 800e900:	f7fe ff18 	bl	800d734 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800e904:	4606      	mov	r6, r0
 800e906:	b1d0      	cbz	r0, 800e93e <tcp_zero_window_probe+0xc6>
  tcphdr = (struct tcp_hdr *)p->payload;
 800e908:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (is_fin) {
 800e90c:	2f00      	cmp	r7, #0
 800e90e:	d1d3      	bne.n	800e8b8 <tcp_zero_window_probe+0x40>
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800e910:	f8b8 700c 	ldrh.w	r7, [r8, #12]
 800e914:	2011      	movs	r0, #17
 800e916:	f7fa fcdd 	bl	80092d4 <lwip_htons>
 800e91a:	f427 577c 	bic.w	r7, r7, #16128	@ 0x3f00
 800e91e:	b2bf      	uxth	r7, r7
 800e920:	4338      	orrs	r0, r7
 800e922:	f8a8 000c 	strh.w	r0, [r8, #12]
 800e926:	e7d1      	b.n	800e8cc <tcp_zero_window_probe+0x54>
    return ERR_OK;
 800e928:	4628      	mov	r0, r5
}
 800e92a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800e92e:	4b05      	ldr	r3, [pc, #20]	@ (800e944 <tcp_zero_window_probe+0xcc>)
 800e930:	f640 024f 	movw	r2, #2127	@ 0x84f
 800e934:	4904      	ldr	r1, [pc, #16]	@ (800e948 <tcp_zero_window_probe+0xd0>)
 800e936:	4805      	ldr	r0, [pc, #20]	@ (800e94c <tcp_zero_window_probe+0xd4>)
 800e938:	f002 f990 	bl	8010c5c <iprintf>
 800e93c:	e7a1      	b.n	800e882 <tcp_zero_window_probe+0xa>
    return ERR_MEM;
 800e93e:	f04f 30ff 	mov.w	r0, #4294967295
 800e942:	e7f2      	b.n	800e92a <tcp_zero_window_probe+0xb2>
 800e944:	08013ba8 	.word	0x08013ba8
 800e948:	08014274 	.word	0x08014274
 800e94c:	08011f14 	.word	0x08011f14

0800e950 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800e950:	b570      	push	{r4, r5, r6, lr}
 800e952:	4604      	mov	r4, r0
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800e954:	200a      	movs	r0, #10
{
 800e956:	460e      	mov	r6, r1
 800e958:	4615      	mov	r5, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800e95a:	f7fb f83d 	bl	80099d8 <memp_malloc>
  if (timeout == NULL) {
 800e95e:	b190      	cbz	r0, 800e986 <sys_timeout_abs+0x36>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }

  timeout->next = NULL;
 800e960:	2300      	movs	r3, #0
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800e962:	490d      	ldr	r1, [pc, #52]	@ (800e998 <sys_timeout_abs+0x48>)
  timeout->h = handler;
 800e964:	6086      	str	r6, [r0, #8]
  timeout->arg = arg;
 800e966:	60c5      	str	r5, [r0, #12]
  timeout->time = abs_time;
 800e968:	e9c0 3400 	strd	r3, r4, [r0]
  if (next_timeout == NULL) {
 800e96c:	680b      	ldr	r3, [r1, #0]
 800e96e:	b91b      	cbnz	r3, 800e978 <sys_timeout_abs+0x28>
 800e970:	e007      	b.n	800e982 <sys_timeout_abs+0x32>
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
    timeout->next = next_timeout;
    next_timeout = timeout;
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800e972:	4619      	mov	r1, r3
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	b11b      	cbz	r3, 800e980 <sys_timeout_abs+0x30>
 800e978:	685a      	ldr	r2, [r3, #4]
 800e97a:	1aa2      	subs	r2, r4, r2
 800e97c:	2a00      	cmp	r2, #0
 800e97e:	daf8      	bge.n	800e972 <sys_timeout_abs+0x22>
        timeout->next = t->next;
 800e980:	6003      	str	r3, [r0, #0]
        t->next = timeout;
 800e982:	6008      	str	r0, [r1, #0]
        break;
      }
    }
  }
}
 800e984:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800e986:	4b05      	ldr	r3, [pc, #20]	@ (800e99c <sys_timeout_abs+0x4c>)
 800e988:	22be      	movs	r2, #190	@ 0xbe
 800e98a:	4905      	ldr	r1, [pc, #20]	@ (800e9a0 <sys_timeout_abs+0x50>)
 800e98c:	4805      	ldr	r0, [pc, #20]	@ (800e9a4 <sys_timeout_abs+0x54>)
}
 800e98e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800e992:	f002 b963 	b.w	8010c5c <iprintf>
 800e996:	bf00      	nop
 800e998:	2400b85c 	.word	0x2400b85c
 800e99c:	08014298 	.word	0x08014298
 800e9a0:	080142cc 	.word	0x080142cc
 800e9a4:	08011f14 	.word	0x08011f14

0800e9a8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800e9a8:	b538      	push	{r3, r4, r5, lr}
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800e9aa:	6843      	ldr	r3, [r0, #4]
{
 800e9ac:	4604      	mov	r4, r0
  cyclic->handler();
 800e9ae:	4798      	blx	r3

  now = sys_now();
 800e9b0:	f7f7 fe3e 	bl	8006630 <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800e9b4:	4b0a      	ldr	r3, [pc, #40]	@ (800e9e0 <lwip_cyclic_timer+0x38>)
 800e9b6:	6825      	ldr	r5, [r4, #0]
  now = sys_now();
 800e9b8:	4684      	mov	ip, r0
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800e9ba:	681b      	ldr	r3, [r3, #0]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800e9bc:	4622      	mov	r2, r4
 800e9be:	4909      	ldr	r1, [pc, #36]	@ (800e9e4 <lwip_cyclic_timer+0x3c>)
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800e9c0:	18e8      	adds	r0, r5, r3
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800e9c2:	eba0 030c 	sub.w	r3, r0, ip
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	da05      	bge.n	800e9d6 <lwip_cyclic_timer+0x2e>
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800e9ca:	eb05 000c 	add.w	r0, r5, ip
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800e9ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800e9d2:	f7ff bfbd 	b.w	800e950 <sys_timeout_abs>
}
 800e9d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800e9da:	f7ff bfb9 	b.w	800e950 <sys_timeout_abs>
 800e9de:	bf00      	nop
 800e9e0:	2400b858 	.word	0x2400b858
 800e9e4:	0800e9a9 	.word	0x0800e9a9

0800e9e8 <tcpip_tcp_timer>:
{
 800e9e8:	b508      	push	{r3, lr}
  tcp_tmr();
 800e9ea:	f7fd f913 	bl	800bc14 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800e9ee:	4b0a      	ldr	r3, [pc, #40]	@ (800ea18 <tcpip_tcp_timer+0x30>)
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	b153      	cbz	r3, 800ea0a <tcpip_tcp_timer+0x22>
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();
 800e9f4:	f7f7 ffa4 	bl	8006940 <sys_check_core_locking>

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800e9f8:	f7f7 fe1a 	bl	8006630 <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800e9fc:	2200      	movs	r2, #0
 800e9fe:	4907      	ldr	r1, [pc, #28]	@ (800ea1c <tcpip_tcp_timer+0x34>)
 800ea00:	30fa      	adds	r0, #250	@ 0xfa
}
 800ea02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ea06:	f7ff bfa3 	b.w	800e950 <sys_timeout_abs>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800ea0a:	4b05      	ldr	r3, [pc, #20]	@ (800ea20 <tcpip_tcp_timer+0x38>)
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d1f0      	bne.n	800e9f4 <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
 800ea12:	4a04      	ldr	r2, [pc, #16]	@ (800ea24 <tcpip_tcp_timer+0x3c>)
 800ea14:	6013      	str	r3, [r2, #0]
}
 800ea16:	bd08      	pop	{r3, pc}
 800ea18:	2400b80c 	.word	0x2400b80c
 800ea1c:	0800e9e9 	.word	0x0800e9e9
 800ea20:	2400b808 	.word	0x2400b808
 800ea24:	2400b854 	.word	0x2400b854

0800ea28 <tcp_timer_needed>:
{
 800ea28:	b508      	push	{r3, lr}
  LWIP_ASSERT_CORE_LOCKED();
 800ea2a:	f7f7 ff89 	bl	8006940 <sys_check_core_locking>
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800ea2e:	4b0c      	ldr	r3, [pc, #48]	@ (800ea60 <tcp_timer_needed+0x38>)
 800ea30:	681a      	ldr	r2, [r3, #0]
 800ea32:	b99a      	cbnz	r2, 800ea5c <tcp_timer_needed+0x34>
 800ea34:	4a0b      	ldr	r2, [pc, #44]	@ (800ea64 <tcp_timer_needed+0x3c>)
 800ea36:	6812      	ldr	r2, [r2, #0]
 800ea38:	b162      	cbz	r2, 800ea54 <tcp_timer_needed+0x2c>
    tcpip_tcp_timer_active = 1;
 800ea3a:	2201      	movs	r2, #1
 800ea3c:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT_CORE_LOCKED();
 800ea3e:	f7f7 ff7f 	bl	8006940 <sys_check_core_locking>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800ea42:	f7f7 fdf5 	bl	8006630 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ea46:	2200      	movs	r2, #0
 800ea48:	4907      	ldr	r1, [pc, #28]	@ (800ea68 <tcp_timer_needed+0x40>)
 800ea4a:	30fa      	adds	r0, #250	@ 0xfa
}
 800ea4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ea50:	f7ff bf7e 	b.w	800e950 <sys_timeout_abs>
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800ea54:	4a05      	ldr	r2, [pc, #20]	@ (800ea6c <tcp_timer_needed+0x44>)
 800ea56:	6812      	ldr	r2, [r2, #0]
 800ea58:	2a00      	cmp	r2, #0
 800ea5a:	d1ee      	bne.n	800ea3a <tcp_timer_needed+0x12>
}
 800ea5c:	bd08      	pop	{r3, pc}
 800ea5e:	bf00      	nop
 800ea60:	2400b854 	.word	0x2400b854
 800ea64:	2400b80c 	.word	0x2400b80c
 800ea68:	0800e9e9 	.word	0x0800e9e9
 800ea6c:	2400b808 	.word	0x2400b808

0800ea70 <sys_timeouts_init>:
{
 800ea70:	b538      	push	{r3, r4, r5, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ea72:	4d0c      	ldr	r5, [pc, #48]	@ (800eaa4 <sys_timeouts_init+0x34>)
  LWIP_ASSERT_CORE_LOCKED();
 800ea74:	f7f7 ff64 	bl	8006940 <sys_check_core_locking>
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ea78:	4c0b      	ldr	r4, [pc, #44]	@ (800eaa8 <sys_timeouts_init+0x38>)
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800ea7a:	f7f7 fdd9 	bl	8006630 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ea7e:	462a      	mov	r2, r5
 800ea80:	f500 707a 	add.w	r0, r0, #1000	@ 0x3e8
 800ea84:	4621      	mov	r1, r4
 800ea86:	f7ff ff63 	bl	800e950 <sys_timeout_abs>
  LWIP_ASSERT_CORE_LOCKED();
 800ea8a:	f7f7 ff59 	bl	8006940 <sys_check_core_locking>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800ea8e:	f7f7 fdcf 	bl	8006630 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ea92:	f105 0208 	add.w	r2, r5, #8
 800ea96:	4621      	mov	r1, r4
 800ea98:	f500 707a 	add.w	r0, r0, #1000	@ 0x3e8
}
 800ea9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800eaa0:	f7ff bf56 	b.w	800e950 <sys_timeout_abs>
 800eaa4:	08014314 	.word	0x08014314
 800eaa8:	0800e9a9 	.word	0x0800e9a9

0800eaac <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800eaac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();
 800eab0:	f7f7 ff46 	bl	8006940 <sys_check_core_locking>

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800eab4:	4c10      	ldr	r4, [pc, #64]	@ (800eaf8 <sys_check_timeouts+0x4c>)
 800eab6:	f7f7 fdbb 	bl	8006630 <sys_now>

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
    handler = tmptimeout->h;
    arg = tmptimeout->arg;
    current_timeout_due_time = tmptimeout->time;
 800eaba:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 800eafc <sys_check_timeouts+0x50>
  now = sys_now();
 800eabe:	4607      	mov	r7, r0
 800eac0:	e00f      	b.n	800eae2 <sys_check_timeouts+0x36>
    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800eac2:	685a      	ldr	r2, [r3, #4]
 800eac4:	eba7 0c02 	sub.w	ip, r7, r2
 800eac8:	f1bc 0f00 	cmp.w	ip, #0
 800eacc:	db0e      	blt.n	800eaec <sys_check_timeouts+0x40>
    handler = tmptimeout->h;
 800eace:	689d      	ldr	r5, [r3, #8]
    next_timeout = tmptimeout->next;
 800ead0:	681e      	ldr	r6, [r3, #0]
    arg = tmptimeout->arg;
 800ead2:	f8d3 900c 	ldr.w	r9, [r3, #12]
    current_timeout_due_time = tmptimeout->time;
 800ead6:	f8c8 2000 	str.w	r2, [r8]
    next_timeout = tmptimeout->next;
 800eada:	6026      	str	r6, [r4, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800eadc:	f7fa ffc2 	bl	8009a64 <memp_free>
    if (handler != NULL) {
 800eae0:	b935      	cbnz	r5, 800eaf0 <sys_check_timeouts+0x44>
    tmptimeout = next_timeout;
 800eae2:	6823      	ldr	r3, [r4, #0]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800eae4:	200a      	movs	r0, #10
 800eae6:	4619      	mov	r1, r3
    if (tmptimeout == NULL) {
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d1ea      	bne.n	800eac2 <sys_check_timeouts+0x16>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800eaec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      handler(arg);
 800eaf0:	4648      	mov	r0, r9
 800eaf2:	47a8      	blx	r5
 800eaf4:	e7f5      	b.n	800eae2 <sys_check_timeouts+0x36>
 800eaf6:	bf00      	nop
 800eaf8:	2400b85c 	.word	0x2400b85c
 800eafc:	2400b858 	.word	0x2400b858

0800eb00 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800eb00:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800eb02:	4c08      	ldr	r4, [pc, #32]	@ (800eb24 <sys_timeouts_sleeptime+0x24>)
  LWIP_ASSERT_CORE_LOCKED();
 800eb04:	f7f7 ff1c 	bl	8006940 <sys_check_core_locking>
  if (next_timeout == NULL) {
 800eb08:	6823      	ldr	r3, [r4, #0]
 800eb0a:	b13b      	cbz	r3, 800eb1c <sys_timeouts_sleeptime+0x1c>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 800eb0c:	f7f7 fd90 	bl	8006630 <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800eb10:	6823      	ldr	r3, [r4, #0]
 800eb12:	685b      	ldr	r3, [r3, #4]
    return 0;
 800eb14:	1a18      	subs	r0, r3, r0
 800eb16:	bf48      	it	mi
 800eb18:	2000      	movmi	r0, #0
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
    return ret;
  }
}
 800eb1a:	bd10      	pop	{r4, pc}
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800eb1c:	f04f 30ff 	mov.w	r0, #4294967295
}
 800eb20:	bd10      	pop	{r4, pc}
 800eb22:	bf00      	nop
 800eb24:	2400b85c 	.word	0x2400b85c

0800eb28 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800eb28:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800eb2a:	f001 ff97 	bl	8010a5c <rand>
 800eb2e:	4b02      	ldr	r3, [pc, #8]	@ (800eb38 <udp_init+0x10>)
 800eb30:	4a02      	ldr	r2, [pc, #8]	@ (800eb3c <udp_init+0x14>)
 800eb32:	4303      	orrs	r3, r0
 800eb34:	8013      	strh	r3, [r2, #0]
#endif /* LWIP_RAND */
}
 800eb36:	bd08      	pop	{r3, pc}
 800eb38:	ffffc000 	.word	0xffffc000
 800eb3c:	2400002e 	.word	0x2400002e

0800eb40 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800eb40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb44:	4680      	mov	r8, r0
 800eb46:	b085      	sub	sp, #20
 800eb48:	460f      	mov	r7, r1
  u8_t broadcast;
  u8_t for_us = 0;

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();
 800eb4a:	f7f7 fef9 	bl	8006940 <sys_check_core_locking>

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800eb4e:	f1b8 0f00 	cmp.w	r8, #0
 800eb52:	f000 80c4 	beq.w	800ecde <udp_input+0x19e>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800eb56:	2f00      	cmp	r7, #0
 800eb58:	f000 80ca 	beq.w	800ecf0 <udp_input+0x1b0>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800eb5c:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800eb60:	2b07      	cmp	r3, #7
 800eb62:	f240 808c 	bls.w	800ec7e <udp_input+0x13e>
  }

  udphdr = (struct udp_hdr *)p->payload;

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800eb66:	f8df 91d8 	ldr.w	r9, [pc, #472]	@ 800ed40 <udp_input+0x200>
  udphdr = (struct udp_hdr *)p->payload;
 800eb6a:	f8d8 4004 	ldr.w	r4, [r8, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800eb6e:	f8d9 1000 	ldr.w	r1, [r9]
 800eb72:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800eb76:	f001 f9eb 	bl	800ff50 <ip4_addr_isbroadcast_u32>
 800eb7a:	4682      	mov	sl, r0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800eb7c:	8820      	ldrh	r0, [r4, #0]
 800eb7e:	f7fa fba9 	bl	80092d4 <lwip_htons>
 800eb82:	4603      	mov	r3, r0
  dest = lwip_ntohs(udphdr->dest);
 800eb84:	8860      	ldrh	r0, [r4, #2]
  src = lwip_ntohs(udphdr->src);
 800eb86:	9303      	str	r3, [sp, #12]
  dest = lwip_ntohs(udphdr->dest);
 800eb88:	f7fa fba4 	bl	80092d4 <lwip_htons>
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800eb8c:	4b64      	ldr	r3, [pc, #400]	@ (800ed20 <udp_input+0x1e0>)
  dest = lwip_ntohs(udphdr->dest);
 800eb8e:	4605      	mov	r5, r0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800eb90:	681c      	ldr	r4, [r3, #0]
 800eb92:	2c00      	cmp	r4, #0
 800eb94:	d07c      	beq.n	800ec90 <udp_input+0x150>
  uncon_pcb = NULL;
 800eb96:	f04f 0b00 	mov.w	fp, #0
  prev = NULL;
 800eb9a:	465e      	mov	r6, fp
 800eb9c:	e004      	b.n	800eba8 <udp_input+0x68>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800eb9e:	68e3      	ldr	r3, [r4, #12]
 800eba0:	4626      	mov	r6, r4
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d071      	beq.n	800ec8a <udp_input+0x14a>
 800eba6:	461c      	mov	r4, r3
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800eba8:	8a63      	ldrh	r3, [r4, #18]
 800ebaa:	42ab      	cmp	r3, r5
 800ebac:	d1f7      	bne.n	800eb9e <udp_input+0x5e>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800ebae:	2f00      	cmp	r7, #0
 800ebb0:	f000 808e 	beq.w	800ecd0 <udp_input+0x190>
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ebb4:	7a22      	ldrb	r2, [r4, #8]
 800ebb6:	b13a      	cbz	r2, 800ebc8 <udp_input+0x88>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ebb8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800ebbc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ebc0:	3301      	adds	r3, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ebc2:	b2db      	uxtb	r3, r3
 800ebc4:	429a      	cmp	r2, r3
 800ebc6:	d1ea      	bne.n	800eb9e <udp_input+0x5e>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ebc8:	6823      	ldr	r3, [r4, #0]
    if (broadcast != 0) {
 800ebca:	f1ba 0f00 	cmp.w	sl, #0
 800ebce:	d038      	beq.n	800ec42 <udp_input+0x102>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ebd0:	b13b      	cbz	r3, 800ebe2 <udp_input+0xa2>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ebd2:	f8d9 2014 	ldr.w	r2, [r9, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ebd6:	1c50      	adds	r0, r2, #1
 800ebd8:	d003      	beq.n	800ebe2 <udp_input+0xa2>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800ebda:	405a      	eors	r2, r3
 800ebdc:	68b9      	ldr	r1, [r7, #8]
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ebde:	420a      	tst	r2, r1
 800ebe0:	d1dd      	bne.n	800eb9e <udp_input+0x5e>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800ebe2:	7c22      	ldrb	r2, [r4, #16]
 800ebe4:	0752      	lsls	r2, r2, #29
 800ebe6:	d408      	bmi.n	800ebfa <udp_input+0xba>
        if (uncon_pcb == NULL) {
 800ebe8:	f1bb 0f00 	cmp.w	fp, #0
 800ebec:	f000 8091 	beq.w	800ed12 <udp_input+0x1d2>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800ebf0:	f8d9 2014 	ldr.w	r2, [r9, #20]
 800ebf4:	3201      	adds	r2, #1
 800ebf6:	f000 8082 	beq.w	800ecfe <udp_input+0x1be>
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800ebfa:	8aa3      	ldrh	r3, [r4, #20]
 800ebfc:	9a03      	ldr	r2, [sp, #12]
 800ebfe:	4293      	cmp	r3, r2
 800ec00:	d1cd      	bne.n	800eb9e <udp_input+0x5e>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ec02:	6863      	ldr	r3, [r4, #4]
      if ((pcb->remote_port == src) &&
 800ec04:	b11b      	cbz	r3, 800ec0e <udp_input+0xce>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ec06:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800ec0a:	4293      	cmp	r3, r2
 800ec0c:	d1c7      	bne.n	800eb9e <udp_input+0x5e>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
        /* the first fully matching PCB */
        if (prev != NULL) {
 800ec0e:	b34e      	cbz	r6, 800ec64 <udp_input+0x124>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800ec10:	68e3      	ldr	r3, [r4, #12]
          pcb->next = udp_pcbs;
          udp_pcbs = pcb;
 800ec12:	46a3      	mov	fp, r4
          pcb->next = udp_pcbs;
 800ec14:	4a42      	ldr	r2, [pc, #264]	@ (800ed20 <udp_input+0x1e0>)
          prev->next = pcb->next;
 800ec16:	60f3      	str	r3, [r6, #12]
          pcb->next = udp_pcbs;
 800ec18:	6813      	ldr	r3, [r2, #0]
          udp_pcbs = pcb;
 800ec1a:	6014      	str	r4, [r2, #0]
          pcb->next = udp_pcbs;
 800ec1c:	60e3      	str	r3, [r4, #12]
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800ec1e:	2108      	movs	r1, #8
 800ec20:	4640      	mov	r0, r8
 800ec22:	f7fb f9c9 	bl	8009fb8 <pbuf_remove_header>
 800ec26:	bb18      	cbnz	r0, 800ec70 <udp_input+0x130>
 800ec28:	465c      	mov	r4, fp
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800ec2a:	69a5      	ldr	r5, [r4, #24]
 800ec2c:	b33d      	cbz	r5, 800ec7e <udp_input+0x13e>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800ec2e:	9b03      	ldr	r3, [sp, #12]
 800ec30:	4642      	mov	r2, r8
 800ec32:	69e0      	ldr	r0, [r4, #28]
 800ec34:	4621      	mov	r1, r4
 800ec36:	9300      	str	r3, [sp, #0]
 800ec38:	4b3a      	ldr	r3, [pc, #232]	@ (800ed24 <udp_input+0x1e4>)
 800ec3a:	47a8      	blx	r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800ec3c:	b005      	add	sp, #20
 800ec3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ec42:	b11b      	cbz	r3, 800ec4c <udp_input+0x10c>
 800ec44:	f8d9 2014 	ldr.w	r2, [r9, #20]
 800ec48:	4293      	cmp	r3, r2
 800ec4a:	d1a8      	bne.n	800eb9e <udp_input+0x5e>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800ec4c:	7c23      	ldrb	r3, [r4, #16]
 800ec4e:	0759      	lsls	r1, r3, #29
 800ec50:	d4d3      	bmi.n	800ebfa <udp_input+0xba>
      if ((pcb->remote_port == src) &&
 800ec52:	8aa3      	ldrh	r3, [r4, #20]
        if (uncon_pcb == NULL) {
 800ec54:	f1bb 0f00 	cmp.w	fp, #0
 800ec58:	bf08      	it	eq
 800ec5a:	46a3      	moveq	fp, r4
      if ((pcb->remote_port == src) &&
 800ec5c:	9a03      	ldr	r2, [sp, #12]
 800ec5e:	4293      	cmp	r3, r2
 800ec60:	d19d      	bne.n	800eb9e <udp_input+0x5e>
 800ec62:	e7ce      	b.n	800ec02 <udp_input+0xc2>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800ec64:	2108      	movs	r1, #8
 800ec66:	4640      	mov	r0, r8
 800ec68:	f7fb f9a6 	bl	8009fb8 <pbuf_remove_header>
 800ec6c:	2800      	cmp	r0, #0
 800ec6e:	d0dc      	beq.n	800ec2a <udp_input+0xea>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800ec70:	4b2d      	ldr	r3, [pc, #180]	@ (800ed28 <udp_input+0x1e8>)
 800ec72:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800ec76:	492d      	ldr	r1, [pc, #180]	@ (800ed2c <udp_input+0x1ec>)
 800ec78:	482d      	ldr	r0, [pc, #180]	@ (800ed30 <udp_input+0x1f0>)
 800ec7a:	f001 ffef 	bl	8010c5c <iprintf>
      pbuf_free(p);
 800ec7e:	4640      	mov	r0, r8
}
 800ec80:	b005      	add	sp, #20
 800ec82:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 800ec86:	f7fb b9f9 	b.w	800a07c <pbuf_free>
  if (pcb != NULL) {
 800ec8a:	f1bb 0f00 	cmp.w	fp, #0
 800ec8e:	d1c6      	bne.n	800ec1e <udp_input+0xde>
  if (for_us) {
 800ec90:	687a      	ldr	r2, [r7, #4]
 800ec92:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800ec96:	429a      	cmp	r2, r3
 800ec98:	d1f1      	bne.n	800ec7e <udp_input+0x13e>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800ec9a:	2108      	movs	r1, #8
 800ec9c:	4640      	mov	r0, r8
 800ec9e:	f7fb f98b 	bl	8009fb8 <pbuf_remove_header>
 800eca2:	2800      	cmp	r0, #0
 800eca4:	d1e4      	bne.n	800ec70 <udp_input+0x130>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800eca6:	f1ba 0f00 	cmp.w	sl, #0
 800ecaa:	d1e8      	bne.n	800ec7e <udp_input+0x13e>
 800ecac:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800ecb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ecb4:	2be0      	cmp	r3, #224	@ 0xe0
 800ecb6:	d0e2      	beq.n	800ec7e <udp_input+0x13e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800ecb8:	f8b9 100c 	ldrh.w	r1, [r9, #12]
 800ecbc:	4640      	mov	r0, r8
 800ecbe:	3108      	adds	r1, #8
 800ecc0:	b209      	sxth	r1, r1
 800ecc2:	f7fb f9a7 	bl	800a014 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800ecc6:	2103      	movs	r1, #3
 800ecc8:	4640      	mov	r0, r8
 800ecca:	f000 ff8d 	bl	800fbe8 <icmp_dest_unreach>
 800ecce:	e7d6      	b.n	800ec7e <udp_input+0x13e>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800ecd0:	4b15      	ldr	r3, [pc, #84]	@ (800ed28 <udp_input+0x1e8>)
 800ecd2:	2288      	movs	r2, #136	@ 0x88
 800ecd4:	4917      	ldr	r1, [pc, #92]	@ (800ed34 <udp_input+0x1f4>)
 800ecd6:	4816      	ldr	r0, [pc, #88]	@ (800ed30 <udp_input+0x1f0>)
 800ecd8:	f001 ffc0 	bl	8010c5c <iprintf>
 800ecdc:	e76a      	b.n	800ebb4 <udp_input+0x74>
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800ecde:	4b12      	ldr	r3, [pc, #72]	@ (800ed28 <udp_input+0x1e8>)
 800ece0:	22cf      	movs	r2, #207	@ 0xcf
 800ece2:	4915      	ldr	r1, [pc, #84]	@ (800ed38 <udp_input+0x1f8>)
 800ece4:	4812      	ldr	r0, [pc, #72]	@ (800ed30 <udp_input+0x1f0>)
 800ece6:	f001 ffb9 	bl	8010c5c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800ecea:	2f00      	cmp	r7, #0
 800ecec:	f47f af36 	bne.w	800eb5c <udp_input+0x1c>
 800ecf0:	4b0d      	ldr	r3, [pc, #52]	@ (800ed28 <udp_input+0x1e8>)
 800ecf2:	22d0      	movs	r2, #208	@ 0xd0
 800ecf4:	4911      	ldr	r1, [pc, #68]	@ (800ed3c <udp_input+0x1fc>)
 800ecf6:	480e      	ldr	r0, [pc, #56]	@ (800ed30 <udp_input+0x1f0>)
 800ecf8:	f001 ffb0 	bl	8010c5c <iprintf>
 800ecfc:	e72e      	b.n	800eb5c <udp_input+0x1c>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800ecfe:	687a      	ldr	r2, [r7, #4]
 800ed00:	f8db 1000 	ldr.w	r1, [fp]
 800ed04:	4291      	cmp	r1, r2
 800ed06:	f43f af78 	beq.w	800ebfa <udp_input+0xba>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800ed0a:	429a      	cmp	r2, r3
 800ed0c:	bf08      	it	eq
 800ed0e:	46a3      	moveq	fp, r4
 800ed10:	e773      	b.n	800ebfa <udp_input+0xba>
      if ((pcb->remote_port == src) &&
 800ed12:	8aa3      	ldrh	r3, [r4, #20]
        if (uncon_pcb == NULL) {
 800ed14:	46a3      	mov	fp, r4
      if ((pcb->remote_port == src) &&
 800ed16:	9a03      	ldr	r2, [sp, #12]
 800ed18:	4293      	cmp	r3, r2
 800ed1a:	f47f af40 	bne.w	800eb9e <udp_input+0x5e>
 800ed1e:	e770      	b.n	800ec02 <udp_input+0xc2>
 800ed20:	2400b860 	.word	0x2400b860
 800ed24:	24004d58 	.word	0x24004d58
 800ed28:	08014324 	.word	0x08014324
 800ed2c:	080143b0 	.word	0x080143b0
 800ed30:	08011f14 	.word	0x08011f14
 800ed34:	08014388 	.word	0x08014388
 800ed38:	08014354 	.word	0x08014354
 800ed3c:	0801436c 	.word	0x0801436c
 800ed40:	24004d48 	.word	0x24004d48

0800ed44 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800ed44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed46:	460f      	mov	r7, r1
 800ed48:	4605      	mov	r5, r0
 800ed4a:	4616      	mov	r6, r2
  u8_t rebind;
#if LWIP_IPV6 && LWIP_IPV6_SCOPES
  ip_addr_t zoned_ipaddr;
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  LWIP_ASSERT_CORE_LOCKED();
 800ed4c:	f7f7 fdf8 	bl	8006940 <sys_check_core_locking>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ed50:	2f00      	cmp	r7, #0
 800ed52:	d043      	beq.n	800eddc <udp_bind+0x98>
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800ed54:	2d00      	cmp	r5, #0
 800ed56:	d05c      	beq.n	800ee12 <udp_bind+0xce>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ed58:	f8df c0e0 	ldr.w	ip, [pc, #224]	@ 800ee3c <udp_bind+0xf8>
 800ed5c:	f8dc 0000 	ldr.w	r0, [ip]
 800ed60:	b1e8      	cbz	r0, 800ed9e <udp_bind+0x5a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800ed62:	4285      	cmp	r5, r0
 800ed64:	d03c      	beq.n	800ede0 <udp_bind+0x9c>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ed66:	4604      	mov	r4, r0
 800ed68:	e001      	b.n	800ed6e <udp_bind+0x2a>
    if (pcb == ipcb) {
 800ed6a:	42a5      	cmp	r5, r4
 800ed6c:	d038      	beq.n	800ede0 <udp_bind+0x9c>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ed6e:	68e4      	ldr	r4, [r4, #12]
 800ed70:	2c00      	cmp	r4, #0
 800ed72:	d1fa      	bne.n	800ed6a <udp_bind+0x26>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800ed74:	b1ae      	cbz	r6, 800eda2 <udp_bind+0x5e>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800ed76:	6839      	ldr	r1, [r7, #0]
 800ed78:	4603      	mov	r3, r0
 800ed7a:	e001      	b.n	800ed80 <udp_bind+0x3c>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ed7c:	68db      	ldr	r3, [r3, #12]
 800ed7e:	b303      	cbz	r3, 800edc2 <udp_bind+0x7e>
      if (pcb != ipcb) {
 800ed80:	429d      	cmp	r5, r3
 800ed82:	d0fb      	beq.n	800ed7c <udp_bind+0x38>
          if ((ipcb->local_port == port) &&
 800ed84:	8a5a      	ldrh	r2, [r3, #18]
 800ed86:	42b2      	cmp	r2, r6
 800ed88:	d1f8      	bne.n	800ed7c <udp_bind+0x38>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ed8a:	681a      	ldr	r2, [r3, #0]
              ip_addr_isany(&ipcb->local_ip))) {
 800ed8c:	2a00      	cmp	r2, #0
 800ed8e:	bf18      	it	ne
 800ed90:	428a      	cmpne	r2, r1
 800ed92:	d001      	beq.n	800ed98 <udp_bind+0x54>
 800ed94:	2900      	cmp	r1, #0
 800ed96:	d1f1      	bne.n	800ed7c <udp_bind+0x38>
      return ERR_USE;
 800ed98:	f06f 0007 	mvn.w	r0, #7
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
}
 800ed9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (port == 0) {
 800ed9e:	b9ae      	cbnz	r6, 800edcc <udp_bind+0x88>
  rebind = 0;
 800eda0:	4604      	mov	r4, r0
 800eda2:	f8df e09c 	ldr.w	lr, [pc, #156]	@ 800ee40 <udp_bind+0xfc>
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800eda6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800edaa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800edae:	f8be 6000 	ldrh.w	r6, [lr]
 800edb2:	429e      	cmp	r6, r3
 800edb4:	d028      	beq.n	800ee08 <udp_bind+0xc4>
 800edb6:	3601      	adds	r6, #1
 800edb8:	b2b6      	uxth	r6, r6
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800edba:	b9e0      	cbnz	r0, 800edf6 <udp_bind+0xb2>
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800edbc:	6839      	ldr	r1, [r7, #0]
 800edbe:	f8ae 6000 	strh.w	r6, [lr]
 800edc2:	6029      	str	r1, [r5, #0]
  pcb->local_port = port;
 800edc4:	826e      	strh	r6, [r5, #18]
  if (rebind == 0) {
 800edc6:	b124      	cbz	r4, 800edd2 <udp_bind+0x8e>
  return ERR_OK;
 800edc8:	2000      	movs	r0, #0
}
 800edca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800edcc:	683b      	ldr	r3, [r7, #0]
  pcb->local_port = port;
 800edce:	826e      	strh	r6, [r5, #18]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800edd0:	602b      	str	r3, [r5, #0]
    pcb->next = udp_pcbs;
 800edd2:	60e8      	str	r0, [r5, #12]
  return ERR_OK;
 800edd4:	2000      	movs	r0, #0
    udp_pcbs = pcb;
 800edd6:	f8cc 5000 	str.w	r5, [ip]
 800edda:	e7f6      	b.n	800edca <udp_bind+0x86>
    ipaddr = IP4_ADDR_ANY;
 800eddc:	4f13      	ldr	r7, [pc, #76]	@ (800ee2c <udp_bind+0xe8>)
 800edde:	e7b9      	b.n	800ed54 <udp_bind+0x10>
      rebind = 1;
 800ede0:	2401      	movs	r4, #1
 800ede2:	e7c7      	b.n	800ed74 <udp_bind+0x30>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800ede4:	3901      	subs	r1, #1
 800ede6:	b289      	uxth	r1, r1
 800ede8:	b1e9      	cbz	r1, 800ee26 <udp_bind+0xe2>
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800edea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800edee:	429e      	cmp	r6, r3
 800edf0:	d1e1      	bne.n	800edb6 <udp_bind+0x72>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800edf2:	f44f 4640 	mov.w	r6, #49152	@ 0xc000
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800edf6:	4603      	mov	r3, r0
 800edf8:	e002      	b.n	800ee00 <udp_bind+0xbc>
 800edfa:	68db      	ldr	r3, [r3, #12]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d0dd      	beq.n	800edbc <udp_bind+0x78>
    if (pcb->local_port == udp_port) {
 800ee00:	8a5a      	ldrh	r2, [r3, #18]
 800ee02:	42b2      	cmp	r2, r6
 800ee04:	d1f9      	bne.n	800edfa <udp_bind+0xb6>
 800ee06:	e7ed      	b.n	800ede4 <udp_bind+0xa0>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800ee08:	f44f 4640 	mov.w	r6, #49152	@ 0xc000
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee0c:	2800      	cmp	r0, #0
 800ee0e:	d1f2      	bne.n	800edf6 <udp_bind+0xb2>
 800ee10:	e7d4      	b.n	800edbc <udp_bind+0x78>
  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800ee12:	4b07      	ldr	r3, [pc, #28]	@ (800ee30 <udp_bind+0xec>)
 800ee14:	f240 32b7 	movw	r2, #951	@ 0x3b7
 800ee18:	4906      	ldr	r1, [pc, #24]	@ (800ee34 <udp_bind+0xf0>)
 800ee1a:	4807      	ldr	r0, [pc, #28]	@ (800ee38 <udp_bind+0xf4>)
 800ee1c:	f001 ff1e 	bl	8010c5c <iprintf>
 800ee20:	f06f 000f 	mvn.w	r0, #15
}
 800ee24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee26:	f8ae 6000 	strh.w	r6, [lr]
    if (port == 0) {
 800ee2a:	e7b5      	b.n	800ed98 <udp_bind+0x54>
 800ee2c:	08014898 	.word	0x08014898
 800ee30:	08014324 	.word	0x08014324
 800ee34:	080143cc 	.word	0x080143cc
 800ee38:	08011f14 	.word	0x08011f14
 800ee3c:	2400b860 	.word	0x2400b860
 800ee40:	2400002e 	.word	0x2400002e

0800ee44 <udp_sendto_if_src>:
{
 800ee44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee48:	4604      	mov	r4, r0
 800ee4a:	b085      	sub	sp, #20
 800ee4c:	460d      	mov	r5, r1
 800ee4e:	4690      	mov	r8, r2
 800ee50:	4699      	mov	r9, r3
 800ee52:	e9dd ba0e 	ldrd	fp, sl, [sp, #56]	@ 0x38
  LWIP_ASSERT_CORE_LOCKED();
 800ee56:	f7f7 fd73 	bl	8006940 <sys_check_core_locking>
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800ee5a:	2c00      	cmp	r4, #0
 800ee5c:	f000 8082 	beq.w	800ef64 <udp_sendto_if_src+0x120>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800ee60:	2d00      	cmp	r5, #0
 800ee62:	d077      	beq.n	800ef54 <udp_sendto_if_src+0x110>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800ee64:	f1b8 0f00 	cmp.w	r8, #0
 800ee68:	d06c      	beq.n	800ef44 <udp_sendto_if_src+0x100>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800ee6a:	f1ba 0f00 	cmp.w	sl, #0
 800ee6e:	d05f      	beq.n	800ef30 <udp_sendto_if_src+0xec>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800ee70:	f1bb 0f00 	cmp.w	fp, #0
 800ee74:	d07e      	beq.n	800ef74 <udp_sendto_if_src+0x130>
  if (pcb->local_port == 0) {
 800ee76:	8a62      	ldrh	r2, [r4, #18]
 800ee78:	2a00      	cmp	r2, #0
 800ee7a:	d034      	beq.n	800eee6 <udp_sendto_if_src+0xa2>
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800ee7c:	892a      	ldrh	r2, [r5, #8]
 800ee7e:	f64f 73f7 	movw	r3, #65527	@ 0xfff7
 800ee82:	429a      	cmp	r2, r3
 800ee84:	d851      	bhi.n	800ef2a <udp_sendto_if_src+0xe6>
  if (pbuf_add_header(p, UDP_HLEN)) {
 800ee86:	2108      	movs	r1, #8
 800ee88:	4628      	mov	r0, r5
 800ee8a:	f7fb f865 	bl	8009f58 <pbuf_add_header>
 800ee8e:	2800      	cmp	r0, #0
 800ee90:	d134      	bne.n	800eefc <udp_sendto_if_src+0xb8>
 800ee92:	462e      	mov	r6, r5
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800ee94:	8973      	ldrh	r3, [r6, #10]
 800ee96:	2b07      	cmp	r3, #7
 800ee98:	d93f      	bls.n	800ef1a <udp_sendto_if_src+0xd6>
  udphdr = (struct udp_hdr *)q->payload;
 800ee9a:	6877      	ldr	r7, [r6, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 800ee9c:	8a60      	ldrh	r0, [r4, #18]
 800ee9e:	f7fa fa19 	bl	80092d4 <lwip_htons>
 800eea2:	8038      	strh	r0, [r7, #0]
  udphdr->dest = lwip_htons(dst_port);
 800eea4:	4648      	mov	r0, r9
 800eea6:	f7fa fa15 	bl	80092d4 <lwip_htons>
  udphdr->chksum = 0x0000;
 800eeaa:	2300      	movs	r3, #0
  udphdr->dest = lwip_htons(dst_port);
 800eeac:	8078      	strh	r0, [r7, #2]
  udphdr->chksum = 0x0000;
 800eeae:	71bb      	strb	r3, [r7, #6]
 800eeb0:	71fb      	strb	r3, [r7, #7]
    udphdr->len = lwip_htons(q->tot_len);
 800eeb2:	8930      	ldrh	r0, [r6, #8]
 800eeb4:	f7fa fa0e 	bl	80092d4 <lwip_htons>
 800eeb8:	80b8      	strh	r0, [r7, #4]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800eeba:	f8cd b008 	str.w	fp, [sp, #8]
 800eebe:	2011      	movs	r0, #17
 800eec0:	7aa3      	ldrb	r3, [r4, #10]
 800eec2:	4642      	mov	r2, r8
 800eec4:	4651      	mov	r1, sl
 800eec6:	9300      	str	r3, [sp, #0]
 800eec8:	7ae3      	ldrb	r3, [r4, #11]
 800eeca:	9001      	str	r0, [sp, #4]
 800eecc:	4630      	mov	r0, r6
 800eece:	f000 ffa9 	bl	800fe24 <ip4_output_if_src>
  if (q != p) {
 800eed2:	42ae      	cmp	r6, r5
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800eed4:	4607      	mov	r7, r0
  if (q != p) {
 800eed6:	d002      	beq.n	800eede <udp_sendto_if_src+0x9a>
    pbuf_free(q);
 800eed8:	4630      	mov	r0, r6
 800eeda:	f7fb f8cf 	bl	800a07c <pbuf_free>
}
 800eede:	4638      	mov	r0, r7
 800eee0:	b005      	add	sp, #20
 800eee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800eee6:	4621      	mov	r1, r4
 800eee8:	4620      	mov	r0, r4
 800eeea:	f7ff ff2b 	bl	800ed44 <udp_bind>
    if (err != ERR_OK) {
 800eeee:	4607      	mov	r7, r0
 800eef0:	2800      	cmp	r0, #0
 800eef2:	d0c3      	beq.n	800ee7c <udp_sendto_if_src+0x38>
}
 800eef4:	4638      	mov	r0, r7
 800eef6:	b005      	add	sp, #20
 800eef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800eefc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800ef00:	2108      	movs	r1, #8
 800ef02:	2022      	movs	r0, #34	@ 0x22
 800ef04:	f7fb f92a 	bl	800a15c <pbuf_alloc>
    if (q == NULL) {
 800ef08:	4606      	mov	r6, r0
 800ef0a:	b170      	cbz	r0, 800ef2a <udp_sendto_if_src+0xe6>
    if (p->tot_len != 0) {
 800ef0c:	892b      	ldrh	r3, [r5, #8]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d0c0      	beq.n	800ee94 <udp_sendto_if_src+0x50>
      pbuf_chain(q, p);
 800ef12:	4629      	mov	r1, r5
 800ef14:	f7fb fa8c 	bl	800a430 <pbuf_chain>
 800ef18:	e7bc      	b.n	800ee94 <udp_sendto_if_src+0x50>
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800ef1a:	4b1a      	ldr	r3, [pc, #104]	@ (800ef84 <udp_sendto_if_src+0x140>)
 800ef1c:	f240 320d 	movw	r2, #781	@ 0x30d
 800ef20:	4919      	ldr	r1, [pc, #100]	@ (800ef88 <udp_sendto_if_src+0x144>)
 800ef22:	481a      	ldr	r0, [pc, #104]	@ (800ef8c <udp_sendto_if_src+0x148>)
 800ef24:	f001 fe9a 	bl	8010c5c <iprintf>
 800ef28:	e7b7      	b.n	800ee9a <udp_sendto_if_src+0x56>
    return ERR_MEM;
 800ef2a:	f04f 37ff 	mov.w	r7, #4294967295
 800ef2e:	e7d6      	b.n	800eede <udp_sendto_if_src+0x9a>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800ef30:	4b14      	ldr	r3, [pc, #80]	@ (800ef84 <udp_sendto_if_src+0x140>)
 800ef32:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 800ef36:	4916      	ldr	r1, [pc, #88]	@ (800ef90 <udp_sendto_if_src+0x14c>)
 800ef38:	4814      	ldr	r0, [pc, #80]	@ (800ef8c <udp_sendto_if_src+0x148>)
 800ef3a:	f001 fe8f 	bl	8010c5c <iprintf>
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800ef3e:	f06f 070f 	mvn.w	r7, #15
 800ef42:	e7cc      	b.n	800eede <udp_sendto_if_src+0x9a>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800ef44:	4b0f      	ldr	r3, [pc, #60]	@ (800ef84 <udp_sendto_if_src+0x140>)
 800ef46:	f240 22d3 	movw	r2, #723	@ 0x2d3
 800ef4a:	4912      	ldr	r1, [pc, #72]	@ (800ef94 <udp_sendto_if_src+0x150>)
 800ef4c:	480f      	ldr	r0, [pc, #60]	@ (800ef8c <udp_sendto_if_src+0x148>)
 800ef4e:	f001 fe85 	bl	8010c5c <iprintf>
 800ef52:	e7f4      	b.n	800ef3e <udp_sendto_if_src+0xfa>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800ef54:	4b0b      	ldr	r3, [pc, #44]	@ (800ef84 <udp_sendto_if_src+0x140>)
 800ef56:	f240 22d2 	movw	r2, #722	@ 0x2d2
 800ef5a:	490f      	ldr	r1, [pc, #60]	@ (800ef98 <udp_sendto_if_src+0x154>)
 800ef5c:	480b      	ldr	r0, [pc, #44]	@ (800ef8c <udp_sendto_if_src+0x148>)
 800ef5e:	f001 fe7d 	bl	8010c5c <iprintf>
 800ef62:	e7ec      	b.n	800ef3e <udp_sendto_if_src+0xfa>
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800ef64:	4b07      	ldr	r3, [pc, #28]	@ (800ef84 <udp_sendto_if_src+0x140>)
 800ef66:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800ef6a:	490c      	ldr	r1, [pc, #48]	@ (800ef9c <udp_sendto_if_src+0x158>)
 800ef6c:	4807      	ldr	r0, [pc, #28]	@ (800ef8c <udp_sendto_if_src+0x148>)
 800ef6e:	f001 fe75 	bl	8010c5c <iprintf>
 800ef72:	e7e4      	b.n	800ef3e <udp_sendto_if_src+0xfa>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800ef74:	4b03      	ldr	r3, [pc, #12]	@ (800ef84 <udp_sendto_if_src+0x140>)
 800ef76:	f240 22d5 	movw	r2, #725	@ 0x2d5
 800ef7a:	4909      	ldr	r1, [pc, #36]	@ (800efa0 <udp_sendto_if_src+0x15c>)
 800ef7c:	4803      	ldr	r0, [pc, #12]	@ (800ef8c <udp_sendto_if_src+0x148>)
 800ef7e:	f001 fe6d 	bl	8010c5c <iprintf>
 800ef82:	e7dc      	b.n	800ef3e <udp_sendto_if_src+0xfa>
 800ef84:	08014324 	.word	0x08014324
 800ef88:	08014490 	.word	0x08014490
 800ef8c:	08011f14 	.word	0x08011f14
 800ef90:	08014448 	.word	0x08014448
 800ef94:	08014424 	.word	0x08014424
 800ef98:	08014404 	.word	0x08014404
 800ef9c:	080143e4 	.word	0x080143e4
 800efa0:	0801446c 	.word	0x0801446c

0800efa4 <udp_sendto_if>:
{
 800efa4:	b570      	push	{r4, r5, r6, lr}
 800efa6:	b082      	sub	sp, #8
 800efa8:	9c06      	ldr	r4, [sp, #24]
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800efaa:	b390      	cbz	r0, 800f012 <udp_sendto_if+0x6e>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800efac:	b349      	cbz	r1, 800f002 <udp_sendto_if+0x5e>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800efae:	b302      	cbz	r2, 800eff2 <udp_sendto_if+0x4e>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800efb0:	b1ac      	cbz	r4, 800efde <udp_sendto_if+0x3a>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800efb2:	6805      	ldr	r5, [r0, #0]
 800efb4:	b935      	cbnz	r5, 800efc4 <udp_sendto_if+0x20>
      src_ip = netif_ip_addr4(netif);
 800efb6:	1d25      	adds	r5, r4, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800efb8:	e9cd 4500 	strd	r4, r5, [sp]
 800efbc:	f7ff ff42 	bl	800ee44 <udp_sendto_if_src>
}
 800efc0:	b002      	add	sp, #8
 800efc2:	bd70      	pop	{r4, r5, r6, pc}
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800efc4:	f005 0cf0 	and.w	ip, r5, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800efc8:	f1bc 0fe0 	cmp.w	ip, #224	@ 0xe0
 800efcc:	d0f3      	beq.n	800efb6 <udp_sendto_if+0x12>
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800efce:	6866      	ldr	r6, [r4, #4]
 800efd0:	42b5      	cmp	r5, r6
 800efd2:	d101      	bne.n	800efd8 <udp_sendto_if+0x34>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800efd4:	4605      	mov	r5, r0
 800efd6:	e7ef      	b.n	800efb8 <udp_sendto_if+0x14>
        return ERR_RTE;
 800efd8:	f06f 0003 	mvn.w	r0, #3
 800efdc:	e7f0      	b.n	800efc0 <udp_sendto_if+0x1c>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800efde:	4b11      	ldr	r3, [pc, #68]	@ (800f024 <udp_sendto_if+0x80>)
 800efe0:	f240 2283 	movw	r2, #643	@ 0x283
 800efe4:	4910      	ldr	r1, [pc, #64]	@ (800f028 <udp_sendto_if+0x84>)
 800efe6:	4811      	ldr	r0, [pc, #68]	@ (800f02c <udp_sendto_if+0x88>)
 800efe8:	f001 fe38 	bl	8010c5c <iprintf>
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800efec:	f06f 000f 	mvn.w	r0, #15
 800eff0:	e7e6      	b.n	800efc0 <udp_sendto_if+0x1c>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800eff2:	4b0c      	ldr	r3, [pc, #48]	@ (800f024 <udp_sendto_if+0x80>)
 800eff4:	f240 2282 	movw	r2, #642	@ 0x282
 800eff8:	490d      	ldr	r1, [pc, #52]	@ (800f030 <udp_sendto_if+0x8c>)
 800effa:	480c      	ldr	r0, [pc, #48]	@ (800f02c <udp_sendto_if+0x88>)
 800effc:	f001 fe2e 	bl	8010c5c <iprintf>
 800f000:	e7f4      	b.n	800efec <udp_sendto_if+0x48>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800f002:	4b08      	ldr	r3, [pc, #32]	@ (800f024 <udp_sendto_if+0x80>)
 800f004:	f240 2281 	movw	r2, #641	@ 0x281
 800f008:	490a      	ldr	r1, [pc, #40]	@ (800f034 <udp_sendto_if+0x90>)
 800f00a:	4808      	ldr	r0, [pc, #32]	@ (800f02c <udp_sendto_if+0x88>)
 800f00c:	f001 fe26 	bl	8010c5c <iprintf>
 800f010:	e7ec      	b.n	800efec <udp_sendto_if+0x48>
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800f012:	4b04      	ldr	r3, [pc, #16]	@ (800f024 <udp_sendto_if+0x80>)
 800f014:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f018:	4907      	ldr	r1, [pc, #28]	@ (800f038 <udp_sendto_if+0x94>)
 800f01a:	4804      	ldr	r0, [pc, #16]	@ (800f02c <udp_sendto_if+0x88>)
 800f01c:	f001 fe1e 	bl	8010c5c <iprintf>
 800f020:	e7e4      	b.n	800efec <udp_sendto_if+0x48>
 800f022:	bf00      	nop
 800f024:	08014324 	.word	0x08014324
 800f028:	08014518 	.word	0x08014518
 800f02c:	08011f14 	.word	0x08011f14
 800f030:	080144f8 	.word	0x080144f8
 800f034:	080144dc 	.word	0x080144dc
 800f038:	080144c0 	.word	0x080144c0

0800f03c <udp_sendto>:
{
 800f03c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f040:	b082      	sub	sp, #8
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800f042:	b378      	cbz	r0, 800f0a4 <udp_sendto+0x68>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800f044:	460e      	mov	r6, r1
 800f046:	b329      	cbz	r1, 800f094 <udp_sendto+0x58>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800f048:	4615      	mov	r5, r2
 800f04a:	b1ca      	cbz	r2, 800f080 <udp_sendto+0x44>
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800f04c:	4604      	mov	r4, r0
 800f04e:	7a00      	ldrb	r0, [r0, #8]
 800f050:	4698      	mov	r8, r3
 800f052:	b168      	cbz	r0, 800f070 <udp_sendto+0x34>
    netif = netif_get_by_index(pcb->netif_idx);
 800f054:	f7fa ff08 	bl	8009e68 <netif_get_by_index>
 800f058:	4607      	mov	r7, r0
  if (netif == NULL) {
 800f05a:	b177      	cbz	r7, 800f07a <udp_sendto+0x3e>
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800f05c:	4643      	mov	r3, r8
 800f05e:	462a      	mov	r2, r5
 800f060:	4631      	mov	r1, r6
 800f062:	4620      	mov	r0, r4
 800f064:	9700      	str	r7, [sp, #0]
 800f066:	f7ff ff9d 	bl	800efa4 <udp_sendto_if>
}
 800f06a:	b002      	add	sp, #8
 800f06c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      netif = ip_route(&pcb->local_ip, dst_ip);
 800f070:	4610      	mov	r0, r2
 800f072:	f000 fdc1 	bl	800fbf8 <ip4_route>
 800f076:	4607      	mov	r7, r0
 800f078:	e7ef      	b.n	800f05a <udp_sendto+0x1e>
    return ERR_RTE;
 800f07a:	f06f 0003 	mvn.w	r0, #3
 800f07e:	e7f4      	b.n	800f06a <udp_sendto+0x2e>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800f080:	4b0c      	ldr	r3, [pc, #48]	@ (800f0b4 <udp_sendto+0x78>)
 800f082:	f240 221a 	movw	r2, #538	@ 0x21a
 800f086:	490c      	ldr	r1, [pc, #48]	@ (800f0b8 <udp_sendto+0x7c>)
 800f088:	480c      	ldr	r0, [pc, #48]	@ (800f0bc <udp_sendto+0x80>)
 800f08a:	f001 fde7 	bl	8010c5c <iprintf>
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800f08e:	f06f 000f 	mvn.w	r0, #15
 800f092:	e7ea      	b.n	800f06a <udp_sendto+0x2e>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800f094:	4b07      	ldr	r3, [pc, #28]	@ (800f0b4 <udp_sendto+0x78>)
 800f096:	f240 2219 	movw	r2, #537	@ 0x219
 800f09a:	4909      	ldr	r1, [pc, #36]	@ (800f0c0 <udp_sendto+0x84>)
 800f09c:	4807      	ldr	r0, [pc, #28]	@ (800f0bc <udp_sendto+0x80>)
 800f09e:	f001 fddd 	bl	8010c5c <iprintf>
 800f0a2:	e7f4      	b.n	800f08e <udp_sendto+0x52>
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800f0a4:	4b03      	ldr	r3, [pc, #12]	@ (800f0b4 <udp_sendto+0x78>)
 800f0a6:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800f0aa:	4906      	ldr	r1, [pc, #24]	@ (800f0c4 <udp_sendto+0x88>)
 800f0ac:	4803      	ldr	r0, [pc, #12]	@ (800f0bc <udp_sendto+0x80>)
 800f0ae:	f001 fdd5 	bl	8010c5c <iprintf>
 800f0b2:	e7ec      	b.n	800f08e <udp_sendto+0x52>
 800f0b4:	08014324 	.word	0x08014324
 800f0b8:	0801456c 	.word	0x0801456c
 800f0bc:	08011f14 	.word	0x08011f14
 800f0c0:	08014550 	.word	0x08014550
 800f0c4:	08014538 	.word	0x08014538

0800f0c8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800f0c8:	b570      	push	{r4, r5, r6, lr}
 800f0ca:	4604      	mov	r4, r0
 800f0cc:	460e      	mov	r6, r1
 800f0ce:	4615      	mov	r5, r2
  LWIP_ASSERT_CORE_LOCKED();
 800f0d0:	f7f7 fc36 	bl	8006940 <sys_check_core_locking>

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800f0d4:	b114      	cbz	r4, 800f0dc <udp_recv+0x14>

  /* remember recv() callback and user data */
  pcb->recv = recv;
  pcb->recv_arg = recv_arg;
 800f0d6:	e9c4 6506 	strd	r6, r5, [r4, #24]
}
 800f0da:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800f0dc:	4b04      	ldr	r3, [pc, #16]	@ (800f0f0 <udp_recv+0x28>)
 800f0de:	f240 428a 	movw	r2, #1162	@ 0x48a
 800f0e2:	4904      	ldr	r1, [pc, #16]	@ (800f0f4 <udp_recv+0x2c>)
 800f0e4:	4804      	ldr	r0, [pc, #16]	@ (800f0f8 <udp_recv+0x30>)
}
 800f0e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800f0ea:	f001 bdb7 	b.w	8010c5c <iprintf>
 800f0ee:	bf00      	nop
 800f0f0:	08014324 	.word	0x08014324
 800f0f4:	08014588 	.word	0x08014588
 800f0f8:	08011f14 	.word	0x08011f14

0800f0fc <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800f0fc:	b510      	push	{r4, lr}
 800f0fe:	4604      	mov	r4, r0
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();
 800f100:	f7f7 fc1e 	bl	8006940 <sys_check_core_locking>

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800f104:	b1cc      	cbz	r4, 800f13a <udp_remove+0x3e>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800f106:	4a11      	ldr	r2, [pc, #68]	@ (800f14c <udp_remove+0x50>)
 800f108:	6813      	ldr	r3, [r2, #0]
 800f10a:	42a3      	cmp	r3, r4
 800f10c:	d00d      	beq.n	800f12a <udp_remove+0x2e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800f10e:	b133      	cbz	r3, 800f11e <udp_remove+0x22>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800f110:	461a      	mov	r2, r3
 800f112:	68db      	ldr	r3, [r3, #12]
 800f114:	b11b      	cbz	r3, 800f11e <udp_remove+0x22>
 800f116:	42a3      	cmp	r3, r4
 800f118:	d1fa      	bne.n	800f110 <udp_remove+0x14>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800f11a:	68e3      	ldr	r3, [r4, #12]
 800f11c:	60d3      	str	r3, [r2, #12]
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800f11e:	4621      	mov	r1, r4
 800f120:	2000      	movs	r0, #0
}
 800f122:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_UDP_PCB, pcb);
 800f126:	f7fa bc9d 	b.w	8009a64 <memp_free>
    udp_pcbs = udp_pcbs->next;
 800f12a:	68e3      	ldr	r3, [r4, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 800f12c:	4621      	mov	r1, r4
 800f12e:	2000      	movs	r0, #0
    udp_pcbs = udp_pcbs->next;
 800f130:	6013      	str	r3, [r2, #0]
}
 800f132:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_UDP_PCB, pcb);
 800f136:	f7fa bc95 	b.w	8009a64 <memp_free>
  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800f13a:	4b05      	ldr	r3, [pc, #20]	@ (800f150 <udp_remove+0x54>)
 800f13c:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 800f140:	4904      	ldr	r1, [pc, #16]	@ (800f154 <udp_remove+0x58>)
 800f142:	4805      	ldr	r0, [pc, #20]	@ (800f158 <udp_remove+0x5c>)
}
 800f144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800f148:	f001 bd88 	b.w	8010c5c <iprintf>
 800f14c:	2400b860 	.word	0x2400b860
 800f150:	08014324 	.word	0x08014324
 800f154:	080145a0 	.word	0x080145a0
 800f158:	08011f14 	.word	0x08011f14

0800f15c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800f15c:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();
 800f15e:	f7f7 fbef 	bl	8006940 <sys_check_core_locking>

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800f162:	2000      	movs	r0, #0
 800f164:	f7fa fc38 	bl	80099d8 <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800f168:	4604      	mov	r4, r0
 800f16a:	b128      	cbz	r0, 800f178 <udp_new+0x1c>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800f16c:	2220      	movs	r2, #32
 800f16e:	2100      	movs	r1, #0
 800f170:	f001 fe27 	bl	8010dc2 <memset>
    pcb->ttl = UDP_TTL;
 800f174:	23ff      	movs	r3, #255	@ 0xff
 800f176:	72e3      	strb	r3, [r4, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 800f178:	4620      	mov	r0, r4
 800f17a:	bd10      	pop	{r4, pc}

0800f17c <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800f17c:	b110      	cbz	r0, 800f184 <udp_netif_ip_addr_changed+0x8>
 800f17e:	6802      	ldr	r2, [r0, #0]
 800f180:	b101      	cbz	r1, 800f184 <udp_netif_ip_addr_changed+0x8>
 800f182:	b902      	cbnz	r2, 800f186 <udp_netif_ip_addr_changed+0xa>
 800f184:	4770      	bx	lr
 800f186:	680b      	ldr	r3, [r1, #0]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d0fb      	beq.n	800f184 <udp_netif_ip_addr_changed+0x8>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f18c:	4b08      	ldr	r3, [pc, #32]	@ (800f1b0 <udp_netif_ip_addr_changed+0x34>)
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d0f7      	beq.n	800f184 <udp_netif_ip_addr_changed+0x8>
{
 800f194:	b410      	push	{r4}
 800f196:	e000      	b.n	800f19a <udp_netif_ip_addr_changed+0x1e>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800f198:	6802      	ldr	r2, [r0, #0]
 800f19a:	681c      	ldr	r4, [r3, #0]
 800f19c:	4294      	cmp	r4, r2
 800f19e:	d101      	bne.n	800f1a4 <udp_netif_ip_addr_changed+0x28>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800f1a0:	680a      	ldr	r2, [r1, #0]
 800f1a2:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f1a4:	68db      	ldr	r3, [r3, #12]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d1f6      	bne.n	800f198 <udp_netif_ip_addr_changed+0x1c>
      }
    }
  }
}
 800f1aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f1ae:	4770      	bx	lr
 800f1b0:	2400b860 	.word	0x2400b860

0800f1b4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800f1b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1b8:	2300      	movs	r3, #0
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800f1ba:	f04f 0e0a 	mov.w	lr, #10
{
 800f1be:	b085      	sub	sp, #20
 800f1c0:	4e50      	ldr	r6, [pc, #320]	@ (800f304 <etharp_find_entry+0x150>)
 800f1c2:	4605      	mov	r5, r0
 800f1c4:	4608      	mov	r0, r1
 800f1c6:	4617      	mov	r7, r2
 800f1c8:	4631      	mov	r1, r6
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800f1ca:	4699      	mov	r9, r3
  s16_t empty = ARP_TABLE_SIZE;
 800f1cc:	4674      	mov	r4, lr
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800f1ce:	46f0      	mov	r8, lr
 800f1d0:	46f3      	mov	fp, lr
 800f1d2:	9001      	str	r0, [sp, #4]
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800f1d4:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f1d8:	e004      	b.n	800f1e4 <etharp_find_entry+0x30>
 800f1da:	4664      	mov	r4, ip
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f1dc:	3301      	adds	r3, #1
 800f1de:	3118      	adds	r1, #24
 800f1e0:	2b0a      	cmp	r3, #10
 800f1e2:	d019      	beq.n	800f218 <etharp_find_entry+0x64>
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800f1e4:	2c0a      	cmp	r4, #10
 800f1e6:	fa0f fc83 	sxth.w	ip, r3
    u8_t state = arp_table[i].state;
 800f1ea:	f891 a014 	ldrb.w	sl, [r1, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800f1ee:	d139      	bne.n	800f264 <etharp_find_entry+0xb0>
 800f1f0:	f1ba 0f00 	cmp.w	sl, #0
 800f1f4:	d0f1      	beq.n	800f1da <etharp_find_entry+0x26>
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800f1f6:	b11d      	cbz	r5, 800f200 <etharp_find_entry+0x4c>
 800f1f8:	6828      	ldr	r0, [r5, #0]
 800f1fa:	684a      	ldr	r2, [r1, #4]
 800f1fc:	4290      	cmp	r0, r2
 800f1fe:	d03d      	beq.n	800f27c <etharp_find_entry+0xc8>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800f200:	f1ba 0f01 	cmp.w	sl, #1
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
          if (arp_table[i].ctime >= age_queue) {
 800f204:	8a48      	ldrh	r0, [r1, #18]
      if (state == ETHARP_STATE_PENDING) {
 800f206:	d031      	beq.n	800f26c <etharp_find_entry+0xb8>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800f208:	4548      	cmp	r0, r9
 800f20a:	d3e7      	bcc.n	800f1dc <etharp_find_entry+0x28>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f20c:	3301      	adds	r3, #1
          if (arp_table[i].ctime >= age_stable) {
 800f20e:	4681      	mov	r9, r0
 800f210:	46e0      	mov	r8, ip
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f212:	3118      	adds	r1, #24
 800f214:	2b0a      	cmp	r3, #10
 800f216:	d1e5      	bne.n	800f1e4 <etharp_find_entry+0x30>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800f218:	9801      	ldr	r0, [sp, #4]
 800f21a:	2801      	cmp	r0, #1
 800f21c:	d16e      	bne.n	800f2fc <etharp_find_entry+0x148>
 800f21e:	2c0a      	cmp	r4, #10
 800f220:	d032      	beq.n	800f288 <etharp_find_entry+0xd4>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800f222:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800f226:	46a1      	mov	r9, r4
 800f228:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800f22c:	7d1b      	ldrb	r3, [r3, #20]
 800f22e:	b133      	cbz	r3, 800f23e <etharp_find_entry+0x8a>
 800f230:	4b35      	ldr	r3, [pc, #212]	@ (800f308 <etharp_find_entry+0x154>)
 800f232:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800f236:	4935      	ldr	r1, [pc, #212]	@ (800f30c <etharp_find_entry+0x158>)
 800f238:	4835      	ldr	r0, [pc, #212]	@ (800f310 <etharp_find_entry+0x15c>)
 800f23a:	f001 fd0f 	bl	8010c5c <iprintf>
    etharp_free_entry(i);
 800f23e:	46a0      	mov	r8, r4
 800f240:	0064      	lsls	r4, r4, #1
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800f242:	b12d      	cbz	r5, 800f250 <etharp_find_entry+0x9c>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800f244:	eb04 0309 	add.w	r3, r4, r9
 800f248:	682a      	ldr	r2, [r5, #0]
 800f24a:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800f24e:	605a      	str	r2, [r3, #4]
  }
  arp_table[i].ctime = 0;
 800f250:	444c      	add	r4, r9
 800f252:	2300      	movs	r3, #0
 800f254:	eb06 06c4 	add.w	r6, r6, r4, lsl #3
 800f258:	8273      	strh	r3, [r6, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800f25a:	60b7      	str	r7, [r6, #8]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
}
 800f25c:	4640      	mov	r0, r8
 800f25e:	b005      	add	sp, #20
 800f260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (state != ETHARP_STATE_EMPTY) {
 800f264:	f1ba 0f00 	cmp.w	sl, #0
 800f268:	d0b8      	beq.n	800f1dc <etharp_find_entry+0x28>
 800f26a:	e7c4      	b.n	800f1f6 <etharp_find_entry+0x42>
        if (arp_table[i].q != NULL) {
 800f26c:	680a      	ldr	r2, [r1, #0]
 800f26e:	b392      	cbz	r2, 800f2d6 <etharp_find_entry+0x122>
          if (arp_table[i].ctime >= age_queue) {
 800f270:	9a02      	ldr	r2, [sp, #8]
 800f272:	4290      	cmp	r0, r2
 800f274:	d3b2      	bcc.n	800f1dc <etharp_find_entry+0x28>
 800f276:	46e6      	mov	lr, ip
 800f278:	9002      	str	r0, [sp, #8]
 800f27a:	e7af      	b.n	800f1dc <etharp_find_entry+0x28>
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800f27c:	b117      	cbz	r7, 800f284 <etharp_find_entry+0xd0>
 800f27e:	6888      	ldr	r0, [r1, #8]
 800f280:	42b8      	cmp	r0, r7
 800f282:	d1bd      	bne.n	800f200 <etharp_find_entry+0x4c>
 800f284:	46e0      	mov	r8, ip
 800f286:	e7e9      	b.n	800f25c <etharp_find_entry+0xa8>
    if (old_stable < ARP_TABLE_SIZE) {
 800f288:	f1b8 0f0a 	cmp.w	r8, #10
 800f28c:	d02a      	beq.n	800f2e4 <etharp_find_entry+0x130>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800f28e:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 800f292:	46c1      	mov	r9, r8
 800f294:	ea4f 0448 	mov.w	r4, r8, lsl #1
 800f298:	f856 3033 	ldr.w	r3, [r6, r3, lsl #3]
 800f29c:	b1a3      	cbz	r3, 800f2c8 <etharp_find_entry+0x114>
 800f29e:	4b1a      	ldr	r3, [pc, #104]	@ (800f308 <etharp_find_entry+0x154>)
 800f2a0:	f240 126d 	movw	r2, #365	@ 0x16d
 800f2a4:	491b      	ldr	r1, [pc, #108]	@ (800f314 <etharp_find_entry+0x160>)
 800f2a6:	481a      	ldr	r0, [pc, #104]	@ (800f310 <etharp_find_entry+0x15c>)
 800f2a8:	f001 fcd8 	bl	8010c5c <iprintf>
  if (arp_table[i].q != NULL) {
 800f2ac:	eb09 0a49 	add.w	sl, r9, r9, lsl #1
 800f2b0:	ea4f 0449 	mov.w	r4, r9, lsl #1
 800f2b4:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800f2b8:	f856 000a 	ldr.w	r0, [r6, sl]
 800f2bc:	b120      	cbz	r0, 800f2c8 <etharp_find_entry+0x114>
    free_etharp_q(arp_table[i].q);
 800f2be:	f7fa fedd 	bl	800a07c <pbuf_free>
    arp_table[i].q = NULL;
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	f846 300a 	str.w	r3, [r6, sl]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800f2c8:	eb04 0309 	add.w	r3, r4, r9
 800f2cc:	2200      	movs	r2, #0
 800f2ce:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800f2d2:	751a      	strb	r2, [r3, #20]
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800f2d4:	e7b5      	b.n	800f242 <etharp_find_entry+0x8e>
          if (arp_table[i].ctime >= age_pending) {
 800f2d6:	9a03      	ldr	r2, [sp, #12]
 800f2d8:	4290      	cmp	r0, r2
 800f2da:	f4ff af7f 	bcc.w	800f1dc <etharp_find_entry+0x28>
 800f2de:	46e3      	mov	fp, ip
 800f2e0:	9003      	str	r0, [sp, #12]
 800f2e2:	e77b      	b.n	800f1dc <etharp_find_entry+0x28>
    } else if (old_pending < ARP_TABLE_SIZE) {
 800f2e4:	f1bb 0f0a 	cmp.w	fp, #10
 800f2e8:	d105      	bne.n	800f2f6 <etharp_find_entry+0x142>
    } else if (old_queue < ARP_TABLE_SIZE) {
 800f2ea:	f1be 0f0a 	cmp.w	lr, #10
 800f2ee:	d005      	beq.n	800f2fc <etharp_find_entry+0x148>
    etharp_free_entry(i);
 800f2f0:	46f0      	mov	r8, lr
 800f2f2:	46f1      	mov	r9, lr
 800f2f4:	e7da      	b.n	800f2ac <etharp_find_entry+0xf8>
 800f2f6:	46d8      	mov	r8, fp
 800f2f8:	46d9      	mov	r9, fp
 800f2fa:	e7d7      	b.n	800f2ac <etharp_find_entry+0xf8>
    return (s16_t)ERR_MEM;
 800f2fc:	f04f 38ff 	mov.w	r8, #4294967295
 800f300:	e7ac      	b.n	800f25c <etharp_find_entry+0xa8>
 800f302:	bf00      	nop
 800f304:	2400b868 	.word	0x2400b868
 800f308:	080145b8 	.word	0x080145b8
 800f30c:	08014608 	.word	0x08014608
 800f310:	08011f14 	.word	0x08011f14
 800f314:	080145f0 	.word	0x080145f0

0800f318 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800f318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f31c:	b082      	sub	sp, #8
 800f31e:	4688      	mov	r8, r1
 800f320:	4691      	mov	r9, r2
 800f322:	461f      	mov	r7, r3
 800f324:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f328:	4606      	mov	r6, r0
{
 800f32a:	f8bd 4034 	ldrh.w	r4, [sp, #52]	@ 0x34
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f32e:	2800      	cmp	r0, #0
 800f330:	d04a      	beq.n	800f3c8 <etharp_raw+0xb0>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800f332:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f336:	211c      	movs	r1, #28
 800f338:	200e      	movs	r0, #14
 800f33a:	f7fa ff0f 	bl	800a15c <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800f33e:	4605      	mov	r5, r0
 800f340:	2800      	cmp	r0, #0
 800f342:	d049      	beq.n	800f3d8 <etharp_raw+0xc0>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800f344:	8943      	ldrh	r3, [r0, #10]
 800f346:	2b1b      	cmp	r3, #27
 800f348:	d936      	bls.n	800f3b8 <etharp_raw+0xa0>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800f34a:	4620      	mov	r0, r4
  hdr = (struct etharp_hdr *)p->payload;
 800f34c:	686c      	ldr	r4, [r5, #4]
  hdr->opcode = lwip_htons(opcode);
 800f34e:	f7f9 ffc1 	bl	80092d4 <lwip_htons>
 800f352:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800f354:	f896 302c 	ldrb.w	r3, [r6, #44]	@ 0x2c
 800f358:	2b06      	cmp	r3, #6
 800f35a:	d006      	beq.n	800f36a <etharp_raw+0x52>
 800f35c:	4b20      	ldr	r3, [pc, #128]	@ (800f3e0 <etharp_raw+0xc8>)
 800f35e:	f240 4269 	movw	r2, #1129	@ 0x469
 800f362:	4920      	ldr	r1, [pc, #128]	@ (800f3e4 <etharp_raw+0xcc>)
 800f364:	4820      	ldr	r0, [pc, #128]	@ (800f3e8 <etharp_raw+0xd0>)
 800f366:	f001 fc79 	bl	8010c5c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800f36a:	6839      	ldr	r1, [r7, #0]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800f36c:	4630      	mov	r0, r6
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800f36e:	4e1f      	ldr	r6, [pc, #124]	@ (800f3ec <etharp_raw+0xd4>)
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800f370:	464b      	mov	r3, r9
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800f372:	60a1      	str	r1, [r4, #8]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800f374:	4642      	mov	r2, r8
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800f376:	88b9      	ldrh	r1, [r7, #4]
 800f378:	81a1      	strh	r1, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800f37a:	f8da 1000 	ldr.w	r1, [sl]
 800f37e:	f8c4 1012 	str.w	r1, [r4, #18]
 800f382:	f8ba 1004 	ldrh.w	r1, [sl, #4]
 800f386:	82e1      	strh	r1, [r4, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800f388:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f38a:	6809      	ldr	r1, [r1, #0]
 800f38c:	f8c4 100e 	str.w	r1, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800f390:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f392:	6809      	ldr	r1, [r1, #0]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800f394:	6026      	str	r6, [r4, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800f396:	61a1      	str	r1, [r4, #24]
  hdr->hwlen = ETH_HWADDR_LEN;
 800f398:	f240 4106 	movw	r1, #1030	@ 0x406
 800f39c:	80a1      	strh	r1, [r4, #4]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800f39e:	f640 0106 	movw	r1, #2054	@ 0x806
 800f3a2:	9100      	str	r1, [sp, #0]
 800f3a4:	4629      	mov	r1, r5
 800f3a6:	f001 fa95 	bl	80108d4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800f3aa:	4628      	mov	r0, r5
 800f3ac:	f7fa fe66 	bl	800a07c <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 800f3b0:	2000      	movs	r0, #0
}
 800f3b2:	b002      	add	sp, #8
 800f3b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800f3b8:	4b09      	ldr	r3, [pc, #36]	@ (800f3e0 <etharp_raw+0xc8>)
 800f3ba:	f240 4262 	movw	r2, #1122	@ 0x462
 800f3be:	490c      	ldr	r1, [pc, #48]	@ (800f3f0 <etharp_raw+0xd8>)
 800f3c0:	4809      	ldr	r0, [pc, #36]	@ (800f3e8 <etharp_raw+0xd0>)
 800f3c2:	f001 fc4b 	bl	8010c5c <iprintf>
 800f3c6:	e7c0      	b.n	800f34a <etharp_raw+0x32>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f3c8:	4b05      	ldr	r3, [pc, #20]	@ (800f3e0 <etharp_raw+0xc8>)
 800f3ca:	f240 4257 	movw	r2, #1111	@ 0x457
 800f3ce:	4909      	ldr	r1, [pc, #36]	@ (800f3f4 <etharp_raw+0xdc>)
 800f3d0:	4805      	ldr	r0, [pc, #20]	@ (800f3e8 <etharp_raw+0xd0>)
 800f3d2:	f001 fc43 	bl	8010c5c <iprintf>
 800f3d6:	e7ac      	b.n	800f332 <etharp_raw+0x1a>
    return ERR_MEM;
 800f3d8:	f04f 30ff 	mov.w	r0, #4294967295
 800f3dc:	e7e9      	b.n	800f3b2 <etharp_raw+0x9a>
 800f3de:	bf00      	nop
 800f3e0:	080145b8 	.word	0x080145b8
 800f3e4:	08014668 	.word	0x08014668
 800f3e8:	08011f14 	.word	0x08011f14
 800f3ec:	00080100 	.word	0x00080100
 800f3f0:	08014634 	.word	0x08014634
 800f3f4:	080127e0 	.word	0x080127e0

0800f3f8 <etharp_output_to_arp_index>:
{
 800f3f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800f3fc:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f4d4 <etharp_output_to_arp_index+0xdc>
 800f400:	eb02 0642 	add.w	r6, r2, r2, lsl #1
{
 800f404:	b084      	sub	sp, #16
 800f406:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800f408:	eb08 06c6 	add.w	r6, r8, r6, lsl #3
{
 800f40c:	4605      	mov	r5, r0
 800f40e:	460f      	mov	r7, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800f410:	ea4f 0942 	mov.w	r9, r2, lsl #1
 800f414:	7d33      	ldrb	r3, [r6, #20]
 800f416:	2b01      	cmp	r3, #1
 800f418:	d936      	bls.n	800f488 <etharp_output_to_arp_index+0x90>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800f41a:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 800f41e:	2b02      	cmp	r3, #2
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f420:	f105 0a26 	add.w	sl, r5, #38	@ 0x26
 800f424:	ea4f 00c0 	mov.w	r0, r0, lsl #3
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f428:	f100 060c 	add.w	r6, r0, #12
 800f42c:	4446      	add	r6, r8
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800f42e:	d00b      	beq.n	800f448 <etharp_output_to_arp_index+0x50>
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800f430:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 800f434:	4633      	mov	r3, r6
 800f436:	4652      	mov	r2, sl
 800f438:	4639      	mov	r1, r7
 800f43a:	4628      	mov	r0, r5
 800f43c:	9400      	str	r4, [sp, #0]
 800f43e:	f001 fa49 	bl	80108d4 <ethernet_output>
}
 800f442:	b004      	add	sp, #16
 800f444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800f448:	44a1      	add	r9, r4
 800f44a:	eb08 09c9 	add.w	r9, r8, r9, lsl #3
 800f44e:	f8b9 3012 	ldrh.w	r3, [r9, #18]
 800f452:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800f456:	d820      	bhi.n	800f49a <etharp_output_to_arp_index+0xa2>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800f458:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800f45c:	d3e8      	bcc.n	800f430 <etharp_output_to_arp_index+0x38>
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f45e:	2301      	movs	r3, #1
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f460:	3004      	adds	r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f462:	4632      	mov	r2, r6
 800f464:	4651      	mov	r1, sl
 800f466:	9303      	str	r3, [sp, #12]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f468:	4440      	add	r0, r8
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f46a:	4b15      	ldr	r3, [pc, #84]	@ (800f4c0 <etharp_output_to_arp_index+0xc8>)
 800f46c:	9002      	str	r0, [sp, #8]
 800f46e:	4628      	mov	r0, r5
 800f470:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800f472:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f474:	9300      	str	r3, [sp, #0]
 800f476:	4653      	mov	r3, sl
 800f478:	f7ff ff4e 	bl	800f318 <etharp_raw>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f47c:	2800      	cmp	r0, #0
 800f47e:	d1d7      	bne.n	800f430 <etharp_output_to_arp_index+0x38>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f480:	2303      	movs	r3, #3
 800f482:	f889 3014 	strb.w	r3, [r9, #20]
 800f486:	e7d3      	b.n	800f430 <etharp_output_to_arp_index+0x38>
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800f488:	4b0e      	ldr	r3, [pc, #56]	@ (800f4c4 <etharp_output_to_arp_index+0xcc>)
 800f48a:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800f48e:	490e      	ldr	r1, [pc, #56]	@ (800f4c8 <etharp_output_to_arp_index+0xd0>)
 800f490:	480e      	ldr	r0, [pc, #56]	@ (800f4cc <etharp_output_to_arp_index+0xd4>)
 800f492:	f001 fbe3 	bl	8010c5c <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800f496:	7d33      	ldrb	r3, [r6, #20]
 800f498:	e7bf      	b.n	800f41a <etharp_output_to_arp_index+0x22>
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f49a:	2301      	movs	r3, #1
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800f49c:	3004      	adds	r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f49e:	4a0c      	ldr	r2, [pc, #48]	@ (800f4d0 <etharp_output_to_arp_index+0xd8>)
 800f4a0:	4651      	mov	r1, sl
 800f4a2:	9303      	str	r3, [sp, #12]
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800f4a4:	4440      	add	r0, r8
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f4a6:	4b06      	ldr	r3, [pc, #24]	@ (800f4c0 <etharp_output_to_arp_index+0xc8>)
 800f4a8:	9002      	str	r0, [sp, #8]
 800f4aa:	4628      	mov	r0, r5
 800f4ac:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800f4ae:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f4b0:	9300      	str	r3, [sp, #0]
 800f4b2:	4653      	mov	r3, sl
 800f4b4:	f7ff ff30 	bl	800f318 <etharp_raw>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800f4b8:	2800      	cmp	r0, #0
 800f4ba:	d1b9      	bne.n	800f430 <etharp_output_to_arp_index+0x38>
 800f4bc:	e7e0      	b.n	800f480 <etharp_output_to_arp_index+0x88>
 800f4be:	bf00      	nop
 800f4c0:	08014a8c 	.word	0x08014a8c
 800f4c4:	080145b8 	.word	0x080145b8
 800f4c8:	080146ac 	.word	0x080146ac
 800f4cc:	08011f14 	.word	0x08011f14
 800f4d0:	08014a94 	.word	0x08014a94
 800f4d4:	2400b868 	.word	0x2400b868

0800f4d8 <etharp_tmr>:
{
 800f4d8:	b570      	push	{r4, r5, r6, lr}
 800f4da:	4c1d      	ldr	r4, [pc, #116]	@ (800f550 <etharp_tmr+0x78>)
 800f4dc:	b084      	sub	sp, #16
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800f4de:	2600      	movs	r6, #0
 800f4e0:	f104 05f0 	add.w	r5, r4, #240	@ 0xf0
 800f4e4:	e00a      	b.n	800f4fc <etharp_tmr+0x24>
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f4e6:	2a01      	cmp	r2, #1
 800f4e8:	d01f      	beq.n	800f52a <etharp_tmr+0x52>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800f4ea:	2a03      	cmp	r2, #3
 800f4ec:	d02d      	beq.n	800f54a <etharp_tmr+0x72>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800f4ee:	2a04      	cmp	r2, #4
 800f4f0:	d101      	bne.n	800f4f6 <etharp_tmr+0x1e>
        arp_table[i].state = ETHARP_STATE_STABLE;
 800f4f2:	2302      	movs	r3, #2
 800f4f4:	7423      	strb	r3, [r4, #16]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f4f6:	3418      	adds	r4, #24
 800f4f8:	42ac      	cmp	r4, r5
 800f4fa:	d014      	beq.n	800f526 <etharp_tmr+0x4e>
    u8_t state = arp_table[i].state;
 800f4fc:	7c22      	ldrb	r2, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 800f4fe:	2a00      	cmp	r2, #0
 800f500:	d0f9      	beq.n	800f4f6 <etharp_tmr+0x1e>
      arp_table[i].ctime++;
 800f502:	89e3      	ldrh	r3, [r4, #14]
 800f504:	3301      	adds	r3, #1
 800f506:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f508:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
      arp_table[i].ctime++;
 800f50c:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f50e:	d3ea      	bcc.n	800f4e6 <etharp_tmr+0xe>
  if (arp_table[i].q != NULL) {
 800f510:	f854 0c04 	ldr.w	r0, [r4, #-4]
 800f514:	b118      	cbz	r0, 800f51e <etharp_tmr+0x46>
    free_etharp_q(arp_table[i].q);
 800f516:	f7fa fdb1 	bl	800a07c <pbuf_free>
    arp_table[i].q = NULL;
 800f51a:	f844 6c04 	str.w	r6, [r4, #-4]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800f51e:	7426      	strb	r6, [r4, #16]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f520:	3418      	adds	r4, #24
 800f522:	42ac      	cmp	r4, r5
 800f524:	d1ea      	bne.n	800f4fc <etharp_tmr+0x24>
}
 800f526:	b004      	add	sp, #16
 800f528:	bd70      	pop	{r4, r5, r6, pc}
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800f52a:	2b04      	cmp	r3, #4
 800f52c:	d8f0      	bhi.n	800f510 <etharp_tmr+0x38>
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f52e:	9203      	str	r2, [sp, #12]
 800f530:	4a08      	ldr	r2, [pc, #32]	@ (800f554 <etharp_tmr+0x7c>)
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800f532:	6860      	ldr	r0, [r4, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f534:	9201      	str	r2, [sp, #4]
 800f536:	f100 0326 	add.w	r3, r0, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800f53a:	1d02      	adds	r2, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f53c:	9402      	str	r4, [sp, #8]
 800f53e:	9200      	str	r2, [sp, #0]
 800f540:	4619      	mov	r1, r3
 800f542:	4a05      	ldr	r2, [pc, #20]	@ (800f558 <etharp_tmr+0x80>)
 800f544:	f7ff fee8 	bl	800f318 <etharp_raw>
 800f548:	e7d5      	b.n	800f4f6 <etharp_tmr+0x1e>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800f54a:	2304      	movs	r3, #4
 800f54c:	7423      	strb	r3, [r4, #16]
 800f54e:	e7d2      	b.n	800f4f6 <etharp_tmr+0x1e>
 800f550:	2400b86c 	.word	0x2400b86c
 800f554:	08014a8c 	.word	0x08014a8c
 800f558:	08014a94 	.word	0x08014a94

0800f55c <etharp_cleanup_netif>:
{
 800f55c:	b570      	push	{r4, r5, r6, lr}
 800f55e:	4c0b      	ldr	r4, [pc, #44]	@ (800f58c <etharp_cleanup_netif+0x30>)
 800f560:	4606      	mov	r6, r0
 800f562:	f104 05f0 	add.w	r5, r4, #240	@ 0xf0
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800f566:	7d23      	ldrb	r3, [r4, #20]
 800f568:	b113      	cbz	r3, 800f570 <etharp_cleanup_netif+0x14>
 800f56a:	68a3      	ldr	r3, [r4, #8]
 800f56c:	42b3      	cmp	r3, r6
 800f56e:	d003      	beq.n	800f578 <etharp_cleanup_netif+0x1c>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f570:	3418      	adds	r4, #24
 800f572:	42ac      	cmp	r4, r5
 800f574:	d1f7      	bne.n	800f566 <etharp_cleanup_netif+0xa>
}
 800f576:	bd70      	pop	{r4, r5, r6, pc}
  if (arp_table[i].q != NULL) {
 800f578:	6820      	ldr	r0, [r4, #0]
 800f57a:	b118      	cbz	r0, 800f584 <etharp_cleanup_netif+0x28>
    free_etharp_q(arp_table[i].q);
 800f57c:	f7fa fd7e 	bl	800a07c <pbuf_free>
    arp_table[i].q = NULL;
 800f580:	2300      	movs	r3, #0
 800f582:	6023      	str	r3, [r4, #0]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800f584:	2300      	movs	r3, #0
 800f586:	7523      	strb	r3, [r4, #20]
}
 800f588:	e7f2      	b.n	800f570 <etharp_cleanup_netif+0x14>
 800f58a:	bf00      	nop
 800f58c:	2400b868 	.word	0x2400b868

0800f590 <etharp_input>:
{
 800f590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f594:	460d      	mov	r5, r1
 800f596:	b087      	sub	sp, #28
 800f598:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 800f59a:	f7f7 f9d1 	bl	8006940 <sys_check_core_locking>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f59e:	2d00      	cmp	r5, #0
 800f5a0:	d07a      	beq.n	800f698 <etharp_input+0x108>
  hdr = (struct etharp_hdr *)p->payload;
 800f5a2:	6866      	ldr	r6, [r4, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f5a4:	8833      	ldrh	r3, [r6, #0]
 800f5a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f5aa:	d102      	bne.n	800f5b2 <etharp_input+0x22>
 800f5ac:	7933      	ldrb	r3, [r6, #4]
 800f5ae:	2b06      	cmp	r3, #6
 800f5b0:	d005      	beq.n	800f5be <etharp_input+0x2e>
  pbuf_free(p);
 800f5b2:	4620      	mov	r0, r4
}
 800f5b4:	b007      	add	sp, #28
 800f5b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800f5ba:	f7fa bd5f 	b.w	800a07c <pbuf_free>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f5be:	7973      	ldrb	r3, [r6, #5]
 800f5c0:	2b04      	cmp	r3, #4
 800f5c2:	d1f6      	bne.n	800f5b2 <etharp_input+0x22>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f5c4:	8873      	ldrh	r3, [r6, #2]
 800f5c6:	2b08      	cmp	r3, #8
 800f5c8:	d1f3      	bne.n	800f5b2 <etharp_input+0x22>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800f5ca:	f8d6 a00e 	ldr.w	sl, [r6, #14]
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800f5ce:	f106 0808 	add.w	r8, r6, #8
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f5d2:	686f      	ldr	r7, [r5, #4]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800f5d4:	69b3      	ldr	r3, [r6, #24]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800f5d6:	f8cd a014 	str.w	sl, [sp, #20]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f5da:	2f00      	cmp	r7, #0
 800f5dc:	d166      	bne.n	800f6ac <etharp_input+0x11c>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800f5de:	f04f 0b02 	mov.w	fp, #2
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800f5e2:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 800f5e6:	2b06      	cmp	r3, #6
 800f5e8:	d165      	bne.n	800f6b6 <etharp_input+0x126>
  if (ip4_addr_isany(ipaddr) ||
 800f5ea:	f1ba 0f00 	cmp.w	sl, #0
 800f5ee:	d03d      	beq.n	800f66c <etharp_input+0xdc>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f5f0:	4629      	mov	r1, r5
 800f5f2:	4650      	mov	r0, sl
 800f5f4:	f000 fcac 	bl	800ff50 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 800f5f8:	4681      	mov	r9, r0
 800f5fa:	bbb8      	cbnz	r0, 800f66c <etharp_input+0xdc>
      ip4_addr_ismulticast(ipaddr)) {
 800f5fc:	f00a 0af0 	and.w	sl, sl, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f600:	f1ba 0fe0 	cmp.w	sl, #224	@ 0xe0
 800f604:	d032      	beq.n	800f66c <etharp_input+0xdc>
  i = etharp_find_entry(ipaddr, flags, netif);
 800f606:	4659      	mov	r1, fp
 800f608:	462a      	mov	r2, r5
 800f60a:	a805      	add	r0, sp, #20
 800f60c:	f7ff fdd2 	bl	800f1b4 <etharp_find_entry>
  if (i < 0) {
 800f610:	1e03      	subs	r3, r0, #0
 800f612:	db2b      	blt.n	800f66c <etharp_input+0xdc>
    arp_table[i].state = ETHARP_STATE_STABLE;
 800f614:	492d      	ldr	r1, [pc, #180]	@ (800f6cc <etharp_input+0x13c>)
 800f616:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800f61a:	2002      	movs	r0, #2
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800f61c:	f04f 0e18 	mov.w	lr, #24
    arp_table[i].state = ETHARP_STATE_STABLE;
 800f620:	eb01 0cc2 	add.w	ip, r1, r2, lsl #3
 800f624:	00d2      	lsls	r2, r2, #3
 800f626:	f88c 0014 	strb.w	r0, [ip, #20]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800f62a:	200c      	movs	r0, #12
  arp_table[i].netif = netif;
 800f62c:	f8cc 5008 	str.w	r5, [ip, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800f630:	fb13 030e 	smlabb	r3, r3, lr, r0
 800f634:	68b0      	ldr	r0, [r6, #8]
 800f636:	50c8      	str	r0, [r1, r3]
 800f638:	440b      	add	r3, r1
 800f63a:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 800f63e:	8098      	strh	r0, [r3, #4]
  if (arp_table[i].q != NULL) {
 800f640:	f851 a002 	ldr.w	sl, [r1, r2]
  arp_table[i].ctime = 0;
 800f644:	f8ac 9012 	strh.w	r9, [ip, #18]
  if (arp_table[i].q != NULL) {
 800f648:	f1ba 0f00 	cmp.w	sl, #0
 800f64c:	d00e      	beq.n	800f66c <etharp_input+0xdc>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800f64e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    arp_table[i].q = NULL;
 800f652:	f841 9002 	str.w	r9, [r1, r2]
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800f656:	4628      	mov	r0, r5
 800f658:	f105 0226 	add.w	r2, r5, #38	@ 0x26
 800f65c:	9300      	str	r3, [sp, #0]
 800f65e:	4651      	mov	r1, sl
 800f660:	4643      	mov	r3, r8
 800f662:	f001 f937 	bl	80108d4 <ethernet_output>
    pbuf_free(p);
 800f666:	4650      	mov	r0, sl
 800f668:	f7fa fd08 	bl	800a07c <pbuf_free>
  switch (hdr->opcode) {
 800f66c:	88f3      	ldrh	r3, [r6, #6]
      if (for_us) {
 800f66e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f672:	d19e      	bne.n	800f5b2 <etharp_input+0x22>
 800f674:	2f00      	cmp	r7, #0
 800f676:	d09c      	beq.n	800f5b2 <etharp_input+0x22>
        etharp_raw(netif,
 800f678:	2102      	movs	r1, #2
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800f67a:	f105 0326 	add.w	r3, r5, #38	@ 0x26
        etharp_raw(netif,
 800f67e:	4642      	mov	r2, r8
 800f680:	4628      	mov	r0, r5
 800f682:	9103      	str	r1, [sp, #12]
 800f684:	a905      	add	r1, sp, #20
 800f686:	f8cd 8004 	str.w	r8, [sp, #4]
 800f68a:	9102      	str	r1, [sp, #8]
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800f68c:	1d29      	adds	r1, r5, #4
        etharp_raw(netif,
 800f68e:	9100      	str	r1, [sp, #0]
 800f690:	4619      	mov	r1, r3
 800f692:	f7ff fe41 	bl	800f318 <etharp_raw>
 800f696:	e78c      	b.n	800f5b2 <etharp_input+0x22>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f698:	4b0d      	ldr	r3, [pc, #52]	@ (800f6d0 <etharp_input+0x140>)
 800f69a:	f240 228a 	movw	r2, #650	@ 0x28a
 800f69e:	490d      	ldr	r1, [pc, #52]	@ (800f6d4 <etharp_input+0x144>)
 800f6a0:	480d      	ldr	r0, [pc, #52]	@ (800f6d8 <etharp_input+0x148>)
}
 800f6a2:	b007      	add	sp, #28
 800f6a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f6a8:	f001 bad8 	b.w	8010c5c <iprintf>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800f6ac:	429f      	cmp	r7, r3
 800f6ae:	d10a      	bne.n	800f6c6 <etharp_input+0x136>
 800f6b0:	2701      	movs	r7, #1
 800f6b2:	46bb      	mov	fp, r7
 800f6b4:	e795      	b.n	800f5e2 <etharp_input+0x52>
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800f6b6:	4b06      	ldr	r3, [pc, #24]	@ (800f6d0 <etharp_input+0x140>)
 800f6b8:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800f6bc:	4907      	ldr	r1, [pc, #28]	@ (800f6dc <etharp_input+0x14c>)
 800f6be:	4806      	ldr	r0, [pc, #24]	@ (800f6d8 <etharp_input+0x148>)
 800f6c0:	f001 facc 	bl	8010c5c <iprintf>
 800f6c4:	e791      	b.n	800f5ea <etharp_input+0x5a>
 800f6c6:	2700      	movs	r7, #0
 800f6c8:	e789      	b.n	800f5de <etharp_input+0x4e>
 800f6ca:	bf00      	nop
 800f6cc:	2400b868 	.word	0x2400b868
 800f6d0:	080145b8 	.word	0x080145b8
 800f6d4:	080127e0 	.word	0x080127e0
 800f6d8:	08011f14 	.word	0x08011f14
 800f6dc:	080146fc 	.word	0x080146fc

0800f6e0 <etharp_query>:
{
 800f6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6e4:	460e      	mov	r6, r1
 800f6e6:	b085      	sub	sp, #20
 800f6e8:	4605      	mov	r5, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f6ea:	4601      	mov	r1, r0
 800f6ec:	6830      	ldr	r0, [r6, #0]
{
 800f6ee:	4617      	mov	r7, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f6f0:	f000 fc2e 	bl	800ff50 <ip4_addr_isbroadcast_u32>
 800f6f4:	2800      	cmp	r0, #0
 800f6f6:	f040 80a2 	bne.w	800f83e <etharp_query+0x15e>
      ip4_addr_ismulticast(ipaddr) ||
 800f6fa:	6833      	ldr	r3, [r6, #0]
 800f6fc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
      ip4_addr_isany(ipaddr)) {
 800f700:	2ae0      	cmp	r2, #224	@ 0xe0
 800f702:	f000 809c 	beq.w	800f83e <etharp_query+0x15e>
 800f706:	2b00      	cmp	r3, #0
 800f708:	f000 8099 	beq.w	800f83e <etharp_query+0x15e>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800f70c:	462a      	mov	r2, r5
 800f70e:	2101      	movs	r1, #1
 800f710:	4630      	mov	r0, r6
 800f712:	f7ff fd4f 	bl	800f1b4 <etharp_find_entry>
  if (i_err < 0) {
 800f716:	f1b0 0800 	subs.w	r8, r0, #0
 800f71a:	db63      	blt.n	800f7e4 <etharp_query+0x104>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800f71c:	f1b8 0f7e 	cmp.w	r8, #126	@ 0x7e
 800f720:	dc58      	bgt.n	800f7d4 <etharp_query+0xf4>
  i = (netif_addr_idx_t)i_err;
 800f722:	fa5f f888 	uxtb.w	r8, r8
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800f726:	4c49      	ldr	r4, [pc, #292]	@ (800f84c <etharp_query+0x16c>)
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800f728:	f105 0b26 	add.w	fp, r5, #38	@ 0x26
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800f72c:	eb08 0948 	add.w	r9, r8, r8, lsl #1
 800f730:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 800f734:	eb04 09c9 	add.w	r9, r4, r9, lsl #3
 800f738:	f899 3014 	ldrb.w	r3, [r9, #20]
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d133      	bne.n	800f7a8 <etharp_query+0xc8>
    arp_table[i].state = ETHARP_STATE_PENDING;
 800f740:	2301      	movs	r3, #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f742:	9602      	str	r6, [sp, #8]
    arp_table[i].netif = netif;
 800f744:	f8c9 5008 	str.w	r5, [r9, #8]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f748:	4659      	mov	r1, fp
 800f74a:	9303      	str	r3, [sp, #12]
 800f74c:	4628      	mov	r0, r5
    arp_table[i].state = ETHARP_STATE_PENDING;
 800f74e:	f889 3014 	strb.w	r3, [r9, #20]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f752:	4b3f      	ldr	r3, [pc, #252]	@ (800f850 <etharp_query+0x170>)
 800f754:	4a3f      	ldr	r2, [pc, #252]	@ (800f854 <etharp_query+0x174>)
 800f756:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800f758:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f75a:	9300      	str	r3, [sp, #0]
 800f75c:	465b      	mov	r3, fp
 800f75e:	f7ff fddb 	bl	800f318 <etharp_raw>
    if (q == NULL) {
 800f762:	2f00      	cmp	r7, #0
 800f764:	d033      	beq.n	800f7ce <etharp_query+0xee>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800f766:	f899 3014 	ldrb.w	r3, [r9, #20]
 800f76a:	2b01      	cmp	r3, #1
 800f76c:	d820      	bhi.n	800f7b0 <etharp_query+0xd0>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f76e:	d12e      	bne.n	800f7ce <etharp_query+0xee>
{
 800f770:	463d      	mov	r5, r7
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800f772:	4e39      	ldr	r6, [pc, #228]	@ (800f858 <etharp_query+0x178>)
 800f774:	f8df b0f0 	ldr.w	fp, [pc, #240]	@ 800f868 <etharp_query+0x188>
 800f778:	f8df 90e8 	ldr.w	r9, [pc, #232]	@ 800f864 <etharp_query+0x184>
 800f77c:	e005      	b.n	800f78a <etharp_query+0xaa>
      if (PBUF_NEEDS_COPY(p)) {
 800f77e:	7b2b      	ldrb	r3, [r5, #12]
 800f780:	065b      	lsls	r3, r3, #25
 800f782:	d434      	bmi.n	800f7ee <etharp_query+0x10e>
      p = p->next;
 800f784:	682d      	ldr	r5, [r5, #0]
    while (p) {
 800f786:	2d00      	cmp	r5, #0
 800f788:	d047      	beq.n	800f81a <etharp_query+0x13a>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800f78a:	896a      	ldrh	r2, [r5, #10]
 800f78c:	892b      	ldrh	r3, [r5, #8]
 800f78e:	429a      	cmp	r2, r3
 800f790:	d1f5      	bne.n	800f77e <etharp_query+0x9e>
 800f792:	682a      	ldr	r2, [r5, #0]
 800f794:	4633      	mov	r3, r6
 800f796:	2a00      	cmp	r2, #0
 800f798:	d0f1      	beq.n	800f77e <etharp_query+0x9e>
 800f79a:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800f79e:	4659      	mov	r1, fp
 800f7a0:	4648      	mov	r0, r9
 800f7a2:	f001 fa5b 	bl	8010c5c <iprintf>
 800f7a6:	e7ea      	b.n	800f77e <etharp_query+0x9e>
  if (is_new_entry || (q == NULL)) {
 800f7a8:	2f00      	cmp	r7, #0
 800f7aa:	d03a      	beq.n	800f822 <etharp_query+0x142>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800f7ac:	2b01      	cmp	r3, #1
 800f7ae:	d0df      	beq.n	800f770 <etharp_query+0x90>
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800f7b0:	2318      	movs	r3, #24
 800f7b2:	465a      	mov	r2, fp
 800f7b4:	4639      	mov	r1, r7
 800f7b6:	4628      	mov	r0, r5
 800f7b8:	fb03 4308 	mla	r3, r3, r8, r4
 800f7bc:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 800f7c0:	9400      	str	r4, [sp, #0]
 800f7c2:	330c      	adds	r3, #12
    ETHARP_SET_ADDRHINT(netif, i);
 800f7c4:	4c25      	ldr	r4, [pc, #148]	@ (800f85c <etharp_query+0x17c>)
 800f7c6:	f884 8000 	strb.w	r8, [r4]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800f7ca:	f001 f883 	bl	80108d4 <ethernet_output>
}
 800f7ce:	b005      	add	sp, #20
 800f7d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800f7d4:	4b20      	ldr	r3, [pc, #128]	@ (800f858 <etharp_query+0x178>)
 800f7d6:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800f7da:	4921      	ldr	r1, [pc, #132]	@ (800f860 <etharp_query+0x180>)
 800f7dc:	4821      	ldr	r0, [pc, #132]	@ (800f864 <etharp_query+0x184>)
 800f7de:	f001 fa3d 	bl	8010c5c <iprintf>
 800f7e2:	e79e      	b.n	800f722 <etharp_query+0x42>
    return (err_t)i_err;
 800f7e4:	fa4f f088 	sxtb.w	r0, r8
}
 800f7e8:	b005      	add	sp, #20
 800f7ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800f7ee:	463a      	mov	r2, r7
 800f7f0:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800f7f4:	200e      	movs	r0, #14
 800f7f6:	f7fa ff4d 	bl	800a694 <pbuf_clone>
 800f7fa:	4607      	mov	r7, r0
    if (p != NULL) {
 800f7fc:	b317      	cbz	r7, 800f844 <etharp_query+0x164>
      if (arp_table[i].q != NULL) {
 800f7fe:	eb0a 0308 	add.w	r3, sl, r8
 800f802:	f854 0033 	ldr.w	r0, [r4, r3, lsl #3]
 800f806:	b108      	cbz	r0, 800f80c <etharp_query+0x12c>
        pbuf_free(arp_table[i].q);
 800f808:	f7fa fc38 	bl	800a07c <pbuf_free>
      arp_table[i].q = p;
 800f80c:	44d0      	add	r8, sl
      result = ERR_OK;
 800f80e:	2000      	movs	r0, #0
      arp_table[i].q = p;
 800f810:	f844 7038 	str.w	r7, [r4, r8, lsl #3]
}
 800f814:	b005      	add	sp, #20
 800f816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pbuf_ref(p);
 800f81a:	4638      	mov	r0, r7
 800f81c:	f7fa fda6 	bl	800a36c <pbuf_ref>
 800f820:	e7ec      	b.n	800f7fc <etharp_query+0x11c>
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800f822:	1d2a      	adds	r2, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f824:	2301      	movs	r3, #1
 800f826:	4c0a      	ldr	r4, [pc, #40]	@ (800f850 <etharp_query+0x170>)
 800f828:	4659      	mov	r1, fp
 800f82a:	4628      	mov	r0, r5
 800f82c:	e9cd 6302 	strd	r6, r3, [sp, #8]
 800f830:	e9cd 2400 	strd	r2, r4, [sp]
 800f834:	465b      	mov	r3, fp
 800f836:	4a07      	ldr	r2, [pc, #28]	@ (800f854 <etharp_query+0x174>)
 800f838:	f7ff fd6e 	bl	800f318 <etharp_raw>
    if (q == NULL) {
 800f83c:	e7c7      	b.n	800f7ce <etharp_query+0xee>
    return ERR_ARG;
 800f83e:	f06f 000f 	mvn.w	r0, #15
 800f842:	e7c4      	b.n	800f7ce <etharp_query+0xee>
  err_t result = ERR_MEM;
 800f844:	f04f 30ff 	mov.w	r0, #4294967295
 800f848:	e7c1      	b.n	800f7ce <etharp_query+0xee>
 800f84a:	bf00      	nop
 800f84c:	2400b868 	.word	0x2400b868
 800f850:	08014a8c 	.word	0x08014a8c
 800f854:	08014a94 	.word	0x08014a94
 800f858:	080145b8 	.word	0x080145b8
 800f85c:	2400b864 	.word	0x2400b864
 800f860:	08014720 	.word	0x08014720
 800f864:	08011f14 	.word	0x08011f14
 800f868:	08014730 	.word	0x08014730

0800f86c <etharp_output>:
{
 800f86c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f86e:	4604      	mov	r4, r0
 800f870:	b085      	sub	sp, #20
 800f872:	460e      	mov	r6, r1
 800f874:	4615      	mov	r5, r2
  LWIP_ASSERT_CORE_LOCKED();
 800f876:	f7f7 f863 	bl	8006940 <sys_check_core_locking>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f87a:	2c00      	cmp	r4, #0
 800f87c:	f000 8081 	beq.w	800f982 <etharp_output+0x116>
  LWIP_ASSERT("q != NULL", q != NULL);
 800f880:	2e00      	cmp	r6, #0
 800f882:	d06d      	beq.n	800f960 <etharp_output+0xf4>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800f884:	2d00      	cmp	r5, #0
 800f886:	d074      	beq.n	800f972 <etharp_output+0x106>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800f888:	4621      	mov	r1, r4
 800f88a:	6828      	ldr	r0, [r5, #0]
 800f88c:	f000 fb60 	bl	800ff50 <ip4_addr_isbroadcast_u32>
 800f890:	2800      	cmp	r0, #0
 800f892:	d163      	bne.n	800f95c <etharp_output+0xf0>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800f894:	682b      	ldr	r3, [r5, #0]
 800f896:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800f89a:	2ae0      	cmp	r2, #224	@ 0xe0
 800f89c:	d039      	beq.n	800f912 <etharp_output+0xa6>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f89e:	6862      	ldr	r2, [r4, #4]
 800f8a0:	68a1      	ldr	r1, [r4, #8]
 800f8a2:	405a      	eors	r2, r3
 800f8a4:	420a      	tst	r2, r1
 800f8a6:	d009      	beq.n	800f8bc <etharp_output+0x50>
        !ip4_addr_islinklocal(ipaddr)) {
 800f8a8:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f8aa:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800f8ae:	4293      	cmp	r3, r2
 800f8b0:	d004      	beq.n	800f8bc <etharp_output+0x50>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800f8b2:	68e3      	ldr	r3, [r4, #12]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d076      	beq.n	800f9a6 <etharp_output+0x13a>
            dst_addr = netif_ip4_gw(netif);
 800f8b8:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f8bc:	4f3b      	ldr	r7, [pc, #236]	@ (800f9ac <etharp_output+0x140>)
 800f8be:	4b3c      	ldr	r3, [pc, #240]	@ (800f9b0 <etharp_output+0x144>)
 800f8c0:	783a      	ldrb	r2, [r7, #0]
 800f8c2:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800f8c6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800f8ca:	7d19      	ldrb	r1, [r3, #20]
 800f8cc:	2901      	cmp	r1, #1
 800f8ce:	d902      	bls.n	800f8d6 <etharp_output+0x6a>
 800f8d0:	6899      	ldr	r1, [r3, #8]
 800f8d2:	42a1      	cmp	r1, r4
 800f8d4:	d060      	beq.n	800f998 <etharp_output+0x12c>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f8d6:	4b36      	ldr	r3, [pc, #216]	@ (800f9b0 <etharp_output+0x144>)
{
 800f8d8:	f04f 0c00 	mov.w	ip, #0
 800f8dc:	e005      	b.n	800f8ea <etharp_output+0x7e>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f8de:	f10c 0c01 	add.w	ip, ip, #1
 800f8e2:	3318      	adds	r3, #24
 800f8e4:	f1bc 0f0a 	cmp.w	ip, #10
 800f8e8:	d030      	beq.n	800f94c <etharp_output+0xe0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f8ea:	7d18      	ldrb	r0, [r3, #20]
 800f8ec:	2801      	cmp	r0, #1
 800f8ee:	d9f6      	bls.n	800f8de <etharp_output+0x72>
 800f8f0:	689a      	ldr	r2, [r3, #8]
 800f8f2:	42a2      	cmp	r2, r4
 800f8f4:	d1f3      	bne.n	800f8de <etharp_output+0x72>
          (arp_table[i].netif == netif) &&
 800f8f6:	685a      	ldr	r2, [r3, #4]
 800f8f8:	6829      	ldr	r1, [r5, #0]
 800f8fa:	4291      	cmp	r1, r2
 800f8fc:	d1ef      	bne.n	800f8de <etharp_output+0x72>
 800f8fe:	fa5f f28c 	uxtb.w	r2, ip
        return etharp_output_to_arp_index(netif, q, i);
 800f902:	4631      	mov	r1, r6
 800f904:	4620      	mov	r0, r4
        ETHARP_SET_ADDRHINT(netif, i);
 800f906:	703a      	strb	r2, [r7, #0]
}
 800f908:	b005      	add	sp, #20
 800f90a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        return etharp_output_to_arp_index(netif, q, i);
 800f90e:	f7ff bd73 	b.w	800f3f8 <etharp_output_to_arp_index>
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800f912:	786b      	ldrb	r3, [r5, #1]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800f914:	2201      	movs	r2, #1
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800f916:	215e      	movs	r1, #94	@ 0x5e
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800f918:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800f91c:	f8ad 2008 	strh.w	r2, [sp, #8]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800f920:	78ea      	ldrb	r2, [r5, #3]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800f922:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800f926:	78ab      	ldrb	r3, [r5, #2]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800f928:	f88d 100a 	strb.w	r1, [sp, #10]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800f92c:	f88d 300c 	strb.w	r3, [sp, #12]
    dest = &mcastaddr;
 800f930:	ab02      	add	r3, sp, #8
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800f932:	f88d 200d 	strb.w	r2, [sp, #13]
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800f936:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 800f93a:	f104 0226 	add.w	r2, r4, #38	@ 0x26
 800f93e:	4631      	mov	r1, r6
 800f940:	4620      	mov	r0, r4
 800f942:	9500      	str	r5, [sp, #0]
 800f944:	f000 ffc6 	bl	80108d4 <ethernet_output>
}
 800f948:	b005      	add	sp, #20
 800f94a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return etharp_query(netif, dst_addr, q);
 800f94c:	4632      	mov	r2, r6
 800f94e:	4629      	mov	r1, r5
 800f950:	4620      	mov	r0, r4
}
 800f952:	b005      	add	sp, #20
 800f954:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return etharp_query(netif, dst_addr, q);
 800f958:	f7ff bec2 	b.w	800f6e0 <etharp_query>
    dest = (const struct eth_addr *)&ethbroadcast;
 800f95c:	4b15      	ldr	r3, [pc, #84]	@ (800f9b4 <etharp_output+0x148>)
 800f95e:	e7ea      	b.n	800f936 <etharp_output+0xca>
  LWIP_ASSERT("q != NULL", q != NULL);
 800f960:	4b15      	ldr	r3, [pc, #84]	@ (800f9b8 <etharp_output+0x14c>)
 800f962:	f240 321f 	movw	r2, #799	@ 0x31f
 800f966:	4915      	ldr	r1, [pc, #84]	@ (800f9bc <etharp_output+0x150>)
 800f968:	4815      	ldr	r0, [pc, #84]	@ (800f9c0 <etharp_output+0x154>)
 800f96a:	f001 f977 	bl	8010c5c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800f96e:	2d00      	cmp	r5, #0
 800f970:	d18a      	bne.n	800f888 <etharp_output+0x1c>
 800f972:	4b11      	ldr	r3, [pc, #68]	@ (800f9b8 <etharp_output+0x14c>)
 800f974:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800f978:	4912      	ldr	r1, [pc, #72]	@ (800f9c4 <etharp_output+0x158>)
 800f97a:	4811      	ldr	r0, [pc, #68]	@ (800f9c0 <etharp_output+0x154>)
 800f97c:	f001 f96e 	bl	8010c5c <iprintf>
 800f980:	e782      	b.n	800f888 <etharp_output+0x1c>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f982:	4b0d      	ldr	r3, [pc, #52]	@ (800f9b8 <etharp_output+0x14c>)
 800f984:	f240 321e 	movw	r2, #798	@ 0x31e
 800f988:	490f      	ldr	r1, [pc, #60]	@ (800f9c8 <etharp_output+0x15c>)
 800f98a:	480d      	ldr	r0, [pc, #52]	@ (800f9c0 <etharp_output+0x154>)
 800f98c:	f001 f966 	bl	8010c5c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800f990:	2e00      	cmp	r6, #0
 800f992:	f47f af77 	bne.w	800f884 <etharp_output+0x18>
 800f996:	e7e3      	b.n	800f960 <etharp_output+0xf4>
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f998:	685b      	ldr	r3, [r3, #4]
 800f99a:	6829      	ldr	r1, [r5, #0]
 800f99c:	4299      	cmp	r1, r3
 800f99e:	d19a      	bne.n	800f8d6 <etharp_output+0x6a>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800f9a0:	4631      	mov	r1, r6
 800f9a2:	4620      	mov	r0, r4
 800f9a4:	e7b0      	b.n	800f908 <etharp_output+0x9c>
            return ERR_RTE;
 800f9a6:	f06f 0003 	mvn.w	r0, #3
 800f9aa:	e7cd      	b.n	800f948 <etharp_output+0xdc>
 800f9ac:	2400b864 	.word	0x2400b864
 800f9b0:	2400b868 	.word	0x2400b868
 800f9b4:	08014a94 	.word	0x08014a94
 800f9b8:	080145b8 	.word	0x080145b8
 800f9bc:	0801474c 	.word	0x0801474c
 800f9c0:	08011f14 	.word	0x08011f14
 800f9c4:	080146dc 	.word	0x080146dc
 800f9c8:	080127e0 	.word	0x080127e0

0800f9cc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800f9cc:	b510      	push	{r4, lr}
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f9ce:	2301      	movs	r3, #1
{
 800f9d0:	b084      	sub	sp, #16
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f9d2:	4c07      	ldr	r4, [pc, #28]	@ (800f9f0 <etharp_request+0x24>)
 800f9d4:	4a07      	ldr	r2, [pc, #28]	@ (800f9f4 <etharp_request+0x28>)
 800f9d6:	9401      	str	r4, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800f9d8:	1d04      	adds	r4, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f9da:	e9cd 1302 	strd	r1, r3, [sp, #8]
 800f9de:	f100 0326 	add.w	r3, r0, #38	@ 0x26
 800f9e2:	9400      	str	r4, [sp, #0]
 800f9e4:	4619      	mov	r1, r3
 800f9e6:	f7ff fc97 	bl	800f318 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 800f9ea:	b004      	add	sp, #16
 800f9ec:	bd10      	pop	{r4, pc}
 800f9ee:	bf00      	nop
 800f9f0:	08014a8c 	.word	0x08014a8c
 800f9f4:	08014a94 	.word	0x08014a94

0800f9f8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800f9f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f9fa:	460f      	mov	r7, r1
 800f9fc:	b087      	sub	sp, #28
 800f9fe:	4616      	mov	r6, r2
 800fa00:	4604      	mov	r4, r0

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800fa02:	2124      	movs	r1, #36	@ 0x24
 800fa04:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800fa08:	2022      	movs	r0, #34	@ 0x22
 800fa0a:	f7fa fba7 	bl	800a15c <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 800fa0e:	b390      	cbz	r0, 800fa76 <icmp_send_response+0x7e>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800fa10:	8943      	ldrh	r3, [r0, #10]
 800fa12:	4605      	mov	r5, r0
 800fa14:	2b23      	cmp	r3, #35	@ 0x23
 800fa16:	d930      	bls.n	800fa7a <icmp_send_response+0x82>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800fa18:	6863      	ldr	r3, [r4, #4]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800fa1a:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
 800fa1c:	7027      	strb	r7, [r4, #0]
  icmphdr->code = code;
  icmphdr->id = 0;
 800fa1e:	2700      	movs	r7, #0
  icmphdr->code = code;
 800fa20:	7066      	strb	r6, [r4, #1]
  icmphdr->id = 0;
 800fa22:	6067      	str	r7, [r4, #4]
  icmphdr->seqno = 0;

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800fa24:	6818      	ldr	r0, [r3, #0]
 800fa26:	6859      	ldr	r1, [r3, #4]
 800fa28:	689a      	ldr	r2, [r3, #8]
 800fa2a:	68de      	ldr	r6, [r3, #12]
 800fa2c:	60a0      	str	r0, [r4, #8]
 800fa2e:	6166      	str	r6, [r4, #20]
 800fa30:	60e1      	str	r1, [r4, #12]
 800fa32:	6122      	str	r2, [r4, #16]
 800fa34:	6918      	ldr	r0, [r3, #16]
 800fa36:	6959      	ldr	r1, [r3, #20]
 800fa38:	699a      	ldr	r2, [r3, #24]
 800fa3a:	61a0      	str	r0, [r4, #24]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800fa3c:	a805      	add	r0, sp, #20
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800fa3e:	61e1      	str	r1, [r4, #28]
 800fa40:	6222      	str	r2, [r4, #32]
  ip4_addr_copy(iphdr_src, iphdr->src);
 800fa42:	68db      	ldr	r3, [r3, #12]
 800fa44:	9305      	str	r3, [sp, #20]
  netif = ip4_route(&iphdr_src);
 800fa46:	f000 f8d7 	bl	800fbf8 <ip4_route>
#endif
  if (netif != NULL) {
 800fa4a:	4606      	mov	r6, r0
 800fa4c:	b180      	cbz	r0, 800fa70 <icmp_send_response+0x78>
    /* calculate checksum */
    icmphdr->chksum = 0;
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800fa4e:	8969      	ldrh	r1, [r5, #10]
 800fa50:	4620      	mov	r0, r4
    icmphdr->chksum = 0;
 800fa52:	70a7      	strb	r7, [r4, #2]
 800fa54:	70e7      	strb	r7, [r4, #3]
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800fa56:	f7f9 fc7d 	bl	8009354 <inet_chksum>
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800fa5a:	2301      	movs	r3, #1
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800fa5c:	8060      	strh	r0, [r4, #2]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800fa5e:	aa05      	add	r2, sp, #20
 800fa60:	4639      	mov	r1, r7
 800fa62:	4628      	mov	r0, r5
 800fa64:	9700      	str	r7, [sp, #0]
 800fa66:	e9cd 3601 	strd	r3, r6, [sp, #4]
 800fa6a:	23ff      	movs	r3, #255	@ 0xff
 800fa6c:	f000 fa5e 	bl	800ff2c <ip4_output_if>
  }
  pbuf_free(q);
 800fa70:	4628      	mov	r0, r5
 800fa72:	f7fa fb03 	bl	800a07c <pbuf_free>
}
 800fa76:	b007      	add	sp, #28
 800fa78:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800fa7a:	4b04      	ldr	r3, [pc, #16]	@ (800fa8c <icmp_send_response+0x94>)
 800fa7c:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800fa80:	4903      	ldr	r1, [pc, #12]	@ (800fa90 <icmp_send_response+0x98>)
 800fa82:	4804      	ldr	r0, [pc, #16]	@ (800fa94 <icmp_send_response+0x9c>)
 800fa84:	f001 f8ea 	bl	8010c5c <iprintf>
 800fa88:	e7c6      	b.n	800fa18 <icmp_send_response+0x20>
 800fa8a:	bf00      	nop
 800fa8c:	08014758 	.word	0x08014758
 800fa90:	08014790 	.word	0x08014790
 800fa94:	08011f14 	.word	0x08011f14

0800fa98 <icmp_input>:
{
 800fa98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 800fa9c:	4f4c      	ldr	r7, [pc, #304]	@ (800fbd0 <icmp_input+0x138>)
{
 800fa9e:	b085      	sub	sp, #20
 800faa0:	4605      	mov	r5, r0
  iphdr_in = ip4_current_header();
 800faa2:	f8d7 8008 	ldr.w	r8, [r7, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
 800faa6:	f898 4000 	ldrb.w	r4, [r8]
 800faaa:	f004 040f 	and.w	r4, r4, #15
 800faae:	00a4      	lsls	r4, r4, #2
  if (hlen < IP_HLEN) {
 800fab0:	2c13      	cmp	r4, #19
 800fab2:	d913      	bls.n	800fadc <icmp_input+0x44>
  if (p->len < sizeof(u16_t) * 2) {
 800fab4:	8943      	ldrh	r3, [r0, #10]
 800fab6:	2b03      	cmp	r3, #3
 800fab8:	d910      	bls.n	800fadc <icmp_input+0x44>
  type = *((u8_t *)p->payload);
 800faba:	6843      	ldr	r3, [r0, #4]
  switch (type) {
 800fabc:	781b      	ldrb	r3, [r3, #0]
 800fabe:	2b08      	cmp	r3, #8
 800fac0:	d10c      	bne.n	800fadc <icmp_input+0x44>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fac2:	6978      	ldr	r0, [r7, #20]
 800fac4:	f000 03f0 	and.w	r3, r0, #240	@ 0xf0
 800fac8:	2be0      	cmp	r3, #224	@ 0xe0
 800faca:	d007      	beq.n	800fadc <icmp_input+0x44>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800facc:	460e      	mov	r6, r1
 800face:	6839      	ldr	r1, [r7, #0]
 800fad0:	f000 fa3e 	bl	800ff50 <ip4_addr_isbroadcast_u32>
 800fad4:	b910      	cbnz	r0, 800fadc <icmp_input+0x44>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800fad6:	892b      	ldrh	r3, [r5, #8]
 800fad8:	2b07      	cmp	r3, #7
 800fada:	d805      	bhi.n	800fae8 <icmp_input+0x50>
  pbuf_free(p);
 800fadc:	4628      	mov	r0, r5
}
 800fade:	b005      	add	sp, #20
 800fae0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 800fae4:	f7fa baca 	b.w	800a07c <pbuf_free>
        if (inet_chksum_pbuf(p) != 0) {
 800fae8:	4628      	mov	r0, r5
 800faea:	f7f9 fc39 	bl	8009360 <inet_chksum_pbuf>
 800faee:	2800      	cmp	r0, #0
 800faf0:	d1f4      	bne.n	800fadc <icmp_input+0x44>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800faf2:	f104 090e 	add.w	r9, r4, #14
 800faf6:	4628      	mov	r0, r5
 800faf8:	4649      	mov	r1, r9
 800fafa:	f7fa fa2d 	bl	8009f58 <pbuf_add_header>
 800fafe:	2800      	cmp	r0, #0
 800fb00:	d04b      	beq.n	800fb9a <icmp_input+0x102>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800fb02:	892b      	ldrh	r3, [r5, #8]
 800fb04:	18e1      	adds	r1, r4, r3
 800fb06:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 800fb08:	428b      	cmp	r3, r1
 800fb0a:	d8e7      	bhi.n	800fadc <icmp_input+0x44>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800fb0c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800fb10:	200e      	movs	r0, #14
 800fb12:	f7fa fb23 	bl	800a15c <pbuf_alloc>
        if (r == NULL) {
 800fb16:	4681      	mov	r9, r0
 800fb18:	2800      	cmp	r0, #0
 800fb1a:	d0df      	beq.n	800fadc <icmp_input+0x44>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800fb1c:	8942      	ldrh	r2, [r0, #10]
 800fb1e:	f104 0308 	add.w	r3, r4, #8
 800fb22:	429a      	cmp	r2, r3
 800fb24:	d346      	bcc.n	800fbb4 <icmp_input+0x11c>
        MEMCPY(r->payload, iphdr_in, hlen);
 800fb26:	4641      	mov	r1, r8
 800fb28:	4622      	mov	r2, r4
 800fb2a:	6840      	ldr	r0, [r0, #4]
 800fb2c:	f001 fa15 	bl	8010f5a <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 800fb30:	4621      	mov	r1, r4
 800fb32:	4648      	mov	r0, r9
 800fb34:	f7fa fa40 	bl	8009fb8 <pbuf_remove_header>
 800fb38:	2800      	cmp	r0, #0
 800fb3a:	d13f      	bne.n	800fbbc <icmp_input+0x124>
        if (pbuf_copy(r, p) != ERR_OK) {
 800fb3c:	4629      	mov	r1, r5
 800fb3e:	4648      	mov	r0, r9
 800fb40:	f7fa fc94 	bl	800a46c <pbuf_copy>
 800fb44:	2800      	cmp	r0, #0
 800fb46:	d135      	bne.n	800fbb4 <icmp_input+0x11c>
        pbuf_free(p);
 800fb48:	4628      	mov	r0, r5
 800fb4a:	464d      	mov	r5, r9
 800fb4c:	f7fa fa96 	bl	800a07c <pbuf_free>
      if (pbuf_add_header(p, hlen)) {
 800fb50:	4621      	mov	r1, r4
 800fb52:	4628      	mov	r0, r5
      iecho = (struct icmp_echo_hdr *)p->payload;
 800fb54:	686c      	ldr	r4, [r5, #4]
      if (pbuf_add_header(p, hlen)) {
 800fb56:	f7fa f9ff 	bl	8009f58 <pbuf_add_header>
 800fb5a:	2800      	cmp	r0, #0
 800fb5c:	d1be      	bne.n	800fadc <icmp_input+0x44>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800fb5e:	6869      	ldr	r1, [r5, #4]
        ip4_addr_copy(iphdr->src, *src);
 800fb60:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800fb64:	610a      	str	r2, [r1, #16]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800fb66:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
        ip4_addr_copy(iphdr->src, *src);
 800fb6a:	60cb      	str	r3, [r1, #12]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800fb6c:	8863      	ldrh	r3, [r4, #2]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800fb6e:	7020      	strb	r0, [r4, #0]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800fb70:	4628      	mov	r0, r5
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800fb72:	4293      	cmp	r3, r2
        IPH_CHKSUM_SET(iphdr, 0);
 800fb74:	f04f 0200 	mov.w	r2, #0
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 800fb78:	bf8c      	ite	hi
 800fb7a:	3309      	addhi	r3, #9
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 800fb7c:	3308      	addls	r3, #8
 800fb7e:	b29b      	uxth	r3, r3
 800fb80:	8063      	strh	r3, [r4, #2]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800fb82:	23ff      	movs	r3, #255	@ 0xff
        IPH_CHKSUM_SET(iphdr, 0);
 800fb84:	728a      	strb	r2, [r1, #10]
 800fb86:	72ca      	strb	r2, [r1, #11]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800fb88:	720b      	strb	r3, [r1, #8]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800fb8a:	2101      	movs	r1, #1
 800fb8c:	9200      	str	r2, [sp, #0]
 800fb8e:	e9cd 1601 	strd	r1, r6, [sp, #4]
 800fb92:	4910      	ldr	r1, [pc, #64]	@ (800fbd4 <icmp_input+0x13c>)
 800fb94:	f000 f9ca 	bl	800ff2c <ip4_output_if>
  pbuf_free(p);
 800fb98:	e7a0      	b.n	800fadc <icmp_input+0x44>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800fb9a:	4649      	mov	r1, r9
 800fb9c:	4628      	mov	r0, r5
 800fb9e:	f7fa fa0b 	bl	8009fb8 <pbuf_remove_header>
 800fba2:	2800      	cmp	r0, #0
 800fba4:	d0d4      	beq.n	800fb50 <icmp_input+0xb8>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800fba6:	4b0c      	ldr	r3, [pc, #48]	@ (800fbd8 <icmp_input+0x140>)
 800fba8:	22c7      	movs	r2, #199	@ 0xc7
 800fbaa:	490c      	ldr	r1, [pc, #48]	@ (800fbdc <icmp_input+0x144>)
 800fbac:	480c      	ldr	r0, [pc, #48]	@ (800fbe0 <icmp_input+0x148>)
 800fbae:	f001 f855 	bl	8010c5c <iprintf>
          goto icmperr;
 800fbb2:	e793      	b.n	800fadc <icmp_input+0x44>
          pbuf_free(r);
 800fbb4:	4648      	mov	r0, r9
 800fbb6:	f7fa fa61 	bl	800a07c <pbuf_free>
          goto icmperr;
 800fbba:	e78f      	b.n	800fadc <icmp_input+0x44>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800fbbc:	4b06      	ldr	r3, [pc, #24]	@ (800fbd8 <icmp_input+0x140>)
 800fbbe:	22b6      	movs	r2, #182	@ 0xb6
 800fbc0:	4908      	ldr	r1, [pc, #32]	@ (800fbe4 <icmp_input+0x14c>)
 800fbc2:	4807      	ldr	r0, [pc, #28]	@ (800fbe0 <icmp_input+0x148>)
 800fbc4:	f001 f84a 	bl	8010c5c <iprintf>
          pbuf_free(r);
 800fbc8:	4648      	mov	r0, r9
 800fbca:	f7fa fa57 	bl	800a07c <pbuf_free>
          goto icmperr;
 800fbce:	e785      	b.n	800fadc <icmp_input+0x44>
 800fbd0:	24004d48 	.word	0x24004d48
 800fbd4:	24004d5c 	.word	0x24004d5c
 800fbd8:	08014758 	.word	0x08014758
 800fbdc:	080147f4 	.word	0x080147f4
 800fbe0:	08011f14 	.word	0x08011f14
 800fbe4:	080147bc 	.word	0x080147bc

0800fbe8 <icmp_dest_unreach>:
{
 800fbe8:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 800fbea:	2103      	movs	r1, #3
 800fbec:	f7ff bf04 	b.w	800f9f8 <icmp_send_response>

0800fbf0 <icmp_time_exceeded>:
{
 800fbf0:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 800fbf2:	210b      	movs	r1, #11
 800fbf4:	f7ff bf00 	b.w	800f9f8 <icmp_send_response>

0800fbf8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800fbf8:	b538      	push	{r3, r4, r5, lr}
 800fbfa:	4604      	mov	r4, r0
#if !LWIP_SINGLE_NETIF
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();
 800fbfc:	f7f6 fea0 	bl	8006940 <sys_check_core_locking>

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800fc00:	4b15      	ldr	r3, [pc, #84]	@ (800fc58 <ip4_route+0x60>)
 800fc02:	6818      	ldr	r0, [r3, #0]
 800fc04:	b1a0      	cbz	r0, 800fc30 <ip4_route+0x38>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800fc06:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 800fc0a:	07d9      	lsls	r1, r3, #31
 800fc0c:	d50d      	bpl.n	800fc2a <ip4_route+0x32>
 800fc0e:	075a      	lsls	r2, r3, #29
 800fc10:	d50b      	bpl.n	800fc2a <ip4_route+0x32>
 800fc12:	6842      	ldr	r2, [r0, #4]
 800fc14:	b14a      	cbz	r2, 800fc2a <ip4_route+0x32>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800fc16:	6821      	ldr	r1, [r4, #0]
 800fc18:	6885      	ldr	r5, [r0, #8]
 800fc1a:	404a      	eors	r2, r1
 800fc1c:	422a      	tst	r2, r5
 800fc1e:	d016      	beq.n	800fc4e <ip4_route+0x56>
        /* return netif on which to forward IP packet */
        return netif;
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800fc20:	079b      	lsls	r3, r3, #30
 800fc22:	d402      	bmi.n	800fc2a <ip4_route+0x32>
 800fc24:	68c3      	ldr	r3, [r0, #12]
 800fc26:	4299      	cmp	r1, r3
 800fc28:	d011      	beq.n	800fc4e <ip4_route+0x56>
  NETIF_FOREACH(netif) {
 800fc2a:	6800      	ldr	r0, [r0, #0]
 800fc2c:	2800      	cmp	r0, #0
 800fc2e:	d1ea      	bne.n	800fc06 <ip4_route+0xe>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800fc30:	4b0a      	ldr	r3, [pc, #40]	@ (800fc5c <ip4_route+0x64>)
 800fc32:	6818      	ldr	r0, [r3, #0]
 800fc34:	b158      	cbz	r0, 800fc4e <ip4_route+0x56>
 800fc36:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 800fc3a:	f003 0305 	and.w	r3, r3, #5
 800fc3e:	2b05      	cmp	r3, #5
 800fc40:	d106      	bne.n	800fc50 <ip4_route+0x58>
 800fc42:	6843      	ldr	r3, [r0, #4]
 800fc44:	b133      	cbz	r3, 800fc54 <ip4_route+0x5c>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800fc46:	7823      	ldrb	r3, [r4, #0]
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800fc48:	2b7f      	cmp	r3, #127	@ 0x7f
 800fc4a:	bf08      	it	eq
 800fc4c:	2000      	moveq	r0, #0
  }

  return netif_default;
}
 800fc4e:	bd38      	pop	{r3, r4, r5, pc}
    return NULL;
 800fc50:	2000      	movs	r0, #0
}
 800fc52:	bd38      	pop	{r3, r4, r5, pc}
    return NULL;
 800fc54:	4618      	mov	r0, r3
}
 800fc56:	bd38      	pop	{r3, r4, r5, pc}
 800fc58:	2400b800 	.word	0x2400b800
 800fc5c:	2400b7fc 	.word	0x2400b7fc

0800fc60 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800fc60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc64:	4604      	mov	r4, r0
 800fc66:	460e      	mov	r6, r1
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP */
#if LWIP_RAW
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();
 800fc68:	f7f6 fe6a 	bl	8006940 <sys_check_core_locking>

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800fc6c:	6867      	ldr	r7, [r4, #4]
  if (IPH_V(iphdr) != 4) {
 800fc6e:	783b      	ldrb	r3, [r7, #0]
 800fc70:	091a      	lsrs	r2, r3, #4
 800fc72:	2a04      	cmp	r2, #4
 800fc74:	d16d      	bne.n	800fd52 <ip4_input+0xf2>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800fc76:	f003 030f 	and.w	r3, r3, #15
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800fc7a:	8878      	ldrh	r0, [r7, #2]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800fc7c:	009d      	lsls	r5, r3, #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800fc7e:	f7f9 fb29 	bl	80092d4 <lwip_htons>

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800fc82:	8923      	ldrh	r3, [r4, #8]
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800fc84:	4680      	mov	r8, r0
  if (iphdr_len < p->tot_len) {
 800fc86:	4283      	cmp	r3, r0
 800fc88:	d869      	bhi.n	800fd5e <ip4_input+0xfe>
    pbuf_realloc(p, iphdr_len);
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800fc8a:	8963      	ldrh	r3, [r4, #10]
 800fc8c:	42ab      	cmp	r3, r5
 800fc8e:	d360      	bcc.n	800fd52 <ip4_input+0xf2>
 800fc90:	8923      	ldrh	r3, [r4, #8]
 800fc92:	4543      	cmp	r3, r8
 800fc94:	d35d      	bcc.n	800fd52 <ip4_input+0xf2>
 800fc96:	2d13      	cmp	r5, #19
 800fc98:	d95b      	bls.n	800fd52 <ip4_input+0xf2>
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800fc9a:	693a      	ldr	r2, [r7, #16]
 800fc9c:	68f8      	ldr	r0, [r7, #12]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fc9e:	f002 01f0 	and.w	r1, r2, #240	@ 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800fca2:	f8df 917c 	ldr.w	r9, [pc, #380]	@ 800fe20 <ip4_input+0x1c0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800fca6:	f896 802d 	ldrb.w	r8, [r6, #45]	@ 0x2d
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fcaa:	29e0      	cmp	r1, #224	@ 0xe0
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800fcac:	f008 0301 	and.w	r3, r8, #1
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800fcb0:	e9c9 0204 	strd	r0, r2, [r9, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fcb4:	d158      	bne.n	800fd68 <ip4_input+0x108>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	f040 8083 	bne.w	800fdc2 <ip4_input+0x162>
      netif = inp;
    } else {
      netif = NULL;
 800fcbc:	f04f 0800 	mov.w	r8, #0
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800fcc0:	4631      	mov	r1, r6
 800fcc2:	f000 f945 	bl	800ff50 <ip4_addr_isbroadcast_u32>
 800fcc6:	2800      	cmp	r0, #0
 800fcc8:	d143      	bne.n	800fd52 <ip4_input+0xf2>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800fcca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fcce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800fcd2:	2be0      	cmp	r3, #224	@ 0xe0
 800fcd4:	d03d      	beq.n	800fd52 <ip4_input+0xf2>
      return ERR_OK;
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800fcd6:	f1b8 0f00 	cmp.w	r8, #0
 800fcda:	d03a      	beq.n	800fd52 <ip4_input+0xf2>
    }
    pbuf_free(p);
    return ERR_OK;
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800fcdc:	88fb      	ldrh	r3, [r7, #6]
 800fcde:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d165      	bne.n	800fdb2 <ip4_input+0x152>
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
  ip_data.current_input_netif = inp;
  ip_data.current_ip4_header = iphdr;
 800fce6:	f8c9 7008 	str.w	r7, [r9, #8]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800fcea:	4629      	mov	r1, r5
 800fcec:	4620      	mov	r0, r4
  ip_data.current_input_netif = inp;
 800fcee:	e9c9 8600 	strd	r8, r6, [r9]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800fcf2:	783b      	ldrb	r3, [r7, #0]
 800fcf4:	f003 030f 	and.w	r3, r3, #15
 800fcf8:	009b      	lsls	r3, r3, #2
 800fcfa:	f8a9 300c 	strh.w	r3, [r9, #12]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800fcfe:	f7fa f95b 	bl	8009fb8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800fd02:	7a7b      	ldrb	r3, [r7, #9]
 800fd04:	2b06      	cmp	r3, #6
 800fd06:	d07a      	beq.n	800fdfe <ip4_input+0x19e>
 800fd08:	2b11      	cmp	r3, #17
 800fd0a:	d073      	beq.n	800fdf4 <ip4_input+0x194>
 800fd0c:	2b01      	cmp	r3, #1
 800fd0e:	d06c      	beq.n	800fdea <ip4_input+0x18a>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800fd10:	4641      	mov	r1, r8
 800fd12:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800fd16:	f000 f91b 	bl	800ff50 <ip4_addr_isbroadcast_u32>
 800fd1a:	b968      	cbnz	r0, 800fd38 <ip4_input+0xd8>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fd1c:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800fd20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800fd24:	2be0      	cmp	r3, #224	@ 0xe0
 800fd26:	d007      	beq.n	800fd38 <ip4_input+0xd8>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800fd28:	4629      	mov	r1, r5
 800fd2a:	4620      	mov	r0, r4
 800fd2c:	f7fa f972 	bl	800a014 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800fd30:	2102      	movs	r1, #2
 800fd32:	4620      	mov	r0, r4
 800fd34:	f7ff ff58 	bl	800fbe8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800fd38:	4620      	mov	r0, r4
 800fd3a:	f7fa f99f 	bl	800a07c <pbuf_free>
        break;
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800fd3e:	2300      	movs	r3, #0
 800fd40:	e9c9 3300 	strd	r3, r3, [r9]
  ip_data.current_input_netif = NULL;
  ip_data.current_ip4_header = NULL;
 800fd44:	f8c9 3008 	str.w	r3, [r9, #8]
  ip_data.current_ip_header_tot_len = 0;
 800fd48:	f8a9 300c 	strh.w	r3, [r9, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800fd4c:	e9c9 3304 	strd	r3, r3, [r9, #16]
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
 800fd50:	e002      	b.n	800fd58 <ip4_input+0xf8>
    pbuf_free(p);
 800fd52:	4620      	mov	r0, r4
 800fd54:	f7fa f992 	bl	800a07c <pbuf_free>
}
 800fd58:	2000      	movs	r0, #0
 800fd5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    pbuf_realloc(p, iphdr_len);
 800fd5e:	4601      	mov	r1, r0
 800fd60:	4620      	mov	r0, r4
 800fd62:	f7fa fa9d 	bl	800a2a0 <pbuf_realloc>
 800fd66:	e790      	b.n	800fc8a <ip4_input+0x2a>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800fd68:	bb93      	cbnz	r3, 800fdd0 <ip4_input+0x170>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800fd6a:	b2d2      	uxtb	r2, r2
 800fd6c:	2a7f      	cmp	r2, #127	@ 0x7f
 800fd6e:	d04b      	beq.n	800fe08 <ip4_input+0x1a8>
        NETIF_FOREACH(netif) {
 800fd70:	4b2a      	ldr	r3, [pc, #168]	@ (800fe1c <ip4_input+0x1bc>)
 800fd72:	f8d3 8000 	ldr.w	r8, [r3]
 800fd76:	f1b8 0f00 	cmp.w	r8, #0
 800fd7a:	d108      	bne.n	800fd8e <ip4_input+0x12e>
 800fd7c:	e044      	b.n	800fe08 <ip4_input+0x1a8>
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800fd7e:	f000 f8e7 	bl	800ff50 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800fd82:	b998      	cbnz	r0, 800fdac <ip4_input+0x14c>
        NETIF_FOREACH(netif) {
 800fd84:	f8d8 8000 	ldr.w	r8, [r8]
 800fd88:	f1b8 0f00 	cmp.w	r8, #0
 800fd8c:	d00e      	beq.n	800fdac <ip4_input+0x14c>
          if (netif == inp) {
 800fd8e:	4546      	cmp	r6, r8
 800fd90:	d0f8      	beq.n	800fd84 <ip4_input+0x124>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800fd92:	f898 302d 	ldrb.w	r3, [r8, #45]	@ 0x2d
 800fd96:	07db      	lsls	r3, r3, #31
 800fd98:	d5f4      	bpl.n	800fd84 <ip4_input+0x124>
 800fd9a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d0f0      	beq.n	800fd84 <ip4_input+0x124>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800fda2:	f8d9 0014 	ldr.w	r0, [r9, #20]
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800fda6:	4641      	mov	r1, r8
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800fda8:	4283      	cmp	r3, r0
 800fdaa:	d1e8      	bne.n	800fd7e <ip4_input+0x11e>
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800fdac:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800fdb0:	e786      	b.n	800fcc0 <ip4_input+0x60>
    p = ip4_reass(p);
 800fdb2:	4620      	mov	r0, r4
 800fdb4:	f000 f9f8 	bl	80101a8 <ip4_reass>
    if (p == NULL) {
 800fdb8:	4604      	mov	r4, r0
 800fdba:	2800      	cmp	r0, #0
 800fdbc:	d0cc      	beq.n	800fd58 <ip4_input+0xf8>
    iphdr = (const struct ip_hdr *)p->payload;
 800fdbe:	6847      	ldr	r7, [r0, #4]
 800fdc0:	e791      	b.n	800fce6 <ip4_input+0x86>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800fdc2:	6873      	ldr	r3, [r6, #4]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	bf14      	ite	ne
 800fdc8:	46b0      	movne	r8, r6
 800fdca:	f04f 0800 	moveq.w	r8, #0
 800fdce:	e777      	b.n	800fcc0 <ip4_input+0x60>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800fdd0:	6873      	ldr	r3, [r6, #4]
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d0c9      	beq.n	800fd6a <ip4_input+0x10a>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800fdd6:	429a      	cmp	r2, r3
 800fdd8:	d019      	beq.n	800fe0e <ip4_input+0x1ae>
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800fdda:	4610      	mov	r0, r2
 800fddc:	4631      	mov	r1, r6
 800fdde:	f000 f8b7 	bl	800ff50 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800fde2:	b9b0      	cbnz	r0, 800fe12 <ip4_input+0x1b2>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800fde4:	f8d9 2014 	ldr.w	r2, [r9, #20]
 800fde8:	e7bf      	b.n	800fd6a <ip4_input+0x10a>
        icmp_input(p, inp);
 800fdea:	4631      	mov	r1, r6
 800fdec:	4620      	mov	r0, r4
 800fdee:	f7ff fe53 	bl	800fa98 <icmp_input>
        break;
 800fdf2:	e7a4      	b.n	800fd3e <ip4_input+0xde>
        udp_input(p, inp);
 800fdf4:	4631      	mov	r1, r6
 800fdf6:	4620      	mov	r0, r4
 800fdf8:	f7fe fea2 	bl	800eb40 <udp_input>
        break;
 800fdfc:	e79f      	b.n	800fd3e <ip4_input+0xde>
        tcp_input(p, inp);
 800fdfe:	4631      	mov	r1, r6
 800fe00:	4620      	mov	r0, r4
 800fe02:	f7fc fdad 	bl	800c960 <tcp_input>
        break;
 800fe06:	e79a      	b.n	800fd3e <ip4_input+0xde>
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800fe08:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800fe0c:	e756      	b.n	800fcbc <ip4_input+0x5c>
 800fe0e:	46b0      	mov	r8, r6
 800fe10:	e756      	b.n	800fcc0 <ip4_input+0x60>
 800fe12:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800fe16:	46b0      	mov	r8, r6
 800fe18:	e752      	b.n	800fcc0 <ip4_input+0x60>
 800fe1a:	bf00      	nop
 800fe1c:	2400b800 	.word	0x2400b800
 800fe20:	24004d48 	.word	0x24004d48

0800fe24 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800fe24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe28:	4604      	mov	r4, r0
 800fe2a:	b083      	sub	sp, #12
 800fe2c:	4699      	mov	r9, r3
 800fe2e:	460f      	mov	r7, r1
 800fe30:	4616      	mov	r6, r2
 800fe32:	f89d a030 	ldrb.w	sl, [sp, #48]	@ 0x30
 800fe36:	f89d b034 	ldrb.w	fp, [sp, #52]	@ 0x34
 800fe3a:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
 800fe3e:	f7f6 fd7f 	bl	8006940 <sys_check_core_locking>
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800fe42:	7ba3      	ldrb	r3, [r4, #14]
 800fe44:	2b01      	cmp	r3, #1
 800fe46:	d13d      	bne.n	800fec4 <ip4_output_if_src+0xa0>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800fe48:	2e00      	cmp	r6, #0
 800fe4a:	d044      	beq.n	800fed6 <ip4_output_if_src+0xb2>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800fe4c:	2114      	movs	r1, #20
 800fe4e:	4620      	mov	r0, r4
 800fe50:	f7fa f882 	bl	8009f58 <pbuf_add_header>
 800fe54:	2800      	cmp	r0, #0
 800fe56:	d159      	bne.n	800ff0c <ip4_output_if_src+0xe8>
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800fe58:	8963      	ldrh	r3, [r4, #10]
    iphdr = (struct ip_hdr *)p->payload;
 800fe5a:	6865      	ldr	r5, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800fe5c:	2b13      	cmp	r3, #19
 800fe5e:	d942      	bls.n	800fee6 <ip4_output_if_src+0xc2>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800fe60:	f885 9008 	strb.w	r9, [r5, #8]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800fe64:	2245      	movs	r2, #69	@ 0x45
    IPH_PROTO_SET(iphdr, proto);
 800fe66:	f885 b009 	strb.w	fp, [r5, #9]
    ip4_addr_copy(iphdr->dest, *dest);
 800fe6a:	6833      	ldr	r3, [r6, #0]
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800fe6c:	702a      	strb	r2, [r5, #0]
    IPH_TOS_SET(iphdr, tos);
 800fe6e:	f885 a001 	strb.w	sl, [r5, #1]
    ip4_addr_copy(iphdr->dest, *dest);
 800fe72:	612b      	str	r3, [r5, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800fe74:	8920      	ldrh	r0, [r4, #8]
 800fe76:	f7f9 fa2d 	bl	80092d4 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800fe7a:	f8df 90ac 	ldr.w	r9, [pc, #172]	@ 800ff28 <ip4_output_if_src+0x104>
    IPH_OFFSET_SET(iphdr, 0);
 800fe7e:	2300      	movs	r3, #0
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800fe80:	8068      	strh	r0, [r5, #2]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800fe82:	f8b9 0000 	ldrh.w	r0, [r9]
    IPH_OFFSET_SET(iphdr, 0);
 800fe86:	71ab      	strb	r3, [r5, #6]
 800fe88:	71eb      	strb	r3, [r5, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800fe8a:	f7f9 fa23 	bl	80092d4 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800fe8e:	f8b9 3000 	ldrh.w	r3, [r9]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800fe92:	80a8      	strh	r0, [r5, #4]
    ++ip_id;
 800fe94:	3301      	adds	r3, #1
 800fe96:	f8a9 3000 	strh.w	r3, [r9]

    if (src == NULL) {
 800fe9a:	b367      	cbz	r7, 800fef6 <ip4_output_if_src+0xd2>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800fe9c:	683b      	ldr	r3, [r7, #0]
 800fe9e:	60eb      	str	r3, [r5, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800fea0:	2300      	movs	r3, #0
 800fea2:	72ab      	strb	r3, [r5, #10]
 800fea4:	72eb      	strb	r3, [r5, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800fea6:	f8b8 3024 	ldrh.w	r3, [r8, #36]	@ 0x24
 800feaa:	b113      	cbz	r3, 800feb2 <ip4_output_if_src+0x8e>
 800feac:	8922      	ldrh	r2, [r4, #8]
 800feae:	429a      	cmp	r2, r3
 800feb0:	d824      	bhi.n	800fefc <ip4_output_if_src+0xd8>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800feb2:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800feb6:	4632      	mov	r2, r6
 800feb8:	4621      	mov	r1, r4
 800feba:	4640      	mov	r0, r8
 800febc:	4798      	blx	r3
}
 800febe:	b003      	add	sp, #12
 800fec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800fec4:	4b13      	ldr	r3, [pc, #76]	@ (800ff14 <ip4_output_if_src+0xf0>)
 800fec6:	f44f 7255 	mov.w	r2, #852	@ 0x354
 800feca:	4913      	ldr	r1, [pc, #76]	@ (800ff18 <ip4_output_if_src+0xf4>)
 800fecc:	4813      	ldr	r0, [pc, #76]	@ (800ff1c <ip4_output_if_src+0xf8>)
 800fece:	f000 fec5 	bl	8010c5c <iprintf>
  if (dest != LWIP_IP_HDRINCL) {
 800fed2:	2e00      	cmp	r6, #0
 800fed4:	d1ba      	bne.n	800fe4c <ip4_output_if_src+0x28>
    if (p->len < IP_HLEN) {
 800fed6:	8963      	ldrh	r3, [r4, #10]
 800fed8:	2b13      	cmp	r3, #19
 800feda:	d917      	bls.n	800ff0c <ip4_output_if_src+0xe8>
    ip4_addr_copy(dest_addr, iphdr->dest);
 800fedc:	6863      	ldr	r3, [r4, #4]
    dest = &dest_addr;
 800fede:	ae01      	add	r6, sp, #4
    ip4_addr_copy(dest_addr, iphdr->dest);
 800fee0:	691b      	ldr	r3, [r3, #16]
 800fee2:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 800fee4:	e7df      	b.n	800fea6 <ip4_output_if_src+0x82>
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800fee6:	4b0b      	ldr	r3, [pc, #44]	@ (800ff14 <ip4_output_if_src+0xf0>)
 800fee8:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800feec:	490c      	ldr	r1, [pc, #48]	@ (800ff20 <ip4_output_if_src+0xfc>)
 800feee:	480b      	ldr	r0, [pc, #44]	@ (800ff1c <ip4_output_if_src+0xf8>)
 800fef0:	f000 feb4 	bl	8010c5c <iprintf>
 800fef4:	e7b4      	b.n	800fe60 <ip4_output_if_src+0x3c>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800fef6:	4b0b      	ldr	r3, [pc, #44]	@ (800ff24 <ip4_output_if_src+0x100>)
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	e7d0      	b.n	800fe9e <ip4_output_if_src+0x7a>
    return ip4_frag(p, netif, dest);
 800fefc:	4632      	mov	r2, r6
 800fefe:	4641      	mov	r1, r8
 800ff00:	4620      	mov	r0, r4
 800ff02:	f000 fb8d 	bl	8010620 <ip4_frag>
}
 800ff06:	b003      	add	sp, #12
 800ff08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return ERR_BUF;
 800ff0c:	f06f 0001 	mvn.w	r0, #1
 800ff10:	e7d5      	b.n	800febe <ip4_output_if_src+0x9a>
 800ff12:	bf00      	nop
 800ff14:	08014828 	.word	0x08014828
 800ff18:	0801485c 	.word	0x0801485c
 800ff1c:	08011f14 	.word	0x08011f14
 800ff20:	08014868 	.word	0x08014868
 800ff24:	08014898 	.word	0x08014898
 800ff28:	2400b958 	.word	0x2400b958

0800ff2c <ip4_output_if>:
{
 800ff2c:	b4f0      	push	{r4, r5, r6, r7}
 800ff2e:	9c06      	ldr	r4, [sp, #24]
 800ff30:	f89d 5010 	ldrb.w	r5, [sp, #16]
 800ff34:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800ff38:	b11a      	cbz	r2, 800ff42 <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 800ff3a:	b109      	cbz	r1, 800ff40 <ip4_output_if+0x14>
 800ff3c:	680f      	ldr	r7, [r1, #0]
 800ff3e:	b907      	cbnz	r7, 800ff42 <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 800ff40:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800ff42:	9504      	str	r5, [sp, #16]
 800ff44:	e9cd 6405 	strd	r6, r4, [sp, #20]
}
 800ff48:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800ff4a:	f7ff bf6b 	b.w	800fe24 <ip4_output_if_src>
 800ff4e:	bf00      	nop

0800ff50 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800ff50:	1e42      	subs	r2, r0, #1
{
 800ff52:	4603      	mov	r3, r0
  if ((~addr == IPADDR_ANY) ||
 800ff54:	3203      	adds	r2, #3
 800ff56:	d815      	bhi.n	800ff84 <ip4_addr_isbroadcast_u32+0x34>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800ff58:	f891 002d 	ldrb.w	r0, [r1, #45]	@ 0x2d
 800ff5c:	f010 0002 	ands.w	r0, r0, #2
 800ff60:	d00f      	beq.n	800ff82 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800ff62:	684a      	ldr	r2, [r1, #4]
 800ff64:	429a      	cmp	r2, r3
 800ff66:	d00b      	beq.n	800ff80 <ip4_addr_isbroadcast_u32+0x30>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800ff68:	6889      	ldr	r1, [r1, #8]
 800ff6a:	405a      	eors	r2, r3
 800ff6c:	420a      	tst	r2, r1
 800ff6e:	d107      	bne.n	800ff80 <ip4_addr_isbroadcast_u32+0x30>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800ff70:	43c8      	mvns	r0, r1
 800ff72:	ea23 0301 	bic.w	r3, r3, r1
 800ff76:	1a18      	subs	r0, r3, r0
 800ff78:	fab0 f080 	clz	r0, r0
 800ff7c:	0940      	lsrs	r0, r0, #5
 800ff7e:	4770      	bx	lr
    return 0;
 800ff80:	2000      	movs	r0, #0
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
  }
}
 800ff82:	4770      	bx	lr
    return 1;
 800ff84:	2001      	movs	r0, #1
 800ff86:	4770      	bx	lr

0800ff88 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800ff88:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800ff8a:	4604      	mov	r4, r0
 800ff8c:	b148      	cbz	r0, 800ffa2 <ipfrag_free_pbuf_custom+0x1a>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 800ff8e:	6960      	ldr	r0, [r4, #20]
 800ff90:	b108      	cbz	r0, 800ff96 <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 800ff92:	f7fa f873 	bl	800a07c <pbuf_free>
  memp_free(MEMP_FRAG_PBUF, p);
 800ff96:	4621      	mov	r1, r4
 800ff98:	2005      	movs	r0, #5
  }
  ip_frag_free_pbuf_custom_ref(pcr);
}
 800ff9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 800ff9e:	f7f9 bd61 	b.w	8009a64 <memp_free>
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800ffa2:	4b04      	ldr	r3, [pc, #16]	@ (800ffb4 <ipfrag_free_pbuf_custom+0x2c>)
 800ffa4:	f240 22ce 	movw	r2, #718	@ 0x2ce
 800ffa8:	4903      	ldr	r1, [pc, #12]	@ (800ffb8 <ipfrag_free_pbuf_custom+0x30>)
 800ffaa:	4804      	ldr	r0, [pc, #16]	@ (800ffbc <ipfrag_free_pbuf_custom+0x34>)
 800ffac:	f000 fe56 	bl	8010c5c <iprintf>
 800ffb0:	e7ed      	b.n	800ff8e <ipfrag_free_pbuf_custom+0x6>
 800ffb2:	bf00      	nop
 800ffb4:	0801489c 	.word	0x0801489c
 800ffb8:	080148d8 	.word	0x080148d8
 800ffbc:	08011f14 	.word	0x08011f14

0800ffc0 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800ffc0:	4281      	cmp	r1, r0
{
 800ffc2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffc6:	4606      	mov	r6, r0
 800ffc8:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800ffca:	d076      	beq.n	80100ba <ip_reass_free_complete_datagram+0xfa>
  if (prev != NULL) {
 800ffcc:	b147      	cbz	r7, 800ffe0 <ip_reass_free_complete_datagram+0x20>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800ffce:	683b      	ldr	r3, [r7, #0]
 800ffd0:	42b3      	cmp	r3, r6
 800ffd2:	d005      	beq.n	800ffe0 <ip_reass_free_complete_datagram+0x20>
 800ffd4:	4b40      	ldr	r3, [pc, #256]	@ (80100d8 <ip_reass_free_complete_datagram+0x118>)
 800ffd6:	22ad      	movs	r2, #173	@ 0xad
 800ffd8:	4940      	ldr	r1, [pc, #256]	@ (80100dc <ip_reass_free_complete_datagram+0x11c>)
 800ffda:	4841      	ldr	r0, [pc, #260]	@ (80100e0 <ip_reass_free_complete_datagram+0x120>)
 800ffdc:	f000 fe3e 	bl	8010c5c <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800ffe0:	6874      	ldr	r4, [r6, #4]
 800ffe2:	6863      	ldr	r3, [r4, #4]
  if (iprh->start == 0) {
 800ffe4:	889a      	ldrh	r2, [r3, #4]
 800ffe6:	2a00      	cmp	r2, #0
 800ffe8:	d046      	beq.n	8010078 <ip_reass_free_complete_datagram+0xb8>
  u16_t pbufs_freed = 0;
 800ffea:	f04f 0b00 	mov.w	fp, #0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800ffee:	f8df a0e8 	ldr.w	sl, [pc, #232]	@ 80100d8 <ip_reass_free_complete_datagram+0x118>
 800fff2:	f8df 9104 	ldr.w	r9, [pc, #260]	@ 80100f8 <ip_reass_free_complete_datagram+0x138>
 800fff6:	f8df 80e8 	ldr.w	r8, [pc, #232]	@ 80100e0 <ip_reass_free_complete_datagram+0x120>
 800fffa:	e003      	b.n	8010004 <ip_reass_free_complete_datagram+0x44>
    pbuf_free(pcur);
 800fffc:	4628      	mov	r0, r5
 800fffe:	f7fa f83d 	bl	800a07c <pbuf_free>
  while (p != NULL) {
 8010002:	b1b4      	cbz	r4, 8010032 <ip_reass_free_complete_datagram+0x72>
    iprh = (struct ip_reass_helper *)p->payload;
 8010004:	6863      	ldr	r3, [r4, #4]
    clen = pbuf_clen(pcur);
 8010006:	4620      	mov	r0, r4
 8010008:	4625      	mov	r5, r4
    p = iprh->next_pbuf;
 801000a:	681c      	ldr	r4, [r3, #0]
    clen = pbuf_clen(pcur);
 801000c:	f7fa f9a4 	bl	800a358 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8010010:	4458      	add	r0, fp
 8010012:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8010016:	fa1f fb80 	uxth.w	fp, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801001a:	dbef      	blt.n	800fffc <ip_reass_free_complete_datagram+0x3c>
 801001c:	4653      	mov	r3, sl
 801001e:	22cc      	movs	r2, #204	@ 0xcc
 8010020:	4649      	mov	r1, r9
 8010022:	4640      	mov	r0, r8
 8010024:	f000 fe1a 	bl	8010c5c <iprintf>
    pbuf_free(pcur);
 8010028:	4628      	mov	r0, r5
 801002a:	f7fa f827 	bl	800a07c <pbuf_free>
  while (p != NULL) {
 801002e:	2c00      	cmp	r4, #0
 8010030:	d1e8      	bne.n	8010004 <ip_reass_free_complete_datagram+0x44>
  if (reassdatagrams == ipr) {
 8010032:	4b2c      	ldr	r3, [pc, #176]	@ (80100e4 <ip_reass_free_complete_datagram+0x124>)
 8010034:	681a      	ldr	r2, [r3, #0]
 8010036:	4296      	cmp	r6, r2
 8010038:	d03c      	beq.n	80100b4 <ip_reass_free_complete_datagram+0xf4>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801003a:	2f00      	cmp	r7, #0
 801003c:	d044      	beq.n	80100c8 <ip_reass_free_complete_datagram+0x108>
    prev->next = ipr->next;
 801003e:	6833      	ldr	r3, [r6, #0]
 8010040:	603b      	str	r3, [r7, #0]
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8010042:	4c29      	ldr	r4, [pc, #164]	@ (80100e8 <ip_reass_free_complete_datagram+0x128>)
  memp_free(MEMP_REASSDATA, ipr);
 8010044:	4631      	mov	r1, r6
 8010046:	2004      	movs	r0, #4
 8010048:	f7f9 fd0c 	bl	8009a64 <memp_free>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801004c:	8823      	ldrh	r3, [r4, #0]
 801004e:	455b      	cmp	r3, fp
 8010050:	d305      	bcc.n	801005e <ip_reass_free_complete_datagram+0x9e>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8010052:	eba3 030b 	sub.w	r3, r3, fp
}
 8010056:	4658      	mov	r0, fp
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8010058:	8023      	strh	r3, [r4, #0]
}
 801005a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801005e:	4b1e      	ldr	r3, [pc, #120]	@ (80100d8 <ip_reass_free_complete_datagram+0x118>)
 8010060:	22d2      	movs	r2, #210	@ 0xd2
 8010062:	4922      	ldr	r1, [pc, #136]	@ (80100ec <ip_reass_free_complete_datagram+0x12c>)
 8010064:	481e      	ldr	r0, [pc, #120]	@ (80100e0 <ip_reass_free_complete_datagram+0x120>)
 8010066:	f000 fdf9 	bl	8010c5c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801006a:	8823      	ldrh	r3, [r4, #0]
}
 801006c:	4658      	mov	r0, fp
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801006e:	eba3 030b 	sub.w	r3, r3, fp
 8010072:	8023      	strh	r3, [r4, #0]
}
 8010074:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ipr->p = iprh->next_pbuf;
 8010078:	681a      	ldr	r2, [r3, #0]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801007a:	6930      	ldr	r0, [r6, #16]
 801007c:	6971      	ldr	r1, [r6, #20]
    ipr->p = iprh->next_pbuf;
 801007e:	6072      	str	r2, [r6, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8010080:	68f5      	ldr	r5, [r6, #12]
 8010082:	68b2      	ldr	r2, [r6, #8]
 8010084:	6098      	str	r0, [r3, #8]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8010086:	4620      	mov	r0, r4
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8010088:	60d9      	str	r1, [r3, #12]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801008a:	2101      	movs	r1, #1
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801008c:	601a      	str	r2, [r3, #0]
 801008e:	605d      	str	r5, [r3, #4]
 8010090:	69b2      	ldr	r2, [r6, #24]
 8010092:	611a      	str	r2, [r3, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8010094:	f7ff fdac 	bl	800fbf0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8010098:	4620      	mov	r0, r4
 801009a:	f7fa f95d 	bl	800a358 <pbuf_clen>
 801009e:	4683      	mov	fp, r0
    pbuf_free(p);
 80100a0:	4620      	mov	r0, r4
 80100a2:	f7f9 ffeb 	bl	800a07c <pbuf_free>
  p = ipr->p;
 80100a6:	6874      	ldr	r4, [r6, #4]
  while (p != NULL) {
 80100a8:	2c00      	cmp	r4, #0
 80100aa:	d1a0      	bne.n	800ffee <ip_reass_free_complete_datagram+0x2e>
  if (reassdatagrams == ipr) {
 80100ac:	4b0d      	ldr	r3, [pc, #52]	@ (80100e4 <ip_reass_free_complete_datagram+0x124>)
 80100ae:	681a      	ldr	r2, [r3, #0]
 80100b0:	4296      	cmp	r6, r2
 80100b2:	d1c2      	bne.n	801003a <ip_reass_free_complete_datagram+0x7a>
    reassdatagrams = ipr->next;
 80100b4:	6832      	ldr	r2, [r6, #0]
 80100b6:	601a      	str	r2, [r3, #0]
 80100b8:	e7c3      	b.n	8010042 <ip_reass_free_complete_datagram+0x82>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 80100ba:	4b07      	ldr	r3, [pc, #28]	@ (80100d8 <ip_reass_free_complete_datagram+0x118>)
 80100bc:	22ab      	movs	r2, #171	@ 0xab
 80100be:	490c      	ldr	r1, [pc, #48]	@ (80100f0 <ip_reass_free_complete_datagram+0x130>)
 80100c0:	4807      	ldr	r0, [pc, #28]	@ (80100e0 <ip_reass_free_complete_datagram+0x120>)
 80100c2:	f000 fdcb 	bl	8010c5c <iprintf>
 80100c6:	e781      	b.n	800ffcc <ip_reass_free_complete_datagram+0xc>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80100c8:	4b03      	ldr	r3, [pc, #12]	@ (80100d8 <ip_reass_free_complete_datagram+0x118>)
 80100ca:	f240 1245 	movw	r2, #325	@ 0x145
 80100ce:	4909      	ldr	r1, [pc, #36]	@ (80100f4 <ip_reass_free_complete_datagram+0x134>)
 80100d0:	4803      	ldr	r0, [pc, #12]	@ (80100e0 <ip_reass_free_complete_datagram+0x120>)
 80100d2:	f000 fdc3 	bl	8010c5c <iprintf>
 80100d6:	e7b2      	b.n	801003e <ip_reass_free_complete_datagram+0x7e>
 80100d8:	0801489c 	.word	0x0801489c
 80100dc:	080148f0 	.word	0x080148f0
 80100e0:	08011f14 	.word	0x08011f14
 80100e4:	2400b95c 	.word	0x2400b95c
 80100e8:	2400b95a 	.word	0x2400b95a
 80100ec:	08014940 	.word	0x08014940
 80100f0:	080148e4 	.word	0x080148e4
 80100f4:	08014924 	.word	0x08014924
 80100f8:	08014904 	.word	0x08014904

080100fc <ip_reass_remove_oldest_datagram>:
{
 80100fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int pbufs_freed = 0, pbufs_freed_current;
 8010100:	2700      	movs	r7, #0
 8010102:	f8df 8070 	ldr.w	r8, [pc, #112]	@ 8010174 <ip_reass_remove_oldest_datagram+0x78>
{
 8010106:	4605      	mov	r5, r0
 8010108:	460e      	mov	r6, r1
    r = reassdatagrams;
 801010a:	f8d8 3000 	ldr.w	r3, [r8]
    while (r != NULL) {
 801010e:	b1f3      	cbz	r3, 801014e <ip_reass_remove_oldest_datagram+0x52>
    other_datagrams = 0;
 8010110:	2400      	movs	r4, #0
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8010112:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    oldest_prev = NULL;
 8010116:	4621      	mov	r1, r4
    prev = NULL;
 8010118:	46a4      	mov	ip, r4
    oldest = NULL;
 801011a:	4620      	mov	r0, r4
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801011c:	695a      	ldr	r2, [r3, #20]
 801011e:	4572      	cmp	r2, lr
 8010120:	d018      	beq.n	8010154 <ip_reass_remove_oldest_datagram+0x58>
        other_datagrams++;
 8010122:	3401      	adds	r4, #1
        if (oldest == NULL) {
 8010124:	b318      	cbz	r0, 801016e <ip_reass_remove_oldest_datagram+0x72>
        } else if (r->timer <= oldest->timer) {
 8010126:	7fc2      	ldrb	r2, [r0, #31]
 8010128:	f893 901f 	ldrb.w	r9, [r3, #31]
 801012c:	4591      	cmp	r9, r2
 801012e:	bf9c      	itt	ls
 8010130:	4661      	movls	r1, ip
 8010132:	4618      	movls	r0, r3
      if (r->next != NULL) {
 8010134:	681a      	ldr	r2, [r3, #0]
 8010136:	469c      	mov	ip, r3
 8010138:	4613      	mov	r3, r2
 801013a:	2a00      	cmp	r2, #0
 801013c:	d1ee      	bne.n	801011c <ip_reass_remove_oldest_datagram+0x20>
    if (oldest != NULL) {
 801013e:	b110      	cbz	r0, 8010146 <ip_reass_remove_oldest_datagram+0x4a>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8010140:	f7ff ff3e 	bl	800ffc0 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 8010144:	4407      	add	r7, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8010146:	42b7      	cmp	r7, r6
 8010148:	da01      	bge.n	801014e <ip_reass_remove_oldest_datagram+0x52>
 801014a:	2c01      	cmp	r4, #1
 801014c:	dcdd      	bgt.n	801010a <ip_reass_remove_oldest_datagram+0xe>
}
 801014e:	4638      	mov	r0, r7
 8010150:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8010154:	699a      	ldr	r2, [r3, #24]
 8010156:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801015a:	454a      	cmp	r2, r9
 801015c:	d1e1      	bne.n	8010122 <ip_reass_remove_oldest_datagram+0x26>
 801015e:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 8010162:	88aa      	ldrh	r2, [r5, #4]
 8010164:	4591      	cmp	r9, r2
 8010166:	d0e5      	beq.n	8010134 <ip_reass_remove_oldest_datagram+0x38>
        other_datagrams++;
 8010168:	3401      	adds	r4, #1
        if (oldest == NULL) {
 801016a:	2800      	cmp	r0, #0
 801016c:	d1db      	bne.n	8010126 <ip_reass_remove_oldest_datagram+0x2a>
 801016e:	4661      	mov	r1, ip
 8010170:	4618      	mov	r0, r3
 8010172:	e7df      	b.n	8010134 <ip_reass_remove_oldest_datagram+0x38>
 8010174:	2400b95c 	.word	0x2400b95c

08010178 <ip_reass_tmr>:
{
 8010178:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 801017a:	4b0a      	ldr	r3, [pc, #40]	@ (80101a4 <ip_reass_tmr+0x2c>)
 801017c:	681c      	ldr	r4, [r3, #0]
  while (r != NULL) {
 801017e:	b14c      	cbz	r4, 8010194 <ip_reass_tmr+0x1c>
  struct ip_reassdata *r, *prev = NULL;
 8010180:	2500      	movs	r5, #0
    if (r->timer > 0) {
 8010182:	7fe3      	ldrb	r3, [r4, #31]
 8010184:	4620      	mov	r0, r4
      r = r->next;
 8010186:	6824      	ldr	r4, [r4, #0]
      r->timer--;
 8010188:	1e5a      	subs	r2, r3, #1
    if (r->timer > 0) {
 801018a:	b123      	cbz	r3, 8010196 <ip_reass_tmr+0x1e>
 801018c:	4605      	mov	r5, r0
      r->timer--;
 801018e:	77c2      	strb	r2, [r0, #31]
  while (r != NULL) {
 8010190:	2c00      	cmp	r4, #0
 8010192:	d1f6      	bne.n	8010182 <ip_reass_tmr+0xa>
}
 8010194:	bd38      	pop	{r3, r4, r5, pc}
      ip_reass_free_complete_datagram(tmp, prev);
 8010196:	4629      	mov	r1, r5
 8010198:	f7ff ff12 	bl	800ffc0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801019c:	2c00      	cmp	r4, #0
 801019e:	d1f0      	bne.n	8010182 <ip_reass_tmr+0xa>
 80101a0:	e7f8      	b.n	8010194 <ip_reass_tmr+0x1c>
 80101a2:	bf00      	nop
 80101a4:	2400b95c 	.word	0x2400b95c

080101a8 <ip4_reass>:
{
 80101a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr *)p->payload;
 80101ac:	f8d0 9004 	ldr.w	r9, [r0, #4]
{
 80101b0:	b085      	sub	sp, #20
 80101b2:	4605      	mov	r5, r0
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80101b4:	f899 3000 	ldrb.w	r3, [r9]
 80101b8:	f003 030f 	and.w	r3, r3, #15
 80101bc:	2b05      	cmp	r3, #5
 80101be:	f040 8089 	bne.w	80102d4 <ip4_reass+0x12c>
  offset = IPH_OFFSET_BYTES(fraghdr);
 80101c2:	f8b9 0006 	ldrh.w	r0, [r9, #6]
 80101c6:	f7f9 f885 	bl	80092d4 <lwip_htons>
 80101ca:	4606      	mov	r6, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80101cc:	f8b9 0002 	ldrh.w	r0, [r9, #2]
 80101d0:	f7f9 f880 	bl	80092d4 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 80101d4:	f899 3000 	ldrb.w	r3, [r9]
 80101d8:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 80101dc:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 80101e0:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80101e4:	d376      	bcc.n	80102d4 <ip4_reass+0x12c>
  len = (u16_t)(len - hlen);
 80101e6:	1a83      	subs	r3, r0, r2
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80101e8:	f8df 8310 	ldr.w	r8, [pc, #784]	@ 80104fc <ip4_reass+0x354>
  clen = pbuf_clen(p);
 80101ec:	4628      	mov	r0, r5
  len = (u16_t)(len - hlen);
 80101ee:	b29b      	uxth	r3, r3
 80101f0:	9301      	str	r3, [sp, #4]
  clen = pbuf_clen(p);
 80101f2:	f7fa f8b1 	bl	800a358 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80101f6:	f8b8 3000 	ldrh.w	r3, [r8]
  clen = pbuf_clen(p);
 80101fa:	4607      	mov	r7, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80101fc:	4403      	add	r3, r0
 80101fe:	2b0a      	cmp	r3, #10
 8010200:	f300 80e7 	bgt.w	80103d2 <ip4_reass+0x22a>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8010204:	f8df a2f8 	ldr.w	sl, [pc, #760]	@ 8010500 <ip4_reass+0x358>
 8010208:	f8da 4000 	ldr.w	r4, [sl]
 801020c:	2c00      	cmp	r4, #0
 801020e:	f000 80ee 	beq.w	80103ee <ip4_reass+0x246>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8010212:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8010216:	e003      	b.n	8010220 <ip4_reass+0x78>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8010218:	6824      	ldr	r4, [r4, #0]
 801021a:	2c00      	cmp	r4, #0
 801021c:	f000 80e7 	beq.w	80103ee <ip4_reass+0x246>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8010220:	6963      	ldr	r3, [r4, #20]
 8010222:	4293      	cmp	r3, r2
 8010224:	d1f8      	bne.n	8010218 <ip4_reass+0x70>
 8010226:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801022a:	69a1      	ldr	r1, [r4, #24]
 801022c:	4299      	cmp	r1, r3
 801022e:	d1f3      	bne.n	8010218 <ip4_reass+0x70>
 8010230:	89a1      	ldrh	r1, [r4, #12]
 8010232:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 8010236:	4299      	cmp	r1, r3
 8010238:	d1ee      	bne.n	8010218 <ip4_reass+0x70>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801023a:	f8b9 0006 	ldrh.w	r0, [r9, #6]
 801023e:	f7f9 f849 	bl	80092d4 <lwip_htons>
 8010242:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8010246:	2800      	cmp	r0, #0
 8010248:	f000 80ab 	beq.w	80103a2 <ip4_reass+0x1fa>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801024c:	f8b9 3006 	ldrh.w	r3, [r9, #6]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8010250:	f3c6 060c 	ubfx	r6, r6, #0, #13
  if (is_last) {
 8010254:	f013 0320 	ands.w	r3, r3, #32
  offset = IPH_OFFSET_BYTES(fraghdr);
 8010258:	ea4f 06c6 	mov.w	r6, r6, lsl #3
  if (is_last) {
 801025c:	9302      	str	r3, [sp, #8]
 801025e:	d108      	bne.n	8010272 <ip4_reass+0xca>
    u16_t datagram_len = (u16_t)(offset + len);
 8010260:	9b01      	ldr	r3, [sp, #4]
 8010262:	18f3      	adds	r3, r6, r3
 8010264:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8010266:	429e      	cmp	r6, r3
 8010268:	d812      	bhi.n	8010290 <ip4_reass+0xe8>
 801026a:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801026e:	4293      	cmp	r3, r2
 8010270:	d80e      	bhi.n	8010290 <ip4_reass+0xe8>
  fraghdr = (struct ip_hdr *)new_p->payload;
 8010272:	f8d5 9004 	ldr.w	r9, [r5, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010276:	f8b9 0002 	ldrh.w	r0, [r9, #2]
 801027a:	f7f9 f82b 	bl	80092d4 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 801027e:	f899 3000 	ldrb.w	r3, [r9]
 8010282:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 8010286:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 801028a:	ea4f 0283 	mov.w	r2, r3, lsl #2
 801028e:	d229      	bcs.n	80102e4 <ip4_reass+0x13c>
  if (ipr->p == NULL) {
 8010290:	6866      	ldr	r6, [r4, #4]
 8010292:	b9fe      	cbnz	r6, 80102d4 <ip4_reass+0x12c>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8010294:	f8da 3000 	ldr.w	r3, [sl]
 8010298:	42a3      	cmp	r3, r4
 801029a:	d014      	beq.n	80102c6 <ip4_reass+0x11e>
 801029c:	4b93      	ldr	r3, [pc, #588]	@ (80104ec <ip4_reass+0x344>)
 801029e:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80102a2:	4993      	ldr	r1, [pc, #588]	@ (80104f0 <ip4_reass+0x348>)
 80102a4:	4893      	ldr	r0, [pc, #588]	@ (80104f4 <ip4_reass+0x34c>)
 80102a6:	f000 fcd9 	bl	8010c5c <iprintf>
  if (reassdatagrams == ipr) {
 80102aa:	f8da 3000 	ldr.w	r3, [sl]
 80102ae:	429c      	cmp	r4, r3
 80102b0:	d009      	beq.n	80102c6 <ip4_reass+0x11e>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80102b2:	4b8e      	ldr	r3, [pc, #568]	@ (80104ec <ip4_reass+0x344>)
 80102b4:	f240 1245 	movw	r2, #325	@ 0x145
 80102b8:	498f      	ldr	r1, [pc, #572]	@ (80104f8 <ip4_reass+0x350>)
 80102ba:	488e      	ldr	r0, [pc, #568]	@ (80104f4 <ip4_reass+0x34c>)
 80102bc:	f000 fcce 	bl	8010c5c <iprintf>
    prev->next = ipr->next;
 80102c0:	6823      	ldr	r3, [r4, #0]
 80102c2:	6033      	str	r3, [r6, #0]
 80102c4:	deff      	udf	#255	@ 0xff
    reassdatagrams = ipr->next;
 80102c6:	6823      	ldr	r3, [r4, #0]
  memp_free(MEMP_REASSDATA, ipr);
 80102c8:	4621      	mov	r1, r4
 80102ca:	2004      	movs	r0, #4
    reassdatagrams = ipr->next;
 80102cc:	f8ca 3000 	str.w	r3, [sl]
  memp_free(MEMP_REASSDATA, ipr);
 80102d0:	f7f9 fbc8 	bl	8009a64 <memp_free>
  pbuf_free(p);
 80102d4:	4628      	mov	r0, r5
 80102d6:	f7f9 fed1 	bl	800a07c <pbuf_free>
  return NULL;
 80102da:	2600      	movs	r6, #0
}
 80102dc:	4630      	mov	r0, r6
 80102de:	b005      	add	sp, #20
 80102e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  len = (u16_t)(len - hlen);
 80102e4:	1a83      	subs	r3, r0, r2
  offset = IPH_OFFSET_BYTES(fraghdr);
 80102e6:	f8b9 0006 	ldrh.w	r0, [r9, #6]
  len = (u16_t)(len - hlen);
 80102ea:	fa1f f983 	uxth.w	r9, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 80102ee:	f7f8 fff1 	bl	80092d4 <lwip_htons>
 80102f2:	f3c0 020c 	ubfx	r2, r0, #0, #13
 80102f6:	00d2      	lsls	r2, r2, #3
  iprh->end = (u16_t)(offset + len);
 80102f8:	eb09 0302 	add.w	r3, r9, r2
  iprh = (struct ip_reass_helper *)new_p->payload;
 80102fc:	f8d5 9004 	ldr.w	r9, [r5, #4]
  iprh->end = (u16_t)(offset + len);
 8010300:	f8a9 3006 	strh.w	r3, [r9, #6]
 8010304:	b29b      	uxth	r3, r3
  iprh->start = offset;
 8010306:	f8a9 2004 	strh.w	r2, [r9, #4]
  iprh->end = (u16_t)(offset + len);
 801030a:	4619      	mov	r1, r3
 801030c:	9303      	str	r3, [sp, #12]
  iprh->next_pbuf = NULL;
 801030e:	2300      	movs	r3, #0
  if (iprh->end < offset) {
 8010310:	428a      	cmp	r2, r1
  iprh->next_pbuf = NULL;
 8010312:	f889 3000 	strb.w	r3, [r9]
 8010316:	f889 3001 	strb.w	r3, [r9, #1]
 801031a:	f889 3002 	strb.w	r3, [r9, #2]
 801031e:	f889 3003 	strb.w	r3, [r9, #3]
  if (iprh->end < offset) {
 8010322:	d8b5      	bhi.n	8010290 <ip4_reass+0xe8>
  for (q = ipr->p; q != NULL;) {
 8010324:	6861      	ldr	r1, [r4, #4]
 8010326:	2900      	cmp	r1, #0
 8010328:	f000 80d4 	beq.w	80104d4 <ip4_reass+0x32c>
  int valid = 1;
 801032c:	f04f 0b01 	mov.w	fp, #1
 8010330:	4694      	mov	ip, r2
 8010332:	e00e      	b.n	8010352 <ip4_reass+0x1aa>
    } else if (iprh->start == iprh_tmp->start) {
 8010334:	d0ce      	beq.n	80102d4 <ip4_reass+0x12c>
    } else if (iprh->start < iprh_tmp->end) {
 8010336:	f8b3 e006 	ldrh.w	lr, [r3, #6]
 801033a:	45f4      	cmp	ip, lr
 801033c:	d3ca      	bcc.n	80102d4 <ip4_reass+0x12c>
      if (iprh_prev != NULL) {
 801033e:	b122      	cbz	r2, 801034a <ip4_reass+0x1a2>
        if (iprh_prev->end != iprh_tmp->start) {
 8010340:	88d2      	ldrh	r2, [r2, #6]
          valid = 0;
 8010342:	4282      	cmp	r2, r0
 8010344:	bf18      	it	ne
 8010346:	f04f 0b00 	movne.w	fp, #0
    q = iprh_tmp->next_pbuf;
 801034a:	6819      	ldr	r1, [r3, #0]
  for (q = ipr->p; q != NULL;) {
 801034c:	2900      	cmp	r1, #0
 801034e:	f000 80a6 	beq.w	801049e <ip4_reass+0x2f6>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8010352:	461a      	mov	r2, r3
 8010354:	684b      	ldr	r3, [r1, #4]
    if (iprh->start < iprh_tmp->start) {
 8010356:	8898      	ldrh	r0, [r3, #4]
 8010358:	4584      	cmp	ip, r0
 801035a:	d2eb      	bcs.n	8010334 <ip4_reass+0x18c>
      iprh->next_pbuf = q;
 801035c:	4613      	mov	r3, r2
 801035e:	f8c9 1000 	str.w	r1, [r9]
 8010362:	4662      	mov	r2, ip
 8010364:	469c      	mov	ip, r3
      if (iprh_prev != NULL) {
 8010366:	2b00      	cmp	r3, #0
 8010368:	d064      	beq.n	8010434 <ip4_reass+0x28c>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801036a:	88db      	ldrh	r3, [r3, #6]
 801036c:	429a      	cmp	r2, r3
 801036e:	d3b1      	bcc.n	80102d4 <ip4_reass+0x12c>
 8010370:	9903      	ldr	r1, [sp, #12]
 8010372:	4281      	cmp	r1, r0
 8010374:	d8ae      	bhi.n	80102d4 <ip4_reass+0x12c>
        if (iprh_prev->end != iprh->start) {
 8010376:	429a      	cmp	r2, r3
        iprh_prev->next_pbuf = new_p;
 8010378:	f8cc 5000 	str.w	r5, [ip]
        if (iprh_prev->end != iprh->start) {
 801037c:	d05f      	beq.n	801043e <ip4_reass+0x296>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801037e:	f8b8 2000 	ldrh.w	r2, [r8]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8010382:	9902      	ldr	r1, [sp, #8]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8010384:	443a      	add	r2, r7
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8010386:	7fa3      	ldrb	r3, [r4, #30]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8010388:	b292      	uxth	r2, r2
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801038a:	2900      	cmp	r1, #0
 801038c:	f000 80ab 	beq.w	80104e6 <ip4_reass+0x33e>
 8010390:	07d9      	lsls	r1, r3, #31
 8010392:	f100 8122 	bmi.w	80105da <ip4_reass+0x432>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8010396:	f8b8 3000 	ldrh.w	r3, [r8]
 801039a:	443b      	add	r3, r7
 801039c:	f8a8 3000 	strh.w	r3, [r8]
  if (is_last) {
 80103a0:	e79b      	b.n	80102da <ip4_reass+0x132>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80103a2:	89e0      	ldrh	r0, [r4, #14]
 80103a4:	f7f8 ff96 	bl	80092d4 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80103a8:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80103ac:	2800      	cmp	r0, #0
 80103ae:	f43f af4d 	beq.w	801024c <ip4_reass+0xa4>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80103b2:	f8d9 3000 	ldr.w	r3, [r9]
 80103b6:	f8d9 0004 	ldr.w	r0, [r9, #4]
 80103ba:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80103be:	f8d9 200c 	ldr.w	r2, [r9, #12]
 80103c2:	60a3      	str	r3, [r4, #8]
 80103c4:	60e0      	str	r0, [r4, #12]
 80103c6:	6121      	str	r1, [r4, #16]
 80103c8:	6162      	str	r2, [r4, #20]
 80103ca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80103ce:	61a3      	str	r3, [r4, #24]
 80103d0:	e73c      	b.n	801024c <ip4_reass+0xa4>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80103d2:	4601      	mov	r1, r0
 80103d4:	4648      	mov	r0, r9
 80103d6:	f7ff fe91 	bl	80100fc <ip_reass_remove_oldest_datagram>
 80103da:	2800      	cmp	r0, #0
 80103dc:	f43f af7a 	beq.w	80102d4 <ip4_reass+0x12c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80103e0:	f8b8 3000 	ldrh.w	r3, [r8]
 80103e4:	443b      	add	r3, r7
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80103e6:	2b0a      	cmp	r3, #10
 80103e8:	f77f af0c 	ble.w	8010204 <ip4_reass+0x5c>
 80103ec:	e772      	b.n	80102d4 <ip4_reass+0x12c>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80103ee:	2004      	movs	r0, #4
 80103f0:	f7f9 faf2 	bl	80099d8 <memp_malloc>
  if (ipr == NULL) {
 80103f4:	4604      	mov	r4, r0
 80103f6:	b178      	cbz	r0, 8010418 <ip4_reass+0x270>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80103f8:	2300      	movs	r3, #0
 80103fa:	61e3      	str	r3, [r4, #28]
 80103fc:	60a3      	str	r3, [r4, #8]
 80103fe:	60e3      	str	r3, [r4, #12]
 8010400:	6123      	str	r3, [r4, #16]
 8010402:	6163      	str	r3, [r4, #20]
 8010404:	61a3      	str	r3, [r4, #24]
 8010406:	6063      	str	r3, [r4, #4]
  ipr->next = reassdatagrams;
 8010408:	f8da 3000 	ldr.w	r3, [sl]
  reassdatagrams = ipr;
 801040c:	f8ca 4000 	str.w	r4, [sl]
  ipr->next = reassdatagrams;
 8010410:	6023      	str	r3, [r4, #0]
  ipr->timer = IP_REASS_MAXAGE;
 8010412:	230f      	movs	r3, #15
 8010414:	77e3      	strb	r3, [r4, #31]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8010416:	e7cc      	b.n	80103b2 <ip4_reass+0x20a>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8010418:	4639      	mov	r1, r7
 801041a:	4648      	mov	r0, r9
 801041c:	f7ff fe6e 	bl	80100fc <ip_reass_remove_oldest_datagram>
 8010420:	4287      	cmp	r7, r0
 8010422:	f73f af57 	bgt.w	80102d4 <ip4_reass+0x12c>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010426:	2004      	movs	r0, #4
 8010428:	f7f9 fad6 	bl	80099d8 <memp_malloc>
    if (ipr == NULL)
 801042c:	4604      	mov	r4, r0
 801042e:	2800      	cmp	r0, #0
 8010430:	d1e2      	bne.n	80103f8 <ip4_reass+0x250>
 8010432:	e74f      	b.n	80102d4 <ip4_reass+0x12c>
        if (iprh->end > iprh_tmp->start) {
 8010434:	9b03      	ldr	r3, [sp, #12]
 8010436:	4283      	cmp	r3, r0
 8010438:	f63f af4c 	bhi.w	80102d4 <ip4_reass+0x12c>
        ipr->p = new_p;
 801043c:	6065      	str	r5, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801043e:	9b02      	ldr	r3, [sp, #8]
 8010440:	2b00      	cmp	r3, #0
 8010442:	d03b      	beq.n	80104bc <ip4_reass+0x314>
 8010444:	7fa3      	ldrb	r3, [r4, #30]
 8010446:	07db      	lsls	r3, r3, #31
 8010448:	d5a5      	bpl.n	8010396 <ip4_reass+0x1ee>
    if (valid) {
 801044a:	f1bb 0f00 	cmp.w	fp, #0
 801044e:	d0a2      	beq.n	8010396 <ip4_reass+0x1ee>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8010450:	6862      	ldr	r2, [r4, #4]
 8010452:	2a00      	cmp	r2, #0
 8010454:	d09f      	beq.n	8010396 <ip4_reass+0x1ee>
 8010456:	6851      	ldr	r1, [r2, #4]
 8010458:	888b      	ldrh	r3, [r1, #4]
 801045a:	b97b      	cbnz	r3, 801047c <ip4_reass+0x2d4>
        q = iprh->next_pbuf;
 801045c:	f8d9 3000 	ldr.w	r3, [r9]
        while (q != NULL) {
 8010460:	2b00      	cmp	r3, #0
 8010462:	f000 80bd 	beq.w	80105e0 <ip4_reass+0x438>
 8010466:	464a      	mov	r2, r9
 8010468:	e002      	b.n	8010470 <ip4_reass+0x2c8>
          q = iprh->next_pbuf;
 801046a:	6813      	ldr	r3, [r2, #0]
        while (q != NULL) {
 801046c:	2b00      	cmp	r3, #0
 801046e:	d049      	beq.n	8010504 <ip4_reass+0x35c>
          iprh = (struct ip_reass_helper *)q->payload;
 8010470:	4610      	mov	r0, r2
 8010472:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 8010474:	88c0      	ldrh	r0, [r0, #6]
 8010476:	8893      	ldrh	r3, [r2, #4]
 8010478:	4298      	cmp	r0, r3
 801047a:	d0f6      	beq.n	801046a <ip4_reass+0x2c2>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801047c:	f8b8 3000 	ldrh.w	r3, [r8]
 8010480:	443b      	add	r3, r7
 8010482:	f8a8 3000 	strh.w	r3, [r8]
  if (is_last) {
 8010486:	9b02      	ldr	r3, [sp, #8]
 8010488:	2b00      	cmp	r3, #0
 801048a:	f47f af26 	bne.w	80102da <ip4_reass+0x132>
 801048e:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 8010490:	9a01      	ldr	r2, [sp, #4]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8010492:	f043 0301 	orr.w	r3, r3, #1
    u16_t datagram_len = (u16_t)(offset + len);
 8010496:	4416      	add	r6, r2
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8010498:	77a3      	strb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 801049a:	83a6      	strh	r6, [r4, #28]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801049c:	e71d      	b.n	80102da <ip4_reass+0x132>
      if (iprh_prev->end != iprh->start) {
 801049e:	45f4      	cmp	ip, lr
      iprh_prev->next_pbuf = new_p;
 80104a0:	601d      	str	r5, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80104a2:	d0cc      	beq.n	801043e <ip4_reass+0x296>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80104a4:	f8b8 2000 	ldrh.w	r2, [r8]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80104a8:	9902      	ldr	r1, [sp, #8]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80104aa:	443a      	add	r2, r7
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80104ac:	7fa3      	ldrb	r3, [r4, #30]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80104ae:	b292      	uxth	r2, r2
 80104b0:	f8a8 2000 	strh.w	r2, [r8]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80104b4:	2900      	cmp	r1, #0
 80104b6:	f47f af10 	bne.w	80102da <ip4_reass+0x132>
 80104ba:	e7e9      	b.n	8010490 <ip4_reass+0x2e8>
    if (valid) {
 80104bc:	f1bb 0f00 	cmp.w	fp, #0
 80104c0:	d002      	beq.n	80104c8 <ip4_reass+0x320>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80104c2:	6862      	ldr	r2, [r4, #4]
 80104c4:	2a00      	cmp	r2, #0
 80104c6:	d1c6      	bne.n	8010456 <ip4_reass+0x2ae>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80104c8:	f8b8 3000 	ldrh.w	r3, [r8]
 80104cc:	443b      	add	r3, r7
 80104ce:	f8a8 3000 	strh.w	r3, [r8]
 80104d2:	e7dc      	b.n	801048e <ip4_reass+0x2e6>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80104d4:	9b02      	ldr	r3, [sp, #8]
      ipr->p = new_p;
 80104d6:	6065      	str	r5, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80104d8:	b11b      	cbz	r3, 80104e2 <ip4_reass+0x33a>
 80104da:	7fa3      	ldrb	r3, [r4, #30]
 80104dc:	07da      	lsls	r2, r3, #31
 80104de:	f57f af5a 	bpl.w	8010396 <ip4_reass+0x1ee>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80104e2:	6862      	ldr	r2, [r4, #4]
 80104e4:	e7b7      	b.n	8010456 <ip4_reass+0x2ae>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80104e6:	f8a8 2000 	strh.w	r2, [r8]
  if (is_last) {
 80104ea:	e7d1      	b.n	8010490 <ip4_reass+0x2e8>
 80104ec:	0801489c 	.word	0x0801489c
 80104f0:	080149b4 	.word	0x080149b4
 80104f4:	08011f14 	.word	0x08011f14
 80104f8:	08014924 	.word	0x08014924
 80104fc:	2400b95a 	.word	0x2400b95a
 8010500:	2400b95c 	.word	0x2400b95c
          LWIP_ASSERT("sanity check",
 8010504:	4291      	cmp	r1, r2
 8010506:	4691      	mov	r9, r2
 8010508:	d06c      	beq.n	80105e4 <ip4_reass+0x43c>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801050a:	f8d9 3000 	ldr.w	r3, [r9]
 801050e:	b133      	cbz	r3, 801051e <ip4_reass+0x376>
 8010510:	4b3d      	ldr	r3, [pc, #244]	@ (8010608 <ip4_reass+0x460>)
 8010512:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8010516:	493d      	ldr	r1, [pc, #244]	@ (801060c <ip4_reass+0x464>)
 8010518:	483d      	ldr	r0, [pc, #244]	@ (8010610 <ip4_reass+0x468>)
 801051a:	f000 fb9f 	bl	8010c5c <iprintf>
 801051e:	6862      	ldr	r2, [r4, #4]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8010520:	f8b8 3000 	ldrh.w	r3, [r8]
 8010524:	443b      	add	r3, r7
 8010526:	f8a8 3000 	strh.w	r3, [r8]
  if (is_last) {
 801052a:	9b02      	ldr	r3, [sp, #8]
 801052c:	b933      	cbnz	r3, 801053c <ip4_reass+0x394>
    u16_t datagram_len = (u16_t)(offset + len);
 801052e:	9b01      	ldr	r3, [sp, #4]
 8010530:	441e      	add	r6, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8010532:	7fa3      	ldrb	r3, [r4, #30]
 8010534:	f043 0301 	orr.w	r3, r3, #1
    ipr->datagram_len = datagram_len;
 8010538:	83a6      	strh	r6, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801053a:	77a3      	strb	r3, [r4, #30]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801053c:	6856      	ldr	r6, [r2, #4]
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801053e:	8ba0      	ldrh	r0, [r4, #28]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8010540:	68a3      	ldr	r3, [r4, #8]
 8010542:	68e5      	ldr	r5, [r4, #12]
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8010544:	3014      	adds	r0, #20
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8010546:	6921      	ldr	r1, [r4, #16]
 8010548:	6962      	ldr	r2, [r4, #20]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801054a:	b280      	uxth	r0, r0
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801054c:	6075      	str	r5, [r6, #4]
 801054e:	60b1      	str	r1, [r6, #8]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8010550:	6835      	ldr	r5, [r6, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8010552:	60f2      	str	r2, [r6, #12]
 8010554:	6033      	str	r3, [r6, #0]
 8010556:	69a3      	ldr	r3, [r4, #24]
 8010558:	6133      	str	r3, [r6, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801055a:	f7f8 febb 	bl	80092d4 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 801055e:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8010560:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8010562:	71b3      	strb	r3, [r6, #6]
 8010564:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8010566:	72b3      	strb	r3, [r6, #10]
 8010568:	72f3      	strb	r3, [r6, #11]
    p = ipr->p;
 801056a:	6866      	ldr	r6, [r4, #4]
    while (r != NULL) {
 801056c:	b15d      	cbz	r5, 8010586 <ip4_reass+0x3de>
      iprh = (struct ip_reass_helper *)r->payload;
 801056e:	686f      	ldr	r7, [r5, #4]
      pbuf_remove_header(r, IP_HLEN);
 8010570:	4628      	mov	r0, r5
 8010572:	2114      	movs	r1, #20
 8010574:	f7f9 fd20 	bl	8009fb8 <pbuf_remove_header>
      pbuf_cat(p, r);
 8010578:	4629      	mov	r1, r5
 801057a:	4630      	mov	r0, r6
 801057c:	f7f9 ff14 	bl	800a3a8 <pbuf_cat>
      r = iprh->next_pbuf;
 8010580:	683d      	ldr	r5, [r7, #0]
    while (r != NULL) {
 8010582:	2d00      	cmp	r5, #0
 8010584:	d1f3      	bne.n	801056e <ip4_reass+0x3c6>
    if (ipr == reassdatagrams) {
 8010586:	f8da 5000 	ldr.w	r5, [sl]
 801058a:	42a5      	cmp	r5, r4
 801058c:	d005      	beq.n	801059a <ip4_reass+0x3f2>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801058e:	b38d      	cbz	r5, 80105f4 <ip4_reass+0x44c>
        if (ipr_prev->next == ipr) {
 8010590:	682b      	ldr	r3, [r5, #0]
 8010592:	42a3      	cmp	r3, r4
 8010594:	d014      	beq.n	80105c0 <ip4_reass+0x418>
 8010596:	461d      	mov	r5, r3
 8010598:	e7f9      	b.n	801058e <ip4_reass+0x3e6>
    reassdatagrams = ipr->next;
 801059a:	6823      	ldr	r3, [r4, #0]
 801059c:	f8ca 3000 	str.w	r3, [sl]
  memp_free(MEMP_REASSDATA, ipr);
 80105a0:	4621      	mov	r1, r4
 80105a2:	2004      	movs	r0, #4
 80105a4:	f7f9 fa5e 	bl	8009a64 <memp_free>
    clen = pbuf_clen(p);
 80105a8:	4630      	mov	r0, r6
 80105aa:	f7f9 fed5 	bl	800a358 <pbuf_clen>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80105ae:	f8b8 3000 	ldrh.w	r3, [r8]
    clen = pbuf_clen(p);
 80105b2:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80105b4:	4283      	cmp	r3, r0
 80105b6:	d306      	bcc.n	80105c6 <ip4_reass+0x41e>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80105b8:	1b1b      	subs	r3, r3, r4
 80105ba:	f8a8 3000 	strh.w	r3, [r8]
    return p;
 80105be:	e68d      	b.n	80102dc <ip4_reass+0x134>
    prev->next = ipr->next;
 80105c0:	6823      	ldr	r3, [r4, #0]
 80105c2:	602b      	str	r3, [r5, #0]
 80105c4:	e7ec      	b.n	80105a0 <ip4_reass+0x3f8>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80105c6:	4b10      	ldr	r3, [pc, #64]	@ (8010608 <ip4_reass+0x460>)
 80105c8:	f240 229b 	movw	r2, #667	@ 0x29b
 80105cc:	4911      	ldr	r1, [pc, #68]	@ (8010614 <ip4_reass+0x46c>)
 80105ce:	4810      	ldr	r0, [pc, #64]	@ (8010610 <ip4_reass+0x468>)
 80105d0:	f000 fb44 	bl	8010c5c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80105d4:	f8b8 3000 	ldrh.w	r3, [r8]
 80105d8:	e7ee      	b.n	80105b8 <ip4_reass+0x410>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80105da:	f8a8 2000 	strh.w	r2, [r8]
  if (is_last) {
 80105de:	e67c      	b.n	80102da <ip4_reass+0x132>
          LWIP_ASSERT("sanity check",
 80105e0:	4589      	cmp	r9, r1
 80105e2:	d19d      	bne.n	8010520 <ip4_reass+0x378>
 80105e4:	4b08      	ldr	r3, [pc, #32]	@ (8010608 <ip4_reass+0x460>)
 80105e6:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80105ea:	490b      	ldr	r1, [pc, #44]	@ (8010618 <ip4_reass+0x470>)
 80105ec:	4808      	ldr	r0, [pc, #32]	@ (8010610 <ip4_reass+0x468>)
 80105ee:	f000 fb35 	bl	8010c5c <iprintf>
 80105f2:	e78a      	b.n	801050a <ip4_reass+0x362>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80105f4:	4b04      	ldr	r3, [pc, #16]	@ (8010608 <ip4_reass+0x460>)
 80105f6:	f240 1245 	movw	r2, #325	@ 0x145
 80105fa:	4908      	ldr	r1, [pc, #32]	@ (801061c <ip4_reass+0x474>)
 80105fc:	4804      	ldr	r0, [pc, #16]	@ (8010610 <ip4_reass+0x468>)
 80105fe:	f000 fb2d 	bl	8010c5c <iprintf>
    prev->next = ipr->next;
 8010602:	6823      	ldr	r3, [r4, #0]
 8010604:	602b      	str	r3, [r5, #0]
 8010606:	deff      	udf	#255	@ 0xff
 8010608:	0801489c 	.word	0x0801489c
 801060c:	08014974 	.word	0x08014974
 8010610:	08011f14 	.word	0x08011f14
 8010614:	08014998 	.word	0x08014998
 8010618:	08014964 	.word	0x08014964
 801061c:	08014924 	.word	0x08014924

08010620 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8010620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8010624:	8c8b      	ldrh	r3, [r1, #36]	@ 0x24
{
 8010626:	b08d      	sub	sp, #52	@ 0x34
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8010628:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
 801062c:	4681      	mov	r9, r0
 801062e:	9107      	str	r1, [sp, #28]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8010630:	f1b3 0114 	subs.w	r1, r3, #20
{
 8010634:	920a      	str	r2, [sp, #40]	@ 0x28
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8010636:	bf48      	it	mi
 8010638:	f1a3 010d 	submi.w	r1, r3, #13
 801063c:	f3c1 03cf 	ubfx	r3, r1, #3, #16
 8010640:	9306      	str	r3, [sp, #24]
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8010642:	f89a 3000 	ldrb.w	r3, [sl]
 8010646:	f003 030f 	and.w	r3, r3, #15
 801064a:	2b05      	cmp	r3, #5
 801064c:	ea4f 0683 	mov.w	r6, r3, lsl #2
 8010650:	f040 80dd 	bne.w	801080e <ip4_frag+0x1ee>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8010654:	8943      	ldrh	r3, [r0, #10]
 8010656:	2b13      	cmp	r3, #19
 8010658:	f240 80d2 	bls.w	8010800 <ip4_frag+0x1e0>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801065c:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 8010660:	f7f8 fe38 	bl	80092d4 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;

  left = (u16_t)(p->tot_len - IP_HLEN);
 8010664:	f8b9 c008 	ldrh.w	ip, [r9, #8]
  ofo = tmp & IP_OFFMASK;
 8010668:	f3c0 030c 	ubfx	r3, r0, #0, #13
  left = (u16_t)(p->tot_len - IP_HLEN);
 801066c:	f1ac 0c14 	sub.w	ip, ip, #20
  ofo = tmp & IP_OFFMASK;
 8010670:	9305      	str	r3, [sp, #20]
  mf_set = tmp & IP_MF;
 8010672:	f400 5300 	and.w	r3, r0, #8192	@ 0x2000
  left = (u16_t)(p->tot_len - IP_HLEN);
 8010676:	fa1f fc8c 	uxth.w	ip, ip
 801067a:	930b      	str	r3, [sp, #44]	@ 0x2c

  while (left) {
 801067c:	f1bc 0f00 	cmp.w	ip, #0
 8010680:	f000 80a1 	beq.w	80107c6 <ip4_frag+0x1a6>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8010684:	9b06      	ldr	r3, [sp, #24]
  u16_t newpbuflen = 0;
 8010686:	2400      	movs	r4, #0

    left_to_copy = fragsize;
    while (left_to_copy) {
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8010688:	464d      	mov	r5, r9
 801068a:	f8cd c010 	str.w	ip, [sp, #16]
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801068e:	00db      	lsls	r3, r3, #3
 8010690:	b29b      	uxth	r3, r3
 8010692:	9308      	str	r3, [sp, #32]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8010694:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010698:	2114      	movs	r1, #20
 801069a:	200e      	movs	r0, #14
 801069c:	f7f9 fd5e 	bl	800a15c <pbuf_alloc>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80106a0:	9b08      	ldr	r3, [sp, #32]
 80106a2:	9a04      	ldr	r2, [sp, #16]
    if (rambuf == NULL) {
 80106a4:	4680      	mov	r8, r0
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80106a6:	4293      	cmp	r3, r2
 80106a8:	bf28      	it	cs
 80106aa:	4613      	movcs	r3, r2
 80106ac:	4699      	mov	r9, r3
    if (rambuf == NULL) {
 80106ae:	2800      	cmp	r0, #0
 80106b0:	f000 8098 	beq.w	80107e4 <ip4_frag+0x1c4>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80106b4:	8943      	ldrh	r3, [r0, #10]
 80106b6:	2b13      	cmp	r3, #19
 80106b8:	f240 8097 	bls.w	80107ea <ip4_frag+0x1ca>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80106bc:	f8da 2000 	ldr.w	r2, [sl]
 80106c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80106c4:	f8da 7004 	ldr.w	r7, [sl, #4]
 80106c8:	f8da 0008 	ldr.w	r0, [sl, #8]
 80106cc:	f8da 100c 	ldr.w	r1, [sl, #12]
 80106d0:	601a      	str	r2, [r3, #0]
 80106d2:	605f      	str	r7, [r3, #4]
 80106d4:	6098      	str	r0, [r3, #8]
 80106d6:	60d9      	str	r1, [r3, #12]
 80106d8:	f8da 2010 	ldr.w	r2, [sl, #16]
 80106dc:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 80106de:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80106e2:	9309      	str	r3, [sp, #36]	@ 0x24
    while (left_to_copy) {
 80106e4:	f1b9 0f00 	cmp.w	r9, #0
 80106e8:	d03c      	beq.n	8010764 <ip4_frag+0x144>
      u16_t plen = (u16_t)(p->len - poff);
 80106ea:	896b      	ldrh	r3, [r5, #10]
 80106ec:	1b9c      	subs	r4, r3, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80106ee:	42b3      	cmp	r3, r6
      u16_t plen = (u16_t)(p->len - poff);
 80106f0:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80106f2:	d206      	bcs.n	8010702 <ip4_frag+0xe2>
 80106f4:	4b47      	ldr	r3, [pc, #284]	@ (8010814 <ip4_frag+0x1f4>)
 80106f6:	f240 322d 	movw	r2, #813	@ 0x32d
 80106fa:	4947      	ldr	r1, [pc, #284]	@ (8010818 <ip4_frag+0x1f8>)
 80106fc:	4847      	ldr	r0, [pc, #284]	@ (801081c <ip4_frag+0x1fc>)
 80106fe:	f000 faad 	bl	8010c5c <iprintf>
  u16_t newpbuflen = 0;
 8010702:	f8cd 9008 	str.w	r9, [sp, #8]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8010706:	9b02      	ldr	r3, [sp, #8]
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8010708:	2005      	movs	r0, #5
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801070a:	429c      	cmp	r4, r3
 801070c:	bf28      	it	cs
 801070e:	461c      	movcs	r4, r3
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8010710:	2c00      	cmp	r4, #0
 8010712:	d05c      	beq.n	80107ce <ip4_frag+0x1ae>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8010714:	f7f9 f960 	bl	80099d8 <memp_malloc>
 8010718:	4683      	mov	fp, r0
      if (pcr == NULL) {
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801071a:	2241      	movs	r2, #65	@ 0x41
 801071c:	4621      	mov	r1, r4
 801071e:	2000      	movs	r0, #0
      if (pcr == NULL) {
 8010720:	f1bb 0f00 	cmp.w	fp, #0
 8010724:	d05b      	beq.n	80107de <ip4_frag+0x1be>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010726:	9401      	str	r4, [sp, #4]
 8010728:	465b      	mov	r3, fp
 801072a:	686f      	ldr	r7, [r5, #4]
 801072c:	eb07 0c06 	add.w	ip, r7, r6
 8010730:	f8cd c000 	str.w	ip, [sp]
 8010734:	f7f9 fbf0 	bl	8009f18 <pbuf_alloced_custom>
 8010738:	4601      	mov	r1, r0
      if (newpbuf == NULL) {
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 801073a:	4628      	mov	r0, r5
      if (newpbuf == NULL) {
 801073c:	2900      	cmp	r1, #0
 801073e:	d04a      	beq.n	80107d6 <ip4_frag+0x1b6>
 8010740:	9103      	str	r1, [sp, #12]
      pbuf_ref(p);
 8010742:	f7f9 fe13 	bl	800a36c <pbuf_ref>
      pcr->original = p;
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8010746:	4b36      	ldr	r3, [pc, #216]	@ (8010820 <ip4_frag+0x200>)

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8010748:	4640      	mov	r0, r8
 801074a:	9903      	ldr	r1, [sp, #12]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801074c:	f8cb 3010 	str.w	r3, [fp, #16]
      pcr->original = p;
 8010750:	f8cb 5014 	str.w	r5, [fp, #20]
      pbuf_cat(rambuf, newpbuf);
 8010754:	f7f9 fe28 	bl	800a3a8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8010758:	9b02      	ldr	r3, [sp, #8]
 801075a:	1b1f      	subs	r7, r3, r4
 801075c:	b2bb      	uxth	r3, r7
 801075e:	9302      	str	r3, [sp, #8]
      if (left_to_copy) {
 8010760:	2b00      	cmp	r3, #0
 8010762:	d134      	bne.n	80107ce <ip4_frag+0x1ae>
    }
    poff = (u16_t)(poff + newpbuflen);
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8010764:	9b07      	ldr	r3, [sp, #28]
    poff = (u16_t)(poff + newpbuflen);
 8010766:	4426      	add	r6, r4

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8010768:	9a05      	ldr	r2, [sp, #20]
    last = (left <= netif->mtu - IP_HLEN);
 801076a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
    poff = (u16_t)(poff + newpbuflen);
 801076c:	b2b6      	uxth	r6, r6
    tmp = (IP_OFFMASK & (ofo));
 801076e:	f3c2 000c 	ubfx	r0, r2, #0, #13
    if (!last || mf_set) {
 8010772:	9a04      	ldr	r2, [sp, #16]
    last = (left <= netif->mtu - IP_HLEN);
 8010774:	3b13      	subs	r3, #19
    if (!last || mf_set) {
 8010776:	4293      	cmp	r3, r2
 8010778:	dd3f      	ble.n	80107fa <ip4_frag+0x1da>
 801077a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801077c:	2b00      	cmp	r3, #0
 801077e:	d13c      	bne.n	80107fa <ip4_frag+0x1da>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8010780:	f7f8 fda8 	bl	80092d4 <lwip_htons>
 8010784:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8010786:	80f8      	strh	r0, [r7, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8010788:	f109 0014 	add.w	r0, r9, #20
 801078c:	b280      	uxth	r0, r0
 801078e:	f7f8 fda1 	bl	80092d4 <lwip_htons>
    IPH_CHKSUM_SET(iphdr, 0);
 8010792:	2300      	movs	r3, #0
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8010794:	8078      	strh	r0, [r7, #2]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8010796:	4641      	mov	r1, r8
 8010798:	9807      	ldr	r0, [sp, #28]
 801079a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
    IPH_CHKSUM_SET(iphdr, 0);
 801079c:	72bb      	strb	r3, [r7, #10]
 801079e:	72fb      	strb	r3, [r7, #11]
    netif->output(netif, rambuf, dest);
 80107a0:	6943      	ldr	r3, [r0, #20]
 80107a2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80107a4:	4640      	mov	r0, r8
 80107a6:	f7f9 fc69 	bl	800a07c <pbuf_free>
    left = (u16_t)(left - fragsize);
 80107aa:	9b04      	ldr	r3, [sp, #16]
 80107ac:	eba3 0909 	sub.w	r9, r3, r9
    ofo = (u16_t)(ofo + nfb);
 80107b0:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 80107b4:	4413      	add	r3, r2
    left = (u16_t)(left - fragsize);
 80107b6:	fa1f f289 	uxth.w	r2, r9
    ofo = (u16_t)(ofo + nfb);
 80107ba:	b29b      	uxth	r3, r3
    left = (u16_t)(left - fragsize);
 80107bc:	9204      	str	r2, [sp, #16]
    ofo = (u16_t)(ofo + nfb);
 80107be:	9305      	str	r3, [sp, #20]
  while (left) {
 80107c0:	2a00      	cmp	r2, #0
 80107c2:	f47f af67 	bne.w	8010694 <ip4_frag+0x74>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80107c6:	2000      	movs	r0, #0
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
}
 80107c8:	b00d      	add	sp, #52	@ 0x34
 80107ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        p = p->next;
 80107ce:	682d      	ldr	r5, [r5, #0]
      u16_t plen = (u16_t)(p->len - poff);
 80107d0:	2600      	movs	r6, #0
 80107d2:	896c      	ldrh	r4, [r5, #10]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80107d4:	e797      	b.n	8010706 <ip4_frag+0xe6>
  memp_free(MEMP_FRAG_PBUF, p);
 80107d6:	4659      	mov	r1, fp
 80107d8:	2005      	movs	r0, #5
 80107da:	f7f9 f943 	bl	8009a64 <memp_free>
        pbuf_free(rambuf);
 80107de:	4640      	mov	r0, r8
 80107e0:	f7f9 fc4c 	bl	800a07c <pbuf_free>
  return ERR_MEM;
 80107e4:	f04f 30ff 	mov.w	r0, #4294967295
 80107e8:	e7ee      	b.n	80107c8 <ip4_frag+0x1a8>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80107ea:	4b0a      	ldr	r3, [pc, #40]	@ (8010814 <ip4_frag+0x1f4>)
 80107ec:	f44f 7249 	mov.w	r2, #804	@ 0x324
 80107f0:	490c      	ldr	r1, [pc, #48]	@ (8010824 <ip4_frag+0x204>)
 80107f2:	480a      	ldr	r0, [pc, #40]	@ (801081c <ip4_frag+0x1fc>)
 80107f4:	f000 fa32 	bl	8010c5c <iprintf>
 80107f8:	e760      	b.n	80106bc <ip4_frag+0x9c>
      tmp = tmp | IP_MF;
 80107fa:	f440 5000 	orr.w	r0, r0, #8192	@ 0x2000
 80107fe:	e7bf      	b.n	8010780 <ip4_frag+0x160>
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8010800:	4b04      	ldr	r3, [pc, #16]	@ (8010814 <ip4_frag+0x1f4>)
 8010802:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8010806:	4908      	ldr	r1, [pc, #32]	@ (8010828 <ip4_frag+0x208>)
 8010808:	4804      	ldr	r0, [pc, #16]	@ (801081c <ip4_frag+0x1fc>)
 801080a:	f000 fa27 	bl	8010c5c <iprintf>
    return ERR_VAL;
 801080e:	f06f 0005 	mvn.w	r0, #5
 8010812:	e7d9      	b.n	80107c8 <ip4_frag+0x1a8>
 8010814:	0801489c 	.word	0x0801489c
 8010818:	08014a10 	.word	0x08014a10
 801081c:	08011f14 	.word	0x08011f14
 8010820:	0800ff89 	.word	0x0800ff89
 8010824:	080149f0 	.word	0x080149f0
 8010828:	080149d4 	.word	0x080149d4

0801082c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801082c:	b570      	push	{r4, r5, r6, lr}
 801082e:	4604      	mov	r4, r0
 8010830:	460d      	mov	r5, r1
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();
 8010832:	f7f6 f885 	bl	8006940 <sys_check_core_locking>

  if (p->len <= SIZEOF_ETH_HDR) {
 8010836:	8963      	ldrh	r3, [r4, #10]
 8010838:	2b0e      	cmp	r3, #14
 801083a:	d91a      	bls.n	8010872 <ethernet_input+0x46>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801083c:	7be3      	ldrb	r3, [r4, #15]
 801083e:	b91b      	cbnz	r3, 8010848 <ethernet_input+0x1c>
    p->if_idx = netif_get_index(netif);
 8010840:	f895 3030 	ldrb.w	r3, [r5, #48]	@ 0x30
 8010844:	3301      	adds	r3, #1
 8010846:	73e3      	strb	r3, [r4, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8010848:	6860      	ldr	r0, [r4, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801084a:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 801084c:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 801084e:	07d9      	lsls	r1, r3, #31
 8010850:	d50a      	bpl.n	8010868 <ethernet_input+0x3c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8010852:	2b01      	cmp	r3, #1
 8010854:	d030      	beq.n	80108b8 <ethernet_input+0x8c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8010856:	2206      	movs	r2, #6
 8010858:	491d      	ldr	r1, [pc, #116]	@ (80108d0 <ethernet_input+0xa4>)
 801085a:	f000 fa88 	bl	8010d6e <memcmp>
 801085e:	b918      	cbnz	r0, 8010868 <ethernet_input+0x3c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8010860:	7b63      	ldrb	r3, [r4, #13]
 8010862:	f043 0308 	orr.w	r3, r3, #8
 8010866:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 8010868:	2e08      	cmp	r6, #8
 801086a:	d016      	beq.n	801089a <ethernet_input+0x6e>
 801086c:	f5b6 6fc1 	cmp.w	r6, #1544	@ 0x608
 8010870:	d004      	beq.n	801087c <ethernet_input+0x50>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 8010872:	4620      	mov	r0, r4
 8010874:	f7f9 fc02 	bl	800a07c <pbuf_free>
  return ERR_OK;
}
 8010878:	2000      	movs	r0, #0
 801087a:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801087c:	f895 302d 	ldrb.w	r3, [r5, #45]	@ 0x2d
 8010880:	071b      	lsls	r3, r3, #28
 8010882:	d5f6      	bpl.n	8010872 <ethernet_input+0x46>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010884:	210e      	movs	r1, #14
 8010886:	4620      	mov	r0, r4
 8010888:	f7f9 fb96 	bl	8009fb8 <pbuf_remove_header>
 801088c:	2800      	cmp	r0, #0
 801088e:	d1f0      	bne.n	8010872 <ethernet_input+0x46>
        etharp_input(p, netif);
 8010890:	4629      	mov	r1, r5
 8010892:	4620      	mov	r0, r4
 8010894:	f7fe fe7c 	bl	800f590 <etharp_input>
      break;
 8010898:	e7ee      	b.n	8010878 <ethernet_input+0x4c>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801089a:	f895 302d 	ldrb.w	r3, [r5, #45]	@ 0x2d
 801089e:	071a      	lsls	r2, r3, #28
 80108a0:	d5e7      	bpl.n	8010872 <ethernet_input+0x46>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80108a2:	210e      	movs	r1, #14
 80108a4:	4620      	mov	r0, r4
 80108a6:	f7f9 fb87 	bl	8009fb8 <pbuf_remove_header>
 80108aa:	2800      	cmp	r0, #0
 80108ac:	d1e1      	bne.n	8010872 <ethernet_input+0x46>
        ip4_input(p, netif);
 80108ae:	4629      	mov	r1, r5
 80108b0:	4620      	mov	r0, r4
 80108b2:	f7ff f9d5 	bl	800fc60 <ip4_input>
      break;
 80108b6:	e7df      	b.n	8010878 <ethernet_input+0x4c>
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80108b8:	7843      	ldrb	r3, [r0, #1]
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d1d4      	bne.n	8010868 <ethernet_input+0x3c>
 80108be:	7883      	ldrb	r3, [r0, #2]
 80108c0:	2b5e      	cmp	r3, #94	@ 0x5e
 80108c2:	d1d1      	bne.n	8010868 <ethernet_input+0x3c>
        p->flags |= PBUF_FLAG_LLMCAST;
 80108c4:	7b63      	ldrb	r3, [r4, #13]
 80108c6:	f043 0310 	orr.w	r3, r3, #16
 80108ca:	7363      	strb	r3, [r4, #13]
 80108cc:	e7cc      	b.n	8010868 <ethernet_input+0x3c>
 80108ce:	bf00      	nop
 80108d0:	08014a94 	.word	0x08014a94

080108d4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80108d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108d8:	460c      	mov	r4, r1
 80108da:	4605      	mov	r5, r0
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80108dc:	f8bd 0018 	ldrh.w	r0, [sp, #24]
                u16_t eth_type) {
 80108e0:	4616      	mov	r6, r2
 80108e2:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 80108e4:	f7f8 fcf6 	bl	80092d4 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80108e8:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 80108ea:	4680      	mov	r8, r0
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80108ec:	4620      	mov	r0, r4
 80108ee:	f7f9 fb33 	bl	8009f58 <pbuf_add_header>
 80108f2:	b9f0      	cbnz	r0, 8010932 <ethernet_output+0x5e>
      goto pbuf_header_failed;
    }
  }

  LWIP_ASSERT_CORE_LOCKED();
 80108f4:	f7f6 f824 	bl	8006940 <sys_check_core_locking>

  ethhdr = (struct eth_hdr *)p->payload;
 80108f8:	6861      	ldr	r1, [r4, #4]
  ethhdr->type = eth_type_be;
 80108fa:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80108fe:	683b      	ldr	r3, [r7, #0]
 8010900:	600b      	str	r3, [r1, #0]
 8010902:	88bb      	ldrh	r3, [r7, #4]
 8010904:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8010906:	6833      	ldr	r3, [r6, #0]
 8010908:	f8c1 3006 	str.w	r3, [r1, #6]
 801090c:	88b3      	ldrh	r3, [r6, #4]
 801090e:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8010910:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8010914:	2b06      	cmp	r3, #6
 8010916:	d006      	beq.n	8010926 <ethernet_output+0x52>
 8010918:	4b08      	ldr	r3, [pc, #32]	@ (801093c <ethernet_output+0x68>)
 801091a:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801091e:	4908      	ldr	r1, [pc, #32]	@ (8010940 <ethernet_output+0x6c>)
 8010920:	4808      	ldr	r0, [pc, #32]	@ (8010944 <ethernet_output+0x70>)
 8010922:	f000 f99b 	bl	8010c5c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8010926:	69ab      	ldr	r3, [r5, #24]
 8010928:	4621      	mov	r1, r4
 801092a:	4628      	mov	r0, r5
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 801092c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 8010930:	4718      	bx	r3
}
 8010932:	f06f 0001 	mvn.w	r0, #1
 8010936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801093a:	bf00      	nop
 801093c:	08014a20 	.word	0x08014a20
 8010940:	08014a58 	.word	0x08014a58
 8010944:	08011f14 	.word	0x08011f14

08010948 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8010948:	460b      	mov	r3, r1
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801094a:	2200      	movs	r2, #0
 801094c:	2104      	movs	r1, #4
{
 801094e:	b510      	push	{r4, lr}
 8010950:	4604      	mov	r4, r0
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8010952:	4618      	mov	r0, r3
 8010954:	f7f6 f9f0 	bl	8006d38 <osMessageQueueNew>
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8010958:	fab0 f380 	clz	r3, r0
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801095c:	6020      	str	r0, [r4, #0]
  if(*mbox == NULL)
 801095e:	095b      	lsrs	r3, r3, #5
    return ERR_MEM;

  return ERR_OK;
}
 8010960:	4258      	negs	r0, r3
 8010962:	bd10      	pop	{r4, pc}

08010964 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8010964:	b500      	push	{lr}
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8010966:	2300      	movs	r3, #0
{
 8010968:	b083      	sub	sp, #12
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801096a:	6800      	ldr	r0, [r0, #0]
{
 801096c:	9101      	str	r1, [sp, #4]
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801096e:	461a      	mov	r2, r3
 8010970:	a901      	add	r1, sp, #4
 8010972:	f7f6 fa1d 	bl	8006db0 <osMessageQueuePut>
 8010976:	3800      	subs	r0, #0
 8010978:	bf18      	it	ne
 801097a:	2001      	movne	r0, #1
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 801097c:	4240      	negs	r0, r0
 801097e:	b003      	add	sp, #12
 8010980:	f85d fb04 	ldr.w	pc, [sp], #4

08010984 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8010984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010986:	4615      	mov	r5, r2
 8010988:	4606      	mov	r6, r0
 801098a:	460f      	mov	r7, r1
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801098c:	f7f6 f84a 	bl	8006a24 <osKernelGetTickCount>
 8010990:	4604      	mov	r4, r0
#endif
  if(timeout != 0)
 8010992:	b14d      	cbz	r5, 80109a8 <sys_arch_mbox_fetch+0x24>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8010994:	462b      	mov	r3, r5
 8010996:	2200      	movs	r2, #0
 8010998:	4639      	mov	r1, r7
 801099a:	6830      	ldr	r0, [r6, #0]
 801099c:	f7f6 fa44 	bl	8006e28 <osMessageQueueGet>
    if (status == osOK)
 80109a0:	b148      	cbz	r0, 80109b6 <sys_arch_mbox_fetch+0x32>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80109a2:	f04f 30ff 	mov.w	r0, #4294967295
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80109a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 80109a8:	f04f 33ff 	mov.w	r3, #4294967295
 80109ac:	462a      	mov	r2, r5
 80109ae:	4639      	mov	r1, r7
 80109b0:	6830      	ldr	r0, [r6, #0]
 80109b2:	f7f6 fa39 	bl	8006e28 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 80109b6:	f7f6 f835 	bl	8006a24 <osKernelGetTickCount>
 80109ba:	1b00      	subs	r0, r0, r4
}
 80109bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80109be:	bf00      	nop

080109c0 <sys_mbox_valid>:
  {
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
 80109c0:	6800      	ldr	r0, [r0, #0]
 80109c2:	3800      	subs	r0, #0
 80109c4:	bf18      	it	ne
 80109c6:	2001      	movne	r0, #1
 80109c8:	4770      	bx	lr
 80109ca:	bf00      	nop

080109cc <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80109cc:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 80109ce:	2000      	movs	r0, #0
 80109d0:	f7f6 f882 	bl	8006ad8 <osMutexNew>
 80109d4:	4b01      	ldr	r3, [pc, #4]	@ (80109dc <sys_init+0x10>)
 80109d6:	6018      	str	r0, [r3, #0]
#endif
}
 80109d8:	bd08      	pop	{r3, pc}
 80109da:	bf00      	nop
 80109dc:	2400b960 	.word	0x2400b960

080109e0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80109e0:	b510      	push	{r4, lr}
 80109e2:	4604      	mov	r4, r0

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 80109e4:	2000      	movs	r0, #0
 80109e6:	f7f6 f877 	bl	8006ad8 <osMutexNew>
#endif

  if(*mutex == NULL)
 80109ea:	fab0 f380 	clz	r3, r0
  *mutex = osMutexNew(NULL);
 80109ee:	6020      	str	r0, [r4, #0]
  if(*mutex == NULL)
 80109f0:	095b      	lsrs	r3, r3, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 80109f2:	4258      	negs	r0, r3
 80109f4:	bd10      	pop	{r4, pc}
 80109f6:	bf00      	nop

080109f8 <sys_mutex_lock>:
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 80109f8:	f04f 31ff 	mov.w	r1, #4294967295
 80109fc:	6800      	ldr	r0, [r0, #0]
 80109fe:	f7f6 b8ad 	b.w	8006b5c <osMutexAcquire>
 8010a02:	bf00      	nop

08010a04 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 8010a04:	6800      	ldr	r0, [r0, #0]
 8010a06:	f7f6 b8cd 	b.w	8006ba4 <osMutexRelease>
 8010a0a:	bf00      	nop

08010a0c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8010a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010a0e:	b08b      	sub	sp, #44	@ 0x2c
 8010a10:	4617      	mov	r7, r2
 8010a12:	460e      	mov	r6, r1
 8010a14:	4605      	mov	r5, r0
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8010a16:	2220      	movs	r2, #32
 8010a18:	2100      	movs	r1, #0
 8010a1a:	a802      	add	r0, sp, #8
{
 8010a1c:	461c      	mov	r4, r3
  const osThreadAttr_t attributes = {
 8010a1e:	f000 f9d0 	bl	8010dc2 <memset>
 8010a22:	9b10      	ldr	r3, [sp, #64]	@ 0x40
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8010a24:	4639      	mov	r1, r7
 8010a26:	aa01      	add	r2, sp, #4
 8010a28:	4630      	mov	r0, r6
  const osThreadAttr_t attributes = {
 8010a2a:	9501      	str	r5, [sp, #4]
 8010a2c:	9406      	str	r4, [sp, #24]
 8010a2e:	9307      	str	r3, [sp, #28]
  return osThreadNew(thread, arg, &attributes);
 8010a30:	f7f6 f800 	bl	8006a34 <osThreadNew>
#endif
}
 8010a34:	b00b      	add	sp, #44	@ 0x2c
 8010a36:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010a38 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8010a38:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8010a3a:	4b04      	ldr	r3, [pc, #16]	@ (8010a4c <sys_arch_protect+0x14>)
 8010a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8010a40:	6818      	ldr	r0, [r3, #0]
 8010a42:	f7f6 f88b 	bl	8006b5c <osMutexAcquire>
#endif
  return (sys_prot_t)1;
}
 8010a46:	2001      	movs	r0, #1
 8010a48:	bd08      	pop	{r3, pc}
 8010a4a:	bf00      	nop
 8010a4c:	2400b960 	.word	0x2400b960

08010a50 <sys_arch_unprotect>:
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8010a50:	4b01      	ldr	r3, [pc, #4]	@ (8010a58 <sys_arch_unprotect+0x8>)
 8010a52:	6818      	ldr	r0, [r3, #0]
 8010a54:	f7f6 b8a6 	b.w	8006ba4 <osMutexRelease>
 8010a58:	2400b960 	.word	0x2400b960

08010a5c <rand>:
 8010a5c:	4b16      	ldr	r3, [pc, #88]	@ (8010ab8 <rand+0x5c>)
 8010a5e:	b510      	push	{r4, lr}
 8010a60:	681c      	ldr	r4, [r3, #0]
 8010a62:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010a64:	b9b3      	cbnz	r3, 8010a94 <rand+0x38>
 8010a66:	2018      	movs	r0, #24
 8010a68:	f000 faee 	bl	8011048 <malloc>
 8010a6c:	4602      	mov	r2, r0
 8010a6e:	6320      	str	r0, [r4, #48]	@ 0x30
 8010a70:	b920      	cbnz	r0, 8010a7c <rand+0x20>
 8010a72:	4b12      	ldr	r3, [pc, #72]	@ (8010abc <rand+0x60>)
 8010a74:	4812      	ldr	r0, [pc, #72]	@ (8010ac0 <rand+0x64>)
 8010a76:	2152      	movs	r1, #82	@ 0x52
 8010a78:	f000 fa7e 	bl	8010f78 <__assert_func>
 8010a7c:	4911      	ldr	r1, [pc, #68]	@ (8010ac4 <rand+0x68>)
 8010a7e:	4b12      	ldr	r3, [pc, #72]	@ (8010ac8 <rand+0x6c>)
 8010a80:	e9c0 1300 	strd	r1, r3, [r0]
 8010a84:	4b11      	ldr	r3, [pc, #68]	@ (8010acc <rand+0x70>)
 8010a86:	6083      	str	r3, [r0, #8]
 8010a88:	230b      	movs	r3, #11
 8010a8a:	8183      	strh	r3, [r0, #12]
 8010a8c:	2100      	movs	r1, #0
 8010a8e:	2001      	movs	r0, #1
 8010a90:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8010a94:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8010a96:	480e      	ldr	r0, [pc, #56]	@ (8010ad0 <rand+0x74>)
 8010a98:	690b      	ldr	r3, [r1, #16]
 8010a9a:	694c      	ldr	r4, [r1, #20]
 8010a9c:	4a0d      	ldr	r2, [pc, #52]	@ (8010ad4 <rand+0x78>)
 8010a9e:	4358      	muls	r0, r3
 8010aa0:	fb02 0004 	mla	r0, r2, r4, r0
 8010aa4:	fba3 3202 	umull	r3, r2, r3, r2
 8010aa8:	3301      	adds	r3, #1
 8010aaa:	eb40 0002 	adc.w	r0, r0, r2
 8010aae:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8010ab2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8010ab6:	bd10      	pop	{r4, pc}
 8010ab8:	2400003c 	.word	0x2400003c
 8010abc:	08014a9a 	.word	0x08014a9a
 8010ac0:	08014ab1 	.word	0x08014ab1
 8010ac4:	abcd330e 	.word	0xabcd330e
 8010ac8:	e66d1234 	.word	0xe66d1234
 8010acc:	0005deec 	.word	0x0005deec
 8010ad0:	5851f42d 	.word	0x5851f42d
 8010ad4:	4c957f2d 	.word	0x4c957f2d

08010ad8 <std>:
 8010ad8:	2300      	movs	r3, #0
 8010ada:	b510      	push	{r4, lr}
 8010adc:	4604      	mov	r4, r0
 8010ade:	e9c0 3300 	strd	r3, r3, [r0]
 8010ae2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010ae6:	6083      	str	r3, [r0, #8]
 8010ae8:	8181      	strh	r1, [r0, #12]
 8010aea:	6643      	str	r3, [r0, #100]	@ 0x64
 8010aec:	81c2      	strh	r2, [r0, #14]
 8010aee:	6183      	str	r3, [r0, #24]
 8010af0:	4619      	mov	r1, r3
 8010af2:	2208      	movs	r2, #8
 8010af4:	305c      	adds	r0, #92	@ 0x5c
 8010af6:	f000 f964 	bl	8010dc2 <memset>
 8010afa:	4b0d      	ldr	r3, [pc, #52]	@ (8010b30 <std+0x58>)
 8010afc:	6263      	str	r3, [r4, #36]	@ 0x24
 8010afe:	4b0d      	ldr	r3, [pc, #52]	@ (8010b34 <std+0x5c>)
 8010b00:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010b02:	4b0d      	ldr	r3, [pc, #52]	@ (8010b38 <std+0x60>)
 8010b04:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010b06:	4b0d      	ldr	r3, [pc, #52]	@ (8010b3c <std+0x64>)
 8010b08:	6323      	str	r3, [r4, #48]	@ 0x30
 8010b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8010b40 <std+0x68>)
 8010b0c:	6224      	str	r4, [r4, #32]
 8010b0e:	429c      	cmp	r4, r3
 8010b10:	d006      	beq.n	8010b20 <std+0x48>
 8010b12:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010b16:	4294      	cmp	r4, r2
 8010b18:	d002      	beq.n	8010b20 <std+0x48>
 8010b1a:	33d0      	adds	r3, #208	@ 0xd0
 8010b1c:	429c      	cmp	r4, r3
 8010b1e:	d105      	bne.n	8010b2c <std+0x54>
 8010b20:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010b28:	f000 ba14 	b.w	8010f54 <__retarget_lock_init_recursive>
 8010b2c:	bd10      	pop	{r4, pc}
 8010b2e:	bf00      	nop
 8010b30:	08010ce9 	.word	0x08010ce9
 8010b34:	08010d0b 	.word	0x08010d0b
 8010b38:	08010d43 	.word	0x08010d43
 8010b3c:	08010d67 	.word	0x08010d67
 8010b40:	2400b964 	.word	0x2400b964

08010b44 <stdio_exit_handler>:
 8010b44:	4a02      	ldr	r2, [pc, #8]	@ (8010b50 <stdio_exit_handler+0xc>)
 8010b46:	4903      	ldr	r1, [pc, #12]	@ (8010b54 <stdio_exit_handler+0x10>)
 8010b48:	4803      	ldr	r0, [pc, #12]	@ (8010b58 <stdio_exit_handler+0x14>)
 8010b4a:	f000 b869 	b.w	8010c20 <_fwalk_sglue>
 8010b4e:	bf00      	nop
 8010b50:	24000030 	.word	0x24000030
 8010b54:	08011b0d 	.word	0x08011b0d
 8010b58:	24000040 	.word	0x24000040

08010b5c <cleanup_stdio>:
 8010b5c:	6841      	ldr	r1, [r0, #4]
 8010b5e:	4b0c      	ldr	r3, [pc, #48]	@ (8010b90 <cleanup_stdio+0x34>)
 8010b60:	4299      	cmp	r1, r3
 8010b62:	b510      	push	{r4, lr}
 8010b64:	4604      	mov	r4, r0
 8010b66:	d001      	beq.n	8010b6c <cleanup_stdio+0x10>
 8010b68:	f000 ffd0 	bl	8011b0c <_fflush_r>
 8010b6c:	68a1      	ldr	r1, [r4, #8]
 8010b6e:	4b09      	ldr	r3, [pc, #36]	@ (8010b94 <cleanup_stdio+0x38>)
 8010b70:	4299      	cmp	r1, r3
 8010b72:	d002      	beq.n	8010b7a <cleanup_stdio+0x1e>
 8010b74:	4620      	mov	r0, r4
 8010b76:	f000 ffc9 	bl	8011b0c <_fflush_r>
 8010b7a:	68e1      	ldr	r1, [r4, #12]
 8010b7c:	4b06      	ldr	r3, [pc, #24]	@ (8010b98 <cleanup_stdio+0x3c>)
 8010b7e:	4299      	cmp	r1, r3
 8010b80:	d004      	beq.n	8010b8c <cleanup_stdio+0x30>
 8010b82:	4620      	mov	r0, r4
 8010b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010b88:	f000 bfc0 	b.w	8011b0c <_fflush_r>
 8010b8c:	bd10      	pop	{r4, pc}
 8010b8e:	bf00      	nop
 8010b90:	2400b964 	.word	0x2400b964
 8010b94:	2400b9cc 	.word	0x2400b9cc
 8010b98:	2400ba34 	.word	0x2400ba34

08010b9c <global_stdio_init.part.0>:
 8010b9c:	b510      	push	{r4, lr}
 8010b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8010bcc <global_stdio_init.part.0+0x30>)
 8010ba0:	4c0b      	ldr	r4, [pc, #44]	@ (8010bd0 <global_stdio_init.part.0+0x34>)
 8010ba2:	4a0c      	ldr	r2, [pc, #48]	@ (8010bd4 <global_stdio_init.part.0+0x38>)
 8010ba4:	601a      	str	r2, [r3, #0]
 8010ba6:	4620      	mov	r0, r4
 8010ba8:	2200      	movs	r2, #0
 8010baa:	2104      	movs	r1, #4
 8010bac:	f7ff ff94 	bl	8010ad8 <std>
 8010bb0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010bb4:	2201      	movs	r2, #1
 8010bb6:	2109      	movs	r1, #9
 8010bb8:	f7ff ff8e 	bl	8010ad8 <std>
 8010bbc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010bc0:	2202      	movs	r2, #2
 8010bc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010bc6:	2112      	movs	r1, #18
 8010bc8:	f7ff bf86 	b.w	8010ad8 <std>
 8010bcc:	2400ba9c 	.word	0x2400ba9c
 8010bd0:	2400b964 	.word	0x2400b964
 8010bd4:	08010b45 	.word	0x08010b45

08010bd8 <__sfp_lock_acquire>:
 8010bd8:	4801      	ldr	r0, [pc, #4]	@ (8010be0 <__sfp_lock_acquire+0x8>)
 8010bda:	f000 b9bc 	b.w	8010f56 <__retarget_lock_acquire_recursive>
 8010bde:	bf00      	nop
 8010be0:	2400baa5 	.word	0x2400baa5

08010be4 <__sfp_lock_release>:
 8010be4:	4801      	ldr	r0, [pc, #4]	@ (8010bec <__sfp_lock_release+0x8>)
 8010be6:	f000 b9b7 	b.w	8010f58 <__retarget_lock_release_recursive>
 8010bea:	bf00      	nop
 8010bec:	2400baa5 	.word	0x2400baa5

08010bf0 <__sinit>:
 8010bf0:	b510      	push	{r4, lr}
 8010bf2:	4604      	mov	r4, r0
 8010bf4:	f7ff fff0 	bl	8010bd8 <__sfp_lock_acquire>
 8010bf8:	6a23      	ldr	r3, [r4, #32]
 8010bfa:	b11b      	cbz	r3, 8010c04 <__sinit+0x14>
 8010bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c00:	f7ff bff0 	b.w	8010be4 <__sfp_lock_release>
 8010c04:	4b04      	ldr	r3, [pc, #16]	@ (8010c18 <__sinit+0x28>)
 8010c06:	6223      	str	r3, [r4, #32]
 8010c08:	4b04      	ldr	r3, [pc, #16]	@ (8010c1c <__sinit+0x2c>)
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d1f5      	bne.n	8010bfc <__sinit+0xc>
 8010c10:	f7ff ffc4 	bl	8010b9c <global_stdio_init.part.0>
 8010c14:	e7f2      	b.n	8010bfc <__sinit+0xc>
 8010c16:	bf00      	nop
 8010c18:	08010b5d 	.word	0x08010b5d
 8010c1c:	2400ba9c 	.word	0x2400ba9c

08010c20 <_fwalk_sglue>:
 8010c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c24:	4607      	mov	r7, r0
 8010c26:	4688      	mov	r8, r1
 8010c28:	4614      	mov	r4, r2
 8010c2a:	2600      	movs	r6, #0
 8010c2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010c30:	f1b9 0901 	subs.w	r9, r9, #1
 8010c34:	d505      	bpl.n	8010c42 <_fwalk_sglue+0x22>
 8010c36:	6824      	ldr	r4, [r4, #0]
 8010c38:	2c00      	cmp	r4, #0
 8010c3a:	d1f7      	bne.n	8010c2c <_fwalk_sglue+0xc>
 8010c3c:	4630      	mov	r0, r6
 8010c3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c42:	89ab      	ldrh	r3, [r5, #12]
 8010c44:	2b01      	cmp	r3, #1
 8010c46:	d907      	bls.n	8010c58 <_fwalk_sglue+0x38>
 8010c48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010c4c:	3301      	adds	r3, #1
 8010c4e:	d003      	beq.n	8010c58 <_fwalk_sglue+0x38>
 8010c50:	4629      	mov	r1, r5
 8010c52:	4638      	mov	r0, r7
 8010c54:	47c0      	blx	r8
 8010c56:	4306      	orrs	r6, r0
 8010c58:	3568      	adds	r5, #104	@ 0x68
 8010c5a:	e7e9      	b.n	8010c30 <_fwalk_sglue+0x10>

08010c5c <iprintf>:
 8010c5c:	b40f      	push	{r0, r1, r2, r3}
 8010c5e:	b507      	push	{r0, r1, r2, lr}
 8010c60:	4906      	ldr	r1, [pc, #24]	@ (8010c7c <iprintf+0x20>)
 8010c62:	ab04      	add	r3, sp, #16
 8010c64:	6808      	ldr	r0, [r1, #0]
 8010c66:	f853 2b04 	ldr.w	r2, [r3], #4
 8010c6a:	6881      	ldr	r1, [r0, #8]
 8010c6c:	9301      	str	r3, [sp, #4]
 8010c6e:	f000 fc23 	bl	80114b8 <_vfiprintf_r>
 8010c72:	b003      	add	sp, #12
 8010c74:	f85d eb04 	ldr.w	lr, [sp], #4
 8010c78:	b004      	add	sp, #16
 8010c7a:	4770      	bx	lr
 8010c7c:	2400003c 	.word	0x2400003c

08010c80 <sniprintf>:
 8010c80:	b40c      	push	{r2, r3}
 8010c82:	b530      	push	{r4, r5, lr}
 8010c84:	4b17      	ldr	r3, [pc, #92]	@ (8010ce4 <sniprintf+0x64>)
 8010c86:	1e0c      	subs	r4, r1, #0
 8010c88:	681d      	ldr	r5, [r3, #0]
 8010c8a:	b09d      	sub	sp, #116	@ 0x74
 8010c8c:	da08      	bge.n	8010ca0 <sniprintf+0x20>
 8010c8e:	238b      	movs	r3, #139	@ 0x8b
 8010c90:	602b      	str	r3, [r5, #0]
 8010c92:	f04f 30ff 	mov.w	r0, #4294967295
 8010c96:	b01d      	add	sp, #116	@ 0x74
 8010c98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010c9c:	b002      	add	sp, #8
 8010c9e:	4770      	bx	lr
 8010ca0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8010ca4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010ca8:	bf14      	ite	ne
 8010caa:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010cae:	4623      	moveq	r3, r4
 8010cb0:	9304      	str	r3, [sp, #16]
 8010cb2:	9307      	str	r3, [sp, #28]
 8010cb4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010cb8:	9002      	str	r0, [sp, #8]
 8010cba:	9006      	str	r0, [sp, #24]
 8010cbc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010cc0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8010cc2:	ab21      	add	r3, sp, #132	@ 0x84
 8010cc4:	a902      	add	r1, sp, #8
 8010cc6:	4628      	mov	r0, r5
 8010cc8:	9301      	str	r3, [sp, #4]
 8010cca:	f000 facf 	bl	801126c <_svfiprintf_r>
 8010cce:	1c43      	adds	r3, r0, #1
 8010cd0:	bfbc      	itt	lt
 8010cd2:	238b      	movlt	r3, #139	@ 0x8b
 8010cd4:	602b      	strlt	r3, [r5, #0]
 8010cd6:	2c00      	cmp	r4, #0
 8010cd8:	d0dd      	beq.n	8010c96 <sniprintf+0x16>
 8010cda:	9b02      	ldr	r3, [sp, #8]
 8010cdc:	2200      	movs	r2, #0
 8010cde:	701a      	strb	r2, [r3, #0]
 8010ce0:	e7d9      	b.n	8010c96 <sniprintf+0x16>
 8010ce2:	bf00      	nop
 8010ce4:	2400003c 	.word	0x2400003c

08010ce8 <__sread>:
 8010ce8:	b510      	push	{r4, lr}
 8010cea:	460c      	mov	r4, r1
 8010cec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010cf0:	f000 f8e8 	bl	8010ec4 <_read_r>
 8010cf4:	2800      	cmp	r0, #0
 8010cf6:	bfab      	itete	ge
 8010cf8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010cfa:	89a3      	ldrhlt	r3, [r4, #12]
 8010cfc:	181b      	addge	r3, r3, r0
 8010cfe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010d02:	bfac      	ite	ge
 8010d04:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010d06:	81a3      	strhlt	r3, [r4, #12]
 8010d08:	bd10      	pop	{r4, pc}

08010d0a <__swrite>:
 8010d0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d0e:	461f      	mov	r7, r3
 8010d10:	898b      	ldrh	r3, [r1, #12]
 8010d12:	05db      	lsls	r3, r3, #23
 8010d14:	4605      	mov	r5, r0
 8010d16:	460c      	mov	r4, r1
 8010d18:	4616      	mov	r6, r2
 8010d1a:	d505      	bpl.n	8010d28 <__swrite+0x1e>
 8010d1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d20:	2302      	movs	r3, #2
 8010d22:	2200      	movs	r2, #0
 8010d24:	f000 f8bc 	bl	8010ea0 <_lseek_r>
 8010d28:	89a3      	ldrh	r3, [r4, #12]
 8010d2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010d2e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010d32:	81a3      	strh	r3, [r4, #12]
 8010d34:	4632      	mov	r2, r6
 8010d36:	463b      	mov	r3, r7
 8010d38:	4628      	mov	r0, r5
 8010d3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010d3e:	f000 b8d3 	b.w	8010ee8 <_write_r>

08010d42 <__sseek>:
 8010d42:	b510      	push	{r4, lr}
 8010d44:	460c      	mov	r4, r1
 8010d46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d4a:	f000 f8a9 	bl	8010ea0 <_lseek_r>
 8010d4e:	1c43      	adds	r3, r0, #1
 8010d50:	89a3      	ldrh	r3, [r4, #12]
 8010d52:	bf15      	itete	ne
 8010d54:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010d56:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010d5a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010d5e:	81a3      	strheq	r3, [r4, #12]
 8010d60:	bf18      	it	ne
 8010d62:	81a3      	strhne	r3, [r4, #12]
 8010d64:	bd10      	pop	{r4, pc}

08010d66 <__sclose>:
 8010d66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d6a:	f000 b833 	b.w	8010dd4 <_close_r>

08010d6e <memcmp>:
 8010d6e:	b510      	push	{r4, lr}
 8010d70:	3901      	subs	r1, #1
 8010d72:	4402      	add	r2, r0
 8010d74:	4290      	cmp	r0, r2
 8010d76:	d101      	bne.n	8010d7c <memcmp+0xe>
 8010d78:	2000      	movs	r0, #0
 8010d7a:	e005      	b.n	8010d88 <memcmp+0x1a>
 8010d7c:	7803      	ldrb	r3, [r0, #0]
 8010d7e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010d82:	42a3      	cmp	r3, r4
 8010d84:	d001      	beq.n	8010d8a <memcmp+0x1c>
 8010d86:	1b18      	subs	r0, r3, r4
 8010d88:	bd10      	pop	{r4, pc}
 8010d8a:	3001      	adds	r0, #1
 8010d8c:	e7f2      	b.n	8010d74 <memcmp+0x6>

08010d8e <memmove>:
 8010d8e:	4288      	cmp	r0, r1
 8010d90:	b510      	push	{r4, lr}
 8010d92:	eb01 0402 	add.w	r4, r1, r2
 8010d96:	d902      	bls.n	8010d9e <memmove+0x10>
 8010d98:	4284      	cmp	r4, r0
 8010d9a:	4623      	mov	r3, r4
 8010d9c:	d807      	bhi.n	8010dae <memmove+0x20>
 8010d9e:	1e43      	subs	r3, r0, #1
 8010da0:	42a1      	cmp	r1, r4
 8010da2:	d008      	beq.n	8010db6 <memmove+0x28>
 8010da4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010da8:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010dac:	e7f8      	b.n	8010da0 <memmove+0x12>
 8010dae:	4402      	add	r2, r0
 8010db0:	4601      	mov	r1, r0
 8010db2:	428a      	cmp	r2, r1
 8010db4:	d100      	bne.n	8010db8 <memmove+0x2a>
 8010db6:	bd10      	pop	{r4, pc}
 8010db8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010dbc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010dc0:	e7f7      	b.n	8010db2 <memmove+0x24>

08010dc2 <memset>:
 8010dc2:	4402      	add	r2, r0
 8010dc4:	4603      	mov	r3, r0
 8010dc6:	4293      	cmp	r3, r2
 8010dc8:	d100      	bne.n	8010dcc <memset+0xa>
 8010dca:	4770      	bx	lr
 8010dcc:	f803 1b01 	strb.w	r1, [r3], #1
 8010dd0:	e7f9      	b.n	8010dc6 <memset+0x4>
	...

08010dd4 <_close_r>:
 8010dd4:	b538      	push	{r3, r4, r5, lr}
 8010dd6:	4d06      	ldr	r5, [pc, #24]	@ (8010df0 <_close_r+0x1c>)
 8010dd8:	2300      	movs	r3, #0
 8010dda:	4604      	mov	r4, r0
 8010ddc:	4608      	mov	r0, r1
 8010dde:	602b      	str	r3, [r5, #0]
 8010de0:	f7f0 fb6a 	bl	80014b8 <_close>
 8010de4:	1c43      	adds	r3, r0, #1
 8010de6:	d102      	bne.n	8010dee <_close_r+0x1a>
 8010de8:	682b      	ldr	r3, [r5, #0]
 8010dea:	b103      	cbz	r3, 8010dee <_close_r+0x1a>
 8010dec:	6023      	str	r3, [r4, #0]
 8010dee:	bd38      	pop	{r3, r4, r5, pc}
 8010df0:	2400baa0 	.word	0x2400baa0

08010df4 <_reclaim_reent>:
 8010df4:	4b29      	ldr	r3, [pc, #164]	@ (8010e9c <_reclaim_reent+0xa8>)
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	4283      	cmp	r3, r0
 8010dfa:	b570      	push	{r4, r5, r6, lr}
 8010dfc:	4604      	mov	r4, r0
 8010dfe:	d04b      	beq.n	8010e98 <_reclaim_reent+0xa4>
 8010e00:	69c3      	ldr	r3, [r0, #28]
 8010e02:	b1ab      	cbz	r3, 8010e30 <_reclaim_reent+0x3c>
 8010e04:	68db      	ldr	r3, [r3, #12]
 8010e06:	b16b      	cbz	r3, 8010e24 <_reclaim_reent+0x30>
 8010e08:	2500      	movs	r5, #0
 8010e0a:	69e3      	ldr	r3, [r4, #28]
 8010e0c:	68db      	ldr	r3, [r3, #12]
 8010e0e:	5959      	ldr	r1, [r3, r5]
 8010e10:	2900      	cmp	r1, #0
 8010e12:	d13b      	bne.n	8010e8c <_reclaim_reent+0x98>
 8010e14:	3504      	adds	r5, #4
 8010e16:	2d80      	cmp	r5, #128	@ 0x80
 8010e18:	d1f7      	bne.n	8010e0a <_reclaim_reent+0x16>
 8010e1a:	69e3      	ldr	r3, [r4, #28]
 8010e1c:	4620      	mov	r0, r4
 8010e1e:	68d9      	ldr	r1, [r3, #12]
 8010e20:	f000 f8c8 	bl	8010fb4 <_free_r>
 8010e24:	69e3      	ldr	r3, [r4, #28]
 8010e26:	6819      	ldr	r1, [r3, #0]
 8010e28:	b111      	cbz	r1, 8010e30 <_reclaim_reent+0x3c>
 8010e2a:	4620      	mov	r0, r4
 8010e2c:	f000 f8c2 	bl	8010fb4 <_free_r>
 8010e30:	6961      	ldr	r1, [r4, #20]
 8010e32:	b111      	cbz	r1, 8010e3a <_reclaim_reent+0x46>
 8010e34:	4620      	mov	r0, r4
 8010e36:	f000 f8bd 	bl	8010fb4 <_free_r>
 8010e3a:	69e1      	ldr	r1, [r4, #28]
 8010e3c:	b111      	cbz	r1, 8010e44 <_reclaim_reent+0x50>
 8010e3e:	4620      	mov	r0, r4
 8010e40:	f000 f8b8 	bl	8010fb4 <_free_r>
 8010e44:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8010e46:	b111      	cbz	r1, 8010e4e <_reclaim_reent+0x5a>
 8010e48:	4620      	mov	r0, r4
 8010e4a:	f000 f8b3 	bl	8010fb4 <_free_r>
 8010e4e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010e50:	b111      	cbz	r1, 8010e58 <_reclaim_reent+0x64>
 8010e52:	4620      	mov	r0, r4
 8010e54:	f000 f8ae 	bl	8010fb4 <_free_r>
 8010e58:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8010e5a:	b111      	cbz	r1, 8010e62 <_reclaim_reent+0x6e>
 8010e5c:	4620      	mov	r0, r4
 8010e5e:	f000 f8a9 	bl	8010fb4 <_free_r>
 8010e62:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8010e64:	b111      	cbz	r1, 8010e6c <_reclaim_reent+0x78>
 8010e66:	4620      	mov	r0, r4
 8010e68:	f000 f8a4 	bl	8010fb4 <_free_r>
 8010e6c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8010e6e:	b111      	cbz	r1, 8010e76 <_reclaim_reent+0x82>
 8010e70:	4620      	mov	r0, r4
 8010e72:	f000 f89f 	bl	8010fb4 <_free_r>
 8010e76:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8010e78:	b111      	cbz	r1, 8010e80 <_reclaim_reent+0x8c>
 8010e7a:	4620      	mov	r0, r4
 8010e7c:	f000 f89a 	bl	8010fb4 <_free_r>
 8010e80:	6a23      	ldr	r3, [r4, #32]
 8010e82:	b14b      	cbz	r3, 8010e98 <_reclaim_reent+0xa4>
 8010e84:	4620      	mov	r0, r4
 8010e86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010e8a:	4718      	bx	r3
 8010e8c:	680e      	ldr	r6, [r1, #0]
 8010e8e:	4620      	mov	r0, r4
 8010e90:	f000 f890 	bl	8010fb4 <_free_r>
 8010e94:	4631      	mov	r1, r6
 8010e96:	e7bb      	b.n	8010e10 <_reclaim_reent+0x1c>
 8010e98:	bd70      	pop	{r4, r5, r6, pc}
 8010e9a:	bf00      	nop
 8010e9c:	2400003c 	.word	0x2400003c

08010ea0 <_lseek_r>:
 8010ea0:	b538      	push	{r3, r4, r5, lr}
 8010ea2:	4d07      	ldr	r5, [pc, #28]	@ (8010ec0 <_lseek_r+0x20>)
 8010ea4:	4604      	mov	r4, r0
 8010ea6:	4608      	mov	r0, r1
 8010ea8:	4611      	mov	r1, r2
 8010eaa:	2200      	movs	r2, #0
 8010eac:	602a      	str	r2, [r5, #0]
 8010eae:	461a      	mov	r2, r3
 8010eb0:	f7f0 fb0e 	bl	80014d0 <_lseek>
 8010eb4:	1c43      	adds	r3, r0, #1
 8010eb6:	d102      	bne.n	8010ebe <_lseek_r+0x1e>
 8010eb8:	682b      	ldr	r3, [r5, #0]
 8010eba:	b103      	cbz	r3, 8010ebe <_lseek_r+0x1e>
 8010ebc:	6023      	str	r3, [r4, #0]
 8010ebe:	bd38      	pop	{r3, r4, r5, pc}
 8010ec0:	2400baa0 	.word	0x2400baa0

08010ec4 <_read_r>:
 8010ec4:	b538      	push	{r3, r4, r5, lr}
 8010ec6:	4d07      	ldr	r5, [pc, #28]	@ (8010ee4 <_read_r+0x20>)
 8010ec8:	4604      	mov	r4, r0
 8010eca:	4608      	mov	r0, r1
 8010ecc:	4611      	mov	r1, r2
 8010ece:	2200      	movs	r2, #0
 8010ed0:	602a      	str	r2, [r5, #0]
 8010ed2:	461a      	mov	r2, r3
 8010ed4:	f7f0 fad4 	bl	8001480 <_read>
 8010ed8:	1c43      	adds	r3, r0, #1
 8010eda:	d102      	bne.n	8010ee2 <_read_r+0x1e>
 8010edc:	682b      	ldr	r3, [r5, #0]
 8010ede:	b103      	cbz	r3, 8010ee2 <_read_r+0x1e>
 8010ee0:	6023      	str	r3, [r4, #0]
 8010ee2:	bd38      	pop	{r3, r4, r5, pc}
 8010ee4:	2400baa0 	.word	0x2400baa0

08010ee8 <_write_r>:
 8010ee8:	b538      	push	{r3, r4, r5, lr}
 8010eea:	4d07      	ldr	r5, [pc, #28]	@ (8010f08 <_write_r+0x20>)
 8010eec:	4604      	mov	r4, r0
 8010eee:	4608      	mov	r0, r1
 8010ef0:	4611      	mov	r1, r2
 8010ef2:	2200      	movs	r2, #0
 8010ef4:	602a      	str	r2, [r5, #0]
 8010ef6:	461a      	mov	r2, r3
 8010ef8:	f7f0 fad0 	bl	800149c <_write>
 8010efc:	1c43      	adds	r3, r0, #1
 8010efe:	d102      	bne.n	8010f06 <_write_r+0x1e>
 8010f00:	682b      	ldr	r3, [r5, #0]
 8010f02:	b103      	cbz	r3, 8010f06 <_write_r+0x1e>
 8010f04:	6023      	str	r3, [r4, #0]
 8010f06:	bd38      	pop	{r3, r4, r5, pc}
 8010f08:	2400baa0 	.word	0x2400baa0

08010f0c <__libc_init_array>:
 8010f0c:	b570      	push	{r4, r5, r6, lr}
 8010f0e:	4d0d      	ldr	r5, [pc, #52]	@ (8010f44 <__libc_init_array+0x38>)
 8010f10:	4c0d      	ldr	r4, [pc, #52]	@ (8010f48 <__libc_init_array+0x3c>)
 8010f12:	1b64      	subs	r4, r4, r5
 8010f14:	10a4      	asrs	r4, r4, #2
 8010f16:	2600      	movs	r6, #0
 8010f18:	42a6      	cmp	r6, r4
 8010f1a:	d109      	bne.n	8010f30 <__libc_init_array+0x24>
 8010f1c:	4d0b      	ldr	r5, [pc, #44]	@ (8010f4c <__libc_init_array+0x40>)
 8010f1e:	4c0c      	ldr	r4, [pc, #48]	@ (8010f50 <__libc_init_array+0x44>)
 8010f20:	f000 ffd8 	bl	8011ed4 <_init>
 8010f24:	1b64      	subs	r4, r4, r5
 8010f26:	10a4      	asrs	r4, r4, #2
 8010f28:	2600      	movs	r6, #0
 8010f2a:	42a6      	cmp	r6, r4
 8010f2c:	d105      	bne.n	8010f3a <__libc_init_array+0x2e>
 8010f2e:	bd70      	pop	{r4, r5, r6, pc}
 8010f30:	f855 3b04 	ldr.w	r3, [r5], #4
 8010f34:	4798      	blx	r3
 8010f36:	3601      	adds	r6, #1
 8010f38:	e7ee      	b.n	8010f18 <__libc_init_array+0xc>
 8010f3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8010f3e:	4798      	blx	r3
 8010f40:	3601      	adds	r6, #1
 8010f42:	e7f2      	b.n	8010f2a <__libc_init_array+0x1e>
 8010f44:	08014b80 	.word	0x08014b80
 8010f48:	08014b80 	.word	0x08014b80
 8010f4c:	08014b80 	.word	0x08014b80
 8010f50:	08014b84 	.word	0x08014b84

08010f54 <__retarget_lock_init_recursive>:
 8010f54:	4770      	bx	lr

08010f56 <__retarget_lock_acquire_recursive>:
 8010f56:	4770      	bx	lr

08010f58 <__retarget_lock_release_recursive>:
 8010f58:	4770      	bx	lr

08010f5a <memcpy>:
 8010f5a:	440a      	add	r2, r1
 8010f5c:	4291      	cmp	r1, r2
 8010f5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8010f62:	d100      	bne.n	8010f66 <memcpy+0xc>
 8010f64:	4770      	bx	lr
 8010f66:	b510      	push	{r4, lr}
 8010f68:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010f6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010f70:	4291      	cmp	r1, r2
 8010f72:	d1f9      	bne.n	8010f68 <memcpy+0xe>
 8010f74:	bd10      	pop	{r4, pc}
	...

08010f78 <__assert_func>:
 8010f78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010f7a:	4614      	mov	r4, r2
 8010f7c:	461a      	mov	r2, r3
 8010f7e:	4b09      	ldr	r3, [pc, #36]	@ (8010fa4 <__assert_func+0x2c>)
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	4605      	mov	r5, r0
 8010f84:	68d8      	ldr	r0, [r3, #12]
 8010f86:	b954      	cbnz	r4, 8010f9e <__assert_func+0x26>
 8010f88:	4b07      	ldr	r3, [pc, #28]	@ (8010fa8 <__assert_func+0x30>)
 8010f8a:	461c      	mov	r4, r3
 8010f8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010f90:	9100      	str	r1, [sp, #0]
 8010f92:	462b      	mov	r3, r5
 8010f94:	4905      	ldr	r1, [pc, #20]	@ (8010fac <__assert_func+0x34>)
 8010f96:	f000 fde1 	bl	8011b5c <fiprintf>
 8010f9a:	f000 fe95 	bl	8011cc8 <abort>
 8010f9e:	4b04      	ldr	r3, [pc, #16]	@ (8010fb0 <__assert_func+0x38>)
 8010fa0:	e7f4      	b.n	8010f8c <__assert_func+0x14>
 8010fa2:	bf00      	nop
 8010fa4:	2400003c 	.word	0x2400003c
 8010fa8:	08014b44 	.word	0x08014b44
 8010fac:	08014b16 	.word	0x08014b16
 8010fb0:	08014b09 	.word	0x08014b09

08010fb4 <_free_r>:
 8010fb4:	b538      	push	{r3, r4, r5, lr}
 8010fb6:	4605      	mov	r5, r0
 8010fb8:	2900      	cmp	r1, #0
 8010fba:	d041      	beq.n	8011040 <_free_r+0x8c>
 8010fbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010fc0:	1f0c      	subs	r4, r1, #4
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	bfb8      	it	lt
 8010fc6:	18e4      	addlt	r4, r4, r3
 8010fc8:	f000 f8e8 	bl	801119c <__malloc_lock>
 8010fcc:	4a1d      	ldr	r2, [pc, #116]	@ (8011044 <_free_r+0x90>)
 8010fce:	6813      	ldr	r3, [r2, #0]
 8010fd0:	b933      	cbnz	r3, 8010fe0 <_free_r+0x2c>
 8010fd2:	6063      	str	r3, [r4, #4]
 8010fd4:	6014      	str	r4, [r2, #0]
 8010fd6:	4628      	mov	r0, r5
 8010fd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010fdc:	f000 b8e4 	b.w	80111a8 <__malloc_unlock>
 8010fe0:	42a3      	cmp	r3, r4
 8010fe2:	d908      	bls.n	8010ff6 <_free_r+0x42>
 8010fe4:	6820      	ldr	r0, [r4, #0]
 8010fe6:	1821      	adds	r1, r4, r0
 8010fe8:	428b      	cmp	r3, r1
 8010fea:	bf01      	itttt	eq
 8010fec:	6819      	ldreq	r1, [r3, #0]
 8010fee:	685b      	ldreq	r3, [r3, #4]
 8010ff0:	1809      	addeq	r1, r1, r0
 8010ff2:	6021      	streq	r1, [r4, #0]
 8010ff4:	e7ed      	b.n	8010fd2 <_free_r+0x1e>
 8010ff6:	461a      	mov	r2, r3
 8010ff8:	685b      	ldr	r3, [r3, #4]
 8010ffa:	b10b      	cbz	r3, 8011000 <_free_r+0x4c>
 8010ffc:	42a3      	cmp	r3, r4
 8010ffe:	d9fa      	bls.n	8010ff6 <_free_r+0x42>
 8011000:	6811      	ldr	r1, [r2, #0]
 8011002:	1850      	adds	r0, r2, r1
 8011004:	42a0      	cmp	r0, r4
 8011006:	d10b      	bne.n	8011020 <_free_r+0x6c>
 8011008:	6820      	ldr	r0, [r4, #0]
 801100a:	4401      	add	r1, r0
 801100c:	1850      	adds	r0, r2, r1
 801100e:	4283      	cmp	r3, r0
 8011010:	6011      	str	r1, [r2, #0]
 8011012:	d1e0      	bne.n	8010fd6 <_free_r+0x22>
 8011014:	6818      	ldr	r0, [r3, #0]
 8011016:	685b      	ldr	r3, [r3, #4]
 8011018:	6053      	str	r3, [r2, #4]
 801101a:	4408      	add	r0, r1
 801101c:	6010      	str	r0, [r2, #0]
 801101e:	e7da      	b.n	8010fd6 <_free_r+0x22>
 8011020:	d902      	bls.n	8011028 <_free_r+0x74>
 8011022:	230c      	movs	r3, #12
 8011024:	602b      	str	r3, [r5, #0]
 8011026:	e7d6      	b.n	8010fd6 <_free_r+0x22>
 8011028:	6820      	ldr	r0, [r4, #0]
 801102a:	1821      	adds	r1, r4, r0
 801102c:	428b      	cmp	r3, r1
 801102e:	bf04      	itt	eq
 8011030:	6819      	ldreq	r1, [r3, #0]
 8011032:	685b      	ldreq	r3, [r3, #4]
 8011034:	6063      	str	r3, [r4, #4]
 8011036:	bf04      	itt	eq
 8011038:	1809      	addeq	r1, r1, r0
 801103a:	6021      	streq	r1, [r4, #0]
 801103c:	6054      	str	r4, [r2, #4]
 801103e:	e7ca      	b.n	8010fd6 <_free_r+0x22>
 8011040:	bd38      	pop	{r3, r4, r5, pc}
 8011042:	bf00      	nop
 8011044:	2400baac 	.word	0x2400baac

08011048 <malloc>:
 8011048:	4b02      	ldr	r3, [pc, #8]	@ (8011054 <malloc+0xc>)
 801104a:	4601      	mov	r1, r0
 801104c:	6818      	ldr	r0, [r3, #0]
 801104e:	f000 b825 	b.w	801109c <_malloc_r>
 8011052:	bf00      	nop
 8011054:	2400003c 	.word	0x2400003c

08011058 <sbrk_aligned>:
 8011058:	b570      	push	{r4, r5, r6, lr}
 801105a:	4e0f      	ldr	r6, [pc, #60]	@ (8011098 <sbrk_aligned+0x40>)
 801105c:	460c      	mov	r4, r1
 801105e:	6831      	ldr	r1, [r6, #0]
 8011060:	4605      	mov	r5, r0
 8011062:	b911      	cbnz	r1, 801106a <sbrk_aligned+0x12>
 8011064:	f000 fe20 	bl	8011ca8 <_sbrk_r>
 8011068:	6030      	str	r0, [r6, #0]
 801106a:	4621      	mov	r1, r4
 801106c:	4628      	mov	r0, r5
 801106e:	f000 fe1b 	bl	8011ca8 <_sbrk_r>
 8011072:	1c43      	adds	r3, r0, #1
 8011074:	d103      	bne.n	801107e <sbrk_aligned+0x26>
 8011076:	f04f 34ff 	mov.w	r4, #4294967295
 801107a:	4620      	mov	r0, r4
 801107c:	bd70      	pop	{r4, r5, r6, pc}
 801107e:	1cc4      	adds	r4, r0, #3
 8011080:	f024 0403 	bic.w	r4, r4, #3
 8011084:	42a0      	cmp	r0, r4
 8011086:	d0f8      	beq.n	801107a <sbrk_aligned+0x22>
 8011088:	1a21      	subs	r1, r4, r0
 801108a:	4628      	mov	r0, r5
 801108c:	f000 fe0c 	bl	8011ca8 <_sbrk_r>
 8011090:	3001      	adds	r0, #1
 8011092:	d1f2      	bne.n	801107a <sbrk_aligned+0x22>
 8011094:	e7ef      	b.n	8011076 <sbrk_aligned+0x1e>
 8011096:	bf00      	nop
 8011098:	2400baa8 	.word	0x2400baa8

0801109c <_malloc_r>:
 801109c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80110a0:	1ccd      	adds	r5, r1, #3
 80110a2:	f025 0503 	bic.w	r5, r5, #3
 80110a6:	3508      	adds	r5, #8
 80110a8:	2d0c      	cmp	r5, #12
 80110aa:	bf38      	it	cc
 80110ac:	250c      	movcc	r5, #12
 80110ae:	2d00      	cmp	r5, #0
 80110b0:	4606      	mov	r6, r0
 80110b2:	db01      	blt.n	80110b8 <_malloc_r+0x1c>
 80110b4:	42a9      	cmp	r1, r5
 80110b6:	d904      	bls.n	80110c2 <_malloc_r+0x26>
 80110b8:	230c      	movs	r3, #12
 80110ba:	6033      	str	r3, [r6, #0]
 80110bc:	2000      	movs	r0, #0
 80110be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80110c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011198 <_malloc_r+0xfc>
 80110c6:	f000 f869 	bl	801119c <__malloc_lock>
 80110ca:	f8d8 3000 	ldr.w	r3, [r8]
 80110ce:	461c      	mov	r4, r3
 80110d0:	bb44      	cbnz	r4, 8011124 <_malloc_r+0x88>
 80110d2:	4629      	mov	r1, r5
 80110d4:	4630      	mov	r0, r6
 80110d6:	f7ff ffbf 	bl	8011058 <sbrk_aligned>
 80110da:	1c43      	adds	r3, r0, #1
 80110dc:	4604      	mov	r4, r0
 80110de:	d158      	bne.n	8011192 <_malloc_r+0xf6>
 80110e0:	f8d8 4000 	ldr.w	r4, [r8]
 80110e4:	4627      	mov	r7, r4
 80110e6:	2f00      	cmp	r7, #0
 80110e8:	d143      	bne.n	8011172 <_malloc_r+0xd6>
 80110ea:	2c00      	cmp	r4, #0
 80110ec:	d04b      	beq.n	8011186 <_malloc_r+0xea>
 80110ee:	6823      	ldr	r3, [r4, #0]
 80110f0:	4639      	mov	r1, r7
 80110f2:	4630      	mov	r0, r6
 80110f4:	eb04 0903 	add.w	r9, r4, r3
 80110f8:	f000 fdd6 	bl	8011ca8 <_sbrk_r>
 80110fc:	4581      	cmp	r9, r0
 80110fe:	d142      	bne.n	8011186 <_malloc_r+0xea>
 8011100:	6821      	ldr	r1, [r4, #0]
 8011102:	1a6d      	subs	r5, r5, r1
 8011104:	4629      	mov	r1, r5
 8011106:	4630      	mov	r0, r6
 8011108:	f7ff ffa6 	bl	8011058 <sbrk_aligned>
 801110c:	3001      	adds	r0, #1
 801110e:	d03a      	beq.n	8011186 <_malloc_r+0xea>
 8011110:	6823      	ldr	r3, [r4, #0]
 8011112:	442b      	add	r3, r5
 8011114:	6023      	str	r3, [r4, #0]
 8011116:	f8d8 3000 	ldr.w	r3, [r8]
 801111a:	685a      	ldr	r2, [r3, #4]
 801111c:	bb62      	cbnz	r2, 8011178 <_malloc_r+0xdc>
 801111e:	f8c8 7000 	str.w	r7, [r8]
 8011122:	e00f      	b.n	8011144 <_malloc_r+0xa8>
 8011124:	6822      	ldr	r2, [r4, #0]
 8011126:	1b52      	subs	r2, r2, r5
 8011128:	d420      	bmi.n	801116c <_malloc_r+0xd0>
 801112a:	2a0b      	cmp	r2, #11
 801112c:	d917      	bls.n	801115e <_malloc_r+0xc2>
 801112e:	1961      	adds	r1, r4, r5
 8011130:	42a3      	cmp	r3, r4
 8011132:	6025      	str	r5, [r4, #0]
 8011134:	bf18      	it	ne
 8011136:	6059      	strne	r1, [r3, #4]
 8011138:	6863      	ldr	r3, [r4, #4]
 801113a:	bf08      	it	eq
 801113c:	f8c8 1000 	streq.w	r1, [r8]
 8011140:	5162      	str	r2, [r4, r5]
 8011142:	604b      	str	r3, [r1, #4]
 8011144:	4630      	mov	r0, r6
 8011146:	f000 f82f 	bl	80111a8 <__malloc_unlock>
 801114a:	f104 000b 	add.w	r0, r4, #11
 801114e:	1d23      	adds	r3, r4, #4
 8011150:	f020 0007 	bic.w	r0, r0, #7
 8011154:	1ac2      	subs	r2, r0, r3
 8011156:	bf1c      	itt	ne
 8011158:	1a1b      	subne	r3, r3, r0
 801115a:	50a3      	strne	r3, [r4, r2]
 801115c:	e7af      	b.n	80110be <_malloc_r+0x22>
 801115e:	6862      	ldr	r2, [r4, #4]
 8011160:	42a3      	cmp	r3, r4
 8011162:	bf0c      	ite	eq
 8011164:	f8c8 2000 	streq.w	r2, [r8]
 8011168:	605a      	strne	r2, [r3, #4]
 801116a:	e7eb      	b.n	8011144 <_malloc_r+0xa8>
 801116c:	4623      	mov	r3, r4
 801116e:	6864      	ldr	r4, [r4, #4]
 8011170:	e7ae      	b.n	80110d0 <_malloc_r+0x34>
 8011172:	463c      	mov	r4, r7
 8011174:	687f      	ldr	r7, [r7, #4]
 8011176:	e7b6      	b.n	80110e6 <_malloc_r+0x4a>
 8011178:	461a      	mov	r2, r3
 801117a:	685b      	ldr	r3, [r3, #4]
 801117c:	42a3      	cmp	r3, r4
 801117e:	d1fb      	bne.n	8011178 <_malloc_r+0xdc>
 8011180:	2300      	movs	r3, #0
 8011182:	6053      	str	r3, [r2, #4]
 8011184:	e7de      	b.n	8011144 <_malloc_r+0xa8>
 8011186:	230c      	movs	r3, #12
 8011188:	6033      	str	r3, [r6, #0]
 801118a:	4630      	mov	r0, r6
 801118c:	f000 f80c 	bl	80111a8 <__malloc_unlock>
 8011190:	e794      	b.n	80110bc <_malloc_r+0x20>
 8011192:	6005      	str	r5, [r0, #0]
 8011194:	e7d6      	b.n	8011144 <_malloc_r+0xa8>
 8011196:	bf00      	nop
 8011198:	2400baac 	.word	0x2400baac

0801119c <__malloc_lock>:
 801119c:	4801      	ldr	r0, [pc, #4]	@ (80111a4 <__malloc_lock+0x8>)
 801119e:	f7ff beda 	b.w	8010f56 <__retarget_lock_acquire_recursive>
 80111a2:	bf00      	nop
 80111a4:	2400baa4 	.word	0x2400baa4

080111a8 <__malloc_unlock>:
 80111a8:	4801      	ldr	r0, [pc, #4]	@ (80111b0 <__malloc_unlock+0x8>)
 80111aa:	f7ff bed5 	b.w	8010f58 <__retarget_lock_release_recursive>
 80111ae:	bf00      	nop
 80111b0:	2400baa4 	.word	0x2400baa4

080111b4 <__ssputs_r>:
 80111b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80111b8:	688e      	ldr	r6, [r1, #8]
 80111ba:	461f      	mov	r7, r3
 80111bc:	42be      	cmp	r6, r7
 80111be:	680b      	ldr	r3, [r1, #0]
 80111c0:	4682      	mov	sl, r0
 80111c2:	460c      	mov	r4, r1
 80111c4:	4690      	mov	r8, r2
 80111c6:	d82d      	bhi.n	8011224 <__ssputs_r+0x70>
 80111c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80111cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80111d0:	d026      	beq.n	8011220 <__ssputs_r+0x6c>
 80111d2:	6965      	ldr	r5, [r4, #20]
 80111d4:	6909      	ldr	r1, [r1, #16]
 80111d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80111da:	eba3 0901 	sub.w	r9, r3, r1
 80111de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80111e2:	1c7b      	adds	r3, r7, #1
 80111e4:	444b      	add	r3, r9
 80111e6:	106d      	asrs	r5, r5, #1
 80111e8:	429d      	cmp	r5, r3
 80111ea:	bf38      	it	cc
 80111ec:	461d      	movcc	r5, r3
 80111ee:	0553      	lsls	r3, r2, #21
 80111f0:	d527      	bpl.n	8011242 <__ssputs_r+0x8e>
 80111f2:	4629      	mov	r1, r5
 80111f4:	f7ff ff52 	bl	801109c <_malloc_r>
 80111f8:	4606      	mov	r6, r0
 80111fa:	b360      	cbz	r0, 8011256 <__ssputs_r+0xa2>
 80111fc:	6921      	ldr	r1, [r4, #16]
 80111fe:	464a      	mov	r2, r9
 8011200:	f7ff feab 	bl	8010f5a <memcpy>
 8011204:	89a3      	ldrh	r3, [r4, #12]
 8011206:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801120a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801120e:	81a3      	strh	r3, [r4, #12]
 8011210:	6126      	str	r6, [r4, #16]
 8011212:	6165      	str	r5, [r4, #20]
 8011214:	444e      	add	r6, r9
 8011216:	eba5 0509 	sub.w	r5, r5, r9
 801121a:	6026      	str	r6, [r4, #0]
 801121c:	60a5      	str	r5, [r4, #8]
 801121e:	463e      	mov	r6, r7
 8011220:	42be      	cmp	r6, r7
 8011222:	d900      	bls.n	8011226 <__ssputs_r+0x72>
 8011224:	463e      	mov	r6, r7
 8011226:	6820      	ldr	r0, [r4, #0]
 8011228:	4632      	mov	r2, r6
 801122a:	4641      	mov	r1, r8
 801122c:	f7ff fdaf 	bl	8010d8e <memmove>
 8011230:	68a3      	ldr	r3, [r4, #8]
 8011232:	1b9b      	subs	r3, r3, r6
 8011234:	60a3      	str	r3, [r4, #8]
 8011236:	6823      	ldr	r3, [r4, #0]
 8011238:	4433      	add	r3, r6
 801123a:	6023      	str	r3, [r4, #0]
 801123c:	2000      	movs	r0, #0
 801123e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011242:	462a      	mov	r2, r5
 8011244:	f000 fd47 	bl	8011cd6 <_realloc_r>
 8011248:	4606      	mov	r6, r0
 801124a:	2800      	cmp	r0, #0
 801124c:	d1e0      	bne.n	8011210 <__ssputs_r+0x5c>
 801124e:	6921      	ldr	r1, [r4, #16]
 8011250:	4650      	mov	r0, sl
 8011252:	f7ff feaf 	bl	8010fb4 <_free_r>
 8011256:	230c      	movs	r3, #12
 8011258:	f8ca 3000 	str.w	r3, [sl]
 801125c:	89a3      	ldrh	r3, [r4, #12]
 801125e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011262:	81a3      	strh	r3, [r4, #12]
 8011264:	f04f 30ff 	mov.w	r0, #4294967295
 8011268:	e7e9      	b.n	801123e <__ssputs_r+0x8a>
	...

0801126c <_svfiprintf_r>:
 801126c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011270:	4698      	mov	r8, r3
 8011272:	898b      	ldrh	r3, [r1, #12]
 8011274:	061b      	lsls	r3, r3, #24
 8011276:	b09d      	sub	sp, #116	@ 0x74
 8011278:	4607      	mov	r7, r0
 801127a:	460d      	mov	r5, r1
 801127c:	4614      	mov	r4, r2
 801127e:	d510      	bpl.n	80112a2 <_svfiprintf_r+0x36>
 8011280:	690b      	ldr	r3, [r1, #16]
 8011282:	b973      	cbnz	r3, 80112a2 <_svfiprintf_r+0x36>
 8011284:	2140      	movs	r1, #64	@ 0x40
 8011286:	f7ff ff09 	bl	801109c <_malloc_r>
 801128a:	6028      	str	r0, [r5, #0]
 801128c:	6128      	str	r0, [r5, #16]
 801128e:	b930      	cbnz	r0, 801129e <_svfiprintf_r+0x32>
 8011290:	230c      	movs	r3, #12
 8011292:	603b      	str	r3, [r7, #0]
 8011294:	f04f 30ff 	mov.w	r0, #4294967295
 8011298:	b01d      	add	sp, #116	@ 0x74
 801129a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801129e:	2340      	movs	r3, #64	@ 0x40
 80112a0:	616b      	str	r3, [r5, #20]
 80112a2:	2300      	movs	r3, #0
 80112a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80112a6:	2320      	movs	r3, #32
 80112a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80112ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80112b0:	2330      	movs	r3, #48	@ 0x30
 80112b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011450 <_svfiprintf_r+0x1e4>
 80112b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80112ba:	f04f 0901 	mov.w	r9, #1
 80112be:	4623      	mov	r3, r4
 80112c0:	469a      	mov	sl, r3
 80112c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80112c6:	b10a      	cbz	r2, 80112cc <_svfiprintf_r+0x60>
 80112c8:	2a25      	cmp	r2, #37	@ 0x25
 80112ca:	d1f9      	bne.n	80112c0 <_svfiprintf_r+0x54>
 80112cc:	ebba 0b04 	subs.w	fp, sl, r4
 80112d0:	d00b      	beq.n	80112ea <_svfiprintf_r+0x7e>
 80112d2:	465b      	mov	r3, fp
 80112d4:	4622      	mov	r2, r4
 80112d6:	4629      	mov	r1, r5
 80112d8:	4638      	mov	r0, r7
 80112da:	f7ff ff6b 	bl	80111b4 <__ssputs_r>
 80112de:	3001      	adds	r0, #1
 80112e0:	f000 80a7 	beq.w	8011432 <_svfiprintf_r+0x1c6>
 80112e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80112e6:	445a      	add	r2, fp
 80112e8:	9209      	str	r2, [sp, #36]	@ 0x24
 80112ea:	f89a 3000 	ldrb.w	r3, [sl]
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	f000 809f 	beq.w	8011432 <_svfiprintf_r+0x1c6>
 80112f4:	2300      	movs	r3, #0
 80112f6:	f04f 32ff 	mov.w	r2, #4294967295
 80112fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80112fe:	f10a 0a01 	add.w	sl, sl, #1
 8011302:	9304      	str	r3, [sp, #16]
 8011304:	9307      	str	r3, [sp, #28]
 8011306:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801130a:	931a      	str	r3, [sp, #104]	@ 0x68
 801130c:	4654      	mov	r4, sl
 801130e:	2205      	movs	r2, #5
 8011310:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011314:	484e      	ldr	r0, [pc, #312]	@ (8011450 <_svfiprintf_r+0x1e4>)
 8011316:	f7ee ffeb 	bl	80002f0 <memchr>
 801131a:	9a04      	ldr	r2, [sp, #16]
 801131c:	b9d8      	cbnz	r0, 8011356 <_svfiprintf_r+0xea>
 801131e:	06d0      	lsls	r0, r2, #27
 8011320:	bf44      	itt	mi
 8011322:	2320      	movmi	r3, #32
 8011324:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011328:	0711      	lsls	r1, r2, #28
 801132a:	bf44      	itt	mi
 801132c:	232b      	movmi	r3, #43	@ 0x2b
 801132e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011332:	f89a 3000 	ldrb.w	r3, [sl]
 8011336:	2b2a      	cmp	r3, #42	@ 0x2a
 8011338:	d015      	beq.n	8011366 <_svfiprintf_r+0xfa>
 801133a:	9a07      	ldr	r2, [sp, #28]
 801133c:	4654      	mov	r4, sl
 801133e:	2000      	movs	r0, #0
 8011340:	f04f 0c0a 	mov.w	ip, #10
 8011344:	4621      	mov	r1, r4
 8011346:	f811 3b01 	ldrb.w	r3, [r1], #1
 801134a:	3b30      	subs	r3, #48	@ 0x30
 801134c:	2b09      	cmp	r3, #9
 801134e:	d94b      	bls.n	80113e8 <_svfiprintf_r+0x17c>
 8011350:	b1b0      	cbz	r0, 8011380 <_svfiprintf_r+0x114>
 8011352:	9207      	str	r2, [sp, #28]
 8011354:	e014      	b.n	8011380 <_svfiprintf_r+0x114>
 8011356:	eba0 0308 	sub.w	r3, r0, r8
 801135a:	fa09 f303 	lsl.w	r3, r9, r3
 801135e:	4313      	orrs	r3, r2
 8011360:	9304      	str	r3, [sp, #16]
 8011362:	46a2      	mov	sl, r4
 8011364:	e7d2      	b.n	801130c <_svfiprintf_r+0xa0>
 8011366:	9b03      	ldr	r3, [sp, #12]
 8011368:	1d19      	adds	r1, r3, #4
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	9103      	str	r1, [sp, #12]
 801136e:	2b00      	cmp	r3, #0
 8011370:	bfbb      	ittet	lt
 8011372:	425b      	neglt	r3, r3
 8011374:	f042 0202 	orrlt.w	r2, r2, #2
 8011378:	9307      	strge	r3, [sp, #28]
 801137a:	9307      	strlt	r3, [sp, #28]
 801137c:	bfb8      	it	lt
 801137e:	9204      	strlt	r2, [sp, #16]
 8011380:	7823      	ldrb	r3, [r4, #0]
 8011382:	2b2e      	cmp	r3, #46	@ 0x2e
 8011384:	d10a      	bne.n	801139c <_svfiprintf_r+0x130>
 8011386:	7863      	ldrb	r3, [r4, #1]
 8011388:	2b2a      	cmp	r3, #42	@ 0x2a
 801138a:	d132      	bne.n	80113f2 <_svfiprintf_r+0x186>
 801138c:	9b03      	ldr	r3, [sp, #12]
 801138e:	1d1a      	adds	r2, r3, #4
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	9203      	str	r2, [sp, #12]
 8011394:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011398:	3402      	adds	r4, #2
 801139a:	9305      	str	r3, [sp, #20]
 801139c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011460 <_svfiprintf_r+0x1f4>
 80113a0:	7821      	ldrb	r1, [r4, #0]
 80113a2:	2203      	movs	r2, #3
 80113a4:	4650      	mov	r0, sl
 80113a6:	f7ee ffa3 	bl	80002f0 <memchr>
 80113aa:	b138      	cbz	r0, 80113bc <_svfiprintf_r+0x150>
 80113ac:	9b04      	ldr	r3, [sp, #16]
 80113ae:	eba0 000a 	sub.w	r0, r0, sl
 80113b2:	2240      	movs	r2, #64	@ 0x40
 80113b4:	4082      	lsls	r2, r0
 80113b6:	4313      	orrs	r3, r2
 80113b8:	3401      	adds	r4, #1
 80113ba:	9304      	str	r3, [sp, #16]
 80113bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80113c0:	4824      	ldr	r0, [pc, #144]	@ (8011454 <_svfiprintf_r+0x1e8>)
 80113c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80113c6:	2206      	movs	r2, #6
 80113c8:	f7ee ff92 	bl	80002f0 <memchr>
 80113cc:	2800      	cmp	r0, #0
 80113ce:	d036      	beq.n	801143e <_svfiprintf_r+0x1d2>
 80113d0:	4b21      	ldr	r3, [pc, #132]	@ (8011458 <_svfiprintf_r+0x1ec>)
 80113d2:	bb1b      	cbnz	r3, 801141c <_svfiprintf_r+0x1b0>
 80113d4:	9b03      	ldr	r3, [sp, #12]
 80113d6:	3307      	adds	r3, #7
 80113d8:	f023 0307 	bic.w	r3, r3, #7
 80113dc:	3308      	adds	r3, #8
 80113de:	9303      	str	r3, [sp, #12]
 80113e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80113e2:	4433      	add	r3, r6
 80113e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80113e6:	e76a      	b.n	80112be <_svfiprintf_r+0x52>
 80113e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80113ec:	460c      	mov	r4, r1
 80113ee:	2001      	movs	r0, #1
 80113f0:	e7a8      	b.n	8011344 <_svfiprintf_r+0xd8>
 80113f2:	2300      	movs	r3, #0
 80113f4:	3401      	adds	r4, #1
 80113f6:	9305      	str	r3, [sp, #20]
 80113f8:	4619      	mov	r1, r3
 80113fa:	f04f 0c0a 	mov.w	ip, #10
 80113fe:	4620      	mov	r0, r4
 8011400:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011404:	3a30      	subs	r2, #48	@ 0x30
 8011406:	2a09      	cmp	r2, #9
 8011408:	d903      	bls.n	8011412 <_svfiprintf_r+0x1a6>
 801140a:	2b00      	cmp	r3, #0
 801140c:	d0c6      	beq.n	801139c <_svfiprintf_r+0x130>
 801140e:	9105      	str	r1, [sp, #20]
 8011410:	e7c4      	b.n	801139c <_svfiprintf_r+0x130>
 8011412:	fb0c 2101 	mla	r1, ip, r1, r2
 8011416:	4604      	mov	r4, r0
 8011418:	2301      	movs	r3, #1
 801141a:	e7f0      	b.n	80113fe <_svfiprintf_r+0x192>
 801141c:	ab03      	add	r3, sp, #12
 801141e:	9300      	str	r3, [sp, #0]
 8011420:	462a      	mov	r2, r5
 8011422:	4b0e      	ldr	r3, [pc, #56]	@ (801145c <_svfiprintf_r+0x1f0>)
 8011424:	a904      	add	r1, sp, #16
 8011426:	4638      	mov	r0, r7
 8011428:	f3af 8000 	nop.w
 801142c:	1c42      	adds	r2, r0, #1
 801142e:	4606      	mov	r6, r0
 8011430:	d1d6      	bne.n	80113e0 <_svfiprintf_r+0x174>
 8011432:	89ab      	ldrh	r3, [r5, #12]
 8011434:	065b      	lsls	r3, r3, #25
 8011436:	f53f af2d 	bmi.w	8011294 <_svfiprintf_r+0x28>
 801143a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801143c:	e72c      	b.n	8011298 <_svfiprintf_r+0x2c>
 801143e:	ab03      	add	r3, sp, #12
 8011440:	9300      	str	r3, [sp, #0]
 8011442:	462a      	mov	r2, r5
 8011444:	4b05      	ldr	r3, [pc, #20]	@ (801145c <_svfiprintf_r+0x1f0>)
 8011446:	a904      	add	r1, sp, #16
 8011448:	4638      	mov	r0, r7
 801144a:	f000 f9bb 	bl	80117c4 <_printf_i>
 801144e:	e7ed      	b.n	801142c <_svfiprintf_r+0x1c0>
 8011450:	08014b45 	.word	0x08014b45
 8011454:	08014b4f 	.word	0x08014b4f
 8011458:	00000000 	.word	0x00000000
 801145c:	080111b5 	.word	0x080111b5
 8011460:	08014b4b 	.word	0x08014b4b

08011464 <__sfputc_r>:
 8011464:	6893      	ldr	r3, [r2, #8]
 8011466:	3b01      	subs	r3, #1
 8011468:	2b00      	cmp	r3, #0
 801146a:	b410      	push	{r4}
 801146c:	6093      	str	r3, [r2, #8]
 801146e:	da08      	bge.n	8011482 <__sfputc_r+0x1e>
 8011470:	6994      	ldr	r4, [r2, #24]
 8011472:	42a3      	cmp	r3, r4
 8011474:	db01      	blt.n	801147a <__sfputc_r+0x16>
 8011476:	290a      	cmp	r1, #10
 8011478:	d103      	bne.n	8011482 <__sfputc_r+0x1e>
 801147a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801147e:	f000 bb7f 	b.w	8011b80 <__swbuf_r>
 8011482:	6813      	ldr	r3, [r2, #0]
 8011484:	1c58      	adds	r0, r3, #1
 8011486:	6010      	str	r0, [r2, #0]
 8011488:	7019      	strb	r1, [r3, #0]
 801148a:	4608      	mov	r0, r1
 801148c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011490:	4770      	bx	lr

08011492 <__sfputs_r>:
 8011492:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011494:	4606      	mov	r6, r0
 8011496:	460f      	mov	r7, r1
 8011498:	4614      	mov	r4, r2
 801149a:	18d5      	adds	r5, r2, r3
 801149c:	42ac      	cmp	r4, r5
 801149e:	d101      	bne.n	80114a4 <__sfputs_r+0x12>
 80114a0:	2000      	movs	r0, #0
 80114a2:	e007      	b.n	80114b4 <__sfputs_r+0x22>
 80114a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80114a8:	463a      	mov	r2, r7
 80114aa:	4630      	mov	r0, r6
 80114ac:	f7ff ffda 	bl	8011464 <__sfputc_r>
 80114b0:	1c43      	adds	r3, r0, #1
 80114b2:	d1f3      	bne.n	801149c <__sfputs_r+0xa>
 80114b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080114b8 <_vfiprintf_r>:
 80114b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114bc:	460d      	mov	r5, r1
 80114be:	b09d      	sub	sp, #116	@ 0x74
 80114c0:	4614      	mov	r4, r2
 80114c2:	4698      	mov	r8, r3
 80114c4:	4606      	mov	r6, r0
 80114c6:	b118      	cbz	r0, 80114d0 <_vfiprintf_r+0x18>
 80114c8:	6a03      	ldr	r3, [r0, #32]
 80114ca:	b90b      	cbnz	r3, 80114d0 <_vfiprintf_r+0x18>
 80114cc:	f7ff fb90 	bl	8010bf0 <__sinit>
 80114d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80114d2:	07d9      	lsls	r1, r3, #31
 80114d4:	d405      	bmi.n	80114e2 <_vfiprintf_r+0x2a>
 80114d6:	89ab      	ldrh	r3, [r5, #12]
 80114d8:	059a      	lsls	r2, r3, #22
 80114da:	d402      	bmi.n	80114e2 <_vfiprintf_r+0x2a>
 80114dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80114de:	f7ff fd3a 	bl	8010f56 <__retarget_lock_acquire_recursive>
 80114e2:	89ab      	ldrh	r3, [r5, #12]
 80114e4:	071b      	lsls	r3, r3, #28
 80114e6:	d501      	bpl.n	80114ec <_vfiprintf_r+0x34>
 80114e8:	692b      	ldr	r3, [r5, #16]
 80114ea:	b99b      	cbnz	r3, 8011514 <_vfiprintf_r+0x5c>
 80114ec:	4629      	mov	r1, r5
 80114ee:	4630      	mov	r0, r6
 80114f0:	f000 fb84 	bl	8011bfc <__swsetup_r>
 80114f4:	b170      	cbz	r0, 8011514 <_vfiprintf_r+0x5c>
 80114f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80114f8:	07dc      	lsls	r4, r3, #31
 80114fa:	d504      	bpl.n	8011506 <_vfiprintf_r+0x4e>
 80114fc:	f04f 30ff 	mov.w	r0, #4294967295
 8011500:	b01d      	add	sp, #116	@ 0x74
 8011502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011506:	89ab      	ldrh	r3, [r5, #12]
 8011508:	0598      	lsls	r0, r3, #22
 801150a:	d4f7      	bmi.n	80114fc <_vfiprintf_r+0x44>
 801150c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801150e:	f7ff fd23 	bl	8010f58 <__retarget_lock_release_recursive>
 8011512:	e7f3      	b.n	80114fc <_vfiprintf_r+0x44>
 8011514:	2300      	movs	r3, #0
 8011516:	9309      	str	r3, [sp, #36]	@ 0x24
 8011518:	2320      	movs	r3, #32
 801151a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801151e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011522:	2330      	movs	r3, #48	@ 0x30
 8011524:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80116d4 <_vfiprintf_r+0x21c>
 8011528:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801152c:	f04f 0901 	mov.w	r9, #1
 8011530:	4623      	mov	r3, r4
 8011532:	469a      	mov	sl, r3
 8011534:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011538:	b10a      	cbz	r2, 801153e <_vfiprintf_r+0x86>
 801153a:	2a25      	cmp	r2, #37	@ 0x25
 801153c:	d1f9      	bne.n	8011532 <_vfiprintf_r+0x7a>
 801153e:	ebba 0b04 	subs.w	fp, sl, r4
 8011542:	d00b      	beq.n	801155c <_vfiprintf_r+0xa4>
 8011544:	465b      	mov	r3, fp
 8011546:	4622      	mov	r2, r4
 8011548:	4629      	mov	r1, r5
 801154a:	4630      	mov	r0, r6
 801154c:	f7ff ffa1 	bl	8011492 <__sfputs_r>
 8011550:	3001      	adds	r0, #1
 8011552:	f000 80a7 	beq.w	80116a4 <_vfiprintf_r+0x1ec>
 8011556:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011558:	445a      	add	r2, fp
 801155a:	9209      	str	r2, [sp, #36]	@ 0x24
 801155c:	f89a 3000 	ldrb.w	r3, [sl]
 8011560:	2b00      	cmp	r3, #0
 8011562:	f000 809f 	beq.w	80116a4 <_vfiprintf_r+0x1ec>
 8011566:	2300      	movs	r3, #0
 8011568:	f04f 32ff 	mov.w	r2, #4294967295
 801156c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011570:	f10a 0a01 	add.w	sl, sl, #1
 8011574:	9304      	str	r3, [sp, #16]
 8011576:	9307      	str	r3, [sp, #28]
 8011578:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801157c:	931a      	str	r3, [sp, #104]	@ 0x68
 801157e:	4654      	mov	r4, sl
 8011580:	2205      	movs	r2, #5
 8011582:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011586:	4853      	ldr	r0, [pc, #332]	@ (80116d4 <_vfiprintf_r+0x21c>)
 8011588:	f7ee feb2 	bl	80002f0 <memchr>
 801158c:	9a04      	ldr	r2, [sp, #16]
 801158e:	b9d8      	cbnz	r0, 80115c8 <_vfiprintf_r+0x110>
 8011590:	06d1      	lsls	r1, r2, #27
 8011592:	bf44      	itt	mi
 8011594:	2320      	movmi	r3, #32
 8011596:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801159a:	0713      	lsls	r3, r2, #28
 801159c:	bf44      	itt	mi
 801159e:	232b      	movmi	r3, #43	@ 0x2b
 80115a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80115a4:	f89a 3000 	ldrb.w	r3, [sl]
 80115a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80115aa:	d015      	beq.n	80115d8 <_vfiprintf_r+0x120>
 80115ac:	9a07      	ldr	r2, [sp, #28]
 80115ae:	4654      	mov	r4, sl
 80115b0:	2000      	movs	r0, #0
 80115b2:	f04f 0c0a 	mov.w	ip, #10
 80115b6:	4621      	mov	r1, r4
 80115b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80115bc:	3b30      	subs	r3, #48	@ 0x30
 80115be:	2b09      	cmp	r3, #9
 80115c0:	d94b      	bls.n	801165a <_vfiprintf_r+0x1a2>
 80115c2:	b1b0      	cbz	r0, 80115f2 <_vfiprintf_r+0x13a>
 80115c4:	9207      	str	r2, [sp, #28]
 80115c6:	e014      	b.n	80115f2 <_vfiprintf_r+0x13a>
 80115c8:	eba0 0308 	sub.w	r3, r0, r8
 80115cc:	fa09 f303 	lsl.w	r3, r9, r3
 80115d0:	4313      	orrs	r3, r2
 80115d2:	9304      	str	r3, [sp, #16]
 80115d4:	46a2      	mov	sl, r4
 80115d6:	e7d2      	b.n	801157e <_vfiprintf_r+0xc6>
 80115d8:	9b03      	ldr	r3, [sp, #12]
 80115da:	1d19      	adds	r1, r3, #4
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	9103      	str	r1, [sp, #12]
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	bfbb      	ittet	lt
 80115e4:	425b      	neglt	r3, r3
 80115e6:	f042 0202 	orrlt.w	r2, r2, #2
 80115ea:	9307      	strge	r3, [sp, #28]
 80115ec:	9307      	strlt	r3, [sp, #28]
 80115ee:	bfb8      	it	lt
 80115f0:	9204      	strlt	r2, [sp, #16]
 80115f2:	7823      	ldrb	r3, [r4, #0]
 80115f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80115f6:	d10a      	bne.n	801160e <_vfiprintf_r+0x156>
 80115f8:	7863      	ldrb	r3, [r4, #1]
 80115fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80115fc:	d132      	bne.n	8011664 <_vfiprintf_r+0x1ac>
 80115fe:	9b03      	ldr	r3, [sp, #12]
 8011600:	1d1a      	adds	r2, r3, #4
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	9203      	str	r2, [sp, #12]
 8011606:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801160a:	3402      	adds	r4, #2
 801160c:	9305      	str	r3, [sp, #20]
 801160e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80116e4 <_vfiprintf_r+0x22c>
 8011612:	7821      	ldrb	r1, [r4, #0]
 8011614:	2203      	movs	r2, #3
 8011616:	4650      	mov	r0, sl
 8011618:	f7ee fe6a 	bl	80002f0 <memchr>
 801161c:	b138      	cbz	r0, 801162e <_vfiprintf_r+0x176>
 801161e:	9b04      	ldr	r3, [sp, #16]
 8011620:	eba0 000a 	sub.w	r0, r0, sl
 8011624:	2240      	movs	r2, #64	@ 0x40
 8011626:	4082      	lsls	r2, r0
 8011628:	4313      	orrs	r3, r2
 801162a:	3401      	adds	r4, #1
 801162c:	9304      	str	r3, [sp, #16]
 801162e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011632:	4829      	ldr	r0, [pc, #164]	@ (80116d8 <_vfiprintf_r+0x220>)
 8011634:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011638:	2206      	movs	r2, #6
 801163a:	f7ee fe59 	bl	80002f0 <memchr>
 801163e:	2800      	cmp	r0, #0
 8011640:	d03f      	beq.n	80116c2 <_vfiprintf_r+0x20a>
 8011642:	4b26      	ldr	r3, [pc, #152]	@ (80116dc <_vfiprintf_r+0x224>)
 8011644:	bb1b      	cbnz	r3, 801168e <_vfiprintf_r+0x1d6>
 8011646:	9b03      	ldr	r3, [sp, #12]
 8011648:	3307      	adds	r3, #7
 801164a:	f023 0307 	bic.w	r3, r3, #7
 801164e:	3308      	adds	r3, #8
 8011650:	9303      	str	r3, [sp, #12]
 8011652:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011654:	443b      	add	r3, r7
 8011656:	9309      	str	r3, [sp, #36]	@ 0x24
 8011658:	e76a      	b.n	8011530 <_vfiprintf_r+0x78>
 801165a:	fb0c 3202 	mla	r2, ip, r2, r3
 801165e:	460c      	mov	r4, r1
 8011660:	2001      	movs	r0, #1
 8011662:	e7a8      	b.n	80115b6 <_vfiprintf_r+0xfe>
 8011664:	2300      	movs	r3, #0
 8011666:	3401      	adds	r4, #1
 8011668:	9305      	str	r3, [sp, #20]
 801166a:	4619      	mov	r1, r3
 801166c:	f04f 0c0a 	mov.w	ip, #10
 8011670:	4620      	mov	r0, r4
 8011672:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011676:	3a30      	subs	r2, #48	@ 0x30
 8011678:	2a09      	cmp	r2, #9
 801167a:	d903      	bls.n	8011684 <_vfiprintf_r+0x1cc>
 801167c:	2b00      	cmp	r3, #0
 801167e:	d0c6      	beq.n	801160e <_vfiprintf_r+0x156>
 8011680:	9105      	str	r1, [sp, #20]
 8011682:	e7c4      	b.n	801160e <_vfiprintf_r+0x156>
 8011684:	fb0c 2101 	mla	r1, ip, r1, r2
 8011688:	4604      	mov	r4, r0
 801168a:	2301      	movs	r3, #1
 801168c:	e7f0      	b.n	8011670 <_vfiprintf_r+0x1b8>
 801168e:	ab03      	add	r3, sp, #12
 8011690:	9300      	str	r3, [sp, #0]
 8011692:	462a      	mov	r2, r5
 8011694:	4b12      	ldr	r3, [pc, #72]	@ (80116e0 <_vfiprintf_r+0x228>)
 8011696:	a904      	add	r1, sp, #16
 8011698:	4630      	mov	r0, r6
 801169a:	f3af 8000 	nop.w
 801169e:	4607      	mov	r7, r0
 80116a0:	1c78      	adds	r0, r7, #1
 80116a2:	d1d6      	bne.n	8011652 <_vfiprintf_r+0x19a>
 80116a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80116a6:	07d9      	lsls	r1, r3, #31
 80116a8:	d405      	bmi.n	80116b6 <_vfiprintf_r+0x1fe>
 80116aa:	89ab      	ldrh	r3, [r5, #12]
 80116ac:	059a      	lsls	r2, r3, #22
 80116ae:	d402      	bmi.n	80116b6 <_vfiprintf_r+0x1fe>
 80116b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80116b2:	f7ff fc51 	bl	8010f58 <__retarget_lock_release_recursive>
 80116b6:	89ab      	ldrh	r3, [r5, #12]
 80116b8:	065b      	lsls	r3, r3, #25
 80116ba:	f53f af1f 	bmi.w	80114fc <_vfiprintf_r+0x44>
 80116be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80116c0:	e71e      	b.n	8011500 <_vfiprintf_r+0x48>
 80116c2:	ab03      	add	r3, sp, #12
 80116c4:	9300      	str	r3, [sp, #0]
 80116c6:	462a      	mov	r2, r5
 80116c8:	4b05      	ldr	r3, [pc, #20]	@ (80116e0 <_vfiprintf_r+0x228>)
 80116ca:	a904      	add	r1, sp, #16
 80116cc:	4630      	mov	r0, r6
 80116ce:	f000 f879 	bl	80117c4 <_printf_i>
 80116d2:	e7e4      	b.n	801169e <_vfiprintf_r+0x1e6>
 80116d4:	08014b45 	.word	0x08014b45
 80116d8:	08014b4f 	.word	0x08014b4f
 80116dc:	00000000 	.word	0x00000000
 80116e0:	08011493 	.word	0x08011493
 80116e4:	08014b4b 	.word	0x08014b4b

080116e8 <_printf_common>:
 80116e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116ec:	4616      	mov	r6, r2
 80116ee:	4698      	mov	r8, r3
 80116f0:	688a      	ldr	r2, [r1, #8]
 80116f2:	690b      	ldr	r3, [r1, #16]
 80116f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80116f8:	4293      	cmp	r3, r2
 80116fa:	bfb8      	it	lt
 80116fc:	4613      	movlt	r3, r2
 80116fe:	6033      	str	r3, [r6, #0]
 8011700:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011704:	4607      	mov	r7, r0
 8011706:	460c      	mov	r4, r1
 8011708:	b10a      	cbz	r2, 801170e <_printf_common+0x26>
 801170a:	3301      	adds	r3, #1
 801170c:	6033      	str	r3, [r6, #0]
 801170e:	6823      	ldr	r3, [r4, #0]
 8011710:	0699      	lsls	r1, r3, #26
 8011712:	bf42      	ittt	mi
 8011714:	6833      	ldrmi	r3, [r6, #0]
 8011716:	3302      	addmi	r3, #2
 8011718:	6033      	strmi	r3, [r6, #0]
 801171a:	6825      	ldr	r5, [r4, #0]
 801171c:	f015 0506 	ands.w	r5, r5, #6
 8011720:	d106      	bne.n	8011730 <_printf_common+0x48>
 8011722:	f104 0a19 	add.w	sl, r4, #25
 8011726:	68e3      	ldr	r3, [r4, #12]
 8011728:	6832      	ldr	r2, [r6, #0]
 801172a:	1a9b      	subs	r3, r3, r2
 801172c:	42ab      	cmp	r3, r5
 801172e:	dc26      	bgt.n	801177e <_printf_common+0x96>
 8011730:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011734:	6822      	ldr	r2, [r4, #0]
 8011736:	3b00      	subs	r3, #0
 8011738:	bf18      	it	ne
 801173a:	2301      	movne	r3, #1
 801173c:	0692      	lsls	r2, r2, #26
 801173e:	d42b      	bmi.n	8011798 <_printf_common+0xb0>
 8011740:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011744:	4641      	mov	r1, r8
 8011746:	4638      	mov	r0, r7
 8011748:	47c8      	blx	r9
 801174a:	3001      	adds	r0, #1
 801174c:	d01e      	beq.n	801178c <_printf_common+0xa4>
 801174e:	6823      	ldr	r3, [r4, #0]
 8011750:	6922      	ldr	r2, [r4, #16]
 8011752:	f003 0306 	and.w	r3, r3, #6
 8011756:	2b04      	cmp	r3, #4
 8011758:	bf02      	ittt	eq
 801175a:	68e5      	ldreq	r5, [r4, #12]
 801175c:	6833      	ldreq	r3, [r6, #0]
 801175e:	1aed      	subeq	r5, r5, r3
 8011760:	68a3      	ldr	r3, [r4, #8]
 8011762:	bf0c      	ite	eq
 8011764:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011768:	2500      	movne	r5, #0
 801176a:	4293      	cmp	r3, r2
 801176c:	bfc4      	itt	gt
 801176e:	1a9b      	subgt	r3, r3, r2
 8011770:	18ed      	addgt	r5, r5, r3
 8011772:	2600      	movs	r6, #0
 8011774:	341a      	adds	r4, #26
 8011776:	42b5      	cmp	r5, r6
 8011778:	d11a      	bne.n	80117b0 <_printf_common+0xc8>
 801177a:	2000      	movs	r0, #0
 801177c:	e008      	b.n	8011790 <_printf_common+0xa8>
 801177e:	2301      	movs	r3, #1
 8011780:	4652      	mov	r2, sl
 8011782:	4641      	mov	r1, r8
 8011784:	4638      	mov	r0, r7
 8011786:	47c8      	blx	r9
 8011788:	3001      	adds	r0, #1
 801178a:	d103      	bne.n	8011794 <_printf_common+0xac>
 801178c:	f04f 30ff 	mov.w	r0, #4294967295
 8011790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011794:	3501      	adds	r5, #1
 8011796:	e7c6      	b.n	8011726 <_printf_common+0x3e>
 8011798:	18e1      	adds	r1, r4, r3
 801179a:	1c5a      	adds	r2, r3, #1
 801179c:	2030      	movs	r0, #48	@ 0x30
 801179e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80117a2:	4422      	add	r2, r4
 80117a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80117a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80117ac:	3302      	adds	r3, #2
 80117ae:	e7c7      	b.n	8011740 <_printf_common+0x58>
 80117b0:	2301      	movs	r3, #1
 80117b2:	4622      	mov	r2, r4
 80117b4:	4641      	mov	r1, r8
 80117b6:	4638      	mov	r0, r7
 80117b8:	47c8      	blx	r9
 80117ba:	3001      	adds	r0, #1
 80117bc:	d0e6      	beq.n	801178c <_printf_common+0xa4>
 80117be:	3601      	adds	r6, #1
 80117c0:	e7d9      	b.n	8011776 <_printf_common+0x8e>
	...

080117c4 <_printf_i>:
 80117c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80117c8:	7e0f      	ldrb	r7, [r1, #24]
 80117ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80117cc:	2f78      	cmp	r7, #120	@ 0x78
 80117ce:	4691      	mov	r9, r2
 80117d0:	4680      	mov	r8, r0
 80117d2:	460c      	mov	r4, r1
 80117d4:	469a      	mov	sl, r3
 80117d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80117da:	d807      	bhi.n	80117ec <_printf_i+0x28>
 80117dc:	2f62      	cmp	r7, #98	@ 0x62
 80117de:	d80a      	bhi.n	80117f6 <_printf_i+0x32>
 80117e0:	2f00      	cmp	r7, #0
 80117e2:	f000 80d2 	beq.w	801198a <_printf_i+0x1c6>
 80117e6:	2f58      	cmp	r7, #88	@ 0x58
 80117e8:	f000 80b9 	beq.w	801195e <_printf_i+0x19a>
 80117ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80117f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80117f4:	e03a      	b.n	801186c <_printf_i+0xa8>
 80117f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80117fa:	2b15      	cmp	r3, #21
 80117fc:	d8f6      	bhi.n	80117ec <_printf_i+0x28>
 80117fe:	a101      	add	r1, pc, #4	@ (adr r1, 8011804 <_printf_i+0x40>)
 8011800:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011804:	0801185d 	.word	0x0801185d
 8011808:	08011871 	.word	0x08011871
 801180c:	080117ed 	.word	0x080117ed
 8011810:	080117ed 	.word	0x080117ed
 8011814:	080117ed 	.word	0x080117ed
 8011818:	080117ed 	.word	0x080117ed
 801181c:	08011871 	.word	0x08011871
 8011820:	080117ed 	.word	0x080117ed
 8011824:	080117ed 	.word	0x080117ed
 8011828:	080117ed 	.word	0x080117ed
 801182c:	080117ed 	.word	0x080117ed
 8011830:	08011971 	.word	0x08011971
 8011834:	0801189b 	.word	0x0801189b
 8011838:	0801192b 	.word	0x0801192b
 801183c:	080117ed 	.word	0x080117ed
 8011840:	080117ed 	.word	0x080117ed
 8011844:	08011993 	.word	0x08011993
 8011848:	080117ed 	.word	0x080117ed
 801184c:	0801189b 	.word	0x0801189b
 8011850:	080117ed 	.word	0x080117ed
 8011854:	080117ed 	.word	0x080117ed
 8011858:	08011933 	.word	0x08011933
 801185c:	6833      	ldr	r3, [r6, #0]
 801185e:	1d1a      	adds	r2, r3, #4
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	6032      	str	r2, [r6, #0]
 8011864:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011868:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801186c:	2301      	movs	r3, #1
 801186e:	e09d      	b.n	80119ac <_printf_i+0x1e8>
 8011870:	6833      	ldr	r3, [r6, #0]
 8011872:	6820      	ldr	r0, [r4, #0]
 8011874:	1d19      	adds	r1, r3, #4
 8011876:	6031      	str	r1, [r6, #0]
 8011878:	0606      	lsls	r6, r0, #24
 801187a:	d501      	bpl.n	8011880 <_printf_i+0xbc>
 801187c:	681d      	ldr	r5, [r3, #0]
 801187e:	e003      	b.n	8011888 <_printf_i+0xc4>
 8011880:	0645      	lsls	r5, r0, #25
 8011882:	d5fb      	bpl.n	801187c <_printf_i+0xb8>
 8011884:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011888:	2d00      	cmp	r5, #0
 801188a:	da03      	bge.n	8011894 <_printf_i+0xd0>
 801188c:	232d      	movs	r3, #45	@ 0x2d
 801188e:	426d      	negs	r5, r5
 8011890:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011894:	4859      	ldr	r0, [pc, #356]	@ (80119fc <_printf_i+0x238>)
 8011896:	230a      	movs	r3, #10
 8011898:	e011      	b.n	80118be <_printf_i+0xfa>
 801189a:	6821      	ldr	r1, [r4, #0]
 801189c:	6833      	ldr	r3, [r6, #0]
 801189e:	0608      	lsls	r0, r1, #24
 80118a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80118a4:	d402      	bmi.n	80118ac <_printf_i+0xe8>
 80118a6:	0649      	lsls	r1, r1, #25
 80118a8:	bf48      	it	mi
 80118aa:	b2ad      	uxthmi	r5, r5
 80118ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80118ae:	4853      	ldr	r0, [pc, #332]	@ (80119fc <_printf_i+0x238>)
 80118b0:	6033      	str	r3, [r6, #0]
 80118b2:	bf14      	ite	ne
 80118b4:	230a      	movne	r3, #10
 80118b6:	2308      	moveq	r3, #8
 80118b8:	2100      	movs	r1, #0
 80118ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80118be:	6866      	ldr	r6, [r4, #4]
 80118c0:	60a6      	str	r6, [r4, #8]
 80118c2:	2e00      	cmp	r6, #0
 80118c4:	bfa2      	ittt	ge
 80118c6:	6821      	ldrge	r1, [r4, #0]
 80118c8:	f021 0104 	bicge.w	r1, r1, #4
 80118cc:	6021      	strge	r1, [r4, #0]
 80118ce:	b90d      	cbnz	r5, 80118d4 <_printf_i+0x110>
 80118d0:	2e00      	cmp	r6, #0
 80118d2:	d04b      	beq.n	801196c <_printf_i+0x1a8>
 80118d4:	4616      	mov	r6, r2
 80118d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80118da:	fb03 5711 	mls	r7, r3, r1, r5
 80118de:	5dc7      	ldrb	r7, [r0, r7]
 80118e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80118e4:	462f      	mov	r7, r5
 80118e6:	42bb      	cmp	r3, r7
 80118e8:	460d      	mov	r5, r1
 80118ea:	d9f4      	bls.n	80118d6 <_printf_i+0x112>
 80118ec:	2b08      	cmp	r3, #8
 80118ee:	d10b      	bne.n	8011908 <_printf_i+0x144>
 80118f0:	6823      	ldr	r3, [r4, #0]
 80118f2:	07df      	lsls	r7, r3, #31
 80118f4:	d508      	bpl.n	8011908 <_printf_i+0x144>
 80118f6:	6923      	ldr	r3, [r4, #16]
 80118f8:	6861      	ldr	r1, [r4, #4]
 80118fa:	4299      	cmp	r1, r3
 80118fc:	bfde      	ittt	le
 80118fe:	2330      	movle	r3, #48	@ 0x30
 8011900:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011904:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011908:	1b92      	subs	r2, r2, r6
 801190a:	6122      	str	r2, [r4, #16]
 801190c:	f8cd a000 	str.w	sl, [sp]
 8011910:	464b      	mov	r3, r9
 8011912:	aa03      	add	r2, sp, #12
 8011914:	4621      	mov	r1, r4
 8011916:	4640      	mov	r0, r8
 8011918:	f7ff fee6 	bl	80116e8 <_printf_common>
 801191c:	3001      	adds	r0, #1
 801191e:	d14a      	bne.n	80119b6 <_printf_i+0x1f2>
 8011920:	f04f 30ff 	mov.w	r0, #4294967295
 8011924:	b004      	add	sp, #16
 8011926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801192a:	6823      	ldr	r3, [r4, #0]
 801192c:	f043 0320 	orr.w	r3, r3, #32
 8011930:	6023      	str	r3, [r4, #0]
 8011932:	4833      	ldr	r0, [pc, #204]	@ (8011a00 <_printf_i+0x23c>)
 8011934:	2778      	movs	r7, #120	@ 0x78
 8011936:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801193a:	6823      	ldr	r3, [r4, #0]
 801193c:	6831      	ldr	r1, [r6, #0]
 801193e:	061f      	lsls	r7, r3, #24
 8011940:	f851 5b04 	ldr.w	r5, [r1], #4
 8011944:	d402      	bmi.n	801194c <_printf_i+0x188>
 8011946:	065f      	lsls	r7, r3, #25
 8011948:	bf48      	it	mi
 801194a:	b2ad      	uxthmi	r5, r5
 801194c:	6031      	str	r1, [r6, #0]
 801194e:	07d9      	lsls	r1, r3, #31
 8011950:	bf44      	itt	mi
 8011952:	f043 0320 	orrmi.w	r3, r3, #32
 8011956:	6023      	strmi	r3, [r4, #0]
 8011958:	b11d      	cbz	r5, 8011962 <_printf_i+0x19e>
 801195a:	2310      	movs	r3, #16
 801195c:	e7ac      	b.n	80118b8 <_printf_i+0xf4>
 801195e:	4827      	ldr	r0, [pc, #156]	@ (80119fc <_printf_i+0x238>)
 8011960:	e7e9      	b.n	8011936 <_printf_i+0x172>
 8011962:	6823      	ldr	r3, [r4, #0]
 8011964:	f023 0320 	bic.w	r3, r3, #32
 8011968:	6023      	str	r3, [r4, #0]
 801196a:	e7f6      	b.n	801195a <_printf_i+0x196>
 801196c:	4616      	mov	r6, r2
 801196e:	e7bd      	b.n	80118ec <_printf_i+0x128>
 8011970:	6833      	ldr	r3, [r6, #0]
 8011972:	6825      	ldr	r5, [r4, #0]
 8011974:	6961      	ldr	r1, [r4, #20]
 8011976:	1d18      	adds	r0, r3, #4
 8011978:	6030      	str	r0, [r6, #0]
 801197a:	062e      	lsls	r6, r5, #24
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	d501      	bpl.n	8011984 <_printf_i+0x1c0>
 8011980:	6019      	str	r1, [r3, #0]
 8011982:	e002      	b.n	801198a <_printf_i+0x1c6>
 8011984:	0668      	lsls	r0, r5, #25
 8011986:	d5fb      	bpl.n	8011980 <_printf_i+0x1bc>
 8011988:	8019      	strh	r1, [r3, #0]
 801198a:	2300      	movs	r3, #0
 801198c:	6123      	str	r3, [r4, #16]
 801198e:	4616      	mov	r6, r2
 8011990:	e7bc      	b.n	801190c <_printf_i+0x148>
 8011992:	6833      	ldr	r3, [r6, #0]
 8011994:	1d1a      	adds	r2, r3, #4
 8011996:	6032      	str	r2, [r6, #0]
 8011998:	681e      	ldr	r6, [r3, #0]
 801199a:	6862      	ldr	r2, [r4, #4]
 801199c:	2100      	movs	r1, #0
 801199e:	4630      	mov	r0, r6
 80119a0:	f7ee fca6 	bl	80002f0 <memchr>
 80119a4:	b108      	cbz	r0, 80119aa <_printf_i+0x1e6>
 80119a6:	1b80      	subs	r0, r0, r6
 80119a8:	6060      	str	r0, [r4, #4]
 80119aa:	6863      	ldr	r3, [r4, #4]
 80119ac:	6123      	str	r3, [r4, #16]
 80119ae:	2300      	movs	r3, #0
 80119b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80119b4:	e7aa      	b.n	801190c <_printf_i+0x148>
 80119b6:	6923      	ldr	r3, [r4, #16]
 80119b8:	4632      	mov	r2, r6
 80119ba:	4649      	mov	r1, r9
 80119bc:	4640      	mov	r0, r8
 80119be:	47d0      	blx	sl
 80119c0:	3001      	adds	r0, #1
 80119c2:	d0ad      	beq.n	8011920 <_printf_i+0x15c>
 80119c4:	6823      	ldr	r3, [r4, #0]
 80119c6:	079b      	lsls	r3, r3, #30
 80119c8:	d413      	bmi.n	80119f2 <_printf_i+0x22e>
 80119ca:	68e0      	ldr	r0, [r4, #12]
 80119cc:	9b03      	ldr	r3, [sp, #12]
 80119ce:	4298      	cmp	r0, r3
 80119d0:	bfb8      	it	lt
 80119d2:	4618      	movlt	r0, r3
 80119d4:	e7a6      	b.n	8011924 <_printf_i+0x160>
 80119d6:	2301      	movs	r3, #1
 80119d8:	4632      	mov	r2, r6
 80119da:	4649      	mov	r1, r9
 80119dc:	4640      	mov	r0, r8
 80119de:	47d0      	blx	sl
 80119e0:	3001      	adds	r0, #1
 80119e2:	d09d      	beq.n	8011920 <_printf_i+0x15c>
 80119e4:	3501      	adds	r5, #1
 80119e6:	68e3      	ldr	r3, [r4, #12]
 80119e8:	9903      	ldr	r1, [sp, #12]
 80119ea:	1a5b      	subs	r3, r3, r1
 80119ec:	42ab      	cmp	r3, r5
 80119ee:	dcf2      	bgt.n	80119d6 <_printf_i+0x212>
 80119f0:	e7eb      	b.n	80119ca <_printf_i+0x206>
 80119f2:	2500      	movs	r5, #0
 80119f4:	f104 0619 	add.w	r6, r4, #25
 80119f8:	e7f5      	b.n	80119e6 <_printf_i+0x222>
 80119fa:	bf00      	nop
 80119fc:	08014b56 	.word	0x08014b56
 8011a00:	08014b67 	.word	0x08014b67

08011a04 <__sflush_r>:
 8011a04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a0c:	0716      	lsls	r6, r2, #28
 8011a0e:	4605      	mov	r5, r0
 8011a10:	460c      	mov	r4, r1
 8011a12:	d454      	bmi.n	8011abe <__sflush_r+0xba>
 8011a14:	684b      	ldr	r3, [r1, #4]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	dc02      	bgt.n	8011a20 <__sflush_r+0x1c>
 8011a1a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	dd48      	ble.n	8011ab2 <__sflush_r+0xae>
 8011a20:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011a22:	2e00      	cmp	r6, #0
 8011a24:	d045      	beq.n	8011ab2 <__sflush_r+0xae>
 8011a26:	2300      	movs	r3, #0
 8011a28:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011a2c:	682f      	ldr	r7, [r5, #0]
 8011a2e:	6a21      	ldr	r1, [r4, #32]
 8011a30:	602b      	str	r3, [r5, #0]
 8011a32:	d030      	beq.n	8011a96 <__sflush_r+0x92>
 8011a34:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011a36:	89a3      	ldrh	r3, [r4, #12]
 8011a38:	0759      	lsls	r1, r3, #29
 8011a3a:	d505      	bpl.n	8011a48 <__sflush_r+0x44>
 8011a3c:	6863      	ldr	r3, [r4, #4]
 8011a3e:	1ad2      	subs	r2, r2, r3
 8011a40:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011a42:	b10b      	cbz	r3, 8011a48 <__sflush_r+0x44>
 8011a44:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011a46:	1ad2      	subs	r2, r2, r3
 8011a48:	2300      	movs	r3, #0
 8011a4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011a4c:	6a21      	ldr	r1, [r4, #32]
 8011a4e:	4628      	mov	r0, r5
 8011a50:	47b0      	blx	r6
 8011a52:	1c43      	adds	r3, r0, #1
 8011a54:	89a3      	ldrh	r3, [r4, #12]
 8011a56:	d106      	bne.n	8011a66 <__sflush_r+0x62>
 8011a58:	6829      	ldr	r1, [r5, #0]
 8011a5a:	291d      	cmp	r1, #29
 8011a5c:	d82b      	bhi.n	8011ab6 <__sflush_r+0xb2>
 8011a5e:	4a2a      	ldr	r2, [pc, #168]	@ (8011b08 <__sflush_r+0x104>)
 8011a60:	410a      	asrs	r2, r1
 8011a62:	07d6      	lsls	r6, r2, #31
 8011a64:	d427      	bmi.n	8011ab6 <__sflush_r+0xb2>
 8011a66:	2200      	movs	r2, #0
 8011a68:	6062      	str	r2, [r4, #4]
 8011a6a:	04d9      	lsls	r1, r3, #19
 8011a6c:	6922      	ldr	r2, [r4, #16]
 8011a6e:	6022      	str	r2, [r4, #0]
 8011a70:	d504      	bpl.n	8011a7c <__sflush_r+0x78>
 8011a72:	1c42      	adds	r2, r0, #1
 8011a74:	d101      	bne.n	8011a7a <__sflush_r+0x76>
 8011a76:	682b      	ldr	r3, [r5, #0]
 8011a78:	b903      	cbnz	r3, 8011a7c <__sflush_r+0x78>
 8011a7a:	6560      	str	r0, [r4, #84]	@ 0x54
 8011a7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011a7e:	602f      	str	r7, [r5, #0]
 8011a80:	b1b9      	cbz	r1, 8011ab2 <__sflush_r+0xae>
 8011a82:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011a86:	4299      	cmp	r1, r3
 8011a88:	d002      	beq.n	8011a90 <__sflush_r+0x8c>
 8011a8a:	4628      	mov	r0, r5
 8011a8c:	f7ff fa92 	bl	8010fb4 <_free_r>
 8011a90:	2300      	movs	r3, #0
 8011a92:	6363      	str	r3, [r4, #52]	@ 0x34
 8011a94:	e00d      	b.n	8011ab2 <__sflush_r+0xae>
 8011a96:	2301      	movs	r3, #1
 8011a98:	4628      	mov	r0, r5
 8011a9a:	47b0      	blx	r6
 8011a9c:	4602      	mov	r2, r0
 8011a9e:	1c50      	adds	r0, r2, #1
 8011aa0:	d1c9      	bne.n	8011a36 <__sflush_r+0x32>
 8011aa2:	682b      	ldr	r3, [r5, #0]
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d0c6      	beq.n	8011a36 <__sflush_r+0x32>
 8011aa8:	2b1d      	cmp	r3, #29
 8011aaa:	d001      	beq.n	8011ab0 <__sflush_r+0xac>
 8011aac:	2b16      	cmp	r3, #22
 8011aae:	d11e      	bne.n	8011aee <__sflush_r+0xea>
 8011ab0:	602f      	str	r7, [r5, #0]
 8011ab2:	2000      	movs	r0, #0
 8011ab4:	e022      	b.n	8011afc <__sflush_r+0xf8>
 8011ab6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011aba:	b21b      	sxth	r3, r3
 8011abc:	e01b      	b.n	8011af6 <__sflush_r+0xf2>
 8011abe:	690f      	ldr	r7, [r1, #16]
 8011ac0:	2f00      	cmp	r7, #0
 8011ac2:	d0f6      	beq.n	8011ab2 <__sflush_r+0xae>
 8011ac4:	0793      	lsls	r3, r2, #30
 8011ac6:	680e      	ldr	r6, [r1, #0]
 8011ac8:	bf08      	it	eq
 8011aca:	694b      	ldreq	r3, [r1, #20]
 8011acc:	600f      	str	r7, [r1, #0]
 8011ace:	bf18      	it	ne
 8011ad0:	2300      	movne	r3, #0
 8011ad2:	eba6 0807 	sub.w	r8, r6, r7
 8011ad6:	608b      	str	r3, [r1, #8]
 8011ad8:	f1b8 0f00 	cmp.w	r8, #0
 8011adc:	dde9      	ble.n	8011ab2 <__sflush_r+0xae>
 8011ade:	6a21      	ldr	r1, [r4, #32]
 8011ae0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011ae2:	4643      	mov	r3, r8
 8011ae4:	463a      	mov	r2, r7
 8011ae6:	4628      	mov	r0, r5
 8011ae8:	47b0      	blx	r6
 8011aea:	2800      	cmp	r0, #0
 8011aec:	dc08      	bgt.n	8011b00 <__sflush_r+0xfc>
 8011aee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011af2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011af6:	81a3      	strh	r3, [r4, #12]
 8011af8:	f04f 30ff 	mov.w	r0, #4294967295
 8011afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b00:	4407      	add	r7, r0
 8011b02:	eba8 0800 	sub.w	r8, r8, r0
 8011b06:	e7e7      	b.n	8011ad8 <__sflush_r+0xd4>
 8011b08:	dfbffffe 	.word	0xdfbffffe

08011b0c <_fflush_r>:
 8011b0c:	b538      	push	{r3, r4, r5, lr}
 8011b0e:	690b      	ldr	r3, [r1, #16]
 8011b10:	4605      	mov	r5, r0
 8011b12:	460c      	mov	r4, r1
 8011b14:	b913      	cbnz	r3, 8011b1c <_fflush_r+0x10>
 8011b16:	2500      	movs	r5, #0
 8011b18:	4628      	mov	r0, r5
 8011b1a:	bd38      	pop	{r3, r4, r5, pc}
 8011b1c:	b118      	cbz	r0, 8011b26 <_fflush_r+0x1a>
 8011b1e:	6a03      	ldr	r3, [r0, #32]
 8011b20:	b90b      	cbnz	r3, 8011b26 <_fflush_r+0x1a>
 8011b22:	f7ff f865 	bl	8010bf0 <__sinit>
 8011b26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d0f3      	beq.n	8011b16 <_fflush_r+0xa>
 8011b2e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011b30:	07d0      	lsls	r0, r2, #31
 8011b32:	d404      	bmi.n	8011b3e <_fflush_r+0x32>
 8011b34:	0599      	lsls	r1, r3, #22
 8011b36:	d402      	bmi.n	8011b3e <_fflush_r+0x32>
 8011b38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011b3a:	f7ff fa0c 	bl	8010f56 <__retarget_lock_acquire_recursive>
 8011b3e:	4628      	mov	r0, r5
 8011b40:	4621      	mov	r1, r4
 8011b42:	f7ff ff5f 	bl	8011a04 <__sflush_r>
 8011b46:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011b48:	07da      	lsls	r2, r3, #31
 8011b4a:	4605      	mov	r5, r0
 8011b4c:	d4e4      	bmi.n	8011b18 <_fflush_r+0xc>
 8011b4e:	89a3      	ldrh	r3, [r4, #12]
 8011b50:	059b      	lsls	r3, r3, #22
 8011b52:	d4e1      	bmi.n	8011b18 <_fflush_r+0xc>
 8011b54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011b56:	f7ff f9ff 	bl	8010f58 <__retarget_lock_release_recursive>
 8011b5a:	e7dd      	b.n	8011b18 <_fflush_r+0xc>

08011b5c <fiprintf>:
 8011b5c:	b40e      	push	{r1, r2, r3}
 8011b5e:	b503      	push	{r0, r1, lr}
 8011b60:	4601      	mov	r1, r0
 8011b62:	ab03      	add	r3, sp, #12
 8011b64:	4805      	ldr	r0, [pc, #20]	@ (8011b7c <fiprintf+0x20>)
 8011b66:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b6a:	6800      	ldr	r0, [r0, #0]
 8011b6c:	9301      	str	r3, [sp, #4]
 8011b6e:	f7ff fca3 	bl	80114b8 <_vfiprintf_r>
 8011b72:	b002      	add	sp, #8
 8011b74:	f85d eb04 	ldr.w	lr, [sp], #4
 8011b78:	b003      	add	sp, #12
 8011b7a:	4770      	bx	lr
 8011b7c:	2400003c 	.word	0x2400003c

08011b80 <__swbuf_r>:
 8011b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b82:	460e      	mov	r6, r1
 8011b84:	4614      	mov	r4, r2
 8011b86:	4605      	mov	r5, r0
 8011b88:	b118      	cbz	r0, 8011b92 <__swbuf_r+0x12>
 8011b8a:	6a03      	ldr	r3, [r0, #32]
 8011b8c:	b90b      	cbnz	r3, 8011b92 <__swbuf_r+0x12>
 8011b8e:	f7ff f82f 	bl	8010bf0 <__sinit>
 8011b92:	69a3      	ldr	r3, [r4, #24]
 8011b94:	60a3      	str	r3, [r4, #8]
 8011b96:	89a3      	ldrh	r3, [r4, #12]
 8011b98:	071a      	lsls	r2, r3, #28
 8011b9a:	d501      	bpl.n	8011ba0 <__swbuf_r+0x20>
 8011b9c:	6923      	ldr	r3, [r4, #16]
 8011b9e:	b943      	cbnz	r3, 8011bb2 <__swbuf_r+0x32>
 8011ba0:	4621      	mov	r1, r4
 8011ba2:	4628      	mov	r0, r5
 8011ba4:	f000 f82a 	bl	8011bfc <__swsetup_r>
 8011ba8:	b118      	cbz	r0, 8011bb2 <__swbuf_r+0x32>
 8011baa:	f04f 37ff 	mov.w	r7, #4294967295
 8011bae:	4638      	mov	r0, r7
 8011bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011bb2:	6823      	ldr	r3, [r4, #0]
 8011bb4:	6922      	ldr	r2, [r4, #16]
 8011bb6:	1a98      	subs	r0, r3, r2
 8011bb8:	6963      	ldr	r3, [r4, #20]
 8011bba:	b2f6      	uxtb	r6, r6
 8011bbc:	4283      	cmp	r3, r0
 8011bbe:	4637      	mov	r7, r6
 8011bc0:	dc05      	bgt.n	8011bce <__swbuf_r+0x4e>
 8011bc2:	4621      	mov	r1, r4
 8011bc4:	4628      	mov	r0, r5
 8011bc6:	f7ff ffa1 	bl	8011b0c <_fflush_r>
 8011bca:	2800      	cmp	r0, #0
 8011bcc:	d1ed      	bne.n	8011baa <__swbuf_r+0x2a>
 8011bce:	68a3      	ldr	r3, [r4, #8]
 8011bd0:	3b01      	subs	r3, #1
 8011bd2:	60a3      	str	r3, [r4, #8]
 8011bd4:	6823      	ldr	r3, [r4, #0]
 8011bd6:	1c5a      	adds	r2, r3, #1
 8011bd8:	6022      	str	r2, [r4, #0]
 8011bda:	701e      	strb	r6, [r3, #0]
 8011bdc:	6962      	ldr	r2, [r4, #20]
 8011bde:	1c43      	adds	r3, r0, #1
 8011be0:	429a      	cmp	r2, r3
 8011be2:	d004      	beq.n	8011bee <__swbuf_r+0x6e>
 8011be4:	89a3      	ldrh	r3, [r4, #12]
 8011be6:	07db      	lsls	r3, r3, #31
 8011be8:	d5e1      	bpl.n	8011bae <__swbuf_r+0x2e>
 8011bea:	2e0a      	cmp	r6, #10
 8011bec:	d1df      	bne.n	8011bae <__swbuf_r+0x2e>
 8011bee:	4621      	mov	r1, r4
 8011bf0:	4628      	mov	r0, r5
 8011bf2:	f7ff ff8b 	bl	8011b0c <_fflush_r>
 8011bf6:	2800      	cmp	r0, #0
 8011bf8:	d0d9      	beq.n	8011bae <__swbuf_r+0x2e>
 8011bfa:	e7d6      	b.n	8011baa <__swbuf_r+0x2a>

08011bfc <__swsetup_r>:
 8011bfc:	b538      	push	{r3, r4, r5, lr}
 8011bfe:	4b29      	ldr	r3, [pc, #164]	@ (8011ca4 <__swsetup_r+0xa8>)
 8011c00:	4605      	mov	r5, r0
 8011c02:	6818      	ldr	r0, [r3, #0]
 8011c04:	460c      	mov	r4, r1
 8011c06:	b118      	cbz	r0, 8011c10 <__swsetup_r+0x14>
 8011c08:	6a03      	ldr	r3, [r0, #32]
 8011c0a:	b90b      	cbnz	r3, 8011c10 <__swsetup_r+0x14>
 8011c0c:	f7fe fff0 	bl	8010bf0 <__sinit>
 8011c10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c14:	0719      	lsls	r1, r3, #28
 8011c16:	d422      	bmi.n	8011c5e <__swsetup_r+0x62>
 8011c18:	06da      	lsls	r2, r3, #27
 8011c1a:	d407      	bmi.n	8011c2c <__swsetup_r+0x30>
 8011c1c:	2209      	movs	r2, #9
 8011c1e:	602a      	str	r2, [r5, #0]
 8011c20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011c24:	81a3      	strh	r3, [r4, #12]
 8011c26:	f04f 30ff 	mov.w	r0, #4294967295
 8011c2a:	e033      	b.n	8011c94 <__swsetup_r+0x98>
 8011c2c:	0758      	lsls	r0, r3, #29
 8011c2e:	d512      	bpl.n	8011c56 <__swsetup_r+0x5a>
 8011c30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011c32:	b141      	cbz	r1, 8011c46 <__swsetup_r+0x4a>
 8011c34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011c38:	4299      	cmp	r1, r3
 8011c3a:	d002      	beq.n	8011c42 <__swsetup_r+0x46>
 8011c3c:	4628      	mov	r0, r5
 8011c3e:	f7ff f9b9 	bl	8010fb4 <_free_r>
 8011c42:	2300      	movs	r3, #0
 8011c44:	6363      	str	r3, [r4, #52]	@ 0x34
 8011c46:	89a3      	ldrh	r3, [r4, #12]
 8011c48:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011c4c:	81a3      	strh	r3, [r4, #12]
 8011c4e:	2300      	movs	r3, #0
 8011c50:	6063      	str	r3, [r4, #4]
 8011c52:	6923      	ldr	r3, [r4, #16]
 8011c54:	6023      	str	r3, [r4, #0]
 8011c56:	89a3      	ldrh	r3, [r4, #12]
 8011c58:	f043 0308 	orr.w	r3, r3, #8
 8011c5c:	81a3      	strh	r3, [r4, #12]
 8011c5e:	6923      	ldr	r3, [r4, #16]
 8011c60:	b94b      	cbnz	r3, 8011c76 <__swsetup_r+0x7a>
 8011c62:	89a3      	ldrh	r3, [r4, #12]
 8011c64:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011c68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011c6c:	d003      	beq.n	8011c76 <__swsetup_r+0x7a>
 8011c6e:	4621      	mov	r1, r4
 8011c70:	4628      	mov	r0, r5
 8011c72:	f000 f884 	bl	8011d7e <__smakebuf_r>
 8011c76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c7a:	f013 0201 	ands.w	r2, r3, #1
 8011c7e:	d00a      	beq.n	8011c96 <__swsetup_r+0x9a>
 8011c80:	2200      	movs	r2, #0
 8011c82:	60a2      	str	r2, [r4, #8]
 8011c84:	6962      	ldr	r2, [r4, #20]
 8011c86:	4252      	negs	r2, r2
 8011c88:	61a2      	str	r2, [r4, #24]
 8011c8a:	6922      	ldr	r2, [r4, #16]
 8011c8c:	b942      	cbnz	r2, 8011ca0 <__swsetup_r+0xa4>
 8011c8e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011c92:	d1c5      	bne.n	8011c20 <__swsetup_r+0x24>
 8011c94:	bd38      	pop	{r3, r4, r5, pc}
 8011c96:	0799      	lsls	r1, r3, #30
 8011c98:	bf58      	it	pl
 8011c9a:	6962      	ldrpl	r2, [r4, #20]
 8011c9c:	60a2      	str	r2, [r4, #8]
 8011c9e:	e7f4      	b.n	8011c8a <__swsetup_r+0x8e>
 8011ca0:	2000      	movs	r0, #0
 8011ca2:	e7f7      	b.n	8011c94 <__swsetup_r+0x98>
 8011ca4:	2400003c 	.word	0x2400003c

08011ca8 <_sbrk_r>:
 8011ca8:	b538      	push	{r3, r4, r5, lr}
 8011caa:	4d06      	ldr	r5, [pc, #24]	@ (8011cc4 <_sbrk_r+0x1c>)
 8011cac:	2300      	movs	r3, #0
 8011cae:	4604      	mov	r4, r0
 8011cb0:	4608      	mov	r0, r1
 8011cb2:	602b      	str	r3, [r5, #0]
 8011cb4:	f7ef fc0e 	bl	80014d4 <_sbrk>
 8011cb8:	1c43      	adds	r3, r0, #1
 8011cba:	d102      	bne.n	8011cc2 <_sbrk_r+0x1a>
 8011cbc:	682b      	ldr	r3, [r5, #0]
 8011cbe:	b103      	cbz	r3, 8011cc2 <_sbrk_r+0x1a>
 8011cc0:	6023      	str	r3, [r4, #0]
 8011cc2:	bd38      	pop	{r3, r4, r5, pc}
 8011cc4:	2400baa0 	.word	0x2400baa0

08011cc8 <abort>:
 8011cc8:	b508      	push	{r3, lr}
 8011cca:	2006      	movs	r0, #6
 8011ccc:	f000 f8bc 	bl	8011e48 <raise>
 8011cd0:	2001      	movs	r0, #1
 8011cd2:	f7ef fbcf 	bl	8001474 <_exit>

08011cd6 <_realloc_r>:
 8011cd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cda:	4680      	mov	r8, r0
 8011cdc:	4615      	mov	r5, r2
 8011cde:	460c      	mov	r4, r1
 8011ce0:	b921      	cbnz	r1, 8011cec <_realloc_r+0x16>
 8011ce2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011ce6:	4611      	mov	r1, r2
 8011ce8:	f7ff b9d8 	b.w	801109c <_malloc_r>
 8011cec:	b92a      	cbnz	r2, 8011cfa <_realloc_r+0x24>
 8011cee:	f7ff f961 	bl	8010fb4 <_free_r>
 8011cf2:	2400      	movs	r4, #0
 8011cf4:	4620      	mov	r0, r4
 8011cf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cfa:	f000 f8e3 	bl	8011ec4 <_malloc_usable_size_r>
 8011cfe:	4285      	cmp	r5, r0
 8011d00:	4606      	mov	r6, r0
 8011d02:	d802      	bhi.n	8011d0a <_realloc_r+0x34>
 8011d04:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011d08:	d8f4      	bhi.n	8011cf4 <_realloc_r+0x1e>
 8011d0a:	4629      	mov	r1, r5
 8011d0c:	4640      	mov	r0, r8
 8011d0e:	f7ff f9c5 	bl	801109c <_malloc_r>
 8011d12:	4607      	mov	r7, r0
 8011d14:	2800      	cmp	r0, #0
 8011d16:	d0ec      	beq.n	8011cf2 <_realloc_r+0x1c>
 8011d18:	42b5      	cmp	r5, r6
 8011d1a:	462a      	mov	r2, r5
 8011d1c:	4621      	mov	r1, r4
 8011d1e:	bf28      	it	cs
 8011d20:	4632      	movcs	r2, r6
 8011d22:	f7ff f91a 	bl	8010f5a <memcpy>
 8011d26:	4621      	mov	r1, r4
 8011d28:	4640      	mov	r0, r8
 8011d2a:	f7ff f943 	bl	8010fb4 <_free_r>
 8011d2e:	463c      	mov	r4, r7
 8011d30:	e7e0      	b.n	8011cf4 <_realloc_r+0x1e>

08011d32 <__swhatbuf_r>:
 8011d32:	b570      	push	{r4, r5, r6, lr}
 8011d34:	460c      	mov	r4, r1
 8011d36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d3a:	2900      	cmp	r1, #0
 8011d3c:	b096      	sub	sp, #88	@ 0x58
 8011d3e:	4615      	mov	r5, r2
 8011d40:	461e      	mov	r6, r3
 8011d42:	da0d      	bge.n	8011d60 <__swhatbuf_r+0x2e>
 8011d44:	89a3      	ldrh	r3, [r4, #12]
 8011d46:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011d4a:	f04f 0100 	mov.w	r1, #0
 8011d4e:	bf14      	ite	ne
 8011d50:	2340      	movne	r3, #64	@ 0x40
 8011d52:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011d56:	2000      	movs	r0, #0
 8011d58:	6031      	str	r1, [r6, #0]
 8011d5a:	602b      	str	r3, [r5, #0]
 8011d5c:	b016      	add	sp, #88	@ 0x58
 8011d5e:	bd70      	pop	{r4, r5, r6, pc}
 8011d60:	466a      	mov	r2, sp
 8011d62:	f000 f879 	bl	8011e58 <_fstat_r>
 8011d66:	2800      	cmp	r0, #0
 8011d68:	dbec      	blt.n	8011d44 <__swhatbuf_r+0x12>
 8011d6a:	9901      	ldr	r1, [sp, #4]
 8011d6c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011d70:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011d74:	4259      	negs	r1, r3
 8011d76:	4159      	adcs	r1, r3
 8011d78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011d7c:	e7eb      	b.n	8011d56 <__swhatbuf_r+0x24>

08011d7e <__smakebuf_r>:
 8011d7e:	898b      	ldrh	r3, [r1, #12]
 8011d80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011d82:	079d      	lsls	r5, r3, #30
 8011d84:	4606      	mov	r6, r0
 8011d86:	460c      	mov	r4, r1
 8011d88:	d507      	bpl.n	8011d9a <__smakebuf_r+0x1c>
 8011d8a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011d8e:	6023      	str	r3, [r4, #0]
 8011d90:	6123      	str	r3, [r4, #16]
 8011d92:	2301      	movs	r3, #1
 8011d94:	6163      	str	r3, [r4, #20]
 8011d96:	b003      	add	sp, #12
 8011d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d9a:	ab01      	add	r3, sp, #4
 8011d9c:	466a      	mov	r2, sp
 8011d9e:	f7ff ffc8 	bl	8011d32 <__swhatbuf_r>
 8011da2:	9f00      	ldr	r7, [sp, #0]
 8011da4:	4605      	mov	r5, r0
 8011da6:	4639      	mov	r1, r7
 8011da8:	4630      	mov	r0, r6
 8011daa:	f7ff f977 	bl	801109c <_malloc_r>
 8011dae:	b948      	cbnz	r0, 8011dc4 <__smakebuf_r+0x46>
 8011db0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011db4:	059a      	lsls	r2, r3, #22
 8011db6:	d4ee      	bmi.n	8011d96 <__smakebuf_r+0x18>
 8011db8:	f023 0303 	bic.w	r3, r3, #3
 8011dbc:	f043 0302 	orr.w	r3, r3, #2
 8011dc0:	81a3      	strh	r3, [r4, #12]
 8011dc2:	e7e2      	b.n	8011d8a <__smakebuf_r+0xc>
 8011dc4:	89a3      	ldrh	r3, [r4, #12]
 8011dc6:	6020      	str	r0, [r4, #0]
 8011dc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011dcc:	81a3      	strh	r3, [r4, #12]
 8011dce:	9b01      	ldr	r3, [sp, #4]
 8011dd0:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011dd4:	b15b      	cbz	r3, 8011dee <__smakebuf_r+0x70>
 8011dd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011dda:	4630      	mov	r0, r6
 8011ddc:	f000 f84e 	bl	8011e7c <_isatty_r>
 8011de0:	b128      	cbz	r0, 8011dee <__smakebuf_r+0x70>
 8011de2:	89a3      	ldrh	r3, [r4, #12]
 8011de4:	f023 0303 	bic.w	r3, r3, #3
 8011de8:	f043 0301 	orr.w	r3, r3, #1
 8011dec:	81a3      	strh	r3, [r4, #12]
 8011dee:	89a3      	ldrh	r3, [r4, #12]
 8011df0:	431d      	orrs	r5, r3
 8011df2:	81a5      	strh	r5, [r4, #12]
 8011df4:	e7cf      	b.n	8011d96 <__smakebuf_r+0x18>

08011df6 <_raise_r>:
 8011df6:	291f      	cmp	r1, #31
 8011df8:	b538      	push	{r3, r4, r5, lr}
 8011dfa:	4605      	mov	r5, r0
 8011dfc:	460c      	mov	r4, r1
 8011dfe:	d904      	bls.n	8011e0a <_raise_r+0x14>
 8011e00:	2316      	movs	r3, #22
 8011e02:	6003      	str	r3, [r0, #0]
 8011e04:	f04f 30ff 	mov.w	r0, #4294967295
 8011e08:	bd38      	pop	{r3, r4, r5, pc}
 8011e0a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011e0c:	b112      	cbz	r2, 8011e14 <_raise_r+0x1e>
 8011e0e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011e12:	b94b      	cbnz	r3, 8011e28 <_raise_r+0x32>
 8011e14:	4628      	mov	r0, r5
 8011e16:	f000 f853 	bl	8011ec0 <_getpid_r>
 8011e1a:	4622      	mov	r2, r4
 8011e1c:	4601      	mov	r1, r0
 8011e1e:	4628      	mov	r0, r5
 8011e20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011e24:	f000 b83a 	b.w	8011e9c <_kill_r>
 8011e28:	2b01      	cmp	r3, #1
 8011e2a:	d00a      	beq.n	8011e42 <_raise_r+0x4c>
 8011e2c:	1c59      	adds	r1, r3, #1
 8011e2e:	d103      	bne.n	8011e38 <_raise_r+0x42>
 8011e30:	2316      	movs	r3, #22
 8011e32:	6003      	str	r3, [r0, #0]
 8011e34:	2001      	movs	r0, #1
 8011e36:	e7e7      	b.n	8011e08 <_raise_r+0x12>
 8011e38:	2100      	movs	r1, #0
 8011e3a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011e3e:	4620      	mov	r0, r4
 8011e40:	4798      	blx	r3
 8011e42:	2000      	movs	r0, #0
 8011e44:	e7e0      	b.n	8011e08 <_raise_r+0x12>
	...

08011e48 <raise>:
 8011e48:	4b02      	ldr	r3, [pc, #8]	@ (8011e54 <raise+0xc>)
 8011e4a:	4601      	mov	r1, r0
 8011e4c:	6818      	ldr	r0, [r3, #0]
 8011e4e:	f7ff bfd2 	b.w	8011df6 <_raise_r>
 8011e52:	bf00      	nop
 8011e54:	2400003c 	.word	0x2400003c

08011e58 <_fstat_r>:
 8011e58:	b538      	push	{r3, r4, r5, lr}
 8011e5a:	4d07      	ldr	r5, [pc, #28]	@ (8011e78 <_fstat_r+0x20>)
 8011e5c:	2300      	movs	r3, #0
 8011e5e:	4604      	mov	r4, r0
 8011e60:	4608      	mov	r0, r1
 8011e62:	4611      	mov	r1, r2
 8011e64:	602b      	str	r3, [r5, #0]
 8011e66:	f7ef fb2b 	bl	80014c0 <_fstat>
 8011e6a:	1c43      	adds	r3, r0, #1
 8011e6c:	d102      	bne.n	8011e74 <_fstat_r+0x1c>
 8011e6e:	682b      	ldr	r3, [r5, #0]
 8011e70:	b103      	cbz	r3, 8011e74 <_fstat_r+0x1c>
 8011e72:	6023      	str	r3, [r4, #0]
 8011e74:	bd38      	pop	{r3, r4, r5, pc}
 8011e76:	bf00      	nop
 8011e78:	2400baa0 	.word	0x2400baa0

08011e7c <_isatty_r>:
 8011e7c:	b538      	push	{r3, r4, r5, lr}
 8011e7e:	4d06      	ldr	r5, [pc, #24]	@ (8011e98 <_isatty_r+0x1c>)
 8011e80:	2300      	movs	r3, #0
 8011e82:	4604      	mov	r4, r0
 8011e84:	4608      	mov	r0, r1
 8011e86:	602b      	str	r3, [r5, #0]
 8011e88:	f7ef fb20 	bl	80014cc <_isatty>
 8011e8c:	1c43      	adds	r3, r0, #1
 8011e8e:	d102      	bne.n	8011e96 <_isatty_r+0x1a>
 8011e90:	682b      	ldr	r3, [r5, #0]
 8011e92:	b103      	cbz	r3, 8011e96 <_isatty_r+0x1a>
 8011e94:	6023      	str	r3, [r4, #0]
 8011e96:	bd38      	pop	{r3, r4, r5, pc}
 8011e98:	2400baa0 	.word	0x2400baa0

08011e9c <_kill_r>:
 8011e9c:	b538      	push	{r3, r4, r5, lr}
 8011e9e:	4d07      	ldr	r5, [pc, #28]	@ (8011ebc <_kill_r+0x20>)
 8011ea0:	2300      	movs	r3, #0
 8011ea2:	4604      	mov	r4, r0
 8011ea4:	4608      	mov	r0, r1
 8011ea6:	4611      	mov	r1, r2
 8011ea8:	602b      	str	r3, [r5, #0]
 8011eaa:	f7ef fadb 	bl	8001464 <_kill>
 8011eae:	1c43      	adds	r3, r0, #1
 8011eb0:	d102      	bne.n	8011eb8 <_kill_r+0x1c>
 8011eb2:	682b      	ldr	r3, [r5, #0]
 8011eb4:	b103      	cbz	r3, 8011eb8 <_kill_r+0x1c>
 8011eb6:	6023      	str	r3, [r4, #0]
 8011eb8:	bd38      	pop	{r3, r4, r5, pc}
 8011eba:	bf00      	nop
 8011ebc:	2400baa0 	.word	0x2400baa0

08011ec0 <_getpid_r>:
 8011ec0:	f7ef bace 	b.w	8001460 <_getpid>

08011ec4 <_malloc_usable_size_r>:
 8011ec4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011ec8:	1f18      	subs	r0, r3, #4
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	bfbc      	itt	lt
 8011ece:	580b      	ldrlt	r3, [r1, r0]
 8011ed0:	18c0      	addlt	r0, r0, r3
 8011ed2:	4770      	bx	lr

08011ed4 <_init>:
 8011ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ed6:	bf00      	nop
 8011ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011eda:	bc08      	pop	{r3}
 8011edc:	469e      	mov	lr, r3
 8011ede:	4770      	bx	lr

08011ee0 <_fini>:
 8011ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ee2:	bf00      	nop
 8011ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011ee6:	bc08      	pop	{r3}
 8011ee8:	469e      	mov	lr, r3
 8011eea:	4770      	bx	lr
